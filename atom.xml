<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Shieber</title>
  
  <subtitle>友朋自远方来，不亦乐乎?</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.shieber.cn/"/>
  <updated>2021-11-14T12:21:00.681Z</updated>
  <id>http://www.shieber.cn/</id>
  
  <author>
    <name>Shieber</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Rust collections 库源码阅读</title>
    <link href="http://www.shieber.cn/title/8d032879/"/>
    <id>http://www.shieber.cn/title/8d032879/</id>
    <published>2021-11-14T11:26:48.000Z</published>
    <updated>2021-11-14T12:21:00.681Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://s1.ax1x.com/2020/11/07/B5wgat.png" alt="cpygorsdart"></p><a id="more"></a><p>学习 Rust 一段时间了，最近打算阅读下最常用的数据结构都是怎么构成。Rust 最常用的数据结构都在collections 库里，具体如下：</p><ul><li>线性: Vec, VecDeque, LinkedList</li><li>杂项：BinaryHeap</li><li>映射: HashMap, BTreeMap</li><li>集合: HashSet, BTreeSet</li></ul><h3 id="Vec"><a href="#Vec" class="headerlink" title="Vec"></a><a href="https://doc.rust-lang.org/src/alloc/vec/mod.rs.html#398-401" target="_blank">Vec</a></h3><p>Vec 是最常用的数据结构了，基本上涉及类似数组，甚至链表类的操作都可以用 Vec 来解决。Vec 其实就是一个复合体，RawVec 是底层结构，buf 内包含一个指针指向具体值，_marker 是为了欺骗编译器，声明 Unique 拥有 T。Unique 内的 pointer 是 const 的，说明 Vec 内的数据是不可修改的。</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">pub</span> <span class="class"><span class="keyword">struct</span> <span class="title">Vec</span></span>&lt;T, A&gt; &#123;</span><br><span class="line">    buf: RawVec&lt;T,A&gt;,</span><br><span class="line">    len: <span class="built_in">usize</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">pub</span> <span class="class"><span class="keyword">struct</span> <span class="title">RawVec</span></span>&lt;T, A&gt; &#123;</span><br><span class="line">    ptr: Unique&lt;T&gt;,</span><br><span class="line">    cap: <span class="built_in">usize</span>,</span><br><span class="line">    alloc: A,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">pub</span> <span class="class"><span class="keyword">struct</span> <span class="title">Unique</span></span>&lt;T: ?<span class="built_in">Sized</span>&gt; &#123;</span><br><span class="line">    pointer: *<span class="keyword">const</span> T,</span><br><span class="line">    _marker: PhantomData&lt;T&gt;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">pub</span> <span class="class"><span class="keyword">struct</span> <span class="title">PhantomData</span></span>&lt;T: ?<span class="built_in">Sized</span>&gt;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Vec 结构</span></span><br><span class="line">            ptr      len  capacity</span><br><span class="line">       +--------+--------+--------+</span><br><span class="line">       | <span class="number">0x0123</span> |      <span class="number">2</span> |      <span class="number">4</span> |</span><br><span class="line">       +--------+--------+--------+</span><br><span class="line">            |</span><br><span class="line">            v</span><br><span class="line">       +--------+--------+--------+--------+</span><br><span class="line">Heap   |    <span class="string">'a'</span> |    <span class="string">'b'</span> | uninit | uninit |</span><br><span class="line">       +--------+--------+--------+--------+</span><br><span class="line"></span><br><span class="line"><span class="comment">// Vec 自带部分方法</span></span><br><span class="line">new, with_capacity, capacity, len, is_empty, insert, remove, retain, push, pop,</span><br><span class="line">append, clear, from_raw_parts, into_raw_parts, reserve, shrink_to, truncate, </span><br><span class="line">as_slice, as_ptr, swap_remove,</span><br></pre></td></tr></table></figure><h3 id="VecDeque"><a href="#VecDeque" class="headerlink" title="VecDeque"></a><a href="https://doc.rust-lang.org/src/alloc/collections/vec_deque/mod.rs.html#94-106" target="_blank">VecDeque</a></h3><p>VecDeque 看起来和 Vec 很像，但是 VecDeque 为了支持头尾数据操作所以添加了 head 和 tail。此外, len, cap 的值和 Vec 中不同。Vec 中 len 和 cap 不一定相等，而 VecDeque 中 len 和 cap 是相等的。</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">pub</span> <span class="class"><span class="keyword">struct</span> <span class="title">VecDeque</span></span>&lt;T, A&gt; &#123;</span><br><span class="line">    tail: <span class="built_in">usize</span>,</span><br><span class="line">    head: <span class="built_in">usize</span>,</span><br><span class="line">    buf: RawVec&lt;T,A&gt;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// VecDeque 结构</span></span><br><span class="line">            ptr      len  capacity</span><br><span class="line">       +--------+--------+--------+</span><br><span class="line">       | <span class="number">0x0123</span> |      <span class="number">4</span> |      <span class="number">4</span> |</span><br><span class="line">       +--------+--------+--------+</span><br><span class="line">            |</span><br><span class="line">            v</span><br><span class="line">       +--------+--------+--------+--------+</span><br><span class="line">Heap   |    <span class="string">'a'</span> |    <span class="string">'b'</span> |    <span class="string">'c'</span> |    <span class="string">'d'</span> |</span><br><span class="line">       +--------+--------+--------+--------+</span><br><span class="line">            ^                           ^</span><br><span class="line">            |                           |</span><br><span class="line">          tail                        head</span><br><span class="line"></span><br><span class="line"><span class="comment">// VecDeque 自带部分方法</span></span><br><span class="line">from, new, with_capacity, append, push_front, push_back, pop_front, pop_back, </span><br><span class="line">insert, remove, extend, get, swap, ptr, capacity, len, is_full, clear, contains,</span><br><span class="line">front, back, reserve, retain, shrink_to, truncate, rotate_left, rotate_right, </span><br><span class="line">binary_search, iter, as_slice</span><br></pre></td></tr></table></figure><h3 id="LinkedList"><a href="#LinkedList" class="headerlink" title="LinkedList"></a><a href="https://doc.rust-lang.org/src/alloc/collections/linked_list.rs.html#47-52" target="_blank">LinkedList</a></h3><p>LinkedList 是双向链表，因为节点值可能为空，所以用了 Option 来包装。NonNull<br>是指针，表示数据不能为空。Node 是数据节点，因为是双向的，所以 Node 有头节点和尾节点指针 prev, next。</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">pub</span> <span class="class"><span class="keyword">struct</span> <span class="title">LinkedList</span></span>&lt;T&gt; &#123;</span><br><span class="line">    head: <span class="built_in">Option</span>&lt;NonNull&lt;Node&lt;T&gt;&gt;&gt;,</span><br><span class="line">    tail: <span class="built_in">Option</span>&lt;NonNull&lt;Node&lt;T&gt;&gt;&gt;,</span><br><span class="line">    len: <span class="built_in">usize</span>,</span><br><span class="line">    marker: PhantomData&lt;<span class="built_in">Box</span>&lt;Node&lt;T&gt;&gt;&gt;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span></span>&lt;T&gt; &#123;</span><br><span class="line">    next: <span class="built_in">Option</span>&lt;NonNull&lt;Node&lt;T&gt;&gt;&gt;,</span><br><span class="line">    prev: <span class="built_in">Option</span>&lt;NonNull&lt;Node&lt;T&gt;&gt;&gt;,</span><br><span class="line">    element: T,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">pub</span> <span class="class"><span class="keyword">struct</span> <span class="title">NonNull</span></span>&lt;T: ?<span class="built_in">Sized</span>&gt; &#123;</span><br><span class="line">    pointer: *<span class="keyword">const</span> T,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// LinkedList 结构</span></span><br><span class="line">            head      len   marker    tail</span><br><span class="line">       +---------+----------+---------+----------+</span><br><span class="line">       | <span class="number">0x0123</span>  |     <span class="number">4</span>    | ------  |   <span class="number">0x0126</span> |</span><br><span class="line">       +---------+----------+---------+----------+</span><br><span class="line">          |                                   |</span><br><span class="line">          v                                   v</span><br><span class="line">       +-----+     +-----+     +-----+     +-----+</span><br><span class="line">Nodes  | <span class="string">'a'</span> | &lt;-&gt; | <span class="string">'b'</span> | &lt;-&gt; | <span class="string">'c'</span> | &lt;-&gt; | <span class="string">'d'</span> |</span><br><span class="line">       +-----+     +-----+     +-----+     +-----+</span><br><span class="line"></span><br><span class="line"><span class="comment">// LinkedList 自带部分方法</span></span><br><span class="line">from, new, capacity, len, is_empty, clear, contains, iter, append, front, back,</span><br><span class="line">push_front, push_back, pop_front, pop_back, split_off, remove, extend, hash,</span><br></pre></td></tr></table></figure><h3 id="BinaryHeap"><a href="#BinaryHeap" class="headerlink" title="BinaryHeap"></a><a href="https://doc.rust-lang.org/src/alloc/collections/binary_heap.rs.html#259-261" target="_blank">BinaryHeap</a></h3><p>二叉堆，可用于实现优先队列，其底层还是一个数组集合。当然 Rust 采用的是 Vec，因为 Vec 已经支持非常多的操作，用 Vec 来实现比用数组方便。</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">pub</span> <span class="class"><span class="keyword">struct</span> <span class="title">BinaryHeap</span></span>&lt;T&gt; &#123;</span><br><span class="line">    data: <span class="built_in">Vec</span>&lt;T&gt;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">pub</span> <span class="class"><span class="keyword">struct</span> <span class="title">PeekMut</span></span>&lt;<span class="symbol">'a</span>, T: <span class="symbol">'a</span> + <span class="built_in">Ord</span>&gt; &#123;</span><br><span class="line">    heap: &amp;<span class="symbol">'a</span> <span class="keyword">mut</span> BinaryHeap&lt;T&gt;,</span><br><span class="line">    sift: <span class="built_in">bool</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// BinaryHeap 结构</span></span><br><span class="line">                    data</span><br><span class="line">+----------------------------------------------+</span><br><span class="line">|            ptr      len  capacity            |</span><br><span class="line">|        +--------+--------+--------+          |</span><br><span class="line">|        | <span class="number">0x0123</span> |      <span class="number">2</span> |      <span class="number">4</span> |          |</span><br><span class="line">|        +--------+--------+--------+          |</span><br><span class="line">|             |                                |</span><br><span class="line">|             v                                |</span><br><span class="line">|        +--------+--------+--------+--------+ |</span><br><span class="line">| Heap   |    <span class="string">'a'</span> |    <span class="string">'b'</span> | uninit | uninit | |</span><br><span class="line">|        +--------+--------+--------+--------+ |</span><br><span class="line">+----------------------------------------------+</span><br><span class="line"></span><br><span class="line"><span class="comment">// BinaryHeap 自带部分方法</span></span><br><span class="line">from, new, with_capacity, capacity, len, is_empty, clear, peek, peek_mut, pop, push,</span><br><span class="line">append, extend, reserve, retain, shrink_to, iter, as_slice, into_vec, into_sorted_vec,</span><br></pre></td></tr></table></figure><h3 id="5-BTreeMap"><a href="#5-BTreeMap" class="headerlink" title="5. BTreeMap"></a>5. <a href="https://doc.rust-lang.org/src/alloc/collections/btree/map.rs.html#157-160" target="_blank">BTreeMap</a></h3><p>BTreeMap 是基于 B 树的 Map。BTreeMap 实现非常复杂，通过下面的实现也可以看到，BTreeMap<br>封装了非常多的数据结构。</p><p>首先是 root节点，因为可能为空，所以也用了 Option 来包裹。而 Root 要引用子节点，所以 Root 用 NodeRef来表示。子节点中存有值和父节点的索引和id，而节点可能没有父节点，所以 parent 和 parent_idx 都用的可能为空的类型，MaybeUninit 表示值可能未初始化。InternalNode 表示非叶子和根节点的节点。</p><p>2 * B 定义了中间节点的子节点个数最大值。CAPACITY 表示一个叶节点最多可以保存多少数据，因为叶节点可能连接新的子节点，所以需要留出至少一个空位来保存链接，所以 CAPACITY = 2 * B -1 </p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">pub</span> <span class="class"><span class="keyword">struct</span> <span class="title">BTreeMap</span></span>&lt;K, V&gt; &#123;</span><br><span class="line">    root: <span class="built_in">Option</span>&lt;Root&lt;K, V&gt;&gt;,</span><br><span class="line">    length: <span class="built_in">usize</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">pub</span> <span class="class"><span class="keyword">type</span> <span class="title">Root</span></span>&lt;K, V&gt; = NodeRef&lt;marker::Owned, K, V, marker::LeafOrInternal&gt;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">pub</span> <span class="class"><span class="keyword">struct</span> <span class="title">NodeRef</span></span>&lt;BorrowType, K, V, Type&gt; &#123;</span><br><span class="line">    height: <span class="built_in">usize</span>,</span><br><span class="line">    node: NonNull&lt;LeafNode&lt;K, V&gt;&gt;,</span><br><span class="line">    _marker: PhantomData&lt;(BorrowType, Type)&gt;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">LeafNode</span></span>&lt;K, V&gt; &#123;</span><br><span class="line">    parent: <span class="built_in">Option</span>&lt;NonNull&lt;InternalNode&lt;K, V&gt;&gt;&gt;,</span><br><span class="line">    parent_idx: MaybeUninit&lt;<span class="built_in">u16</span>&gt;,</span><br><span class="line">    len: <span class="built_in">u16</span>,</span><br><span class="line">    keys: [MaybeUninit&lt;K&gt;; CAPACITY],</span><br><span class="line">    vals: [MaybeUninit&lt;V&gt;; CAPACITY],</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">InternalNode</span></span>&lt;K, V&gt; &#123;</span><br><span class="line">    data: LeafNode&lt;K, V&gt;,</span><br><span class="line">    edges: [MaybeUninit&lt;BoxedNode&lt;K,V&gt;&gt;; <span class="number">2</span> * B],</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">type</span> <span class="title">BoxedNode</span></span>&lt;K, V&gt; = NonNull&lt;LeafNode&lt;K, V&gt;&gt;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> B: <span class="built_in">usize</span> = <span class="number">6</span>;</span><br><span class="line"><span class="keyword">pub</span> <span class="keyword">const</span> CAPACITY: <span class="built_in">usize</span> = <span class="number">2</span> * B - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// BTreeMap 自带部分方法</span></span><br><span class="line">from, new, len, is_empty, insert, get, take, replace, contains_key, append, remove,</span><br><span class="line">clear, pop_first, pop_last, entry, first_entry, last_entry, split_off, into_keys,</span><br><span class="line">into_values, retian, extend, iter, hash, cmp, keys, values,</span><br></pre></td></tr></table></figure><h3 id="6-BTreeSet"><a href="#6-BTreeSet" class="headerlink" title="6. BTreeSet"></a>6. <a href="https://doc.rust-lang.org/src/alloc/collections/btree/set.rs.html#73-75" target="_blank">BTreeSet</a></h3><p>BTreeSet 只保存 Key，所以可以将 BTreeMap 的 Value 一项置空 ()，这样就完成了 BTreeSet 的定义。因为 () 是空，所以不影响 BTreeMap 的操作。</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">pub</span> <span class="class"><span class="keyword">struct</span> <span class="title">BTreeSet</span></span>&lt;T&gt; &#123;</span><br><span class="line">    map: BTreeMap&lt;T, ()&gt;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// BTreeSet 自带部分方法</span></span><br><span class="line">from, new, len, is_empty, range, difference, symmetric_difference, intersection, <span class="class"><span class="keyword">union</span>,</span></span><br><span class="line"><span class="class"><span class="title">get</span></span>, insert, take, append, replace, remove, clear, first, last, pop_first, pop_last,</span><br><span class="line">contains, is_disjoint, is_subset, is_superset, retain, split_off, iter, extend, -, ^, +, |,</span><br></pre></td></tr></table></figure><h3 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap"></a><a href="https://doc.rust-lang.org/src/std/collections/hash/map.rs.html#209-211" target="_blank">HashMap</a></h3><p>HashMap 是基于 hashbrown 中的 Hash 表来实现的，S 是哈希状态函数。其中哈希表是 RawTable，marker 保存了数据，而 RawTableInner 定义了多个量来控制哈希增长等变化。</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">pub</span> <span class="class"><span class="keyword">struct</span> <span class="title">HashMap</span></span>&lt;K, V, S = RandomState&gt; &#123;</span><br><span class="line">    base: hashbrown::hash_map::HashMap&lt;K, V, S&gt;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">pub</span> <span class="class"><span class="keyword">struct</span> <span class="title">RandomState</span></span> &#123;</span><br><span class="line">    k0: <span class="built_in">u64</span>, </span><br><span class="line">    k1: <span class="built_in">u64</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">hashbrown::hash_map::HashMap</span><br><span class="line"><span class="keyword">pub</span> <span class="class"><span class="keyword">struct</span> <span class="title">HashMap</span></span>&lt;K, V, S = DefaultHashBuilder, A: Global&gt; &#123;</span><br><span class="line">    <span class="keyword">pub</span>(<span class="keyword">crate</span>) hash_builder: S,</span><br><span class="line">    <span class="keyword">pub</span>(<span class="keyword">crate</span>) table: RawTable&lt;(K, V), A&gt;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">pub</span> <span class="class"><span class="keyword">struct</span> <span class="title">RawTable</span></span>&lt;T, A: Global&gt; &#123;</span><br><span class="line">    table: RawTableInner&lt;A&gt;,</span><br><span class="line">    marker: PhantomData&lt;T&gt;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">pub</span> <span class="class"><span class="keyword">struct</span> <span class="title">RawTableInner</span></span>&lt;A&gt; &#123;</span><br><span class="line">    bucket_mask: <span class="built_in">usize</span>,</span><br><span class="line">    ctrl: NonNull&lt;<span class="built_in">u8</span>&gt;,</span><br><span class="line">    growth_left: <span class="built_in">usize</span>,</span><br><span class="line">    items: <span class="built_in">usize</span>,</span><br><span class="line">    alloc: A,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// HashMap 自带部分方法</span></span><br><span class="line">from, new, with_capacity, with_hasher, capacity, len, is_empty, hasher, keys, values,</span><br><span class="line">entry, get, contains_key, insert, iter, drain, clear, remove, reserve, retain, shrink_to, </span><br><span class="line">into_keys, into_values, extend,</span><br></pre></td></tr></table></figure><h3 id="HashSet"><a href="#HashSet" class="headerlink" title="HashSet"></a><a href="https://doc.rust-lang.org/src/std/collections/hash/set.rs.html#112-114" target="_blank">HashSet</a></h3><p>和 BTreeSet 类似，HashSet 基于 HashMap 构建，结构非常简单。</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">pubstruct HashSet&lt;T, S = RandomState&gt; &#123;</span><br><span class="line">    base: hashbrown::hash_set::HashSet&lt;T, S&gt;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">hashbrown::hash_set::HashSet</span><br><span class="line"><span class="keyword">pub</span> <span class="class"><span class="keyword">struct</span> <span class="title">HashSet</span></span>&lt;K, S = DefaultHashBuilder, A: Global&gt; &#123;</span><br><span class="line">    <span class="keyword">pub</span>(<span class="keyword">crate</span>) map: hashbrown::hash_map::HashMap&lt;T, (), S, A&gt;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// HashSet 自带部分方法</span></span><br><span class="line">from, new, with_capacity, with_hasher, capacity, len, is_empty, difference, </span><br><span class="line">symmetric_difference, intersection, <span class="class"><span class="keyword">union</span>, <span class="title">drain</span></span>, hasher, reserve, get, insert, </span><br><span class="line">take, replace, remove, clear, contains, shrink_to, is_disjoint, is_subset, </span><br><span class="line">is_superset, retain, iter, extend, -, ^, +, |,</span><br></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>分析上述多个数据结构，我们发现 Vec 和 PhantomData 比较常用，大量的数据正是通过这两种数据结构来保存。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://s1.ax1x.com/2020/11/07/B5wgat.png&quot; alt=&quot;cpygorsdart&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="编程语言" scheme="http://www.shieber.cn/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
      <category term="源码阅读" scheme="http://www.shieber.cn/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB/"/>
    
    
      <category term="Rust" scheme="http://www.shieber.cn/tags/Rust/"/>
    
  </entry>
  
  <entry>
    <title>2020个人年度报告</title>
    <link href="http://www.shieber.cn/title/ece22f96/"/>
    <id>http://www.shieber.cn/title/ece22f96/</id>
    <published>2020-12-31T10:59:40.000Z</published>
    <updated>2021-01-02T02:23:55.247Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://s3.ax1x.com/2020/12/31/rvkqlF.png" alt="2020report"></p><a id="more"></a><h2 id="年度日历"><a href="#年度日历" class="headerlink" title="年度日历"></a>年度日历</h2><p><strong>01.01</strong>  UESTC Wed<br>  在知乎发表首篇文章。<br><strong>01.07</strong>  UESTC Tue<br>  首次安装使用UOS。<br><strong>01.12</strong>  UESTC Sun<br>  同张珏鑫和吕矣铭川大旁吃烧烤。<br><strong>01.23</strong>  UESTC Thu<br>  第一次录制视频并上传B站。<br><strong>01.24</strong>  UESTC Fri<br>  同白景瑞微信通话。<br><strong>01.25</strong>  UESTC Sat<br>  编写冠状病毒统计程序。<br><strong>02.04</strong>  UESTC Tue<br>  学习微信小程序开发。<br><strong>03.10</strong>  UESTC Fri<br>  第一次学习Go语言。<br><strong>03.13</strong>  UESTC Fri<br>  首次刷牛客网算法题。<br><strong>05.03</strong>  UESTC Sun<br>  学习《标准日本语中级》。<br><strong>06.09</strong>  UESTC Tue<br>  参加师兄姐毕业聚餐及活动。<br><strong>06.14</strong>  UESTC Sun<br>  阅读CoolShell网站博客内容。<br><strong>06.19</strong>  UESTC Fri<br>  参加丁孝翔师兄婚礼聚餐。<br><strong>06.28</strong>  UESTC Sun<br>  浏览飞雪无情博客。<br><strong>06.29</strong>  UESTC Mon<br>  首次学习Rust语言。<br><strong>07.11</strong>  UESTC Sat<br>  首次学习Dart语法。<br><strong>07.16</strong>  UESTC Thu<br>  了解IPFS。<br><strong>07.20</strong>  UESTC Mon<br>  了解K8S。<br><strong>08.03</strong>  UESTC Mon<br>  参加华为面试。<br><strong>08.08</strong>  UESTC Sat<br>  首次学习量子语言Silq。<br><strong>08.29</strong>  UESTC Sat<br>  了解TiDB。<br><strong>11.07</strong>  UESTC Sat<br>  陪李捷游览电科。<br><strong>11.19</strong>  UESTC Thu<br>  去医院体检。<br><strong>11.21</strong>  UESTC Sat<br>  参加DevOps大会。<br><strong>12.17</strong>  UESTC Thu<br>  开始写毕业论文。 </p><h2 id="年度感受"><a href="#年度感受" class="headerlink" title="年度感受"></a>年度感受</h2><p>又到年终，时间太快了！今年因为疫情，被封锁在学校长达半年之久，从2019.5.12到今天2020.12.31共600天了，还没回过家。2020是魔幻的一年，封锁的一年，人类社会被疫情重构，数字化进程不断加快，整个社会开始了远程工作，学习，交流。</p><h2 id="年度音乐"><a href="#年度音乐" class="headerlink" title="年度音乐"></a>年度音乐</h2><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=330 height=86 src="//music.163.com/outchain/player?type=2&id=31789216&auto=1&height=66"></iframe><p><strong>2020年度音乐10首</strong> <a href="https://music.163.com/#/playlist?id=5415023575" target="_blank" rel="noopener">网易云歌单</a></p><table><thead><tr><th align="left">曲目</th><th align="left">歌手</th></tr></thead><tbody><tr><td align="left">采薇</td><td align="left">张渠</td></tr><tr><td align="left">执羽</td><td align="left">张渠</td></tr><tr><td align="left">That Very Night</td><td align="left">Deep East</td></tr><tr><td align="left">逍遥</td><td align="left">张渠</td></tr><tr><td align="left">书简</td><td align="left">张渠</td></tr><tr><td align="left">走过咖啡屋</td><td align="left">米雅</td></tr><tr><td align="left">玉人</td><td align="left">张渠</td></tr><tr><td align="left">Go It In You</td><td align="left">BANNERS</td></tr><tr><td align="left">夜猫</td><td align="left">张蔷</td></tr><tr><td align="left">总有一天我会欺骗你</td><td align="left">张蔷</td></tr></tbody></table><h2 id="年度视频"><a href="#年度视频" class="headerlink" title="年度视频"></a>年度视频</h2><p>这三个是2020年看的视频里面我觉得最优秀的。第一个舞剧《孔子》展现中国舞蹈的魅力，其中《采薇》最为精彩。第二个是《让子弹飞》的重制作，非常优秀。第三个是建国70周年献礼，拍出了祖国大好河山。</p><div style="position: relative; padding: 30% 45%;"><iframe style="position: absolute; width: 100%; height: 100%; left: 0; top: 0;" src="//player.bilibili.com/player.html?aid=25674897&bvid=BV13s411j7GK&cid=43905521&page=11&as_wide=1&high_quality=1&danmaku=0" scrolling="no" frameborder="no" allowfullscreen="true"> </iframe></div><div style="position: relative; padding: 30% 45%;"><iframe style="position: absolute; width: 100%; height: 100%; left: 0; top: 0;" src="//player.bilibili.com/player.html?aid=626357031&bvid=BV1yt4y1Q7SS&cid=210738676&page=1&as_wide=1&high_quality=1&danmaku=0" scrolling="no" frameborder="no" allowfullscreen="true"> </iframe></div><div style="position: relative; padding: 30% 45%;"><iframe style="position: absolute; width: 100%; height: 100%; left: 0; top: 0;" src="//player.bilibili.com/player.html?aid=69241910&bvid=BV19E41197Kc&cid=121296106&page=2&as_wide=1&high_quality=1&danmaku=0" scrolling="no" frameborder="no" allowfullscreen="true"> </iframe></div><h2 id="年度观影"><a href="#年度观影" class="headerlink" title="年度观影   "></a>年度观影   </h2><table><thead><tr><th align="center">序号</th><th align="left">名称</th><th align="center">序号</th><th align="left">名称</th></tr></thead><tbody><tr><td align="center">1</td><td align="left">《琅琊榜》</td><td align="center">30</td><td align="left">《巴顿将军》</td></tr><tr><td align="center">2</td><td align="left">《长安十二时辰》</td><td align="center">31</td><td align="left">《杀出个黎明》</td></tr><tr><td align="center">3</td><td align="left">《爱情公寓5》</td><td align="center">32</td><td align="left">《钢铁侠》</td></tr><tr><td align="center">4</td><td align="left">《生活大爆炸》</td><td align="center">33</td><td align="left">《复仇者联盟》</td></tr><tr><td align="center">5</td><td align="left">《纸牌屋》</td><td align="center">34</td><td align="left">《木乃伊》</td></tr><tr><td align="center">6</td><td align="left">《犬夜叉》</td><td align="center">35</td><td align="left">《变形金刚》</td></tr><tr><td align="center">7</td><td align="left">《神衣喜来乐》</td><td align="center">36</td><td align="left">《登月第一人》</td></tr><tr><td align="center">8</td><td align="left">《御前四宝》</td><td align="center">37</td><td align="left">《星际迷航》</td></tr><tr><td align="center">9</td><td align="left">《倚天屠龙记》</td><td align="center">38</td><td align="left">《猩球崛起》</td></tr><tr><td align="center">10</td><td align="left">《天龙八部》</td><td align="center">39</td><td align="left">《雷神》</td></tr><tr><td align="center">11</td><td align="left">《隐秘的角落》</td><td align="center">40</td><td align="left">《死神来了》</td></tr><tr><td align="center">12</td><td align="left">《沉默的真相》</td><td align="center">41</td><td align="left">《赤壁》</td></tr><tr><td align="center">13</td><td align="left">《大宋提刑官》</td><td align="center">42</td><td align="left">《V字仇杀队》</td></tr><tr><td align="center">14</td><td align="left">《大宋提刑官》</td><td align="center">43</td><td align="left">《加勒比海盗》</td></tr><tr><td align="center">15</td><td align="left">《龙门镖局》</td><td align="center">44</td><td align="left">《黑衣人》</td></tr><tr><td align="center">16</td><td align="left">《是、大臣》</td><td align="center">45</td><td align="left">《大独裁者》</td></tr><tr><td align="center">17</td><td align="left">《是、首相》</td><td align="center">46</td><td align="left">《摩登时代》</td></tr><tr><td align="center">18</td><td align="left">《阿Q正传》</td><td align="center">47</td><td align="left">《八佰》</td></tr><tr><td align="center">19</td><td align="left">《囧妈》</td><td align="center">48</td><td align="left">《末代皇帝》</td></tr><tr><td align="center">20</td><td align="left">《星际穿越》</td><td align="center">49</td><td align="left">《举起手来》</td></tr><tr><td align="center">21</td><td align="left">《2001太空漫游》</td><td align="center">50</td><td align="left">《让子弹飞》</td></tr><tr><td align="center">22</td><td align="left">《夺宝奇兵》</td><td align="center">51</td><td align="left">《我不是药神》</td></tr><tr><td align="center">23</td><td align="left">《指环王》</td><td align="center">52</td><td align="left">《太阳照常升起》</td></tr><tr><td align="center">24</td><td align="left">《终结者》</td><td align="center">53</td><td align="left">《鬼子来了》</td></tr><tr><td align="center">25</td><td align="left">《泰坦尼克号》</td><td align="center">54</td><td align="left">《邪不压正》</td></tr><tr><td align="center">26</td><td align="left">《星球大战》</td><td align="center">55</td><td align="left">《饮食男女》</td></tr><tr><td align="center">27</td><td align="left">《杀死比尔》</td><td align="center">56</td><td align="left">《疯狂的石头》</td></tr><tr><td align="center">28</td><td align="left">《教父》</td><td align="center">57</td><td align="left">《唐伯虎点秋香》</td></tr><tr><td align="center">29</td><td align="left">《大逃杀》</td><td align="center">58</td><td align="left">《心灵奇旅》</td></tr></tbody></table><h2 id="年度图片"><a href="#年度图片" class="headerlink" title="年度图片"></a>年度图片</h2><p><img src="https://s3.ax1x.com/2020/12/31/rvmyYn.png" alt="2020"></p><h2 id="年度书籍"><a href="#年度书籍" class="headerlink" title="年度书籍"></a>年度书籍</h2><p>《论法的精神》–孟德斯鸠</p><p>孟德斯鸠在本书中阐述了自然法理论、法和法律定义，法律与政体关系，以及政体分类、各种政体的性质和原则等问题。提出了政治自由和三权分立学说。我认为这些思想正是当今中国人迫切需要的。</p><p><img src="https://s3.ax1x.com/2020/12/31/rvmOOO.jpg" alt="lfdjs"></p><p><strong>阅读书籍108本</strong>   </p><table><thead><tr><th align="left">书名</th><th align="left">作者</th></tr></thead><tbody><tr><td align="left">《飘》</td><td align="left">玛格丽特・米切尔</td></tr><tr><td align="left">《谣言》</td><td align="left">让・诺埃尔・卡普费雷</td></tr><tr><td align="left">《君主论》</td><td align="left">尼科洛・马基雅维里</td></tr><tr><td align="left">《战争论》</td><td align="left">克劳塞维茨</td></tr><tr><td align="left">《思想录》</td><td align="left">帕斯卡尔</td></tr><tr><td align="left">《双脑记》</td><td align="left">迈克尔・加扎尼加</td></tr><tr><td align="left">《人性论》</td><td align="left">大卫・休谟</td></tr><tr><td align="left">《英语史》</td><td align="left">李赋宁</td></tr><tr><td align="left">《政府论》</td><td align="left">洛克</td></tr><tr><td align="left">《公众舆论》</td><td align="left">沃尔特・李普曼</td></tr><tr><td align="left">《狂热分子》</td><td align="left">埃里克・霍弗</td></tr><tr><td align="left">《我的奋斗》</td><td align="left">希特勒</td></tr><tr><td align="left">《语言本能》</td><td align="left">史蒂芬・平克</td></tr><tr><td align="left">《千面英雄》</td><td align="left">坎贝尔</td></tr><tr><td align="left">《传统十论》</td><td align="left">秦晖</td></tr><tr><td align="left">《翻译研究》</td><td align="left">思果</td></tr><tr><td align="left">《丰乳肥臀》</td><td align="left">莫言</td></tr><tr><td align="left">《翻译乃大道》</td><td align="left">余光中</td></tr><tr><td align="left">《追风筝的人》</td><td align="left">卡勒德・胡赛尼</td></tr><tr><td align="left">《身份的焦虑》</td><td align="left">阿兰・德波顿</td></tr><tr><td align="left">《蒙田随笔集》</td><td align="left">米歇尔・蒙田</td></tr><tr><td align="left">《培根人生论》</td><td align="left">培根</td></tr><tr><td align="left">《论法的精神》</td><td align="left">孟德斯鸠</td></tr><tr><td align="left">《我的世界观》</td><td align="left">爱因斯坦</td></tr><tr><td align="left">《国家与革命》</td><td align="left">列宁</td></tr><tr><td align="left">《金字塔原理》</td><td align="left">芭芭拉</td></tr><tr><td align="left">《毛泽东选集》</td><td align="left">毛泽东</td></tr><tr><td align="left">《什么是数学》</td><td align="left">柯朗</td></tr><tr><td align="left">《当下的力量》</td><td align="left">埃克哈特• 托利</td></tr><tr><td align="left">《沉默的大多数》</td><td align="left">王小波</td></tr><tr><td align="left">《追随直觉之路》</td><td align="left">坎贝尔</td></tr><tr><td align="left">《通往奴役之路》</td><td align="left">哈耶克</td></tr><tr><td align="left">《中式英语之鉴》</td><td align="left">平卡姆</td></tr><tr><td align="left">《做生意的艺术》</td><td align="left">唐纳德・特朗普</td></tr><tr><td align="left">《演员自我修养》</td><td align="left">斯坦尼斯拉夫斯基</td></tr><tr><td align="left">《八十天环游地球》</td><td align="left">儒勒・凡尔纳</td></tr><tr><td align="left">《旧制度与大革命》</td><td align="left">托克维尔</td></tr><tr><td align="left">《普通语言学教程》</td><td align="left">索绪尔</td></tr><tr><td align="left">《科学革命的结构》</td><td align="left">托马斯・库恩</td></tr><tr><td align="left">《中国文化的展望》</td><td align="left">殷海光</td></tr><tr><td align="left">《来自中国的礼物》</td><td align="left">亨利・尼科尔斯</td></tr><tr><td align="left">《中国的当下与未来》</td><td align="left">郑永年</td></tr><tr><td align="left">《我们赖以生存的隐喻》</td><td align="left">莱考夫/詹森</td></tr><tr><td align="left">《历史的终结及最后之人》</td><td align="left">弗朗西斯・福山</td></tr><tr><td align="left">《改变心理学的40项研究》</td><td align="left">罗杰・R・霍克</td></tr><tr><td align="left">《超级符号就是超级创意》</td><td align="left">华杉</td></tr><tr><td align="left">略…</td><td align="left">略…</td></tr><tr><td align="left">《A history of language》</td><td align="left">Steven Roger Fischer</td></tr><tr><td align="left">《论个人在历史上的作用问题》</td><td align="left">普列汉诺夫</td></tr></tbody></table><h2 id="年度消费"><a href="#年度消费" class="headerlink" title="年度消费"></a>年度消费</h2><p><strong>支付宝全年消费</strong></p><p><img src="https://s3.ax1x.com/2020/12/31/rvKJY9.png" alt="alipay"></p><p><strong>微信全年消费</strong></p><p><img src="https://s3.ax1x.com/2020/12/31/rvKDTe.png" alt="wechat"></p><p><strong>京东全年消费</strong></p><p><img src="https://s3.ax1x.com/2020/12/31/rvK2lt.png" alt="jdpay"></p><p><strong>三家合计消费</strong></p><p><img src="https://s3.ax1x.com/2020/12/31/rvKR6P.png" alt="total"></p><h2 id="年度技能树"><a href="#年度技能树" class="headerlink" title="年度技能树"></a>年度技能树</h2><p><img src="https://s3.ax1x.com/2020/12/31/rvUefK.png" alt="skills2020"></p><h2 id="工作时间统计"><a href="#工作时间统计" class="headerlink" title="工作时间统计"></a>工作时间统计</h2><table><thead><tr><th align="left">条目</th><th align="left">内容</th></tr></thead><tbody><tr><td align="left">一季度</td><td align="left">1041.40h(11h26m/天)</td></tr><tr><td align="left">二季度</td><td align="left">1058.70h(11h38m/天)</td></tr><tr><td align="left">三季度</td><td align="left">945.30h (10h16m/天)</td></tr><tr><td align="left">四季度</td><td align="left">951.85h (10h20m/天)</td></tr><tr><td align="left">全年工时</td><td align="left">3997.25h(10h57m/天)</td></tr></tbody></table><p><img src="https://s3.ax1x.com/2020/12/31/rvlPL6.png" alt="time"></p><h2 id="其他统计数据"><a href="#其他统计数据" class="headerlink" title="其他统计数据"></a>其他统计数据</h2><table><thead><tr><th align="left">条目</th><th align="left">内容</th></tr></thead><tbody><tr><td align="left">生病次数</td><td align="left">0</td></tr><tr><td align="left">通宵次数</td><td align="left">0</td></tr><tr><td align="left">熬夜次数</td><td align="left">123</td></tr><tr><td align="left">新加好友</td><td align="left">25 (女:6，男:19)</td></tr><tr><td align="left">自由指数</td><td align="left">6.0</td></tr><tr><td align="left">健康指数</td><td align="left">8.0</td></tr><tr><td align="left">性福指数</td><td align="left">0.0</td></tr><tr><td align="left">幸福指数</td><td align="left">8.5</td></tr><tr><td align="left">休息天数</td><td align="left">10</td></tr><tr><td align="left">全年晴天</td><td align="left">123天</td></tr><tr><td align="left">全年阴天</td><td align="left">213天</td></tr><tr><td align="left">全年雨天</td><td align="left">29天</td></tr><tr><td align="left">阴晴雨比</td><td align="left">7.34:4.24:1.0</td></tr><tr><td align="left">统计地点</td><td align="left">清水河</td></tr><tr><td align="left">统计时段</td><td align="left">2020.01.01~2020.12.31</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://s3.ax1x.com/2020/12/31/rvkqlF.png&quot; alt=&quot;2020report&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="年度报告" scheme="http://www.shieber.cn/categories/%E5%B9%B4%E5%BA%A6%E6%8A%A5%E5%91%8A/"/>
    
    
  </entry>
  
  <entry>
    <title>2020年度新闻</title>
    <link href="http://www.shieber.cn/title/3ccde953/"/>
    <id>http://www.shieber.cn/title/3ccde953/</id>
    <published>2020-12-31T10:26:28.000Z</published>
    <updated>2020-12-31T14:08:28.427Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://s3.ax1x.com/2020/12/31/rvPMqI.png" alt="2020"></p><a id="more"></a><h2 id="年度人物"><a href="#年度人物" class="headerlink" title="年度人物"></a>年度人物</h2><p>(0) 李文亮<br>(1) 张继先<br>(2) 钟南山<br>(3) 张文宏<br>(4) 李兰娟<br>(5) 张定宇<br>(6) 樊锦诗<br>(7) 陈薇<br>(8) 韩红<br>(9) 耿爽  </p><h2 id="年度关键词"><a href="#年度关键词" class="headerlink" title="年度关键词"></a>年度关键词</h2><p>(0) 疫情<br>(2) 封锁<br>(3) 口罩<br>(4) 回国<br>(5) 反垄断<br>(6) 探月探火<br>(1) 全面小康<br>(7) 中美关系<br>(8) 复工复产<br>(9) 远程工作  </p><h2 id="十大新词语"><a href="#十大新词语" class="headerlink" title="十大新词语"></a>十大新词语</h2><p>(0) 新冠<br>(1) 内卷<br>(2) 云监工<br>(3) 打工人<br>(4) 尾款人<br>(5) 云监工<br>(6) 新基建<br>(7) 网抑云<br>(8) 社交隔离<br>(9) 凡尔赛文学  </p><h2 id="年度流行语"><a href="#年度流行语" class="headerlink" title="年度流行语"></a>年度流行语</h2><p>(0) 逆行<br>(1) 后浪<br>(2) 熔断<br>(3) 带货<br>(4) 内卷<br>(5) 内循环<br>(6) 打工人<br>(7) 工具人<br>(8) 专业团队<br>(9) 凡尔赛文学  </p><h2 id="年度新闻"><a href="#年度新闻" class="headerlink" title="年度新闻"></a>年度新闻</h2><p><strong>2020.01.01</strong> Wed<br>    (1) Python2退役，官方建议迁移到Python3。<br>    (2) 长江流域332个水生生物保护区禁渔十年，今起执行。<br><strong>2020.01.03</strong> Fri<br>    (1) 国产HPV疫苗上市。<br>    (2) 武汉发现不明原因病毒性肺炎病例。<br>    (3) 国际学术刊物刊文表明：长江白鲟已灭绝。<br><strong>2020.01.05</strong> Sun<br>    (1) Wi-Fi联盟公布Wi-Fi 6E标准，扩展至6GHz频段。<br><strong>2020.01.08</strong> Wed<br>    (1) 一客机在伊朗坠毁，176人全部遇难。<br><strong>2020.01.11</strong> Sat<br>    (1) 台湾地区领导人选举，蔡英文获胜。<br><strong>2020.01.14</strong> Tue<br>    (1) 微软终止对windows7的支持。<br><strong>2020.01.15</strong> Wed<br>    (1) 俄罗斯政府全体辞职。<br>    (2) 中美第一阶段经贸协议正式签署。<br>    (3) 微软正式推出基于Chromium的Edge浏览器。<br>    (4) 统信软件正式发布国产操作系统UOS，适配多款国产CPU。<br><strong>2020.01.16</strong> Thu<br>    (1) 京沪高铁上市。<br>    (2) 前央视主持人赵忠祥在其生日当天去世，享年78周岁整。<br><strong>2020.01.17</strong> Fri<br>    (1) 国家统计局公布人口数据：2019年末全国人口14.0005亿，全年新生人口1465万，出生率10.48‰，死亡998万，新增467万人，男71527万，女68478万。<br><strong>2020.01.20</strong> Mon<br>    (1) 钟南山披露疫情，宣布病毒肯定会人传人，要求国民居家隔离，佩戴口罩。<br><strong>2020.01.23</strong> Thu<br>    (1) 武汉因冠状病毒封锁交通。<br><strong>2020.01.26</strong> Mon<br>    (1) 著名NBA球星科比.布莱恩特坠机逝世，终年41岁。<br><strong>2020.01.27</strong> Tue<br>    (1) 国务院总理李克强赴武汉考察指导疫情防控工作。<br><strong>2020.01.30</strong> Thu<br>    (1) 世卫组织宣布中国新型冠状病毒肺炎疫情构成“国际突发公共卫生事件”。<br><strong>2020.02.02</strong> Sun<br>    (1) 武汉火神山医院建成交付。<br><strong>2020.02.03</strong> Mon<br>    (1) 成都发生5.1级地震。<br><strong>2020.02.07</strong> Fri<br>    (1) 疫情吹哨人物李文亮，因新冠肺炎抢救无效于凌晨2点逝世，年仅34岁。<br><strong>2020.02.17</strong> Mon<br>    (1) 联合国粮农组织发布报告显示，西非、东非和南亚20多个国家受到蝗灾。<br><strong>2020.02.19</strong> Thu<br>    (1) Adobe Photoshop 软件发布三十周年。<br><strong>2020.02.20</strong> Fri<br>    (1) 日韩两国冠状病毒感染人数增加，疫情严峻。<br><strong>2020.02.23</strong> Mon<br>    (1) 微盟核心数据遭员工删除，大量服务不可用。<br><strong>2020.02.29</strong> Sat<br>    (1) 美国和塔利班签订和平协议，美军18个月内完成撤军。<br><strong>2020.03.04</strong> Wed<br>    (1) 中共召开会议，强调推进新基建。<br><strong>2020.03.09</strong> Mon<br>    (1) 受冠状病毒影响，国际油价重挫近30%，美股融断。<br><strong>2020.03.11</strong> Wed<br>    (1) 世卫组织宣布冠状病毒构成“全球大流行”。<br><strong>2020.03.16</strong> Mon<br>    (1) 美国股市开盘跌停，收盘跌12.93%，创33年来最大跌幅，恐慌进一步加剧。<br><strong>2020.03.18</strong> Wed<br>    (1) 中国海油发布公告宣布在渤海湾发现大型油田。<br><strong>2020.03.26</strong> Thu<br>    (1) G20国家领导人参加视频会议，讨论全球应对冠状病毒。<br><strong>2020.03.30</strong> Mon<br>    (1) 凉山州西昌市泸山、木里县等地发生森林火灾，造成19名扑火人员遇难。<br><strong>2020.03.31</strong> Tue<br>    (1) 2020日本奥运会决定于2021年7月23日开幕。<br><strong>2020.04.01</strong> Wed<br>    (1) 中印建交70周年纪念日。<br><strong>2020.04.02</strong> Thu<br>    (1) 瑞幸咖啡发布公告，承认虚假交易22亿人民币。<br><strong>2020.04.04</strong> Sat<br>    (1) 清明节，国家哀悼日。<br>    (2) 全球新冠肺炎感染超100万人。<br><strong>2020.04.08</strong> Wed<br>    (1) 移动、联通、电信三大运营商联合宣布将推出5G消息服务。<br><strong>2020.04.21</strong> Tue<br>    (1) 国际油价跌入负值，中国银行原油宝发生严重损失。<br><strong>2020.04.24</strong> Fri<br>    (1) 著名的Linux发行版Ubuntu 20.04 LTS发布。<br><strong>2020.05.15</strong> Fri<br>    (1) 美国计划对华为芯片供应链进行封锁。<br><strong>2020.05.18</strong> Mon<br>    (1) 云南昭通市发生5.0级地震。<br><strong>2020.05.20</strong> Wed<br>    (1) 台湾地区领导人宣誓就职。<br><strong>2020.05.22</strong> Fri<br>    (1) 全国两会召开。<br><strong>2020.05.26</strong> Tue<br>    (1) 全国政协常委、澳门赌王何鸿燊逝世，享年98岁。<br><strong>2020.05.28</strong> Thu<br>    (1) 国务院总理李克强在记者会上提到中国有6亿人每个月的收入也就1000元。<br><strong>2020.05.31</strong> Sun<br>    (1) 美国SpaceX公司实现载人航天发射任务。<br><strong>2020.06.01</strong> Mon<br>    (1) 李克强考察山东烟台时谈及地摊经济、小店经济是人间烟火，和高大上一样，是中国的生机。<br><strong>2020.06.03</strong> Wed<br>    (1) OpenAI发布自然语言深度学习模型GPT-3，具有1750亿参数。<br><strong>2020.06.11</strong> Thu<br>    (1) 北京新发地爆发新冠疫情。<br><strong>2020.06.12</strong> Fri<br>    (1) 哈尔滨工业大学被禁止使用MATLAB软件。<br><strong>2020.06.15</strong> Mon<br>    (1) 中印两国军人在边境地区发生冲突。<br><strong>2020.06.22</strong> Mon<br>    (1) 使用ARM架构芯片的日本超算“富岳”成为全球超算Top500榜第一，中国神威太湖之光第四。<br><strong>2020.06.23</strong> Tue<br>    (1) 苹果宣布将放弃英特尔芯片，全面采用自研的ARM架构芯片M1。<br><strong>2020.06.28</strong> Sun<br>    (1) 全球新冠肺炎感染超1000万人。<br><strong>2020.06.29</strong> Mon<br>    (1) 印度封杀中国APP。<br><strong>2020.06.30</strong> Tue<br>    (1) 港区国安法刊宪实施。<br>    (2) 腾讯以拖欠广告费为由，通过法院查封老干妈1624万元财产作为财产保全。<br><strong>2020.07.03</strong> Fri<br>    (1) 37岁中国羽毛球名将林丹宣布退役。<br><strong>2020.07.07</strong> Tue<br>    (2) 全国高考，安徽歙县考点被洪水淹没，考试延期。<br><strong>2020.07.08</strong> Wed<br>    (2) GitHub 宣布代码千年保存计划，首批代码已被保存到北极Arctic Code Vault。<br><strong>2020.07.15</strong> Wed<br>    (1) 新疆地区爆发新冠疫情。<br>    (2) 美国奥巴马、比尔盖茨、马斯克等知名人物推特账号被盗。<br><strong>2020.07.16</strong> Fri<br>    (1) 中国长江流域发生十年来最大洪水，3000余万人受灾。<br><strong>2020.07.18</strong> Sun<br>    (1) 《新闻联播》片头画面宽高比由4:3改为16:9。<br><strong>2020.07.20</strong> Mon<br>    (1) 蚂蚁宣布启动上市流程，集团员工欢呼财富自由。<br><strong>2020.07.21</strong> Tue<br>    (1) 美国政府要求中国政府72小时内关闭驻休斯敦总领事馆，并撤离所有人员。<br><strong>2020.07.23</strong> Thu<br>    (1) 天问一号火星探测器在文昌航天发射场升空，开启火星之旅。<br><strong>2020.07.27</strong> Mon<br>    (1) 美国驻成都总领馆闭馆。<br><strong>2020.07.31</strong> Fri<br>    (1) 北斗三号全球卫星导航系统建成。<br>    (2) 特朗普表示，他将禁止TikTok在美国运营。<br><strong>2020.08.04</strong> Tue<br>    (1) 江西省高院撤销原审裁判，宣布某关押26年的嫌疑人无罪释放。<br><strong>2020.08.11</strong> Tue<br>    (1) 习指示坚决制止餐饮浪费行为。<br><strong>2020.08.28</strong> Fri<br>    (1) 日本首相安倍晋三以健康为由辞职。<br><strong>2020.09.02</strong> Wed<br>    (1) 英伟达发布新RTX30系列显卡，预计2021年笔记本市场会采用。<br><strong>2020.09.14</strong> Mon<br>    (1) 日本软银以400亿美金出售芯片巨头ARM给英伟达。<br>    (2) 日本内阁官房长官菅义伟当选自民党第26任总裁并出任日本首相。<br><strong>2020.10.02</strong> Fri<br>    (1) 美国总统特朗普宣布，他与夫人梅拉尼娅新冠病毒检测呈阳性。<br><strong>2020.10.05</strong> Mon<br>    (1) 2020年度诺贝尔奖陆续揭晓。<br><strong>2020.10.14</strong> Wed<br>    (1) 苹果召开新品发布会，发布了iPhone 12系列智能手机。<br>    (2) 自然封面论文介绍了一种氢化物材料，在15摄氏度下观察到常温超导现象。<br><strong>2020.10.19</strong> Mon<br>    (1) 全球累计新冠确诊病例破4000万，累计死亡超111万。<br><strong>2020.10.25</strong> Sun<br>    (2) 三星集团会长李健熙在首尔病逝，享年78岁。<br><strong>2020.10.29</strong> Thu<br>    (1) AMD发布RX 6000系列显卡。<br>    (2) 《中共十四五规划》发布，提出渐进式延迟退休。<br>    (3) 韩国最高法院对前总统李明博涉贪受贿案进行宣判，判处17年有期徒刑。<br><strong>2020.11.01</strong> Sun<br>    (1) 国务院开启第七次全国人口普查。<br><strong>2020.11.03</strong> Tue<br>    (1) 蚂蚁集团A股、H股双双暂缓上市。<br><strong>2020.11.06</strong> Fri<br>    (1) 电子科技大学号6G实验卫星发射升空。<br><strong>2020.11.10</strong> Tue<br>    (1) 国家市场监管总局发布经济领域反垄断指南，加大对互联网巨头反垄断。<br><strong>2020.11.15</strong> Sun<br>    (1) 区域全面经济伙伴关系协定(RCEP)正式签署。<br><strong>2020.11.17</strong> Tue<br>    (1) 华为正式出售荣耀。<br><strong>2020.11.21</strong> Sat<br>    (1) GopherChina 2020 在上海召开。<br><strong>2020.11.24</strong> Tue<br>    (1) 嫦娥五号探测器发射，开启月球挖土征程。<br><strong>2020.11.25</strong> Wed<br>    (1) 多地政府介入蛋壳公寓危机事件。<br>    (2) 阿根廷球王马拉多纳突发心脏骤停去世，享年60岁。<br><strong>2020.11.27</strong> Fri<br>    (1) 伊朗高级核物理学家穆赫辛·法克里扎德遭暗杀身亡。<br><strong>2020.12.04</strong> Fri<br>    (1) 成都中环二号核聚变装置建成并实现首次放电。<br>    (2) 中国科学技术大学潘建伟团队成功构建76光量子计算原型机九章。<br><strong>2020.12.08</strong> Tue<br>    (1) 成都郫都区爆发新冠疫情。<br><strong>2020.12.11</strong> Fri<br>    (1) 中共召开会议，强化反垄断和防止资本无序扩张。<br><strong>2020.12.14</strong> Mon<br>    (1) 美国选举人团投票，民主党总统候选人拜登获得当选美国总统所需票数。<br>    (2) 国家市场监管总局根据《反垄断法》，对阿里巴巴、阅文集团、丰巢网络处以50万元罚款。<br><strong>2020.12.15</strong> Tue<br>    (1) 谷歌旗下Gmail、Youtube等多个服务宕机。<br>    (2) 美国华盛顿国家大教堂鸣钟300次，以纪念因新冠逝世的30万美国民众。<br><strong>2020.12.17</strong> Thu<br>    (1) 嫦娥五号返回器在内蒙古四子王旗预定区域着陆。<br><strong>2020.12.18</strong> Fri<br>    (1) 部分省市开始出现断电，限电情况。<br>    (2) 成都同日开通6、8、9、17、18共五条地铁，总里程达558公里，跃居中国地铁第四城。<br><strong>2020.12.23</strong> Wed<br>    (2) 英国确认出现一种变异新冠病毒。<br><strong>2020.12.24</strong> Thu<br>    (1) C++20标准正式发布，新增模块、协程、范围、约束等特性。<br>    (2) 阿里巴巴遭反垄断调查，蚂蚁金服再被约谈，马云遭当局边控。<br><strong>2020.12.26</strong> Sat<br>    (1) 首届Rust China Conf在深圳召开。<br>    (2) 全国考研，今年人数达377万，同比增加10.56%。<br>    (3) 比特币价格突破28000美元/枚，约18.3万元人民币/枚。<br><strong>2020.12.31</strong> Thu<br>    (1) 习发表新年贺词。<br>    (2) 国家卫健委宣布新冠疫苗免费提供全民。<br>    (3) 山东临沂，一位约五六十岁的环卫工人雪天倒在路边死亡。<br>    (4) 国家市场监管总局依法对京东、天猫、唯品会不正当价格行为罚款50万元。</p><p><a id="download" href="https://gitee.com/QMHTMY/share/blob/master/2020events.pdf" target="_blank" rel="noopener"><i class="fa fa-download"></i><span>下载年度报告</span></a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://s3.ax1x.com/2020/12/31/rvPMqI.png&quot; alt=&quot;2020&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="年度新闻" scheme="http://www.shieber.cn/categories/%E5%B9%B4%E5%BA%A6%E6%96%B0%E9%97%BB/"/>
    
    
  </entry>
  
  <entry>
    <title>如何在Linux上安装及使用Zig语言？</title>
    <link href="http://www.shieber.cn/title/82ebf5cc/"/>
    <id>http://www.shieber.cn/title/82ebf5cc/</id>
    <published>2020-12-04T11:39:18.000Z</published>
    <updated>2020-12-04T11:47:07.859Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://s3.ax1x.com/2020/12/04/Dq9HSJ.png" alt="zig"></p><a id="more"></a><h2 id="具体流程"><a href="#具体流程" class="headerlink" title="具体流程"></a>具体流程</h2><ul><li>安装  <pre><code class="bash">sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 379CE192D401AB61  <span class="built_in">echo</span> <span class="string">'deb https://dl.bintray.com/dryzig/zig-ubuntu focal main'</span>  \    | sudo tee -a /etc/apt/sources.list  sudo apt update  sudo apt install zig  </code></pre></li><li>编写如下hellowd.zig  <pre><code class="zig">const std = @import(&quot;std&quot;);  pub fn main() !void {      const stdout = std.io.getStdOut().writer();      try stdou.print(&quot;Hello, {}!\n&quot;, .{&quot;world&quot;});  }  </code></pre></li><li>编译执行<br>  zig build-exe hellowd.zig<br>  ./hellowd  </li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://s3.ax1x.com/2020/12/04/Dq9HSJ.png&quot; alt=&quot;zig&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="编程语言" scheme="http://www.shieber.cn/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="Zig" scheme="http://www.shieber.cn/tags/Zig/"/>
    
  </entry>
  
  <entry>
    <title>如何在Linux上安装及使用V语言？</title>
    <link href="http://www.shieber.cn/title/a18bb24b/"/>
    <id>http://www.shieber.cn/title/a18bb24b/</id>
    <published>2020-12-04T11:36:44.000Z</published>
    <updated>2020-12-04T11:47:07.855Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://s3.ax1x.com/2020/12/04/Dq9NQA.png" alt="vlang"></p><a id="more"></a><h2 id="具体流程"><a href="#具体流程" class="headerlink" title="具体流程"></a>具体流程</h2><ul><li>下载<br>  到vlang.io下载包  </li><li>解压编译  <pre><code class="bash">unzip v_linux.zip  <span class="built_in">cd</span> v_linux/  make  </code></pre></li><li>编写如下hellowd.v  <pre><code class="v">fn main() {    println(<span class="number">'He</span>llo world!')  }  </code></pre></li><li>编译执行<br>  v hellowd.v<br>  ./hellowd  </li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://s3.ax1x.com/2020/12/04/Dq9NQA.png&quot; alt=&quot;vlang&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="编程语言" scheme="http://www.shieber.cn/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="Vlang" scheme="http://www.shieber.cn/tags/Vlang/"/>
    
  </entry>
  
  <entry>
    <title>如何在Linux上安装及使用Tex语言？</title>
    <link href="http://www.shieber.cn/title/b7656e70/"/>
    <id>http://www.shieber.cn/title/b7656e70/</id>
    <published>2020-12-04T11:30:50.000Z</published>
    <updated>2020-12-04T11:47:07.851Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://s3.ax1x.com/2020/12/04/Dqpx2j.png" alt="Tex"></p><a id="more"></a><h2 id="具体流程"><a href="#具体流程" class="headerlink" title="具体流程"></a>具体流程</h2><p>TeX是排版语言，Linux推荐安装TexLive，安装过程较为复杂。    </p><ul><li>安装流程如下<br>  a.从清华大学的镜像处下载  <pre><code>https://mirrors.tuna.tsinghua.edu.cn/CTAN/systems/texlive/Images/  </code></pre>  b.安装图像化界面必备的perl-tk组件  <pre><code>sudo apt-get install perl-tk  </code></pre>  c.把下载好的.iso文件挂载到/mnt下  <pre><code>sudo mount -t iso9660 -o loop texlive2020-20200406.iso /mnt  </code></pre>  d.准备从图形界面安装  <pre><code>cd /mnt  sudo ./install-tl -gui  </code></pre>  e.如果要修改安装位置请执行(/目录下面空间够用也可不用管这一步)  <pre><code>在&quot;TEXDIR(主TeX目录)&quot; 一行后点修改，填入新的位置(如/home/texlive2020)  </code></pre>  f.可以瘦身安装(空间够此步也可忽略)  <pre><code>&quot;安装字体/宏包文档目录树&quot;　切换为否  &quot;安装字体/宏包源代码目录树&quot;　切换为否  上面两个操作会舍弃安装文档和源代码，实际上大部分人也不会看，安装了浪费2G左右空间  </code></pre>  g.点击安装TeX Live<br>  h.卸载镜像文件  <pre><code>sudo unmount /mnt  sudo cp /home/texlive2020/2020/texmf-var/fonts/conf/texlive-fontconfig.conf \     /etc/fonts/conf.d/09-texlive.conf  sudo fc-cache -fsv #此步执行时间稍长</code></pre>  i.环境变量设置<br>  打开~/.bashrc 在最后加入如下内容(具体路径按照自己的系统修改)  <pre><code>export TexMan=&quot;/home/texlive2020/2020/texmf-dist/doc/man&quot;  export TexInfo=&quot;/home/texlive2020/2020/texmf-dist/doc/info&quot;  export TexLive=&quot;/home/texlive2020/2020/bin/x86_64-linux&quot;  export MANPATH=&quot;$MANPATH:$TexMan&quot;  export INFOPATH=&quot;$INFOPATH:$TexInfo&quot;  export PATH=&quot;$PATH:$TexLive&quot;  </code></pre>  执行 source ~/.bashrc<br>  j.更新源配置  <pre><code>sudo tlmgr option repository https://mirrors.tuna.tsinghua.edu.cn/CTAN/systems/texlive/tlnet  此步如果出现sudo;找不到命令 tlmgr，意味着执行时环境变量不对，请执行  (1) sudo vi /etc/sudoers  (2) 给如下内容加一个感叹号      Defaults    env_reset       Defaults    !env_reset  (3) 再vi ~/.bashrc 加入下面这行到最后  (4) alias sudo=&apos;sudo env PATH=$PATH&apos;  (5) 保存退出执行 source ~/.bashrc  (6) 再执行 sudo tlmgr option ....  </code></pre>  k.更新宏包  <pre><code>sudo tlmgr update --self --all #要更新几百个，时间较长   </code></pre>  l.解决软件安装依赖问题  <pre><code>(1) sudo apt-get install aptitude  (2) sudo aptitude install equivs  (3) sudo mkdir /tmp/tl-equivs &amp;&amp; cd /tmp/tl-equivs  (4) equivs-control texlive-local  (5) 打开https://www.tug.org/texlive/files/debian-equivs-2020-ex.txt并复制所有内容  (6) sudo vi texlive-local 将复制的内容粘贴进去并保存   (7) sudo equivs-build texlive-local  (8) sudo apt-get freeglut3  (9) sudo dpkg -i texlive-local_2020-1_all.deb  </code></pre></li><li>编写如下hellowd.tex    <figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">\<span class="name">documentclass</span><span class="string">&#123;article&#125;</span></span>  </span><br><span class="line"><span class="tag">\<span class="name">begin</span><span class="string">&#123;document&#125;</span></span>  </span><br><span class="line">Hello world!  </span><br><span class="line"><span class="tag">\<span class="name">end</span><span class="string">&#123;document&#125;</span></span></span><br></pre></td></tr></table></figure></li><li>编译得到pdf文件<br>  xelatex hellowd.tex  </li><li>查看pdf<br>  evince hellowd.pdf  </li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://s3.ax1x.com/2020/12/04/Dqpx2j.png&quot; alt=&quot;Tex&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="编程语言" scheme="http://www.shieber.cn/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="Tex" scheme="http://www.shieber.cn/tags/Tex/"/>
    
  </entry>
  
  <entry>
    <title>如何在Linux上安装及使用Swift语言？</title>
    <link href="http://www.shieber.cn/title/4d7c098b/"/>
    <id>http://www.shieber.cn/title/4d7c098b/</id>
    <published>2020-12-04T11:28:28.000Z</published>
    <updated>2020-12-04T11:47:07.855Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://s3.ax1x.com/2020/12/04/Dqp13j.png" alt="swift"></p><a id="more"></a><h2 id="具体流程"><a href="#具体流程" class="headerlink" title="具体流程"></a>具体流程</h2><ul><li>安装依赖及下载安装包  <pre><code class="bash">sudo apt install libz3-4   sudo apt install  libpython2.7  </code></pre>  然后到<a href="https://swift.org/download/" target="_blank" rel="noopener">https://swift.org/download/</a> 下载安装包  </li><li>解压到/usr/local<br>  tar -zxf swift-5.3.1-RELEASE-ubuntu20.04.tar.gz -C /usr/local  </li><li>设置环境变量<br>  在~/.bashrc中添加如下内容<br>  export SWIFT_HOME=”/usr/local/swift-5.3.1-RELEASE-ubuntu20.04”<br>  export SWIFT_LIBRARY=”SWIFT_HOME/usr/lib”<br>  export PATH=”$PATH:SWIFT_HOME/usr/bin:SWIFT_LIBRARY”<br>  执行 source ~/.bashrc  </li><li>编写如下hellowd.swift  <pre><code class="swift"><span class="built_in">print</span>(<span class="string">"Hello world!"</span>)  </code></pre></li><li>编译执行<br>  swiftc hellowd.swift -o hellowd<br>  ./hellowd  </li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://s3.ax1x.com/2020/12/04/Dqp13j.png&quot; alt=&quot;swift&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="编程语言" scheme="http://www.shieber.cn/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="Swift" scheme="http://www.shieber.cn/tags/Swift/"/>
    
  </entry>
  
  <entry>
    <title>如何在Linux上安装及使用Solidity语言？</title>
    <link href="http://www.shieber.cn/title/f1582adf/"/>
    <id>http://www.shieber.cn/title/f1582adf/</id>
    <published>2020-12-04T11:16:56.000Z</published>
    <updated>2020-12-04T11:47:07.851Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://s3.ax1x.com/2020/12/04/DqS0Xt.png" alt="solidity"></p><a id="more"></a><h2 id="具体流程"><a href="#具体流程" class="headerlink" title="具体流程"></a>具体流程</h2><ul><li>安装  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo add-apt-repository ppa:ethereum/ethereum</span><br><span class="line">sudo apt update</span><br><span class="line">sudo apt install solc</span><br></pre></td></tr></table></figure></li><li>编写如下hellowd.sol  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">pragma solidity ^0.7.5;</span><br><span class="line">contract hellowd &#123;</span><br><span class="line">    string public hlwd = &quot;Hello world!&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>编译<br>  solc –bin hellowd.sol<br>  Solidity用于智能合约，没有输出函数。  </li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://s3.ax1x.com/2020/12/04/DqS0Xt.png&quot; alt=&quot;solidity&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="编程语言" scheme="http://www.shieber.cn/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="Solidity" scheme="http://www.shieber.cn/tags/Solidity/"/>
    
  </entry>
  
  <entry>
    <title>如何在Linux上安装及使用Smalltalk语言？</title>
    <link href="http://www.shieber.cn/title/6f9e5fce/"/>
    <id>http://www.shieber.cn/title/6f9e5fce/</id>
    <published>2020-12-04T11:09:15.000Z</published>
    <updated>2020-12-04T11:47:07.851Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://s3.ax1x.com/2020/12/04/DbzQZ8.png" alt="smalltalk"></p><a id="more"></a><h2 id="具体流程"><a href="#具体流程" class="headerlink" title="具体流程"></a>具体流程</h2><ul><li>下载<br>  到<a href="https://ftp.gnu.org/gnu/smalltalk/" target="_blank" rel="noopener">https://ftp.gnu.org/gnu/smalltalk/</a> 下载合适的包</li><li>解压安装    <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">tar -zxf smalltalk.3.2.5.tar.gz</span><br><span class="line"><span class="built_in">cd</span> smalltalk.3.2.5/</span><br><span class="line">make</span><br><span class="line">sudo make install</span><br></pre></td></tr></table></figure></li><li>编写如下hellwd.st    <figure class="highlight smalltalk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Transcript</span> show: <span class="string">'Hello world!'</span>; cr.</span><br></pre></td></tr></table></figure></li><li>执行<br>  gst hellowd.st</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://s3.ax1x.com/2020/12/04/DbzQZ8.png&quot; alt=&quot;smalltalk&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="编程语言" scheme="http://www.shieber.cn/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="Smalltalk" scheme="http://www.shieber.cn/tags/Smalltalk/"/>
    
  </entry>
  
  <entry>
    <title>如何在Linux上安装及使用Scheme语言？</title>
    <link href="http://www.shieber.cn/title/78d9da1d/"/>
    <id>http://www.shieber.cn/title/78d9da1d/</id>
    <published>2020-12-04T11:04:53.000Z</published>
    <updated>2020-12-04T11:47:07.851Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://s3.ax1x.com/2020/12/04/Dbx0Cd.png" alt="scheme"></p><a id="more"></a><h2 id="具体流程"><a href="#具体流程" class="headerlink" title="具体流程"></a>具体流程</h2><ul><li>安装依赖    <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install uuid-dev</span><br><span class="line">sudo apt-get install libghc-x11-dev</span><br></pre></td></tr></table></figure></li><li>下载源码    <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">下面任意方式均可 </span><br><span class="line">git <span class="built_in">clone</span> git@github.com:cisco/ChezScheme.git</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/cisco/ChezScheme</span><br><span class="line">gh repo <span class="built_in">clone</span> cisco/ChezScheme</span><br></pre></td></tr></table></figure></li><li>编译安装    <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ChezScheme/</span><br><span class="line">make</span><br><span class="line">sudo make install</span><br></pre></td></tr></table></figure></li><li>编写如下hellowd.scm    <figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">begin</span></span></span><br><span class="line">  (<span class="name"><span class="builtin-name">display</span></span> <span class="string">"Hello world!"</span>)</span><br><span class="line">  (<span class="name"><span class="builtin-name">newline</span></span>))</span><br></pre></td></tr></table></figure></li><li>执行<br>  scheme –script hellowd.scm</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://s3.ax1x.com/2020/12/04/Dbx0Cd.png&quot; alt=&quot;scheme&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="编程语言" scheme="http://www.shieber.cn/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="Scheme" scheme="http://www.shieber.cn/tags/Scheme/"/>
    
  </entry>
  
  <entry>
    <title>如何在Linux上安装及使用Rust语言？</title>
    <link href="http://www.shieber.cn/title/1551f511/"/>
    <id>http://www.shieber.cn/title/1551f511/</id>
    <published>2020-12-04T11:01:44.000Z</published>
    <updated>2020-12-04T11:47:07.851Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://s3.ax1x.com/2020/12/04/DbvL9A.png" alt="rust"></p><a id="more"></a><h2 id="具体流程"><a href="#具体流程" class="headerlink" title="具体流程"></a>具体流程</h2><p>Rust可用rustup来安装 </p><ul><li>安装rustup、rustc、rustfmt等<br>  curl –proto ‘=https’ –tlsv1.2 -sSf <a href="https://sh.rustup.rs" target="_blank" rel="noopener">https://sh.rustup.rs</a> | sh  </li><li>配置环境变量    <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">在~/.bashrc中加入如下内容</span><br><span class="line"><span class="built_in">export</span> CARGO=<span class="string">"<span class="variable">$HOME</span>/.cargo/bin"</span></span><br><span class="line"><span class="built_in">export</span> PATH=<span class="string">"<span class="variable">$PATH</span>:CARGO"</span></span><br><span class="line">$ <span class="built_in">source</span> ~/.bashrc</span><br></pre></td></tr></table></figure></li><li>编写如下hellowd.rs  <figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"Hello world!"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>编译执行<br>  rustc hellowd.rs<br>  ./hellowd</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://s3.ax1x.com/2020/12/04/DbvL9A.png&quot; alt=&quot;rust&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="编程语言" scheme="http://www.shieber.cn/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="Rust" scheme="http://www.shieber.cn/tags/Rust/"/>
    
  </entry>
  
  <entry>
    <title>如何在Linux上安装及使用Ruby语言？</title>
    <link href="http://www.shieber.cn/title/8fd765aa/"/>
    <id>http://www.shieber.cn/title/8fd765aa/</id>
    <published>2020-12-04T10:58:21.000Z</published>
    <updated>2020-12-04T11:47:07.851Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://s3.ax1x.com/2020/12/04/Dbv3m8.png" alt="ruby"></p><a id="more"></a><h2 id="具体流程"><a href="#具体流程" class="headerlink" title="具体流程"></a>具体流程</h2><ul><li>安装<br>  到<a href="http://www.ruby-lang.org/en/downloads/下载ruby" target="_blank" rel="noopener">http://www.ruby-lang.org/en/downloads/下载ruby</a>  </li><li>解压安装    <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">tar -zxf ruby-2.7.2.tar.gz</span><br><span class="line"><span class="built_in">cd</span> ruby-2.7.2/</span><br><span class="line">./configure</span><br><span class="line">make</span><br><span class="line">sudo make install</span><br></pre></td></tr></table></figure></li><li>编写如下hellowd.rb  <figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">puts <span class="string">"Hello world!"</span></span><br></pre></td></tr></table></figure></li><li>执行<br>  ruby hellowd.rb</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://s3.ax1x.com/2020/12/04/Dbv3m8.png&quot; alt=&quot;ruby&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="编程语言" scheme="http://www.shieber.cn/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="Ruby" scheme="http://www.shieber.cn/tags/Ruby/"/>
    
  </entry>
  
  <entry>
    <title>如何在Linux上安装及使用R语言？</title>
    <link href="http://www.shieber.cn/title/a8601231/"/>
    <id>http://www.shieber.cn/title/a8601231/</id>
    <published>2020-12-04T10:55:08.000Z</published>
    <updated>2020-12-04T11:47:07.847Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://s3.ax1x.com/2020/12/04/DbjTWn.png" alt="r"></p><a id="more"></a><h2 id="具体流程"><a href="#具体流程" class="headerlink" title="具体流程"></a>具体流程</h2><ul><li>安装R    <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-key adv --keyserver keyserver.ubuntu.com \</span><br><span class="line">    --recv-keys E298A3A825C0D65DFD57CBB651716619E084DAB9</span><br><span class="line">sudo apt update</span><br><span class="line">sudo apt install r-base</span><br></pre></td></tr></table></figure></li><li>编写hellowd.r    <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">"Hello world!"</span>);</span><br></pre></td></tr></table></figure></li><li>执行<br>  Rscript hellowd.r</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://s3.ax1x.com/2020/12/04/DbjTWn.png&quot; alt=&quot;r&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="编程语言" scheme="http://www.shieber.cn/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="R" scheme="http://www.shieber.cn/tags/R/"/>
    
  </entry>
  
  <entry>
    <title>如何在Linux上安装及使用Python语言？</title>
    <link href="http://www.shieber.cn/title/cdbf0a6a/"/>
    <id>http://www.shieber.cn/title/cdbf0a6a/</id>
    <published>2020-12-04T10:52:48.000Z</published>
    <updated>2020-12-04T11:47:07.847Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://s3.ax1x.com/2020/12/04/Dbjla4.png" alt="python"></p><a id="more"></a><h2 id="具体流程"><a href="#具体流程" class="headerlink" title="具体流程"></a>具体流程</h2><p>Linux自带Python，不用安装。</p><ul><li>编写如下hellowd.py   <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line">print(<span class="string">"Hello, world!"</span>)</span><br></pre></td></tr></table></figure></li><li>执行<br>  python3 hellowd.py</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://s3.ax1x.com/2020/12/04/Dbjla4.png&quot; alt=&quot;python&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="编程语言" scheme="http://www.shieber.cn/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="Python" scheme="http://www.shieber.cn/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>如何在Linux上安装及使用Prolog语言？</title>
    <link href="http://www.shieber.cn/title/2e5a384b/"/>
    <id>http://www.shieber.cn/title/2e5a384b/</id>
    <published>2020-12-04T10:48:00.000Z</published>
    <updated>2020-12-04T11:47:07.847Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://s3.ax1x.com/2020/12/04/DbX6DU.png" alt="Prolog"></p><a id="more"></a><h2 id="具体流程"><a href="#具体流程" class="headerlink" title="具体流程"></a>具体流程</h2><ul><li>安装<br>  sudo apt install swi-prolog</li><li>编写如下hellowd.pro或hellowd.pl(注意.pl和Perl后缀冲突)    <figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hello:-write(<span class="string">"Hello, world"</span>).</span><br></pre></td></tr></table></figure></li><li>执行    <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ swipl -s hellowd.pro</span><br><span class="line">?- hello.</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://s3.ax1x.com/2020/12/04/DbX6DU.png&quot; alt=&quot;Prolog&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="编程语言" scheme="http://www.shieber.cn/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="Prolog" scheme="http://www.shieber.cn/tags/Prolog/"/>
    
  </entry>
  
  <entry>
    <title>如何在Linux上安装及使用PHP语言？</title>
    <link href="http://www.shieber.cn/title/a5e1d4fb/"/>
    <id>http://www.shieber.cn/title/a5e1d4fb/</id>
    <published>2020-12-04T10:45:21.000Z</published>
    <updated>2020-12-04T11:47:07.847Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://s3.ax1x.com/2020/12/04/DbXmHe.png" alt="PHP"></p><a id="more"></a><h2 id="具体流程"><a href="#具体流程" class="headerlink" title="具体流程"></a>具体流程</h2><ul><li>安装<br>  到<a href="https://www.php.net/downloads" target="_blank" rel="noopener">https://www.php.net/downloads</a> 下载适合版本  </li><li>解压安装    <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">tar -zxf php-8.0.0.tar.gz</span><br><span class="line">./configure</span><br><span class="line">make</span><br><span class="line">sudo make install</span><br></pre></td></tr></table></figure></li><li>编写如下hellowd.php    <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="keyword">echo</span>(<span class="string">"Hello world!"</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></li><li>执行<br>  用浏览器查看就可以了</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://s3.ax1x.com/2020/12/04/DbXmHe.png&quot; alt=&quot;PHP&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="编程语言" scheme="http://www.shieber.cn/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="PHP" scheme="http://www.shieber.cn/tags/PHP/"/>
    
  </entry>
  
  <entry>
    <title>如何在Linux上安装及使用Pascal语言？</title>
    <link href="http://www.shieber.cn/title/c236715d/"/>
    <id>http://www.shieber.cn/title/c236715d/</id>
    <published>2020-12-04T10:41:59.000Z</published>
    <updated>2020-12-04T11:47:07.843Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://s3.ax1x.com/2020/12/04/DbO7kj.png" alt="pascal"></p><a id="more"></a><h2 id="具体流程"><a href="#具体流程" class="headerlink" title="具体流程"></a>具体流程</h2><ul><li>安装<br>  sudo apt install fp-compile  </li><li>编写hellowd.pas    <figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">begin</span><br><span class="line">    writeln(<span class="string">"Hello world!)</span></span><br><span class="line"><span class="string">end.</span></span><br></pre></td></tr></table></figure></li><li>编译执行<br>  fpc hellowd.pas<br>  ./hellowd  </li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://s3.ax1x.com/2020/12/04/DbO7kj.png&quot; alt=&quot;pascal&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="编程语言" scheme="http://www.shieber.cn/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="Pascal" scheme="http://www.shieber.cn/tags/Pascal/"/>
    
  </entry>
  
  <entry>
    <title>如何在Linux上安装及使用Perl语言？</title>
    <link href="http://www.shieber.cn/title/8ce2b37a/"/>
    <id>http://www.shieber.cn/title/8ce2b37a/</id>
    <published>2020-12-04T10:38:32.000Z</published>
    <updated>2020-12-04T11:47:07.843Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://s3.ax1x.com/2020/12/04/DbLaqg.png" alt="perl"></p><a id="more"></a><h2 id="具体流程"><a href="#具体流程" class="headerlink" title="具体流程"></a>具体流程</h2><p>Linux自带Perl，不用安装</p><ul><li>编写如下hellowd.pl    <figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/perl</span></span><br><span class="line"><span class="keyword">use</span> strict;</span><br><span class="line"><span class="keyword">use</span> warnings;</span><br><span class="line"><span class="keyword">print</span> <span class="string">"Hello world!\n"</span>;</span><br></pre></td></tr></table></figure></li><li>执行<br>  perl hellowd.pl  </li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://s3.ax1x.com/2020/12/04/DbLaqg.png&quot; alt=&quot;perl&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="编程语言" scheme="http://www.shieber.cn/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="Perl" scheme="http://www.shieber.cn/tags/Perl/"/>
    
  </entry>
  
  <entry>
    <title>如何在Linux上安装及使用Ocaml语言？</title>
    <link href="http://www.shieber.cn/title/64d15820/"/>
    <id>http://www.shieber.cn/title/64d15820/</id>
    <published>2020-12-04T10:35:37.000Z</published>
    <updated>2020-12-04T11:47:07.843Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://s3.ax1x.com/2020/12/04/DbLKqe.png" alt="ocaml"></p><a id="more"></a><h2 id="具体流程"><a href="#具体流程" class="headerlink" title="具体流程"></a>具体流程</h2><ul><li>安装<br>  sudo apt install ocaml<br>  sudo apt install ocaml-nox #无X11支持，二者选择合适的安装  </li><li>编写如下hellowd.ml    <figure class="highlight ocaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print_string <span class="string">"Hello world!\n"</span></span><br></pre></td></tr></table></figure></li><li>编译执行<br>  ocamlc hellowd.ml -o hellowd<br>  ./hellowd  </li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://s3.ax1x.com/2020/12/04/DbLKqe.png&quot; alt=&quot;ocaml&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="编程语言" scheme="http://www.shieber.cn/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="Ocaml" scheme="http://www.shieber.cn/tags/Ocaml/"/>
    
  </entry>
  
  <entry>
    <title>如何在Linux上安装及使用Objective-C语言？</title>
    <link href="http://www.shieber.cn/title/4600d3d9/"/>
    <id>http://www.shieber.cn/title/4600d3d9/</id>
    <published>2020-12-04T10:32:26.000Z</published>
    <updated>2020-12-04T12:03:23.875Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://s3.ax1x.com/2020/12/04/Dbq7Dg.png" alt="objective-c"></p><a id="more"></a><h2 id="具体流程"><a href="#具体流程" class="headerlink" title="具体流程"></a>具体流程</h2><ul><li>安装    <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install gobjc</span><br><span class="line">sudo apt install gnustep</span><br><span class="line">sudo apt install gnustep-devel</span><br><span class="line">sudo bash /usr/share/GNUstep/Makefiles/GNUstep.sh</span><br></pre></td></tr></table></figure></li><li>编写如下hellowd.m  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#import &lt;Foundation/Foundation.h&gt;</span><br><span class="line">int main ( int argc, const char * argv[])</span><br><span class="line">&#123;</span><br><span class="line">     NSAutoreleasePool * pool = [[NSAutoreleasePool alloc] init];</span><br><span class="line"> </span><br><span class="line">     NSLog( @&quot;hello world&quot; );</span><br><span class="line">     [pool drain];</span><br><span class="line">     return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>编译执行<br>  gcc ‘gnustep-config –objc-flags’ -lgnustep-base hellowd.m -o hellowd<br>  ./hellowd  </li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://s3.ax1x.com/2020/12/04/Dbq7Dg.png&quot; alt=&quot;objective-c&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="编程语言" scheme="http://www.shieber.cn/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="Objective-C" scheme="http://www.shieber.cn/tags/Objective-C/"/>
    
  </entry>
  
</feed>
