<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>2021个人年度报告</title>
    <url>/title/3b00afce/</url>
    <content><![CDATA[<p><img src="https://s4.ax1x.com/2022/01/02/TTKPIS.jpg" alt="2021report"></p>
<a id="more"></a>

<h2 id="日历"><a href="#日历" class="headerlink" title="日历"></a>日历</h2><p><strong>01.01</strong>   Fri<br>  &emsp; 抢到了联想拯救者R7000P。<br><strong>01.06</strong>   Wed<br>  &emsp; 因新冠疫情在学校待了604天后回了趟家。<br><strong>01.14</strong>   Thu<br>  &emsp; 参加电子年会线上会议。<br><strong>02.10</strong>   Wed<br>  &emsp; 导师请吃团年饭。<br>  &emsp; 学校发了个零食礼包加二百元红包。<br><strong>02.11</strong>   Thu<br>  &emsp;  除夕继续肝论文。<br><strong>02.15</strong>   Mon<br>  &emsp; 用 Rust 完成一自用密码生成器。<br><strong>03.03</strong>   Wed<br>  &emsp; 开始准备毕业论文答辩PPT。<br><strong>03.23</strong>   Tue<br>  &emsp; 汶锦师弟生日请大家吃饭[火锅]。<br><strong>05.13</strong>   Thu<br>  &emsp; 毕业论文答辩。<br>  &emsp; 404集体聚餐。<br><strong>05.15</strong>   Sat<br>  &emsp; 和晨曦兄在鹤鸣茶社喝茶聊天。<br>  &emsp; 整理毕业论文Latex模板并移交师弟。<br><strong>05.22</strong>   Sat<br>  &emsp; 游青城前山。<br><strong>05.31</strong>   Mon<br>  &emsp; 听黄师兄博士答辩。<br><strong>06.05</strong>   Sat<br>  &emsp; 冕宁参加吴师兄婚礼。<br><strong>06.07</strong>   Mon<br>  &emsp; 拍个人毕业照，瞿芬芬不在。<br>  &emsp; 晚上，李师姐请吃饭[柴火鸡]。<br><strong>06.10</strong>   Thu<br>  &emsp; 学院拍师生合照。<br><strong>06.22</strong>   Tue<br>  &emsp; 导师请吃毕业欢送宴[清水园]。<br><strong>06.25</strong>   Fri<br>  &emsp; 学校毕业典礼、学院授位典礼，副校长授的，唯一一次近距离见校级领导。<br><strong>06.26</strong>   Sat<br>  &emsp; 领取毕业证、学位证。<br>  &emsp; 入职材料准备完毕。<br><strong>06.28</strong>   Mon<br>  &emsp; 领取授位照片。<br>  &emsp; 在沙河食堂偶遇高中同学兆熙，七年未见，人家依然美丽动人，不知道怎么保养的。<br>  &emsp; 家门口的高铁建成首日开通，回家耗时只1h1m，比我从学校到成都东站时间还短。<br><strong>07.09</strong>   Fri<br>  &emsp; 入职、认识领导、团队伙伴。<br><strong>07.11</strong>   Sun<br>  &emsp; 整理 Linux 系统环境配置脚本，将系统配置成和教研室使用的一样。<br><strong>08.13</strong>   Fri<br>  &emsp; 集团训开班仪式，班长杨渊<em>、王敏</em>、组长张咪<em>。<br>*</em>08.16**   Mon<br>  &emsp; 拍摄集团训小组视频，传给组长剪辑。<br><strong>09.17</strong>   Fri<br>  &emsp; 用 Rust 完成数据挖掘大赛代码，反复优化从运算三分钟到最后4秒就算完了。<br><strong>09.27</strong>   Mon<br>  &emsp; 全体应届新员工户外拓展。<br><strong>10.01</strong>   Fri<br>  &emsp; 游览长江、东湖。<br><strong>10.13</strong>   Wed<br>  &emsp; Q4 OKR 评审。<br>  &emsp; 整理 Bug 修复记录表。<br><strong>10.17</strong>   Sun<br>  &emsp; 优益佳洗牙，检测到长了四颗智齿，但都长得比较正，所以小姐姐建议都不拔。<br><strong>11.02</strong>   Tue<br>  &emsp; 到访线下寄修网点，排查问题。<br><strong>11.22</strong>   Mon<br>  &emsp; 收到 PingCap 送来的书籍《数据库架构选型》。<br><strong>11.28</strong>   Sun<br>  &emsp; 参观新能源汽车蔚来、理想4S店。<br><strong>12.06</strong>   Mon<br>  &emsp; 集团训线下课程。<br><strong>12.22</strong>   Wed<br>  &emsp; 转正答辩。<br>  &emsp; 父亲去世。<br><strong>12.23</strong>   Thu<br>  &emsp; 生日，又长了一岁了。<br>  &emsp; 回家办丧事，开灵、看风水、选墓地。<br><strong>12.26</strong>   Sun<br>  &emsp; 大雨、父亲安埋下葬。<br><strong>12.30</strong>   Thu<br>  &emsp; 部门 Q4 OKR 复盘。  </p>
<h2 id="新知"><a href="#新知" class="headerlink" title="新知"></a>新知</h2><h4 id="新认识的人-33位，性别比-5-6-1"><a href="#新认识的人-33位，性别比-5-6-1" class="headerlink" title="新认识的人 [33位，性别比: 5.6:1]"></a>新认识的人 [33位，性别比: 5.6:1]</h4><table>
<thead>
<tr>
<th align="left">条目</th>
<th align="left">姓名</th>
<th align="left">性别</th>
<th align="left">条目</th>
<th align="left">姓名</th>
<th align="left">性别</th>
<th align="left">条目</th>
<th align="left">姓名</th>
<th align="left">性别</th>
</tr>
</thead>
<tbody><tr>
<td align="left">0</td>
<td align="left">詹国*</td>
<td align="left">男</td>
<td align="left">11</td>
<td align="left">张惟 *</td>
<td align="left">男</td>
<td align="left">22</td>
<td align="left">李志 *</td>
<td align="left">男</td>
</tr>
<tr>
<td align="left">1</td>
<td align="left">冯国*</td>
<td align="left">男</td>
<td align="left">12</td>
<td align="left">李永 *</td>
<td align="left">男</td>
<td align="left">23</td>
<td align="left">刘相 *</td>
<td align="left">男</td>
</tr>
<tr>
<td align="left">2</td>
<td align="left">罗 *</td>
<td align="left">男</td>
<td align="left">13</td>
<td align="left">罗小 *</td>
<td align="left">男</td>
<td align="left">24</td>
<td align="left">左 *</td>
<td align="left">男</td>
</tr>
<tr>
<td align="left">3</td>
<td align="left">余 *</td>
<td align="left">男</td>
<td align="left">14</td>
<td align="left">焦家 *</td>
<td align="left">男</td>
<td align="left">25</td>
<td align="left">张 *</td>
<td align="left">男</td>
</tr>
<tr>
<td align="left">4</td>
<td align="left">何 *</td>
<td align="left">男</td>
<td align="left">15</td>
<td align="left">颜宇 *</td>
<td align="left">男</td>
<td align="left">26</td>
<td align="left">杨 *</td>
<td align="left">男</td>
</tr>
<tr>
<td align="left">5</td>
<td align="left">郭 *</td>
<td align="left">男</td>
<td align="left">16</td>
<td align="left">杨永 *</td>
<td align="left">男</td>
<td align="left">27</td>
<td align="left">涂 *</td>
<td align="left">男</td>
</tr>
<tr>
<td align="left">6</td>
<td align="left">杨 *</td>
<td align="left">男</td>
<td align="left">17</td>
<td align="left">魏 *</td>
<td align="left">男</td>
<td align="left">28</td>
<td align="left">黄 *</td>
<td align="left">女</td>
</tr>
<tr>
<td align="left">7</td>
<td align="left">尹 *</td>
<td align="left">男</td>
<td align="left">18</td>
<td align="left">徐传 *</td>
<td align="left">男</td>
<td align="left">29</td>
<td align="left">于 *</td>
<td align="left">女</td>
</tr>
<tr>
<td align="left">8</td>
<td align="left">李 *</td>
<td align="left">男</td>
<td align="left">19</td>
<td align="left">曾阳 *</td>
<td align="left">男</td>
<td align="left">30</td>
<td align="left">张 *</td>
<td align="left">女</td>
</tr>
<tr>
<td align="left">9</td>
<td align="left">罗海 *</td>
<td align="left">男</td>
<td align="left">20</td>
<td align="left">黄 *</td>
<td align="left">男</td>
<td align="left">31</td>
<td align="left">阎 *</td>
<td align="left">女</td>
</tr>
<tr>
<td align="left">10</td>
<td align="left">赵 *</td>
<td align="left">男</td>
<td align="left">21</td>
<td align="left">周谋 *</td>
<td align="left">男</td>
<td align="left">32</td>
<td align="left">张咪 *</td>
<td align="left">女</td>
</tr>
</tbody></table>
<h4 id="新认识的字"><a href="#新认识的字" class="headerlink" title="新认识的字"></a>新认识的字</h4><p><strong>宬 chéng</strong>: 藏书的屋子。黄史宬：收藏帝王实录的地方。<br><strong>甯 níng</strong>: 愿望。<br><strong>龑 yǎn</strong>: 飞龙在天。<br><strong>囡 nān</strong>: 闺中少女，未闻世的小女孩。<br><strong>勰 xié</strong>: 和谐，协调。<br><strong>蠲 juān</strong>: 除去，免除。<br><strong>麀 yōu</strong>: 母鹿。  </p>
<h4 id="新学的知识"><a href="#新学的知识" class="headerlink" title="新学的知识"></a>新学的知识</h4><p><strong>聚麀</strong>: 公公和儿媳乱伦。<br><strong>襄赞</strong>: 辅佐、帮助。<br><strong>阴骘</strong>: 默默地使安定、积阴德、冥冥之中。<br><strong>宵旰不遑</strong>: 形容勤政。<br><strong>周公之礼</strong>: 通俗指夫妻同房，行房事，发生性关系。<br><strong>梓童，小君</strong>: 皇后的代称。<br><strong>低人权优势</strong>: 劳动力在议价领域权利的丧失，同时出现劳动力供给过剩，工人缺少议价空间，只能是接受工厂给予的单方面工资。除了制造业，还有很多低端产业，都建立在对劳动者的任意盘剥上，由此带来的短暂经济发展。  </p>
<h4 id="新知好句"><a href="#新知好句" class="headerlink" title="新知好句"></a>新知好句</h4><p>(00) 2021.01.04 力量可以有兴衰，但榜样的感召力却绵延远长。<br>(01) 2021.01.11 小时候，我们词不达意，长大后，我们言不由衷。<br>(02) 2021.01.11 世人慌慌张张，不过图碎银几两。偏偏这碎银几两，能解世间千般惆怅，能消世间万种慌张。偏偏这碎银几两，可保父母安康，可护幼子成长，你我柴米油盐五谷粮。但这碎银几两，也断了儿时念想，让少年染上沧桑，压弯了脊梁，让世人愁断肠。转念一想，百年阳寿殆尽，难逃黄土里躺。<br>(03) 2021.02.03 出生寒微，不是耻辱；能屈能伸，方为丈夫。<br>(04) 2021.02.04 好女婿，好女系。<br>(05) 2021.02.25 不有行者，无以图将来；不有死者，无以召后起。<br>(06) 2021.02.28 政治可以犯罪，但不能犯错。<br>(07) 2021.03.01 事能知足心常惬，人到无求品自高。<br>(08) 2021.04.13 大脑解决问题时会加入越来越多新东西而不会删除掉缀余成分，结果问题越考虑越复杂。<br>(09) 2021.05.24 我觉得应该尽可能广泛涉猎各个科目。很多创新发明都是跨学科的成果。我们的知识储备越来越庞大，所以必须能够融会贯通。有人精通一个领域，而不了解其他领域，如果你把不同领域知识结合在一起，就有机会创造出超常成果，这里有大把的创新机会。我建议，在有兴趣的前提下，大家可以学习每个领域的基础知识，然后思考一下如何将不同领域的知识融会贯通，这样很容易产生奇思妙想。<br>(10) 2021.05.31 一对夫妻，二人上班，生三小孩，养四老人，为五斗折腰，共六个钱包，需七天每周，早八点打卡，晚九点加班，费十分力气，还百万房贷。百万学子，十年寒窗，打九年工，欠八方款，住七平米房，做六份兼职，睡五小时觉，被四处催婚，闻三胎政策，看二线房价，想一夜暴富。<br>(11) 2021.07.10 雇用聪明人并告诉他们该做什么是没有意义的。我们雇用聪明的人，因为他们可以告诉我们该做什么。<br>(12) 2021.08.14 一个人的思想就像是一座冰山，自己能意识到的只是很小一部分，其它大部分都埋在脑海深处，只有通过思考和写作，才能把它们发掘出来。<br>(13) 2021.10.06 News is to the mind what sugar is to the body. the more ‘breaking’ the news, the less it actually matters to you. the items journalists don’t report on are usually the very things you actually want to know!<br>(14) 2021.11.08 数据分析代表行动，没有行动的分析没有意义。<br>(15) 2021.11.09 能改的，叫做缺点；不能改的，叫做弱点。<br>(16) 2021.11.19 选择参与一个开源项目，就是对个人的一次投资，如果选择的好，投资回报率会非常地高。<br>(17) 2021.11.21 提高人才的密度，增加有大局观、有好价值观、知识和能力也很全面的人才。如果招的人才理解力极差，那么公司的制度就得定得非常详细。但是如果面对一群高素质的人才，就可以将规则定得很简单，简单成少数原则。大家照着原则而不是手把手的规则来配合，甚至只要知道目标，结合常识就可以行动。<br>(18) 2021.12.09 进步是可能的，但不是必然的。改变之所以发生是因为有一群志同道合的人在一起决心让事情变得更好。它可能不会像你想象地或急需地那样迅速发生，但如果有足够多聪明又有想法，同时还富有激情的人一起推动，进步就终将到来。<br>(19) 2021.12.11 Conferences can have consequences.<br>(20) 2021.12.11 Scientists are mainly motivated by the joy that comes from understanding nature.<br>(21) 2021.12.17 有一种说法，你的预估乘以π，就会得到真实的估计。<br>(22) 2021.12.17 年轻时，你没有背负太大的责任，想做什么就应该去做。年龄大了，你背负的责任也多了，这带来了顾虑，即使是很好的机会，你也不得不反复权衡和计划。<br>(23) 2021.12.31 重要的书都应该连着读两遍，因为第二遍读的时候，你已经知道结局了，这样才能真正理解开头。另一个原因是第二遍阅读时，你有不一样的心情，可能会从另一种角度看待问题。<br>(24) 2021.12.31 想一个自己从未深入思考过的问题是危险的，我们读书是别人替我们思考，我们不过是在重复作者的精神过程而已。所以一个人如果整日读书，他将逐渐失去思考能力。  </p>
<h2 id="工作"><a href="#工作" class="headerlink" title="工作"></a>工作</h2><h4 id="年度关注"><a href="#年度关注" class="headerlink" title="年度关注"></a>年度关注</h4><ul>
<li>TiDB</li>
<li>DAO、Web3、IPFS</li>
<li>Rust、Go、Wasm</li>
<li>新型存储材料</li>
<li>量子计算、量子编程</li>
<li>新能源汽车、钠离子电池</li>
<li>元宇宙、区块链、加密货币</li>
<li>双碳政策、碳排放权交易市场</li>
</ul>
<h4 id="年度技能图谱"><a href="#年度技能图谱" class="headerlink" title="年度技能图谱"></a>年度技能图谱</h4><p><img src="https://s4.ax1x.com/2022/01/02/TT1u6J.png" alt="skills2021"></p>
<h4 id="年度工作时间"><a href="#年度工作时间" class="headerlink" title="年度工作时间"></a>年度工作时间</h4><table>
<thead>
<tr>
<th align="left">季度</th>
<th align="left">工时(平均值)</th>
<th align="left">季度</th>
<th align="left">工时(平均值)</th>
<th align="left">全年工时</th>
</tr>
</thead>
<tbody><tr>
<td align="left">一季度</td>
<td align="left">879.50h(9h46m/天)</td>
<td align="left">三季度</td>
<td align="left">834.16h(9h10m/天)</td>
<td align="left">3125.39h(8h33m/天)</td>
</tr>
<tr>
<td align="left">二季度</td>
<td align="left">596.00h(6h33m/天)</td>
<td align="left">四季度</td>
<td align="left">815.73h(8h52m/天)</td>
<td align="left"></td>
</tr>
</tbody></table>
<p><img src="https://s4.ax1x.com/2022/01/02/TTD661.png" alt="workinghours"></p>
<h2 id="生活"><a href="#生活" class="headerlink" title="生活"></a>生活</h2><h4 id="年度音乐"><a href="#年度音乐" class="headerlink" title="年度音乐"></a>年度音乐</h4><p><strong>2021年度音乐10首</strong> <a href="https://music.163.com/#/playlist?id=7162068626" target="_blank" rel="noopener">网易云歌单</a></p>
<table>
<thead>
<tr>
<th align="center">序号</th>
<th align="left">曲目</th>
<th align="left">歌手</th>
<th align="center">序号</th>
<th align="left">曲目</th>
<th align="left">歌手</th>
</tr>
</thead>
<tbody><tr>
<td align="center">0</td>
<td align="left">世界与想象不一样</td>
<td align="left"><em>马塞克</em></td>
<td align="center">5</td>
<td align="left">Wriggle</td>
<td align="left"><em>Cosmo Sheldrake</em></td>
</tr>
<tr>
<td align="center">1</td>
<td align="left">爱人错过</td>
<td align="left"><em>告五人</em></td>
<td align="center">6</td>
<td align="left">春江花月夜</td>
<td align="left"><em>新乐府</em></td>
</tr>
<tr>
<td align="center">2</td>
<td align="left">Wicked Winds</td>
<td align="left"><em>Mazde</em></td>
<td align="center">7</td>
<td align="left">往事只能回味</td>
<td align="left"><em>高胜美</em></td>
</tr>
<tr>
<td align="center">3</td>
<td align="left">一念TENET</td>
<td align="left"><em>邱比</em></td>
<td align="center">8</td>
<td align="left">一笑懸命</td>
<td align="left"><em>遊助</em></td>
</tr>
<tr>
<td align="center">4</td>
<td align="left">漠河舞厅.2022</td>
<td align="left"><em>柳爽</em></td>
<td align="center">9</td>
<td align="left">Cha-Cha-Cha</td>
<td align="left"><em>Finzy Kontini</em></td>
</tr>
</tbody></table>
<h4 id="年度影视"><a href="#年度影视" class="headerlink" title="年度影视"></a>年度影视</h4><table>
<thead>
<tr>
<th align="center">序号</th>
<th align="left">名称</th>
<th align="center">类型</th>
<th align="center">序号</th>
<th align="left">名称</th>
<th align="center">类型</th>
</tr>
</thead>
<tbody><tr>
<td align="center">0</td>
<td align="left">《长津湖》</td>
<td align="center">电影</td>
<td align="center">7</td>
<td align="left">《水浒传》</td>
<td align="center">电视剧</td>
</tr>
<tr>
<td align="center">1</td>
<td align="left">《你好李焕英》</td>
<td align="center">电影</td>
<td align="center">8</td>
<td align="left">《红楼梦》</td>
<td align="center">电视剧</td>
</tr>
<tr>
<td align="center">2</td>
<td align="left">《速度与激情9》</td>
<td align="center">电影</td>
<td align="center">9</td>
<td align="left">《三国演义》</td>
<td align="center">电视剧</td>
</tr>
<tr>
<td align="center">3</td>
<td align="left">《007:无暇赴死》</td>
<td align="center">电影</td>
<td align="center">10</td>
<td align="left">《乾隆王朝》</td>
<td align="center">电视剧</td>
</tr>
<tr>
<td align="center">4</td>
<td align="left">《扫黑风暴》</td>
<td align="center">电视剧</td>
<td align="center">11</td>
<td align="left">《走向共和》</td>
<td align="center">电视剧</td>
</tr>
<tr>
<td align="center">5</td>
<td align="left">《鱿鱼游戏》</td>
<td align="center">电视剧</td>
<td align="center">12</td>
<td align="left">《觉醒年代》</td>
<td align="center">电视剧</td>
</tr>
<tr>
<td align="center">6</td>
<td align="left">《西游记》</td>
<td align="center">电视剧</td>
<td align="center">13</td>
<td align="left">《杨光的快乐生活》</td>
<td align="center">电视剧</td>
</tr>
</tbody></table>
<h4 id="年度视频"><a href="#年度视频" class="headerlink" title="年度视频"></a>年度视频</h4><p>我觉得下面几个视频是2021年里我看过的最有意思或最优秀的视频。</p>
<p>第一个是旅行者号飞向太空时携带的唯一一首中国音乐《流水》，管平湖奏，视频只有一幅图。1977年8月20日，美国发射航天器“旅行者2号”，内装有“地球之声”金唱片，其中90分钟的音乐共收有27个曲目，管平湖弹奏的《流水》，是所有曲目中最长的一首，也是唯一的中国音乐。具体可以由<a href="https://goldenrecord.org/#discus-aureus" target="_blank" rel="noopener">此处</a>验证。高山流水遇知音的故事，展现了中国人传统意趣和精神境界。</p>
<div style="position: relative; padding: 30% 45%;">
<iframe style="position: absolute; width: 100%; height: 100%; left: 0; top: 0;" src="//player.bilibili.com/player.html?aid=22330330&bvid=BV1GW41157xT&cid=36977342&page=1&as_wide=1&high_quality=1&danmaku=0" scrolling="no" frameborder="no" allowfullscreen="true"> </iframe>
</div>

<p>第二个是用“10”来展示宇宙和小时空，通过不断扩大十倍带你遨游宇宙，不断缩小十倍来探索微小空间。虽然视频里的知识我在高中就知道了，但通过视频展现出来还是很有意思的。</p>
<div style="position: relative; padding: 30% 45%;">
<iframe style="position: absolute; width: 100%; height: 100%; left: 0; top: 0;" src="//player.bilibili.com/player.html?aid=8816645&bvid=BV1Rx411y7i9&cid=14544558&page=1&as_wide=1&high_quality=1&danmaku=0" scrolling="no" frameborder="no" allowfullscreen="true"> </iframe>
</div>

<p>第三个是欧美版水浒人物志。</p>
<div style="position: relative; padding: 30% 45%;">
<iframe style="position: absolute; width: 100%; height: 100%; left: 0; top: 0;" src="//player.bilibili.com/player.html?aid=74464013&bvid=BV16E411q7sC&cid=127369082&page=1&as_wide=1&high_quality=1&danmaku=0" scrolling="no" frameborder="no" allowfullscreen="true"> </iframe>
</div>

<p>第四个视频。向稚晖学长致敬，都是一个学校的，人家一做就是工业级产品，我自己做的则更像是玩具。</p>
<div style="position: relative; padding: 30% 45%;">
<iframe style="position: absolute; width: 100%; height: 100%; left: 0; top: 0;" src="//player.bilibili.com/player.html?aid=420981979&bvid=BV12341117rG&cid=421416333&page=1&as_wide=1&high_quality=1&danmaku=0" scrolling="no" frameborder="no" allowfullscreen="true"> </iframe>
</div>


<h4 id="年度图片"><a href="#年度图片" class="headerlink" title="年度图片"></a>年度图片</h4><p><img src="https://s4.ax1x.com/2022/01/02/TT1stf.png" alt="2021"></p>
<h4 id="年度书单"><a href="#年度书单" class="headerlink" title="年度书单"></a>年度书单</h4><p><strong>阅读书籍28本</strong>   </p>
<table>
<thead>
<tr>
<th align="left">书名</th>
<th align="left">作者</th>
<th align="left">备注</th>
</tr>
</thead>
<tbody><tr>
<td align="left">《南渡北归》</td>
<td align="left">南岳</td>
<td align="left">卢笑* 推荐</td>
</tr>
<tr>
<td align="left">《大国空巢》</td>
<td align="left">易富贤</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">《中国人的精神》</td>
<td align="left">辜鸿铭</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">《影响世界的100本书》</td>
<td align="left">邓蜀生</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">《太古和其他的时间》</td>
<td align="left">奥尔加·托卡尔丘克</td>
<td align="left">诺贝尔文学奖</td>
</tr>
<tr>
<td align="left">《数据密集型应用系统设计》</td>
<td align="left">Martin Kleppmann</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">《量子计算入门教程》</td>
<td align="left">swardsman</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">《深入理解并行编程》</td>
<td align="left">保罗.麦肯尼</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">《Redis 实战》</td>
<td align="left">Josiah L. Carlson</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">《Redis 设计与实现》</td>
<td align="left">黄健宏</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">《软件设计的艺术》</td>
<td align="left">John Ousterhout</td>
<td align="left">曹春晖推荐</td>
</tr>
<tr>
<td align="left">《Stop Reading the News》</td>
<td align="left">Rolf Dobelli</td>
<td align="left">曹春晖推荐</td>
</tr>
<tr>
<td align="left">《Rust 编程之道》</td>
<td align="left">张汉东</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">《深入浅出 Rust》</td>
<td align="left">范长春</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">《人人都是产品经理》</td>
<td align="left">苏杰</td>
<td align="left">张咪* 推荐</td>
</tr>
<tr>
<td align="left">《游戏之旅–我的编程感悟》</td>
<td align="left">云风</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">《川菜》</td>
<td align="left">扶霞.邓洛普</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">《HTTP 权威指南》</td>
<td align="left">David Gourley</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">《碳中和时代》</td>
<td align="left">汪军</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">《碳中和经济学》</td>
<td align="left">中金研究院</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">《碳达峰、碳中和知识解读》</td>
<td align="left">杨建初</td>
<td align="left">这书不好</td>
</tr>
<tr>
<td align="left">《气候与人类未来》</td>
<td align="left">比尔.盖茨</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">《史蒂夫.乔布斯传》</td>
<td align="left">沃尔特.艾萨克森</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">《The Code Breaker》</td>
<td align="left">沃尔特.艾萨克森</td>
<td align="left">比尔.盖茨推荐</td>
</tr>
<tr>
<td align="left">《The Programmer’s Brain》</td>
<td align="left">Felienne Hermans</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">《我们为什么要睡觉》</td>
<td align="left">马修.沃克</td>
<td align="left">比尔.盖茨推荐</td>
</tr>
<tr>
<td align="left">《中国装束–大唐女儿行》</td>
<td align="left">左丘萌</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">《读书与书籍》</td>
<td align="left">叔本华</td>
<td align="left"></td>
</tr>
</tbody></table>
<p>《The Code Breaker》这本书讲了基因编辑技术CRISPR的发展历程、该技术在新冠疫情下的运用，以及它带来的道德风险（包括贺建奎主导的基因编辑婴儿）。这本书的作者还写了《乔布斯传》，全书英文读起来很通畅，许多技术细节解释得恰当且正确，看得出来作者是行家。这本书是盖茨叔叔推荐的，值得大家一读，目前中文版还没有，但我估计有出版社在引入翻译了。</p>
<p><img src="https://s4.ax1x.com/2022/01/02/TT1qc4.jpg" alt="codebreaker"></p>
<h4 id="年度消费"><a href="#年度消费" class="headerlink" title="年度消费"></a>年度消费</h4><p>平时使用支付宝、京东、微信消费多一些，很少使用现金了。</p>
<table>
<thead>
<tr>
<th align="left">Month</th>
<th align="left">Alipay</th>
<th align="left">JDPay</th>
<th align="left">Wechat</th>
<th align="left">Total</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><strong>Jan</strong></td>
<td align="left">604.40</td>
<td align="left">8507.88</td>
<td align="left">912.80</td>
<td align="left">10025.08</td>
</tr>
<tr>
<td align="left"><strong>Feb</strong></td>
<td align="left">982.94</td>
<td align="left">698.31</td>
<td align="left">10.07</td>
<td align="left">1691.32</td>
</tr>
<tr>
<td align="left"><strong>Mar</strong></td>
<td align="left">524.90</td>
<td align="left">0.00</td>
<td align="left">35.02</td>
<td align="left">559.92</td>
</tr>
<tr>
<td align="left"><strong>Apr</strong></td>
<td align="left">734.22</td>
<td align="left">123.19</td>
<td align="left">1020.33</td>
<td align="left">1877.74</td>
</tr>
<tr>
<td align="left"><strong>May</strong></td>
<td align="left">914.22</td>
<td align="left">0.00</td>
<td align="left">1156.40</td>
<td align="left">2070.62</td>
</tr>
<tr>
<td align="left"><strong>Jun</strong></td>
<td align="left">1033.40</td>
<td align="left">0.00</td>
<td align="left">1010.41</td>
<td align="left">2043.81</td>
</tr>
<tr>
<td align="left"><strong>Jul</strong></td>
<td align="left">2262.10</td>
<td align="left">0.00</td>
<td align="left">1987.39</td>
<td align="left">4249.49</td>
</tr>
<tr>
<td align="left"><strong>Aug</strong></td>
<td align="left">978.72</td>
<td align="left">84.98</td>
<td align="left">829.88</td>
<td align="left">1893.58</td>
</tr>
<tr>
<td align="left"><strong>Sep</strong></td>
<td align="left">2636.39</td>
<td align="left">0.00</td>
<td align="left">412.43</td>
<td align="left">3048.82</td>
</tr>
<tr>
<td align="left"><strong>Oct</strong></td>
<td align="left">1445.93</td>
<td align="left">100.00</td>
<td align="left">1123.31</td>
<td align="left">2669.24</td>
</tr>
<tr>
<td align="left"><strong>Nov</strong></td>
<td align="left">774.12</td>
<td align="left">0.00</td>
<td align="left">469.00</td>
<td align="left">1243.12</td>
</tr>
<tr>
<td align="left"><strong>Dec</strong></td>
<td align="left">1883.82</td>
<td align="left">133.94</td>
<td align="left">15505.30</td>
<td align="left">17523.06</td>
</tr>
<tr>
<td align="left"><strong>All</strong></td>
<td align="left">14775.16</td>
<td align="left">9648.30</td>
<td align="left">24472.34</td>
<td align="left">48895.80</td>
</tr>
</tbody></table>
<p>具体如下图，支付宝是使用得最频繁的，年首年末消费是高峰期。</p>
<p><img src="https://s4.ax1x.com/2022/01/02/TT8Sqs.png" alt="total"></p>
<h4 id="其他统计数据"><a href="#其他统计数据" class="headerlink" title="其他统计数据"></a>其他统计数据</h4><table>
<thead>
<tr>
<th align="left">项目</th>
<th align="left">内容</th>
<th align="left">备注</th>
</tr>
</thead>
<tbody><tr>
<td align="left">休息天数</td>
<td align="left">41</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">熬夜次数</td>
<td align="left">53</td>
<td align="left">指半夜十二点还未休息</td>
</tr>
<tr>
<td align="left">生病次数</td>
<td align="left">0</td>
<td align="left">连续5年零1月23天未生病</td>
</tr>
<tr>
<td align="left">作梦天数</td>
<td align="left">302</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">碳排放量</td>
<td align="left">2.85吨</td>
<td align="left">以$CO_2$排放当量计[需种30棵树]</td>
</tr>
<tr>
<td align="left">全年天气</td>
<td align="left">217天/123天/25天</td>
<td align="left">晴:阴:雨 = 8.68:4.92:1.0</td>
</tr>
</tbody></table>
<h2 id="年度感想"><a href="#年度感想" class="headerlink" title="年度感想"></a>年度感想</h2><p>又到年终，时间太快了！本以为去年很魔幻，结果今年依然。疫情肆虐，不知哪一年才能好。</p>
<p>父亲去世虽让人难过，但也算意料之外情理之中的事，人都会走的。他们这一代人看着我们长大了，就要离开了，我能做的是按照他生前的愿望把他安埋了。90后，许多都是独生子女，未来都得自己负责把父母送走，这个过程是漫长的。四天几乎不睡觉，又碰上寒潮，最后一天早上还下大雨，又要跪在地上，自己穿得又少，搞下来确实很累，从来没有体会过背上和颈上的肉都开始发酸，僵硬的感觉。</p>
<p>今年毕业了，读了二十多年的书，算是拿到了社会大学的录取通知书。工作和学习还是有很大的不同，工作要看产出，学习则没有这么明显。学习是温水煮青蛙，工作更像炝锅炒菜。不过我目前还维持着学生的学习习惯，工作场所被我看成是换了个地方的教研室。</p>
<p>社会和学校有很大的不同，我认为学生在学校被保护得很好，他们徜徉在一种纯粹的精神世界中，每天学习的是世界通用的知识，他们虽然在中国，但其精神状态更像一个世界人而非中国人。可学生一旦毕业了，到社会了，耳濡目染中国社会的种种好与坏，这时候他们就开始异化了。不需几年，这种改变就将学生们进化成了彻彻底底的中国人，你能在他们身上看到中国人的所有优秀品质。与此同时，不好的品性也滋长了，不然为何那么多高学历犯罪，腐败的呢？</p>
<p>学生时代和社会人时代是两个不同的时代，人是那个人，但事不再一样了。总之，世界与想象不一样，我们得学会适应并前行。就像下面这首歌里唱的一样：“让夜空洒满了星光，Oh 热血躁动在胸膛，世界与想象不一样，Let’s keeping moving on”。</p>
<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=700 height=90 src="//music.163.com/outchain/player?type=2&id=1329719702&auto=1&height=66"></iframe>
]]></content>
      <categories>
        <category>年度报告</category>
      </categories>
  </entry>
  <entry>
    <title>Rust collections 库源码阅读</title>
    <url>/title/8d032879/</url>
    <content><![CDATA[<p><img src="https://s1.ax1x.com/2020/11/07/B5wgat.png" alt="cpygorsdart"></p>
<a id="more"></a>

<p>学习 Rust 一段时间了，最近打算阅读下最常用的数据结构都是怎么构成。Rust 最常用的数据结构都在collections 库里，具体如下：</p>
<ul>
<li>线性: Vec, VecDeque, LinkedList</li>
<li>杂项：BinaryHeap</li>
<li>映射: HashMap, BTreeMap</li>
<li>集合: HashSet, BTreeSet</li>
</ul>
<h3 id="Vec"><a href="#Vec" class="headerlink" title="Vec"></a><a href="https://doc.rust-lang.org/src/alloc/vec/mod.rs.html#398-401" target="_blank">Vec</a></h3><p>Vec 是最常用的数据结构了，基本上涉及类似数组，甚至链表类的操作都可以用 Vec 来解决。Vec 其实就是一个复合体，RawVec 是底层结构，buf 内包含一个指针指向具体值，_marker 是为了欺骗编译器，声明 Unique 拥有 T。Unique 内的 pointer 是 const 的，说明 Vec 内的数据是不可修改的。</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">pub</span> <span class="class"><span class="keyword">struct</span> <span class="title">Vec</span></span>&lt;T, A&gt; &#123;</span><br><span class="line">    buf: RawVec&lt;T,A&gt;,</span><br><span class="line">    len: <span class="built_in">usize</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">pub</span> <span class="class"><span class="keyword">struct</span> <span class="title">RawVec</span></span>&lt;T, A&gt; &#123;</span><br><span class="line">    ptr: Unique&lt;T&gt;,</span><br><span class="line">    cap: <span class="built_in">usize</span>,</span><br><span class="line">    alloc: A,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">pub</span> <span class="class"><span class="keyword">struct</span> <span class="title">Unique</span></span>&lt;T: ?<span class="built_in">Sized</span>&gt; &#123;</span><br><span class="line">    pointer: *<span class="keyword">const</span> T,</span><br><span class="line">    _marker: PhantomData&lt;T&gt;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">pub</span> <span class="class"><span class="keyword">struct</span> <span class="title">PhantomData</span></span>&lt;T: ?<span class="built_in">Sized</span>&gt;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Vec 结构</span></span><br><span class="line">            ptr      len  capacity</span><br><span class="line">       +--------+--------+--------+</span><br><span class="line">       | <span class="number">0x0123</span> |      <span class="number">2</span> |      <span class="number">4</span> |</span><br><span class="line">       +--------+--------+--------+</span><br><span class="line">            |</span><br><span class="line">            v</span><br><span class="line">       +--------+--------+--------+--------+</span><br><span class="line">Heap   |    <span class="string">'a'</span> |    <span class="string">'b'</span> | uninit | uninit |</span><br><span class="line">       +--------+--------+--------+--------+</span><br><span class="line"></span><br><span class="line"><span class="comment">// Vec 自带部分方法</span></span><br><span class="line">new, with_capacity, capacity, len, is_empty, insert, remove, retain, push, pop,</span><br><span class="line">append, clear, from_raw_parts, into_raw_parts, reserve, shrink_to, truncate, </span><br><span class="line">as_slice, as_ptr, swap_remove,</span><br></pre></td></tr></table></figure>

<h3 id="VecDeque"><a href="#VecDeque" class="headerlink" title="VecDeque"></a><a href="https://doc.rust-lang.org/src/alloc/collections/vec_deque/mod.rs.html#94-106" target="_blank">VecDeque</a></h3><p>VecDeque 看起来和 Vec 很像，但是 VecDeque 为了支持头尾数据操作所以添加了 head 和 tail。此外, len, cap 的值和 Vec 中不同。Vec 中 len 和 cap 不一定相等，而 VecDeque 中 len 和 cap 是相等的。</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">pub</span> <span class="class"><span class="keyword">struct</span> <span class="title">VecDeque</span></span>&lt;T, A&gt; &#123;</span><br><span class="line">    tail: <span class="built_in">usize</span>,</span><br><span class="line">    head: <span class="built_in">usize</span>,</span><br><span class="line">    buf: RawVec&lt;T,A&gt;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// VecDeque 结构</span></span><br><span class="line">            ptr      len  capacity</span><br><span class="line">       +--------+--------+--------+</span><br><span class="line">       | <span class="number">0x0123</span> |      <span class="number">4</span> |      <span class="number">4</span> |</span><br><span class="line">       +--------+--------+--------+</span><br><span class="line">            |</span><br><span class="line">            v</span><br><span class="line">       +--------+--------+--------+--------+</span><br><span class="line">Heap   |    <span class="string">'a'</span> |    <span class="string">'b'</span> |    <span class="string">'c'</span> |    <span class="string">'d'</span> |</span><br><span class="line">       +--------+--------+--------+--------+</span><br><span class="line">            ^                           ^</span><br><span class="line">            |                           |</span><br><span class="line">          tail                        head</span><br><span class="line"></span><br><span class="line"><span class="comment">// VecDeque 自带部分方法</span></span><br><span class="line">from, new, with_capacity, append, push_front, push_back, pop_front, pop_back, </span><br><span class="line">insert, remove, extend, get, swap, ptr, capacity, len, is_full, clear, contains,</span><br><span class="line">front, back, reserve, retain, shrink_to, truncate, rotate_left, rotate_right, </span><br><span class="line">binary_search, iter, as_slice</span><br></pre></td></tr></table></figure>

<h3 id="LinkedList"><a href="#LinkedList" class="headerlink" title="LinkedList"></a><a href="https://doc.rust-lang.org/src/alloc/collections/linked_list.rs.html#47-52" target="_blank">LinkedList</a></h3><p>LinkedList 是双向链表，因为节点值可能为空，所以用了 Option 来包装。NonNull<br>是指针，表示数据不能为空。Node 是数据节点，因为是双向的，所以 Node 有头节点和尾节点指针 prev, next。</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">pub</span> <span class="class"><span class="keyword">struct</span> <span class="title">LinkedList</span></span>&lt;T&gt; &#123;</span><br><span class="line">    head: <span class="built_in">Option</span>&lt;NonNull&lt;Node&lt;T&gt;&gt;&gt;,</span><br><span class="line">    tail: <span class="built_in">Option</span>&lt;NonNull&lt;Node&lt;T&gt;&gt;&gt;,</span><br><span class="line">    len: <span class="built_in">usize</span>,</span><br><span class="line">    marker: PhantomData&lt;<span class="built_in">Box</span>&lt;Node&lt;T&gt;&gt;&gt;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span></span>&lt;T&gt; &#123;</span><br><span class="line">    next: <span class="built_in">Option</span>&lt;NonNull&lt;Node&lt;T&gt;&gt;&gt;,</span><br><span class="line">    prev: <span class="built_in">Option</span>&lt;NonNull&lt;Node&lt;T&gt;&gt;&gt;,</span><br><span class="line">    element: T,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">pub</span> <span class="class"><span class="keyword">struct</span> <span class="title">NonNull</span></span>&lt;T: ?<span class="built_in">Sized</span>&gt; &#123;</span><br><span class="line">    pointer: *<span class="keyword">const</span> T,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// LinkedList 结构</span></span><br><span class="line">            head      len   marker    tail</span><br><span class="line">       +---------+----------+---------+----------+</span><br><span class="line">       | <span class="number">0x0123</span>  |     <span class="number">4</span>    | ------  |   <span class="number">0x0126</span> |</span><br><span class="line">       +---------+----------+---------+----------+</span><br><span class="line">          |                                   |</span><br><span class="line">          v                                   v</span><br><span class="line">       +-----+     +-----+     +-----+     +-----+</span><br><span class="line">Nodes  | <span class="string">'a'</span> | &lt;-&gt; | <span class="string">'b'</span> | &lt;-&gt; | <span class="string">'c'</span> | &lt;-&gt; | <span class="string">'d'</span> |</span><br><span class="line">       +-----+     +-----+     +-----+     +-----+</span><br><span class="line"></span><br><span class="line"><span class="comment">// LinkedList 自带部分方法</span></span><br><span class="line">from, new, capacity, len, is_empty, clear, contains, iter, append, front, back,</span><br><span class="line">push_front, push_back, pop_front, pop_back, split_off, remove, extend, hash,</span><br></pre></td></tr></table></figure>

<h3 id="BinaryHeap"><a href="#BinaryHeap" class="headerlink" title="BinaryHeap"></a><a href="https://doc.rust-lang.org/src/alloc/collections/binary_heap.rs.html#259-261" target="_blank">BinaryHeap</a></h3><p>二叉堆，可用于实现优先队列，其底层还是一个数组集合。当然 Rust 采用的是 Vec，因为 Vec 已经支持非常多的操作，用 Vec 来实现比用数组方便。</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">pub</span> <span class="class"><span class="keyword">struct</span> <span class="title">BinaryHeap</span></span>&lt;T&gt; &#123;</span><br><span class="line">    data: <span class="built_in">Vec</span>&lt;T&gt;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">pub</span> <span class="class"><span class="keyword">struct</span> <span class="title">PeekMut</span></span>&lt;<span class="symbol">'a</span>, T: <span class="symbol">'a</span> + <span class="built_in">Ord</span>&gt; &#123;</span><br><span class="line">    heap: &amp;<span class="symbol">'a</span> <span class="keyword">mut</span> BinaryHeap&lt;T&gt;,</span><br><span class="line">    sift: <span class="built_in">bool</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// BinaryHeap 结构</span></span><br><span class="line">                    data</span><br><span class="line">+----------------------------------------------+</span><br><span class="line">|            ptr      len  capacity            |</span><br><span class="line">|        +--------+--------+--------+          |</span><br><span class="line">|        | <span class="number">0x0123</span> |      <span class="number">2</span> |      <span class="number">4</span> |          |</span><br><span class="line">|        +--------+--------+--------+          |</span><br><span class="line">|             |                                |</span><br><span class="line">|             v                                |</span><br><span class="line">|        +--------+--------+--------+--------+ |</span><br><span class="line">| Heap   |    <span class="string">'a'</span> |    <span class="string">'b'</span> | uninit | uninit | |</span><br><span class="line">|        +--------+--------+--------+--------+ |</span><br><span class="line">+----------------------------------------------+</span><br><span class="line"></span><br><span class="line"><span class="comment">// BinaryHeap 自带部分方法</span></span><br><span class="line">from, new, with_capacity, capacity, len, is_empty, clear, peek, peek_mut, pop, push,</span><br><span class="line">append, extend, reserve, retain, shrink_to, iter, as_slice, into_vec, into_sorted_vec,</span><br></pre></td></tr></table></figure>

<h3 id="5-BTreeMap"><a href="#5-BTreeMap" class="headerlink" title="5. BTreeMap"></a>5. <a href="https://doc.rust-lang.org/src/alloc/collections/btree/map.rs.html#157-160" target="_blank">BTreeMap</a></h3><p>BTreeMap 是基于 B 树的 Map。BTreeMap 实现非常复杂，通过下面的实现也可以看到，BTreeMap<br>封装了非常多的数据结构。</p>
<p>首先是 root节点，因为可能为空，所以也用了 Option 来包裹。而 Root 要引用子节点，所以 Root 用 NodeRef来表示。子节点中存有值和父节点的索引和id，而节点可能没有父节点，所以 parent 和 parent_idx 都用的可能为空的类型，MaybeUninit 表示值可能未初始化。InternalNode 表示非叶子和根节点的节点。</p>
<p>2 * B 定义了中间节点的子节点个数最大值。CAPACITY 表示一个叶节点最多可以保存多少数据，因为叶节点可能连接新的子节点，所以需要留出至少一个空位来保存链接，所以 CAPACITY = 2 * B -1 </p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">pub</span> <span class="class"><span class="keyword">struct</span> <span class="title">BTreeMap</span></span>&lt;K, V&gt; &#123;</span><br><span class="line">    root: <span class="built_in">Option</span>&lt;Root&lt;K, V&gt;&gt;,</span><br><span class="line">    length: <span class="built_in">usize</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">pub</span> <span class="class"><span class="keyword">type</span> <span class="title">Root</span></span>&lt;K, V&gt; = NodeRef&lt;marker::Owned, K, V, marker::LeafOrInternal&gt;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">pub</span> <span class="class"><span class="keyword">struct</span> <span class="title">NodeRef</span></span>&lt;BorrowType, K, V, Type&gt; &#123;</span><br><span class="line">    height: <span class="built_in">usize</span>,</span><br><span class="line">    node: NonNull&lt;LeafNode&lt;K, V&gt;&gt;,</span><br><span class="line">    _marker: PhantomData&lt;(BorrowType, Type)&gt;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">LeafNode</span></span>&lt;K, V&gt; &#123;</span><br><span class="line">    parent: <span class="built_in">Option</span>&lt;NonNull&lt;InternalNode&lt;K, V&gt;&gt;&gt;,</span><br><span class="line">    parent_idx: MaybeUninit&lt;<span class="built_in">u16</span>&gt;,</span><br><span class="line">    len: <span class="built_in">u16</span>,</span><br><span class="line">    keys: [MaybeUninit&lt;K&gt;; CAPACITY],</span><br><span class="line">    vals: [MaybeUninit&lt;V&gt;; CAPACITY],</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">InternalNode</span></span>&lt;K, V&gt; &#123;</span><br><span class="line">    data: LeafNode&lt;K, V&gt;,</span><br><span class="line">    edges: [MaybeUninit&lt;BoxedNode&lt;K,V&gt;&gt;; <span class="number">2</span> * B],</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">type</span> <span class="title">BoxedNode</span></span>&lt;K, V&gt; = NonNull&lt;LeafNode&lt;K, V&gt;&gt;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> B: <span class="built_in">usize</span> = <span class="number">6</span>;</span><br><span class="line"><span class="keyword">pub</span> <span class="keyword">const</span> CAPACITY: <span class="built_in">usize</span> = <span class="number">2</span> * B - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// BTreeMap 自带部分方法</span></span><br><span class="line">from, new, len, is_empty, insert, get, take, replace, contains_key, append, remove,</span><br><span class="line">clear, pop_first, pop_last, entry, first_entry, last_entry, split_off, into_keys,</span><br><span class="line">into_values, retian, extend, iter, hash, cmp, keys, values,</span><br></pre></td></tr></table></figure>

<h3 id="6-BTreeSet"><a href="#6-BTreeSet" class="headerlink" title="6. BTreeSet"></a>6. <a href="https://doc.rust-lang.org/src/alloc/collections/btree/set.rs.html#73-75" target="_blank">BTreeSet</a></h3><p>BTreeSet 只保存 Key，所以可以将 BTreeMap 的 Value 一项置空 ()，这样就完成了 BTreeSet 的定义。因为 () 是空，所以不影响 BTreeMap 的操作。</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">pub</span> <span class="class"><span class="keyword">struct</span> <span class="title">BTreeSet</span></span>&lt;T&gt; &#123;</span><br><span class="line">    map: BTreeMap&lt;T, ()&gt;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// BTreeSet 自带部分方法</span></span><br><span class="line">from, new, len, is_empty, range, difference, symmetric_difference, intersection, <span class="class"><span class="keyword">union</span>,</span></span><br><span class="line"><span class="class"><span class="title">get</span></span>, insert, take, append, replace, remove, clear, first, last, pop_first, pop_last,</span><br><span class="line">contains, is_disjoint, is_subset, is_superset, retain, split_off, iter, extend, -, ^, +, |,</span><br></pre></td></tr></table></figure>

<h3 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap"></a><a href="https://doc.rust-lang.org/src/std/collections/hash/map.rs.html#209-211" target="_blank">HashMap</a></h3><p>HashMap 是基于 hashbrown 中的 Hash 表来实现的，S 是哈希状态函数。其中哈希表是 RawTable，marker 保存了数据，而 RawTableInner 定义了多个量来控制哈希增长等变化。</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">pub</span> <span class="class"><span class="keyword">struct</span> <span class="title">HashMap</span></span>&lt;K, V, S = RandomState&gt; &#123;</span><br><span class="line">    base: hashbrown::hash_map::HashMap&lt;K, V, S&gt;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">pub</span> <span class="class"><span class="keyword">struct</span> <span class="title">RandomState</span></span> &#123;</span><br><span class="line">    k0: <span class="built_in">u64</span>, </span><br><span class="line">    k1: <span class="built_in">u64</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">hashbrown::hash_map::HashMap</span><br><span class="line"><span class="keyword">pub</span> <span class="class"><span class="keyword">struct</span> <span class="title">HashMap</span></span>&lt;K, V, S = DefaultHashBuilder, A: Global&gt; &#123;</span><br><span class="line">    <span class="keyword">pub</span>(<span class="keyword">crate</span>) hash_builder: S,</span><br><span class="line">    <span class="keyword">pub</span>(<span class="keyword">crate</span>) table: RawTable&lt;(K, V), A&gt;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">pub</span> <span class="class"><span class="keyword">struct</span> <span class="title">RawTable</span></span>&lt;T, A: Global&gt; &#123;</span><br><span class="line">    table: RawTableInner&lt;A&gt;,</span><br><span class="line">    marker: PhantomData&lt;T&gt;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">pub</span> <span class="class"><span class="keyword">struct</span> <span class="title">RawTableInner</span></span>&lt;A&gt; &#123;</span><br><span class="line">    bucket_mask: <span class="built_in">usize</span>,</span><br><span class="line">    ctrl: NonNull&lt;<span class="built_in">u8</span>&gt;,</span><br><span class="line">    growth_left: <span class="built_in">usize</span>,</span><br><span class="line">    items: <span class="built_in">usize</span>,</span><br><span class="line">    alloc: A,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// HashMap 自带部分方法</span></span><br><span class="line">from, new, with_capacity, with_hasher, capacity, len, is_empty, hasher, keys, values,</span><br><span class="line">entry, get, contains_key, insert, iter, drain, clear, remove, reserve, retain, shrink_to, </span><br><span class="line">into_keys, into_values, extend,</span><br></pre></td></tr></table></figure>

<h3 id="HashSet"><a href="#HashSet" class="headerlink" title="HashSet"></a><a href="https://doc.rust-lang.org/src/std/collections/hash/set.rs.html#112-114" target="_blank">HashSet</a></h3><p>和 BTreeSet 类似，HashSet 基于 HashMap 构建，结构非常简单。</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line">pubstruct HashSet&lt;T, S = RandomState&gt; &#123;</span><br><span class="line">    base: hashbrown::hash_set::HashSet&lt;T, S&gt;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">hashbrown::hash_set::HashSet</span><br><span class="line"><span class="keyword">pub</span> <span class="class"><span class="keyword">struct</span> <span class="title">HashSet</span></span>&lt;K, S = DefaultHashBuilder, A: Global&gt; &#123;</span><br><span class="line">    <span class="keyword">pub</span>(<span class="keyword">crate</span>) map: hashbrown::hash_map::HashMap&lt;T, (), S, A&gt;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// HashSet 自带部分方法</span></span><br><span class="line">from, new, with_capacity, with_hasher, capacity, len, is_empty, difference, </span><br><span class="line">symmetric_difference, intersection, <span class="class"><span class="keyword">union</span>, <span class="title">drain</span></span>, hasher, reserve, get, insert, </span><br><span class="line">take, replace, remove, clear, contains, shrink_to, is_disjoint, is_subset, </span><br><span class="line">is_superset, retain, iter, extend, -, ^, +, |,</span><br></pre></td></tr></table></figure>

<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>分析上述多个数据结构，我们发现 Vec 和 PhantomData 比较常用，大量的数据正是通过这两种数据结构来保存。</p>
]]></content>
      <categories>
        <category>编程语言</category>
        <category>源码阅读</category>
      </categories>
      <tags>
        <tag>Rust</tag>
      </tags>
  </entry>
  <entry>
    <title>2020个人年度报告</title>
    <url>/title/ece22f96/</url>
    <content><![CDATA[<p><img src="https://s3.ax1x.com/2020/12/31/rvkqlF.png" alt="2020report"></p>
<a id="more"></a>

<h2 id="年度日历"><a href="#年度日历" class="headerlink" title="年度日历"></a>年度日历</h2><p><strong>01.01</strong>  UESTC Wed<br>  在知乎发表首篇文章。<br><strong>01.07</strong>  UESTC Tue<br>  首次安装使用UOS。<br><strong>01.12</strong>  UESTC Sun<br>  同张珏鑫和吕矣铭川大旁吃烧烤。<br><strong>01.23</strong>  UESTC Thu<br>  第一次录制视频并上传B站。<br><strong>01.24</strong>  UESTC Fri<br>  同白景瑞微信通话。<br><strong>01.25</strong>  UESTC Sat<br>  编写冠状病毒统计程序。<br><strong>02.04</strong>  UESTC Tue<br>  学习微信小程序开发。<br><strong>03.10</strong>  UESTC Fri<br>  第一次学习Go语言。<br><strong>03.13</strong>  UESTC Fri<br>  首次刷牛客网算法题。<br><strong>05.03</strong>  UESTC Sun<br>  学习《标准日本语中级》。<br><strong>06.09</strong>  UESTC Tue<br>  参加师兄姐毕业聚餐及活动。<br><strong>06.14</strong>  UESTC Sun<br>  阅读CoolShell网站博客内容。<br><strong>06.19</strong>  UESTC Fri<br>  参加丁孝翔师兄婚礼聚餐。<br><strong>06.28</strong>  UESTC Sun<br>  浏览飞雪无情博客。<br><strong>06.29</strong>  UESTC Mon<br>  首次学习Rust语言。<br><strong>07.11</strong>  UESTC Sat<br>  首次学习Dart语法。<br><strong>07.16</strong>  UESTC Thu<br>  了解IPFS。<br><strong>07.20</strong>  UESTC Mon<br>  了解K8S。<br><strong>08.03</strong>  UESTC Mon<br>  参加华为面试。<br><strong>08.08</strong>  UESTC Sat<br>  首次学习量子语言Silq。<br><strong>08.29</strong>  UESTC Sat<br>  了解TiDB。<br><strong>11.07</strong>  UESTC Sat<br>  陪李捷游览电科。<br><strong>11.19</strong>  UESTC Thu<br>  去医院体检。<br><strong>11.21</strong>  UESTC Sat<br>  参加DevOps大会。<br><strong>12.17</strong>  UESTC Thu<br>  开始写毕业论文。 </p>
<h2 id="年度感受"><a href="#年度感受" class="headerlink" title="年度感受"></a>年度感受</h2><p>又到年终，时间太快了！今年因为疫情，被封锁在学校长达半年之久，从2019.5.12到今天2020.12.31共600天了，还没回过家。2020是魔幻的一年，封锁的一年，人类社会被疫情重构，数字化进程不断加快，整个社会开始了远程工作，学习，交流。</p>
<h2 id="年度音乐"><a href="#年度音乐" class="headerlink" title="年度音乐"></a>年度音乐</h2><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=330 height=86 src="//music.163.com/outchain/player?type=2&id=31789216&auto=1&height=66"></iframe>

<p><strong>2020年度音乐10首</strong> <a href="https://music.163.com/#/playlist?id=5415023575" target="_blank" rel="noopener">网易云歌单</a></p>
<table>
<thead>
<tr>
<th align="left">曲目</th>
<th align="left">歌手</th>
</tr>
</thead>
<tbody><tr>
<td align="left">采薇</td>
<td align="left">张渠</td>
</tr>
<tr>
<td align="left">执羽</td>
<td align="left">张渠</td>
</tr>
<tr>
<td align="left">That Very Night</td>
<td align="left">Deep East</td>
</tr>
<tr>
<td align="left">逍遥</td>
<td align="left">张渠</td>
</tr>
<tr>
<td align="left">书简</td>
<td align="left">张渠</td>
</tr>
<tr>
<td align="left">走过咖啡屋</td>
<td align="left">米雅</td>
</tr>
<tr>
<td align="left">玉人</td>
<td align="left">张渠</td>
</tr>
<tr>
<td align="left">Go It In You</td>
<td align="left">BANNERS</td>
</tr>
<tr>
<td align="left">夜猫</td>
<td align="left">张蔷</td>
</tr>
<tr>
<td align="left">总有一天我会欺骗你</td>
<td align="left">张蔷</td>
</tr>
</tbody></table>
<h2 id="年度视频"><a href="#年度视频" class="headerlink" title="年度视频"></a>年度视频</h2><p>这三个是2020年看的视频里面我觉得最优秀的。第一个舞剧《孔子》展现中国舞蹈的魅力，其中《采薇》最为精彩。第二个是《让子弹飞》的重制作，非常优秀。第三个是建国70周年献礼，拍出了祖国大好河山。</p>
<div style="position: relative; padding: 30% 45%;">
<iframe style="position: absolute; width: 100%; height: 100%; left: 0; top: 0;" src="//player.bilibili.com/player.html?aid=25674897&bvid=BV13s411j7GK&cid=43905521&page=11&as_wide=1&high_quality=1&danmaku=0" scrolling="no" frameborder="no" allowfullscreen="true"> </iframe>
</div>

<div style="position: relative; padding: 30% 45%;">
<iframe style="position: absolute; width: 100%; height: 100%; left: 0; top: 0;" src="//player.bilibili.com/player.html?aid=626357031&bvid=BV1yt4y1Q7SS&cid=210738676&page=1&as_wide=1&high_quality=1&danmaku=0" scrolling="no" frameborder="no" allowfullscreen="true"> </iframe>
</div>

<div style="position: relative; padding: 30% 45%;">
<iframe style="position: absolute; width: 100%; height: 100%; left: 0; top: 0;" src="//player.bilibili.com/player.html?aid=69241910&bvid=BV19E41197Kc&cid=121296106&page=2&as_wide=1&high_quality=1&danmaku=0" scrolling="no" frameborder="no" allowfullscreen="true"> </iframe>
</div>

<h2 id="年度观影"><a href="#年度观影" class="headerlink" title="年度观影   "></a>年度观影   </h2><table>
<thead>
<tr>
<th align="center">序号</th>
<th align="left">名称</th>
<th align="center">序号</th>
<th align="left">名称</th>
</tr>
</thead>
<tbody><tr>
<td align="center">1</td>
<td align="left">《琅琊榜》</td>
<td align="center">30</td>
<td align="left">《巴顿将军》</td>
</tr>
<tr>
<td align="center">2</td>
<td align="left">《长安十二时辰》</td>
<td align="center">31</td>
<td align="left">《杀出个黎明》</td>
</tr>
<tr>
<td align="center">3</td>
<td align="left">《爱情公寓5》</td>
<td align="center">32</td>
<td align="left">《钢铁侠》</td>
</tr>
<tr>
<td align="center">4</td>
<td align="left">《生活大爆炸》</td>
<td align="center">33</td>
<td align="left">《复仇者联盟》</td>
</tr>
<tr>
<td align="center">5</td>
<td align="left">《纸牌屋》</td>
<td align="center">34</td>
<td align="left">《木乃伊》</td>
</tr>
<tr>
<td align="center">6</td>
<td align="left">《犬夜叉》</td>
<td align="center">35</td>
<td align="left">《变形金刚》</td>
</tr>
<tr>
<td align="center">7</td>
<td align="left">《神衣喜来乐》</td>
<td align="center">36</td>
<td align="left">《登月第一人》</td>
</tr>
<tr>
<td align="center">8</td>
<td align="left">《御前四宝》</td>
<td align="center">37</td>
<td align="left">《星际迷航》</td>
</tr>
<tr>
<td align="center">9</td>
<td align="left">《倚天屠龙记》</td>
<td align="center">38</td>
<td align="left">《猩球崛起》</td>
</tr>
<tr>
<td align="center">10</td>
<td align="left">《天龙八部》</td>
<td align="center">39</td>
<td align="left">《雷神》</td>
</tr>
<tr>
<td align="center">11</td>
<td align="left">《隐秘的角落》</td>
<td align="center">40</td>
<td align="left">《死神来了》</td>
</tr>
<tr>
<td align="center">12</td>
<td align="left">《沉默的真相》</td>
<td align="center">41</td>
<td align="left">《赤壁》</td>
</tr>
<tr>
<td align="center">13</td>
<td align="left">《大宋提刑官》</td>
<td align="center">42</td>
<td align="left">《V字仇杀队》</td>
</tr>
<tr>
<td align="center">14</td>
<td align="left">《大宋提刑官》</td>
<td align="center">43</td>
<td align="left">《加勒比海盗》</td>
</tr>
<tr>
<td align="center">15</td>
<td align="left">《龙门镖局》</td>
<td align="center">44</td>
<td align="left">《黑衣人》</td>
</tr>
<tr>
<td align="center">16</td>
<td align="left">《是、大臣》</td>
<td align="center">45</td>
<td align="left">《大独裁者》</td>
</tr>
<tr>
<td align="center">17</td>
<td align="left">《是、首相》</td>
<td align="center">46</td>
<td align="left">《摩登时代》</td>
</tr>
<tr>
<td align="center">18</td>
<td align="left">《阿Q正传》</td>
<td align="center">47</td>
<td align="left">《八佰》</td>
</tr>
<tr>
<td align="center">19</td>
<td align="left">《囧妈》</td>
<td align="center">48</td>
<td align="left">《末代皇帝》</td>
</tr>
<tr>
<td align="center">20</td>
<td align="left">《星际穿越》</td>
<td align="center">49</td>
<td align="left">《举起手来》</td>
</tr>
<tr>
<td align="center">21</td>
<td align="left">《2001太空漫游》</td>
<td align="center">50</td>
<td align="left">《让子弹飞》</td>
</tr>
<tr>
<td align="center">22</td>
<td align="left">《夺宝奇兵》</td>
<td align="center">51</td>
<td align="left">《我不是药神》</td>
</tr>
<tr>
<td align="center">23</td>
<td align="left">《指环王》</td>
<td align="center">52</td>
<td align="left">《太阳照常升起》</td>
</tr>
<tr>
<td align="center">24</td>
<td align="left">《终结者》</td>
<td align="center">53</td>
<td align="left">《鬼子来了》</td>
</tr>
<tr>
<td align="center">25</td>
<td align="left">《泰坦尼克号》</td>
<td align="center">54</td>
<td align="left">《邪不压正》</td>
</tr>
<tr>
<td align="center">26</td>
<td align="left">《星球大战》</td>
<td align="center">55</td>
<td align="left">《饮食男女》</td>
</tr>
<tr>
<td align="center">27</td>
<td align="left">《杀死比尔》</td>
<td align="center">56</td>
<td align="left">《疯狂的石头》</td>
</tr>
<tr>
<td align="center">28</td>
<td align="left">《教父》</td>
<td align="center">57</td>
<td align="left">《唐伯虎点秋香》</td>
</tr>
<tr>
<td align="center">29</td>
<td align="left">《大逃杀》</td>
<td align="center">58</td>
<td align="left">《心灵奇旅》</td>
</tr>
</tbody></table>
<h2 id="年度图片"><a href="#年度图片" class="headerlink" title="年度图片"></a>年度图片</h2><p><img src="https://s3.ax1x.com/2020/12/31/rvmyYn.png" alt="2020"></p>
<h2 id="年度书籍"><a href="#年度书籍" class="headerlink" title="年度书籍"></a>年度书籍</h2><p>《论法的精神》–孟德斯鸠</p>
<p>孟德斯鸠在本书中阐述了自然法理论、法和法律定义，法律与政体关系，以及政体分类、各种政体的性质和原则等问题。提出了政治自由和三权分立学说。我认为这些思想正是当今中国人迫切需要的。</p>
<p><img src="https://s3.ax1x.com/2020/12/31/rvmOOO.jpg" alt="lfdjs"></p>
<p><strong>阅读书籍108本</strong>   </p>
<table>
<thead>
<tr>
<th align="left">书名</th>
<th align="left">作者</th>
</tr>
</thead>
<tbody><tr>
<td align="left">《飘》</td>
<td align="left">玛格丽特・米切尔</td>
</tr>
<tr>
<td align="left">《谣言》</td>
<td align="left">让・诺埃尔・卡普费雷</td>
</tr>
<tr>
<td align="left">《君主论》</td>
<td align="left">尼科洛・马基雅维里</td>
</tr>
<tr>
<td align="left">《战争论》</td>
<td align="left">克劳塞维茨</td>
</tr>
<tr>
<td align="left">《思想录》</td>
<td align="left">帕斯卡尔</td>
</tr>
<tr>
<td align="left">《双脑记》</td>
<td align="left">迈克尔・加扎尼加</td>
</tr>
<tr>
<td align="left">《人性论》</td>
<td align="left">大卫・休谟</td>
</tr>
<tr>
<td align="left">《英语史》</td>
<td align="left">李赋宁</td>
</tr>
<tr>
<td align="left">《政府论》</td>
<td align="left">洛克</td>
</tr>
<tr>
<td align="left">《公众舆论》</td>
<td align="left">沃尔特・李普曼</td>
</tr>
<tr>
<td align="left">《狂热分子》</td>
<td align="left">埃里克・霍弗</td>
</tr>
<tr>
<td align="left">《我的奋斗》</td>
<td align="left">希特勒</td>
</tr>
<tr>
<td align="left">《语言本能》</td>
<td align="left">史蒂芬・平克</td>
</tr>
<tr>
<td align="left">《千面英雄》</td>
<td align="left">坎贝尔</td>
</tr>
<tr>
<td align="left">《传统十论》</td>
<td align="left">秦晖</td>
</tr>
<tr>
<td align="left">《翻译研究》</td>
<td align="left">思果</td>
</tr>
<tr>
<td align="left">《丰乳肥臀》</td>
<td align="left">莫言</td>
</tr>
<tr>
<td align="left">《翻译乃大道》</td>
<td align="left">余光中</td>
</tr>
<tr>
<td align="left">《追风筝的人》</td>
<td align="left">卡勒德・胡赛尼</td>
</tr>
<tr>
<td align="left">《身份的焦虑》</td>
<td align="left">阿兰・德波顿</td>
</tr>
<tr>
<td align="left">《蒙田随笔集》</td>
<td align="left">米歇尔・蒙田</td>
</tr>
<tr>
<td align="left">《培根人生论》</td>
<td align="left">培根</td>
</tr>
<tr>
<td align="left">《论法的精神》</td>
<td align="left">孟德斯鸠</td>
</tr>
<tr>
<td align="left">《我的世界观》</td>
<td align="left">爱因斯坦</td>
</tr>
<tr>
<td align="left">《国家与革命》</td>
<td align="left">列宁</td>
</tr>
<tr>
<td align="left">《金字塔原理》</td>
<td align="left">芭芭拉</td>
</tr>
<tr>
<td align="left">《毛泽东选集》</td>
<td align="left">毛泽东</td>
</tr>
<tr>
<td align="left">《什么是数学》</td>
<td align="left">柯朗</td>
</tr>
<tr>
<td align="left">《当下的力量》</td>
<td align="left">埃克哈特• 托利</td>
</tr>
<tr>
<td align="left">《沉默的大多数》</td>
<td align="left">王小波</td>
</tr>
<tr>
<td align="left">《追随直觉之路》</td>
<td align="left">坎贝尔</td>
</tr>
<tr>
<td align="left">《通往奴役之路》</td>
<td align="left">哈耶克</td>
</tr>
<tr>
<td align="left">《中式英语之鉴》</td>
<td align="left">平卡姆</td>
</tr>
<tr>
<td align="left">《做生意的艺术》</td>
<td align="left">唐纳德・特朗普</td>
</tr>
<tr>
<td align="left">《演员自我修养》</td>
<td align="left">斯坦尼斯拉夫斯基</td>
</tr>
<tr>
<td align="left">《八十天环游地球》</td>
<td align="left">儒勒・凡尔纳</td>
</tr>
<tr>
<td align="left">《旧制度与大革命》</td>
<td align="left">托克维尔</td>
</tr>
<tr>
<td align="left">《普通语言学教程》</td>
<td align="left">索绪尔</td>
</tr>
<tr>
<td align="left">《科学革命的结构》</td>
<td align="left">托马斯・库恩</td>
</tr>
<tr>
<td align="left">《中国文化的展望》</td>
<td align="left">殷海光</td>
</tr>
<tr>
<td align="left">《来自中国的礼物》</td>
<td align="left">亨利・尼科尔斯</td>
</tr>
<tr>
<td align="left">《中国的当下与未来》</td>
<td align="left">郑永年</td>
</tr>
<tr>
<td align="left">《我们赖以生存的隐喻》</td>
<td align="left">莱考夫/詹森</td>
</tr>
<tr>
<td align="left">《历史的终结及最后之人》</td>
<td align="left">弗朗西斯・福山</td>
</tr>
<tr>
<td align="left">《改变心理学的40项研究》</td>
<td align="left">罗杰・R・霍克</td>
</tr>
<tr>
<td align="left">《超级符号就是超级创意》</td>
<td align="left">华杉</td>
</tr>
<tr>
<td align="left">略…</td>
<td align="left">略…</td>
</tr>
<tr>
<td align="left">《A history of language》</td>
<td align="left">Steven Roger Fischer</td>
</tr>
<tr>
<td align="left">《论个人在历史上的作用问题》</td>
<td align="left">普列汉诺夫</td>
</tr>
</tbody></table>
<h2 id="年度消费"><a href="#年度消费" class="headerlink" title="年度消费"></a>年度消费</h2><p><strong>支付宝全年消费</strong></p>
<p><img src="https://s3.ax1x.com/2020/12/31/rvKJY9.png" alt="alipay"></p>
<p><strong>微信全年消费</strong></p>
<p><img src="https://s3.ax1x.com/2020/12/31/rvKDTe.png" alt="wechat"></p>
<p><strong>京东全年消费</strong></p>
<p><img src="https://s3.ax1x.com/2020/12/31/rvK2lt.png" alt="jdpay"></p>
<p><strong>三家合计消费</strong></p>
<p><img src="https://s3.ax1x.com/2020/12/31/rvKR6P.png" alt="total"></p>
<h2 id="年度技能树"><a href="#年度技能树" class="headerlink" title="年度技能树"></a>年度技能树</h2><p><img src="https://s3.ax1x.com/2020/12/31/rvUefK.png" alt="skills2020"></p>
<h2 id="工作时间统计"><a href="#工作时间统计" class="headerlink" title="工作时间统计"></a>工作时间统计</h2><table>
<thead>
<tr>
<th align="left">条目</th>
<th align="left">内容</th>
</tr>
</thead>
<tbody><tr>
<td align="left">一季度</td>
<td align="left">1041.40h(11h26m/天)</td>
</tr>
<tr>
<td align="left">二季度</td>
<td align="left">1058.70h(11h38m/天)</td>
</tr>
<tr>
<td align="left">三季度</td>
<td align="left">945.30h (10h16m/天)</td>
</tr>
<tr>
<td align="left">四季度</td>
<td align="left">951.85h (10h20m/天)</td>
</tr>
<tr>
<td align="left">全年工时</td>
<td align="left">3997.25h(10h57m/天)</td>
</tr>
</tbody></table>
<p><img src="https://s3.ax1x.com/2020/12/31/rvlPL6.png" alt="time"></p>
<h2 id="其他统计数据"><a href="#其他统计数据" class="headerlink" title="其他统计数据"></a>其他统计数据</h2><table>
<thead>
<tr>
<th align="left">条目</th>
<th align="left">内容</th>
</tr>
</thead>
<tbody><tr>
<td align="left">生病次数</td>
<td align="left">0</td>
</tr>
<tr>
<td align="left">通宵次数</td>
<td align="left">0</td>
</tr>
<tr>
<td align="left">熬夜次数</td>
<td align="left">123</td>
</tr>
<tr>
<td align="left">新加好友</td>
<td align="left">25 (女:6，男:19)</td>
</tr>
<tr>
<td align="left">自由指数</td>
<td align="left">6.0</td>
</tr>
<tr>
<td align="left">健康指数</td>
<td align="left">8.0</td>
</tr>
<tr>
<td align="left">性福指数</td>
<td align="left">0.0</td>
</tr>
<tr>
<td align="left">幸福指数</td>
<td align="left">8.5</td>
</tr>
<tr>
<td align="left">休息天数</td>
<td align="left">10</td>
</tr>
<tr>
<td align="left">全年晴天</td>
<td align="left">123天</td>
</tr>
<tr>
<td align="left">全年阴天</td>
<td align="left">213天</td>
</tr>
<tr>
<td align="left">全年雨天</td>
<td align="left">29天</td>
</tr>
<tr>
<td align="left">阴晴雨比</td>
<td align="left">7.34:4.24:1.0</td>
</tr>
<tr>
<td align="left">统计地点</td>
<td align="left">清水河</td>
</tr>
<tr>
<td align="left">统计时段</td>
<td align="left">2020.01.01~2020.12.31</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>年度报告</category>
      </categories>
  </entry>
  <entry>
    <title>2020年度新闻</title>
    <url>/title/3ccde953/</url>
    <content><![CDATA[<p><img src="https://s3.ax1x.com/2020/12/31/rvPMqI.png" alt="2020"></p>
<a id="more"></a>

<h2 id="年度人物"><a href="#年度人物" class="headerlink" title="年度人物"></a>年度人物</h2><p>(0) 李文亮<br>(1) 张继先<br>(2) 钟南山<br>(3) 张文宏<br>(4) 李兰娟<br>(5) 张定宇<br>(6) 樊锦诗<br>(7) 陈薇<br>(8) 韩红<br>(9) 耿爽  </p>
<h2 id="年度关键词"><a href="#年度关键词" class="headerlink" title="年度关键词"></a>年度关键词</h2><p>(0) 疫情<br>(2) 封锁<br>(3) 口罩<br>(4) 回国<br>(5) 反垄断<br>(6) 探月探火<br>(1) 全面小康<br>(7) 中美关系<br>(8) 复工复产<br>(9) 远程工作  </p>
<h2 id="十大新词语"><a href="#十大新词语" class="headerlink" title="十大新词语"></a>十大新词语</h2><p>(0) 新冠<br>(1) 内卷<br>(2) 云监工<br>(3) 打工人<br>(4) 尾款人<br>(5) 云监工<br>(6) 新基建<br>(7) 网抑云<br>(8) 社交隔离<br>(9) 凡尔赛文学  </p>
<h2 id="年度流行语"><a href="#年度流行语" class="headerlink" title="年度流行语"></a>年度流行语</h2><p>(0) 逆行<br>(1) 后浪<br>(2) 熔断<br>(3) 带货<br>(4) 内卷<br>(5) 内循环<br>(6) 打工人<br>(7) 工具人<br>(8) 专业团队<br>(9) 凡尔赛文学  </p>
<h2 id="年度新闻"><a href="#年度新闻" class="headerlink" title="年度新闻"></a>年度新闻</h2><p><strong>2020.01.01</strong> Wed<br>    (1) Python2退役，官方建议迁移到Python3。<br>    (2) 长江流域332个水生生物保护区禁渔十年，今起执行。<br><strong>2020.01.03</strong> Fri<br>    (1) 国产HPV疫苗上市。<br>    (2) 武汉发现不明原因病毒性肺炎病例。<br>    (3) 国际学术刊物刊文表明：长江白鲟已灭绝。<br><strong>2020.01.05</strong> Sun<br>    (1) Wi-Fi联盟公布Wi-Fi 6E标准，扩展至6GHz频段。<br><strong>2020.01.08</strong> Wed<br>    (1) 一客机在伊朗坠毁，176人全部遇难。<br><strong>2020.01.11</strong> Sat<br>    (1) 台湾地区领导人选举，蔡英文获胜。<br><strong>2020.01.14</strong> Tue<br>    (1) 微软终止对windows7的支持。<br><strong>2020.01.15</strong> Wed<br>    (1) 俄罗斯政府全体辞职。<br>    (2) 中美第一阶段经贸协议正式签署。<br>    (3) 微软正式推出基于Chromium的Edge浏览器。<br>    (4) 统信软件正式发布国产操作系统UOS，适配多款国产CPU。<br><strong>2020.01.16</strong> Thu<br>    (1) 京沪高铁上市。<br>    (2) 前央视主持人赵忠祥在其生日当天去世，享年78周岁整。<br><strong>2020.01.17</strong> Fri<br>    (1) 国家统计局公布人口数据：2019年末全国人口14.0005亿，全年新生人口1465万，出生率10.48‰，死亡998万，新增467万人，男71527万，女68478万。<br><strong>2020.01.20</strong> Mon<br>    (1) 钟南山披露疫情，宣布病毒肯定会人传人，要求国民居家隔离，佩戴口罩。<br><strong>2020.01.23</strong> Thu<br>    (1) 武汉因冠状病毒封锁交通。<br><strong>2020.01.26</strong> Mon<br>    (1) 著名NBA球星科比.布莱恩特坠机逝世，终年41岁。<br><strong>2020.01.27</strong> Tue<br>    (1) 国务院总理李克强赴武汉考察指导疫情防控工作。<br><strong>2020.01.30</strong> Thu<br>    (1) 世卫组织宣布中国新型冠状病毒肺炎疫情构成“国际突发公共卫生事件”。<br><strong>2020.02.02</strong> Sun<br>    (1) 武汉火神山医院建成交付。<br><strong>2020.02.03</strong> Mon<br>    (1) 成都发生5.1级地震。<br><strong>2020.02.07</strong> Fri<br>    (1) 疫情吹哨人物李文亮，因新冠肺炎抢救无效于凌晨2点逝世，年仅34岁。<br><strong>2020.02.17</strong> Mon<br>    (1) 联合国粮农组织发布报告显示，西非、东非和南亚20多个国家受到蝗灾。<br><strong>2020.02.19</strong> Thu<br>    (1) Adobe Photoshop 软件发布三十周年。<br><strong>2020.02.20</strong> Fri<br>    (1) 日韩两国冠状病毒感染人数增加，疫情严峻。<br><strong>2020.02.23</strong> Mon<br>    (1) 微盟核心数据遭员工删除，大量服务不可用。<br><strong>2020.02.29</strong> Sat<br>    (1) 美国和塔利班签订和平协议，美军18个月内完成撤军。<br><strong>2020.03.04</strong> Wed<br>    (1) 中共召开会议，强调推进新基建。<br><strong>2020.03.09</strong> Mon<br>    (1) 受冠状病毒影响，国际油价重挫近30%，美股融断。<br><strong>2020.03.11</strong> Wed<br>    (1) 世卫组织宣布冠状病毒构成“全球大流行”。<br><strong>2020.03.16</strong> Mon<br>    (1) 美国股市开盘跌停，收盘跌12.93%，创33年来最大跌幅，恐慌进一步加剧。<br><strong>2020.03.18</strong> Wed<br>    (1) 中国海油发布公告宣布在渤海湾发现大型油田。<br><strong>2020.03.26</strong> Thu<br>    (1) G20国家领导人参加视频会议，讨论全球应对冠状病毒。<br><strong>2020.03.30</strong> Mon<br>    (1) 凉山州西昌市泸山、木里县等地发生森林火灾，造成19名扑火人员遇难。<br><strong>2020.03.31</strong> Tue<br>    (1) 2020日本奥运会决定于2021年7月23日开幕。<br><strong>2020.04.01</strong> Wed<br>    (1) 中印建交70周年纪念日。<br><strong>2020.04.02</strong> Thu<br>    (1) 瑞幸咖啡发布公告，承认虚假交易22亿人民币。<br><strong>2020.04.04</strong> Sat<br>    (1) 清明节，国家哀悼日。<br>    (2) 全球新冠肺炎感染超100万人。<br><strong>2020.04.08</strong> Wed<br>    (1) 移动、联通、电信三大运营商联合宣布将推出5G消息服务。<br><strong>2020.04.21</strong> Tue<br>    (1) 国际油价跌入负值，中国银行原油宝发生严重损失。<br><strong>2020.04.24</strong> Fri<br>    (1) 著名的Linux发行版Ubuntu 20.04 LTS发布。<br><strong>2020.05.15</strong> Fri<br>    (1) 美国计划对华为芯片供应链进行封锁。<br><strong>2020.05.18</strong> Mon<br>    (1) 云南昭通市发生5.0级地震。<br><strong>2020.05.20</strong> Wed<br>    (1) 台湾地区领导人宣誓就职。<br><strong>2020.05.22</strong> Fri<br>    (1) 全国两会召开。<br><strong>2020.05.26</strong> Tue<br>    (1) 全国政协常委、澳门赌王何鸿燊逝世，享年98岁。<br><strong>2020.05.28</strong> Thu<br>    (1) 国务院总理李克强在记者会上提到中国有6亿人每个月的收入也就1000元。<br><strong>2020.05.31</strong> Sun<br>    (1) 美国SpaceX公司实现载人航天发射任务。<br><strong>2020.06.01</strong> Mon<br>    (1) 李克强考察山东烟台时谈及地摊经济、小店经济是人间烟火，和高大上一样，是中国的生机。<br><strong>2020.06.03</strong> Wed<br>    (1) OpenAI发布自然语言深度学习模型GPT-3，具有1750亿参数。<br><strong>2020.06.11</strong> Thu<br>    (1) 北京新发地爆发新冠疫情。<br><strong>2020.06.12</strong> Fri<br>    (1) 哈尔滨工业大学被禁止使用MATLAB软件。<br><strong>2020.06.15</strong> Mon<br>    (1) 中印两国军人在边境地区发生冲突。<br><strong>2020.06.22</strong> Mon<br>    (1) 使用ARM架构芯片的日本超算“富岳”成为全球超算Top500榜第一，中国神威太湖之光第四。<br><strong>2020.06.23</strong> Tue<br>    (1) 苹果宣布将放弃英特尔芯片，全面采用自研的ARM架构芯片M1。<br><strong>2020.06.28</strong> Sun<br>    (1) 全球新冠肺炎感染超1000万人。<br><strong>2020.06.29</strong> Mon<br>    (1) 印度封杀中国APP。<br><strong>2020.06.30</strong> Tue<br>    (1) 港区国安法刊宪实施。<br>    (2) 腾讯以拖欠广告费为由，通过法院查封老干妈1624万元财产作为财产保全。<br><strong>2020.07.03</strong> Fri<br>    (1) 37岁中国羽毛球名将林丹宣布退役。<br><strong>2020.07.07</strong> Tue<br>    (2) 全国高考，安徽歙县考点被洪水淹没，考试延期。<br><strong>2020.07.08</strong> Wed<br>    (2) GitHub 宣布代码千年保存计划，首批代码已被保存到北极Arctic Code Vault。<br><strong>2020.07.15</strong> Wed<br>    (1) 新疆地区爆发新冠疫情。<br>    (2) 美国奥巴马、比尔盖茨、马斯克等知名人物推特账号被盗。<br><strong>2020.07.16</strong> Fri<br>    (1) 中国长江流域发生十年来最大洪水，3000余万人受灾。<br><strong>2020.07.18</strong> Sun<br>    (1) 《新闻联播》片头画面宽高比由4:3改为16:9。<br><strong>2020.07.20</strong> Mon<br>    (1) 蚂蚁宣布启动上市流程，集团员工欢呼财富自由。<br><strong>2020.07.21</strong> Tue<br>    (1) 美国政府要求中国政府72小时内关闭驻休斯敦总领事馆，并撤离所有人员。<br><strong>2020.07.23</strong> Thu<br>    (1) 天问一号火星探测器在文昌航天发射场升空，开启火星之旅。<br><strong>2020.07.27</strong> Mon<br>    (1) 美国驻成都总领馆闭馆。<br><strong>2020.07.31</strong> Fri<br>    (1) 北斗三号全球卫星导航系统建成。<br>    (2) 特朗普表示，他将禁止TikTok在美国运营。<br><strong>2020.08.04</strong> Tue<br>    (1) 江西省高院撤销原审裁判，宣布某关押26年的嫌疑人无罪释放。<br><strong>2020.08.11</strong> Tue<br>    (1) 习指示坚决制止餐饮浪费行为。<br><strong>2020.08.28</strong> Fri<br>    (1) 日本首相安倍晋三以健康为由辞职。<br><strong>2020.09.02</strong> Wed<br>    (1) 英伟达发布新RTX30系列显卡，预计2021年笔记本市场会采用。<br><strong>2020.09.14</strong> Mon<br>    (1) 日本软银以400亿美金出售芯片巨头ARM给英伟达。<br>    (2) 日本内阁官房长官菅义伟当选自民党第26任总裁并出任日本首相。<br><strong>2020.10.02</strong> Fri<br>    (1) 美国总统特朗普宣布，他与夫人梅拉尼娅新冠病毒检测呈阳性。<br><strong>2020.10.05</strong> Mon<br>    (1) 2020年度诺贝尔奖陆续揭晓。<br><strong>2020.10.14</strong> Wed<br>    (1) 苹果召开新品发布会，发布了iPhone 12系列智能手机。<br>    (2) 自然封面论文介绍了一种氢化物材料，在15摄氏度下观察到常温超导现象。<br><strong>2020.10.19</strong> Mon<br>    (1) 全球累计新冠确诊病例破4000万，累计死亡超111万。<br><strong>2020.10.25</strong> Sun<br>    (2) 三星集团会长李健熙在首尔病逝，享年78岁。<br><strong>2020.10.29</strong> Thu<br>    (1) AMD发布RX 6000系列显卡。<br>    (2) 《中共十四五规划》发布，提出渐进式延迟退休。<br>    (3) 韩国最高法院对前总统李明博涉贪受贿案进行宣判，判处17年有期徒刑。<br><strong>2020.11.01</strong> Sun<br>    (1) 国务院开启第七次全国人口普查。<br><strong>2020.11.03</strong> Tue<br>    (1) 蚂蚁集团A股、H股双双暂缓上市。<br><strong>2020.11.06</strong> Fri<br>    (1) 电子科技大学号6G实验卫星发射升空。<br><strong>2020.11.10</strong> Tue<br>    (1) 国家市场监管总局发布经济领域反垄断指南，加大对互联网巨头反垄断。<br><strong>2020.11.15</strong> Sun<br>    (1) 区域全面经济伙伴关系协定(RCEP)正式签署。<br><strong>2020.11.17</strong> Tue<br>    (1) 华为正式出售荣耀。<br><strong>2020.11.21</strong> Sat<br>    (1) GopherChina 2020 在上海召开。<br><strong>2020.11.24</strong> Tue<br>    (1) 嫦娥五号探测器发射，开启月球挖土征程。<br><strong>2020.11.25</strong> Wed<br>    (1) 多地政府介入蛋壳公寓危机事件。<br>    (2) 阿根廷球王马拉多纳突发心脏骤停去世，享年60岁。<br><strong>2020.11.27</strong> Fri<br>    (1) 伊朗高级核物理学家穆赫辛·法克里扎德遭暗杀身亡。<br><strong>2020.12.04</strong> Fri<br>    (1) 成都中环二号核聚变装置建成并实现首次放电。<br>    (2) 中国科学技术大学潘建伟团队成功构建76光量子计算原型机九章。<br><strong>2020.12.08</strong> Tue<br>    (1) 成都郫都区爆发新冠疫情。<br><strong>2020.12.11</strong> Fri<br>    (1) 中共召开会议，强化反垄断和防止资本无序扩张。<br><strong>2020.12.14</strong> Mon<br>    (1) 美国选举人团投票，民主党总统候选人拜登获得当选美国总统所需票数。<br>    (2) 国家市场监管总局根据《反垄断法》，对阿里巴巴、阅文集团、丰巢网络处以50万元罚款。<br><strong>2020.12.15</strong> Tue<br>    (1) 谷歌旗下Gmail、Youtube等多个服务宕机。<br>    (2) 美国华盛顿国家大教堂鸣钟300次，以纪念因新冠逝世的30万美国民众。<br><strong>2020.12.17</strong> Thu<br>    (1) 嫦娥五号返回器在内蒙古四子王旗预定区域着陆。<br><strong>2020.12.18</strong> Fri<br>    (1) 部分省市开始出现断电，限电情况。<br>    (2) 成都同日开通6、8、9、17、18共五条地铁，总里程达558公里，跃居中国地铁第四城。<br><strong>2020.12.23</strong> Wed<br>    (2) 英国确认出现一种变异新冠病毒。<br><strong>2020.12.24</strong> Thu<br>    (1) C++20标准正式发布，新增模块、协程、范围、约束等特性。<br>    (2) 阿里巴巴遭反垄断调查，蚂蚁金服再被约谈，马云遭当局边控。<br><strong>2020.12.26</strong> Sat<br>    (1) 首届Rust China Conf在深圳召开。<br>    (2) 全国考研，今年人数达377万，同比增加10.56%。<br>    (3) 比特币价格突破28000美元/枚，约18.3万元人民币/枚。<br><strong>2020.12.31</strong> Thu<br>    (1) 习发表新年贺词。<br>    (2) 国家卫健委宣布新冠疫苗免费提供全民。<br>    (3) 山东临沂，一位约五六十岁的环卫工人雪天倒在路边死亡。<br>    (4) 国家市场监管总局依法对京东、天猫、唯品会不正当价格行为罚款50万元。</p>
<p><a id="download" href="https://gitee.com/QMHTMY/share/blob/master/2020events.pdf" target="_blank" rel="noopener"><i class="fa fa-download"></i><span>下载年度报告</span></a></p>
]]></content>
      <categories>
        <category>年度新闻</category>
      </categories>
  </entry>
  <entry>
    <title>如何在Linux上安装及使用Zig语言？</title>
    <url>/title/82ebf5cc/</url>
    <content><![CDATA[<p><img src="https://s3.ax1x.com/2020/12/04/Dq9HSJ.png" alt="zig"></p>
<a id="more"></a>

<h2 id="具体流程"><a href="#具体流程" class="headerlink" title="具体流程"></a>具体流程</h2><ul>
<li>安装  <pre><code class="bash">sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 379CE192D401AB61  
<span class="built_in">echo</span> <span class="string">'deb https://dl.bintray.com/dryzig/zig-ubuntu focal main'</span>  \
    | sudo tee -a /etc/apt/sources.list  
sudo apt update  
sudo apt install zig  </code></pre>
</li>
<li>编写如下hellowd.zig  <pre><code class="zig">const std = @import(&quot;std&quot;);  
pub fn main() !void {  
    const stdout = std.io.getStdOut().writer();  
    try stdou.print(&quot;Hello, {}!\n&quot;, .{&quot;world&quot;});  
}  </code></pre>
</li>
<li>编译执行<br>  zig build-exe hellowd.zig<br>  ./hellowd  </li>
</ul>
]]></content>
      <categories>
        <category>编程语言</category>
      </categories>
      <tags>
        <tag>Zig</tag>
      </tags>
  </entry>
  <entry>
    <title>如何在Linux上安装及使用V语言？</title>
    <url>/title/a18bb24b/</url>
    <content><![CDATA[<p><img src="https://s3.ax1x.com/2020/12/04/Dq9NQA.png" alt="vlang"></p>
<a id="more"></a>

<h2 id="具体流程"><a href="#具体流程" class="headerlink" title="具体流程"></a>具体流程</h2><ul>
<li>下载<br>  到vlang.io下载包  </li>
<li>解压编译  <pre><code class="bash">unzip v_linux.zip  
<span class="built_in">cd</span> v_linux/  
make  </code></pre>
</li>
<li>编写如下hellowd.v  <pre><code class="v">fn main() {  
  println(<span class="number">'He</span>llo world!')  
}  </code></pre>
</li>
<li>编译执行<br>  v hellowd.v<br>  ./hellowd  </li>
</ul>
]]></content>
      <categories>
        <category>编程语言</category>
      </categories>
      <tags>
        <tag>Vlang</tag>
      </tags>
  </entry>
  <entry>
    <title>如何在Linux上安装及使用Tex语言？</title>
    <url>/title/b7656e70/</url>
    <content><![CDATA[<p><img src="https://s3.ax1x.com/2020/12/04/Dqpx2j.png" alt="Tex"></p>
<a id="more"></a>

<h2 id="具体流程"><a href="#具体流程" class="headerlink" title="具体流程"></a>具体流程</h2><p>TeX是排版语言，Linux推荐安装TexLive，安装过程较为复杂。    </p>
<ul>
<li>安装流程如下<br>  a.从清华大学的镜像处下载  <pre><code>https://mirrors.tuna.tsinghua.edu.cn/CTAN/systems/texlive/Images/  </code></pre>  b.安装图像化界面必备的perl-tk组件  <pre><code>sudo apt-get install perl-tk  </code></pre>  c.把下载好的.iso文件挂载到/mnt下  <pre><code>sudo mount -t iso9660 -o loop texlive2020-20200406.iso /mnt  </code></pre>  d.准备从图形界面安装  <pre><code>cd /mnt  
sudo ./install-tl -gui  </code></pre>  e.如果要修改安装位置请执行(/目录下面空间够用也可不用管这一步)  <pre><code>在&quot;TEXDIR(主TeX目录)&quot; 一行后点修改，填入新的位置(如/home/texlive2020)  </code></pre>  f.可以瘦身安装(空间够此步也可忽略)  <pre><code>&quot;安装字体/宏包文档目录树&quot;　切换为否  
&quot;安装字体/宏包源代码目录树&quot;　切换为否  
上面两个操作会舍弃安装文档和源代码，实际上大部分人也不会看，安装了浪费2G左右空间  </code></pre>  g.点击安装TeX Live<br>  h.卸载镜像文件  <pre><code>sudo unmount /mnt  
sudo cp /home/texlive2020/2020/texmf-var/fonts/conf/texlive-fontconfig.conf \
     /etc/fonts/conf.d/09-texlive.conf  
sudo fc-cache -fsv #此步执行时间稍长</code></pre>  i.环境变量设置<br>  打开~/.bashrc 在最后加入如下内容(具体路径按照自己的系统修改)  <pre><code>export TexMan=&quot;/home/texlive2020/2020/texmf-dist/doc/man&quot;  
export TexInfo=&quot;/home/texlive2020/2020/texmf-dist/doc/info&quot;  
export TexLive=&quot;/home/texlive2020/2020/bin/x86_64-linux&quot;  
export MANPATH=&quot;$MANPATH:$TexMan&quot;  
export INFOPATH=&quot;$INFOPATH:$TexInfo&quot;  
export PATH=&quot;$PATH:$TexLive&quot;  </code></pre>  执行 source ~/.bashrc<br>  j.更新源配置  <pre><code>sudo tlmgr option repository https://mirrors.tuna.tsinghua.edu.cn/CTAN/systems/texlive/tlnet  
此步如果出现sudo;找不到命令 tlmgr，意味着执行时环境变量不对，请执行  
(1) sudo vi /etc/sudoers  
(2) 给如下内容加一个感叹号  
    Defaults    env_reset   
    Defaults    !env_reset  
(3) 再vi ~/.bashrc 加入下面这行到最后  
(4) alias sudo=&apos;sudo env PATH=$PATH&apos;  
(5) 保存退出执行 source ~/.bashrc  
(6) 再执行 sudo tlmgr option ....  </code></pre>  k.更新宏包  <pre><code>sudo tlmgr update --self --all #要更新几百个，时间较长   </code></pre>  l.解决软件安装依赖问题  <pre><code>(1) sudo apt-get install aptitude  
(2) sudo aptitude install equivs  
(3) sudo mkdir /tmp/tl-equivs &amp;&amp; cd /tmp/tl-equivs  
(4) equivs-control texlive-local  
(5) 打开https://www.tug.org/texlive/files/debian-equivs-2020-ex.txt并复制所有内容  
(6) sudo vi texlive-local 将复制的内容粘贴进去并保存   
(7) sudo equivs-build texlive-local  
(8) sudo apt-get freeglut3  
(9) sudo dpkg -i texlive-local_2020-1_all.deb  </code></pre></li>
<li>编写如下hellowd.tex    <figure class="highlight tex"><table><tr><td class="code"><pre><span class="line"><span class="tag">\<span class="name">documentclass</span><span class="string">&#123;article&#125;</span></span>  </span><br><span class="line"><span class="tag">\<span class="name">begin</span><span class="string">&#123;document&#125;</span></span>  </span><br><span class="line">Hello world!  </span><br><span class="line"><span class="tag">\<span class="name">end</span><span class="string">&#123;document&#125;</span></span></span><br></pre></td></tr></table></figure></li>
<li>编译得到pdf文件<br>  xelatex hellowd.tex  </li>
<li>查看pdf<br>  evince hellowd.pdf  </li>
</ul>
]]></content>
      <categories>
        <category>编程语言</category>
      </categories>
      <tags>
        <tag>Tex</tag>
      </tags>
  </entry>
  <entry>
    <title>如何在Linux上安装及使用Swift语言？</title>
    <url>/title/4d7c098b/</url>
    <content><![CDATA[<p><img src="https://s3.ax1x.com/2020/12/04/Dqp13j.png" alt="swift"></p>
<a id="more"></a>

<h2 id="具体流程"><a href="#具体流程" class="headerlink" title="具体流程"></a>具体流程</h2><ul>
<li>安装依赖及下载安装包  <pre><code class="bash">sudo apt install libz3-4   
sudo apt install  libpython2.7  </code></pre>
  然后到<a href="https://swift.org/download/" target="_blank" rel="noopener">https://swift.org/download/</a> 下载安装包  </li>
<li>解压到/usr/local<br>  tar -zxf swift-5.3.1-RELEASE-ubuntu20.04.tar.gz -C /usr/local  </li>
<li>设置环境变量<br>  在~/.bashrc中添加如下内容<br>  export SWIFT_HOME=”/usr/local/swift-5.3.1-RELEASE-ubuntu20.04”<br>  export SWIFT_LIBRARY=”SWIFT_HOME/usr/lib”<br>  export PATH=”$PATH:SWIFT_HOME/usr/bin:SWIFT_LIBRARY”<br>  执行 source ~/.bashrc  </li>
<li>编写如下hellowd.swift  <pre><code class="swift"><span class="built_in">print</span>(<span class="string">"Hello world!"</span>)  </code></pre>
</li>
<li>编译执行<br>  swiftc hellowd.swift -o hellowd<br>  ./hellowd  </li>
</ul>
]]></content>
      <categories>
        <category>编程语言</category>
      </categories>
      <tags>
        <tag>Swift</tag>
      </tags>
  </entry>
  <entry>
    <title>如何在Linux上安装及使用Solidity语言？</title>
    <url>/title/f1582adf/</url>
    <content><![CDATA[<p><img src="https://s3.ax1x.com/2020/12/04/DqS0Xt.png" alt="solidity"></p>
<a id="more"></a>

<h2 id="具体流程"><a href="#具体流程" class="headerlink" title="具体流程"></a>具体流程</h2><ul>
<li>安装  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo add-apt-repository ppa:ethereum/ethereum</span><br><span class="line">sudo apt update</span><br><span class="line">sudo apt install solc</span><br></pre></td></tr></table></figure></li>
<li>编写如下hellowd.sol  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pragma solidity ^0.7.5;</span><br><span class="line">contract hellowd &#123;</span><br><span class="line">    string public hlwd = &quot;Hello world!&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>编译<br>  solc –bin hellowd.sol<br>  Solidity用于智能合约，没有输出函数。  </li>
</ul>
]]></content>
      <categories>
        <category>编程语言</category>
      </categories>
      <tags>
        <tag>Solidity</tag>
      </tags>
  </entry>
  <entry>
    <title>如何在Linux上安装及使用Smalltalk语言？</title>
    <url>/title/6f9e5fce/</url>
    <content><![CDATA[<p><img src="https://s3.ax1x.com/2020/12/04/DbzQZ8.png" alt="smalltalk"></p>
<a id="more"></a>

<h2 id="具体流程"><a href="#具体流程" class="headerlink" title="具体流程"></a>具体流程</h2><ul>
<li>下载<br>  到<a href="https://ftp.gnu.org/gnu/smalltalk/" target="_blank" rel="noopener">https://ftp.gnu.org/gnu/smalltalk/</a> 下载合适的包</li>
<li>解压安装    <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tar -zxf smalltalk.3.2.5.tar.gz</span><br><span class="line"><span class="built_in">cd</span> smalltalk.3.2.5/</span><br><span class="line">make</span><br><span class="line">sudo make install</span><br></pre></td></tr></table></figure></li>
<li>编写如下hellwd.st    <figure class="highlight smalltalk"><table><tr><td class="code"><pre><span class="line"><span class="type">Transcript</span> show: <span class="string">'Hello world!'</span>; cr.</span><br></pre></td></tr></table></figure></li>
<li>执行<br>  gst hellowd.st</li>
</ul>
]]></content>
      <categories>
        <category>编程语言</category>
      </categories>
      <tags>
        <tag>Smalltalk</tag>
      </tags>
  </entry>
  <entry>
    <title>如何在Linux上安装及使用Scheme语言？</title>
    <url>/title/78d9da1d/</url>
    <content><![CDATA[<p><img src="https://s3.ax1x.com/2020/12/04/Dbx0Cd.png" alt="scheme"></p>
<a id="more"></a>

<h2 id="具体流程"><a href="#具体流程" class="headerlink" title="具体流程"></a>具体流程</h2><ul>
<li>安装依赖    <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt install uuid-dev</span><br><span class="line">sudo apt-get install libghc-x11-dev</span><br></pre></td></tr></table></figure></li>
<li>下载源码    <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">下面任意方式均可 </span><br><span class="line">git <span class="built_in">clone</span> git@github.com:cisco/ChezScheme.git</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/cisco/ChezScheme</span><br><span class="line">gh repo <span class="built_in">clone</span> cisco/ChezScheme</span><br></pre></td></tr></table></figure></li>
<li>编译安装    <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ChezScheme/</span><br><span class="line">make</span><br><span class="line">sudo make install</span><br></pre></td></tr></table></figure></li>
<li>编写如下hellowd.scm    <figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">begin</span></span></span><br><span class="line">  (<span class="name"><span class="builtin-name">display</span></span> <span class="string">"Hello world!"</span>)</span><br><span class="line">  (<span class="name"><span class="builtin-name">newline</span></span>))</span><br></pre></td></tr></table></figure></li>
<li>执行<br>  scheme –script hellowd.scm</li>
</ul>
]]></content>
      <categories>
        <category>编程语言</category>
      </categories>
      <tags>
        <tag>Scheme</tag>
      </tags>
  </entry>
  <entry>
    <title>如何在Linux上安装及使用Rust语言？</title>
    <url>/title/1551f511/</url>
    <content><![CDATA[<p><img src="https://s3.ax1x.com/2020/12/04/DbvL9A.png" alt="rust"></p>
<a id="more"></a>

<h2 id="具体流程"><a href="#具体流程" class="headerlink" title="具体流程"></a>具体流程</h2><p>Rust可用rustup来安装 </p>
<ul>
<li>安装rustup、rustc、rustfmt等<br>  curl –proto ‘=https’ –tlsv1.2 -sSf <a href="https://sh.rustup.rs" target="_blank" rel="noopener">https://sh.rustup.rs</a> | sh  </li>
<li>配置环境变量    <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">在~/.bashrc中加入如下内容</span><br><span class="line"><span class="built_in">export</span> CARGO=<span class="string">"<span class="variable">$HOME</span>/.cargo/bin"</span></span><br><span class="line"><span class="built_in">export</span> PATH=<span class="string">"<span class="variable">$PATH</span>:CARGO"</span></span><br><span class="line">$ <span class="built_in">source</span> ~/.bashrc</span><br></pre></td></tr></table></figure></li>
<li>编写如下hellowd.rs  <figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"Hello world!"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>编译执行<br>  rustc hellowd.rs<br>  ./hellowd</li>
</ul>
]]></content>
      <categories>
        <category>编程语言</category>
      </categories>
      <tags>
        <tag>Rust</tag>
      </tags>
  </entry>
  <entry>
    <title>如何在Linux上安装及使用Ruby语言？</title>
    <url>/title/8fd765aa/</url>
    <content><![CDATA[<p><img src="https://s3.ax1x.com/2020/12/04/Dbv3m8.png" alt="ruby"></p>
<a id="more"></a>

<h2 id="具体流程"><a href="#具体流程" class="headerlink" title="具体流程"></a>具体流程</h2><ul>
<li>安装<br>  到<a href="http://www.ruby-lang.org/en/downloads/下载ruby" target="_blank" rel="noopener">http://www.ruby-lang.org/en/downloads/下载ruby</a>  </li>
<li>解压安装    <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tar -zxf ruby-2.7.2.tar.gz</span><br><span class="line"><span class="built_in">cd</span> ruby-2.7.2/</span><br><span class="line">./configure</span><br><span class="line">make</span><br><span class="line">sudo make install</span><br></pre></td></tr></table></figure></li>
<li>编写如下hellowd.rb  <figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">puts <span class="string">"Hello world!"</span></span><br></pre></td></tr></table></figure></li>
<li>执行<br>  ruby hellowd.rb</li>
</ul>
]]></content>
      <categories>
        <category>编程语言</category>
      </categories>
      <tags>
        <tag>Ruby</tag>
      </tags>
  </entry>
  <entry>
    <title>如何在Linux上安装及使用R语言？</title>
    <url>/title/a8601231/</url>
    <content><![CDATA[<p><img src="https://s3.ax1x.com/2020/12/04/DbjTWn.png" alt="r"></p>
<a id="more"></a>

<h2 id="具体流程"><a href="#具体流程" class="headerlink" title="具体流程"></a>具体流程</h2><ul>
<li>安装R    <figure class="highlight r"><table><tr><td class="code"><pre><span class="line">sudo apt-key adv --keyserver keyserver.ubuntu.com \</span><br><span class="line">    --recv-keys E298A3A825C0D65DFD57CBB651716619E084DAB9</span><br><span class="line">sudo apt update</span><br><span class="line">sudo apt install r-base</span><br></pre></td></tr></table></figure></li>
<li>编写hellowd.r    <figure class="highlight r"><table><tr><td class="code"><pre><span class="line">print(<span class="string">"Hello world!"</span>);</span><br></pre></td></tr></table></figure></li>
<li>执行<br>  Rscript hellowd.r</li>
</ul>
]]></content>
      <categories>
        <category>编程语言</category>
      </categories>
      <tags>
        <tag>R</tag>
      </tags>
  </entry>
  <entry>
    <title>如何在Linux上安装及使用Python语言？</title>
    <url>/title/cdbf0a6a/</url>
    <content><![CDATA[<p><img src="https://s3.ax1x.com/2020/12/04/Dbjla4.png" alt="python"></p>
<a id="more"></a>

<h2 id="具体流程"><a href="#具体流程" class="headerlink" title="具体流程"></a>具体流程</h2><p>Linux自带Python，不用安装。</p>
<ul>
<li>编写如下hellowd.py   <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line">print(<span class="string">"Hello, world!"</span>)</span><br></pre></td></tr></table></figure></li>
<li>执行<br>  python3 hellowd.py</li>
</ul>
]]></content>
      <categories>
        <category>编程语言</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>如何在Linux上安装及使用Prolog语言？</title>
    <url>/title/2e5a384b/</url>
    <content><![CDATA[<p><img src="https://s3.ax1x.com/2020/12/04/DbX6DU.png" alt="Prolog"></p>
<a id="more"></a>

<h2 id="具体流程"><a href="#具体流程" class="headerlink" title="具体流程"></a>具体流程</h2><ul>
<li>安装<br>  sudo apt install swi-prolog</li>
<li>编写如下hellowd.pro或hellowd.pl(注意.pl和Perl后缀冲突)    <figure class="highlight prolog"><table><tr><td class="code"><pre><span class="line">hello:-write(<span class="string">"Hello, world"</span>).</span><br></pre></td></tr></table></figure></li>
<li>执行    <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ swipl -s hellowd.pro</span><br><span class="line">?- hello.</span><br></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
      <categories>
        <category>编程语言</category>
      </categories>
      <tags>
        <tag>Prolog</tag>
      </tags>
  </entry>
  <entry>
    <title>如何在Linux上安装及使用PHP语言？</title>
    <url>/title/a5e1d4fb/</url>
    <content><![CDATA[<p><img src="https://s3.ax1x.com/2020/12/04/DbXmHe.png" alt="PHP"></p>
<a id="more"></a>

<h2 id="具体流程"><a href="#具体流程" class="headerlink" title="具体流程"></a>具体流程</h2><ul>
<li>安装<br>  到<a href="https://www.php.net/downloads" target="_blank" rel="noopener">https://www.php.net/downloads</a> 下载适合版本  </li>
<li>解压安装    <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tar -zxf php-8.0.0.tar.gz</span><br><span class="line">./configure</span><br><span class="line">make</span><br><span class="line">sudo make install</span><br></pre></td></tr></table></figure></li>
<li>编写如下hellowd.php    <figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="keyword">echo</span>(<span class="string">"Hello world!"</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>执行<br>  用浏览器查看就可以了</li>
</ul>
]]></content>
      <categories>
        <category>编程语言</category>
      </categories>
      <tags>
        <tag>PHP</tag>
      </tags>
  </entry>
  <entry>
    <title>如何在Linux上安装及使用Pascal语言？</title>
    <url>/title/c236715d/</url>
    <content><![CDATA[<p><img src="https://s3.ax1x.com/2020/12/04/DbO7kj.png" alt="pascal"></p>
<a id="more"></a>

<h2 id="具体流程"><a href="#具体流程" class="headerlink" title="具体流程"></a>具体流程</h2><ul>
<li>安装<br>  sudo apt install fp-compile  </li>
<li>编写hellowd.pas    <figure class="highlight perl"><table><tr><td class="code"><pre><span class="line">begin</span><br><span class="line">    writeln(<span class="string">"Hello world!)</span></span><br><span class="line"><span class="string">end.</span></span><br></pre></td></tr></table></figure></li>
<li>编译执行<br>  fpc hellowd.pas<br>  ./hellowd  </li>
</ul>
]]></content>
      <categories>
        <category>编程语言</category>
      </categories>
      <tags>
        <tag>Pascal</tag>
      </tags>
  </entry>
  <entry>
    <title>如何在Linux上安装及使用Perl语言？</title>
    <url>/title/8ce2b37a/</url>
    <content><![CDATA[<p><img src="https://s3.ax1x.com/2020/12/04/DbLaqg.png" alt="perl"></p>
<a id="more"></a>

<h2 id="具体流程"><a href="#具体流程" class="headerlink" title="具体流程"></a>具体流程</h2><p>Linux自带Perl，不用安装</p>
<ul>
<li>编写如下hellowd.pl    <figure class="highlight perl"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/perl</span></span><br><span class="line"><span class="keyword">use</span> strict;</span><br><span class="line"><span class="keyword">use</span> warnings;</span><br><span class="line"><span class="keyword">print</span> <span class="string">"Hello world!\n"</span>;</span><br></pre></td></tr></table></figure></li>
<li>执行<br>  perl hellowd.pl  </li>
</ul>
]]></content>
      <categories>
        <category>编程语言</category>
      </categories>
      <tags>
        <tag>Perl</tag>
      </tags>
  </entry>
  <entry>
    <title>如何在Linux上安装及使用Ocaml语言？</title>
    <url>/title/64d15820/</url>
    <content><![CDATA[<p><img src="https://s3.ax1x.com/2020/12/04/DbLKqe.png" alt="ocaml"></p>
<a id="more"></a>

<h2 id="具体流程"><a href="#具体流程" class="headerlink" title="具体流程"></a>具体流程</h2><ul>
<li>安装<br>  sudo apt install ocaml<br>  sudo apt install ocaml-nox #无X11支持，二者选择合适的安装  </li>
<li>编写如下hellowd.ml    <figure class="highlight ocaml"><table><tr><td class="code"><pre><span class="line">print_string <span class="string">"Hello world!\n"</span></span><br></pre></td></tr></table></figure></li>
<li>编译执行<br>  ocamlc hellowd.ml -o hellowd<br>  ./hellowd  </li>
</ul>
]]></content>
      <categories>
        <category>编程语言</category>
      </categories>
      <tags>
        <tag>Ocaml</tag>
      </tags>
  </entry>
  <entry>
    <title>如何在Linux上安装及使用Objective-C语言？</title>
    <url>/title/4600d3d9/</url>
    <content><![CDATA[<p><img src="https://s3.ax1x.com/2020/12/04/Dbq7Dg.png" alt="objective-c"></p>
<a id="more"></a>

<h2 id="具体流程"><a href="#具体流程" class="headerlink" title="具体流程"></a>具体流程</h2><ul>
<li>安装    <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt install gobjc</span><br><span class="line">sudo apt install gnustep</span><br><span class="line">sudo apt install gnustep-devel</span><br><span class="line">sudo bash /usr/share/GNUstep/Makefiles/GNUstep.sh</span><br></pre></td></tr></table></figure></li>
<li>编写如下hellowd.m  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#import &lt;Foundation/Foundation.h&gt;</span><br><span class="line">int main ( int argc, const char * argv[])</span><br><span class="line">&#123;</span><br><span class="line">     NSAutoreleasePool * pool = [[NSAutoreleasePool alloc] init];</span><br><span class="line"> </span><br><span class="line">     NSLog( @&quot;hello world&quot; );</span><br><span class="line">     [pool drain];</span><br><span class="line">     return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>编译执行<br>  gcc ‘gnustep-config –objc-flags’ -lgnustep-base hellowd.m -o hellowd<br>  ./hellowd  </li>
</ul>
]]></content>
      <categories>
        <category>编程语言</category>
      </categories>
      <tags>
        <tag>Objective-C</tag>
      </tags>
  </entry>
  <entry>
    <title>如何在Linux上安装及使用Nim语言？</title>
    <url>/title/9ad7b386/</url>
    <content><![CDATA[<p><img src="https://s3.ax1x.com/2020/12/04/DbqJuF.png" alt="nim"></p>
<a id="more"></a>

<h2 id="具体流程"><a href="#具体流程" class="headerlink" title="具体流程"></a>具体流程</h2><ul>
<li>安装<br>  sudo apt-get install nim  </li>
<li>编写如下hellowd.nim    <figure class="highlight nim"><table><tr><td class="code"><pre><span class="line">echo <span class="string">"Hello world!"</span></span><br></pre></td></tr></table></figure></li>
<li>编译执行  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">方式一：</span><br><span class="line">    nim c -r --verbosity:0 hellowd.nim</span><br><span class="line">方式二：</span><br><span class="line">    nim c --verbosity:0 hellowd.nim</span><br><span class="line">    ./hellowd</span><br></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
      <categories>
        <category>编程语言</category>
      </categories>
      <tags>
        <tag>Nim</tag>
      </tags>
  </entry>
  <entry>
    <title>如何在Linux上安装及使用Matlab语言？</title>
    <url>/title/6b743584/</url>
    <content><![CDATA[<p><img src="https://s3.ax1x.com/2020/12/04/DbbLp6.png" alt="matlab"></p>
<a id="more"></a>

<h2 id="具体流程"><a href="#具体流程" class="headerlink" title="具体流程"></a>具体流程</h2><ul>
<li>下载Matlab安装包，有些大<br>  地址 <a href="https://pan.baidu.com/s/1jD5bUfPOfGxPC5njPswGPw" target="_blank" rel="noopener">https://pan.baidu.com/s/1jD5bUfPOfGxPC5njPswGPw</a> 提取码：60gp<br>  其实不一定非得这个，任何合适的版本都可以  </li>
<li>安装    <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">a.进入两个镜像文件目录</span><br><span class="line">b.右键dvd1，用磁盘映像挂载器打开</span><br><span class="line">c.对挂载盘赋权限</span><br><span class="line">    sudo /media/wangbo/MATHWORKS_R2018B/install</span><br><span class="line">d.一路安装，直到输入序列号如下</span><br><span class="line">    09806-07443-53955-64350-21751-41297</span><br><span class="line">e.提示弹出DVD1，插入DVD2时，不要点确定；先卸载DVD1，然后挂载DVD2，再点确定，继续安装</span><br><span class="line">f.安装完成后，先进行破解，进入安装包的MATLAB R2018b Linux64 Crack文件夹，执行如下操作</span><br><span class="line">    sudo cp -f ./R2018b/bin/glnxa64/matlab_startup_plugins/lmgrimpl/libmwlmgrimpl.so \</span><br><span class="line">        /usr/<span class="built_in">local</span>/MATLAB/R2018b/bin/glnxa64/matlab_startup_plugins/lmgrimpl</span><br><span class="line">    sudo cp -f ./license_standalone.lic /usr/<span class="built_in">local</span>/MATLAB/R2018b/licenses</span><br><span class="line">g.配置环境变量，在~/.bashrc中添加并保存</span><br><span class="line">    <span class="built_in">export</span> MATLAB_HOME=<span class="string">"/usr/local/MATLAB/R2018b:<span class="variable">$PATH</span>"</span></span><br><span class="line">    <span class="built_in">export</span> PATH=<span class="string">"<span class="variable">$PATH</span>:MATLAB_HOME/bin"</span></span><br><span class="line">h.执行 <span class="built_in">source</span> ~/.bashrc</span><br></pre></td></tr></table></figure></li>
<li>可以编写如下hellowd.m(注意和Objective-C文件后缀一样)  <figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="params">[ output_args ]</span> = <span class="title">Untitled</span><span class="params">( input_args )</span></span></span><br><span class="line">    <span class="built_in">disp</span>(<span class="string">'Hello world!'</span>)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure></li>
<li>执行    <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">方法一：</span><br><span class="line">    打开 matlab </span><br><span class="line">    输入 hellowd.m 直接运行</span><br><span class="line">方法二：</span><br><span class="line">    matlab -nodesktop -nosplash -r hellowd</span><br></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
      <categories>
        <category>编程语言</category>
      </categories>
      <tags>
        <tag>Matlab</tag>
      </tags>
  </entry>
  <entry>
    <title>如何在Linux上安装及使用Lua语言？</title>
    <url>/title/c83c9b9b/</url>
    <content><![CDATA[<p><img src="https://s3.ax1x.com/2020/12/04/DbHziq.png" alt="lua"></p>
<a id="more"></a>

<h2 id="具体流程"><a href="#具体流程" class="headerlink" title="具体流程"></a>具体流程</h2><ul>
<li>安装    <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -R -O http://www.lua.org/ftp/lua-5.4.2.tar.gz</span><br><span class="line">tar zxf lua-5.4.2.tar.gz</span><br><span class="line"><span class="built_in">cd</span> lua-5.4.2</span><br><span class="line">make linux <span class="built_in">test</span></span><br><span class="line">make install</span><br></pre></td></tr></table></figure></li>
<li>编写如下hellowd.lua    <figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">"Hello world!"</span>)</span><br></pre></td></tr></table></figure></li>
<li>执行<br>  lua hellowd.lua</li>
</ul>
]]></content>
      <categories>
        <category>编程语言</category>
      </categories>
      <tags>
        <tag>Lua</tag>
      </tags>
  </entry>
  <entry>
    <title>如何在Linux上安装及使用Julia语言？</title>
    <url>/title/2f18b696/</url>
    <content><![CDATA[<p><img src="https://s3.ax1x.com/2020/12/04/DbHfZd.png" alt="julia"></p>
<a id="more"></a>

<h2 id="具体流程"><a href="#具体流程" class="headerlink" title="具体流程"></a>具体流程</h2><ul>
<li>安装<br>  到<a href="https://julialang.org/downloads/" target="_blank" rel="noopener">https://julialang.org/downloads/</a> 选择合适版本下载 </li>
<li>解压到/usr/local<br>  tar -zxf julia-1.5.3-linux-x86_64.tar.gz -C /usr/local    </li>
<li>设置环境变量<br>  在~/.bashrc中添加<br>  export JULIA_HOME=”/usr/local/julia-1.5.3”<br>  export PATH=”$PATH:$JULIA_HOME/bin”<br>  执行 source ~/.bashrc  </li>
<li>编写如下hellowd.jl    <figure class="highlight julia"><table><tr><td class="code"><pre><span class="line">println(<span class="string">"Hello world!"</span>)</span><br></pre></td></tr></table></figure></li>
<li>执行<br>  julia hellowd.jl  </li>
</ul>
]]></content>
      <categories>
        <category>编程语言</category>
      </categories>
      <tags>
        <tag>Julia</tag>
      </tags>
  </entry>
  <entry>
    <title>如何在Linux上安装及使用TypeScript语言？</title>
    <url>/title/13dc7310/</url>
    <content><![CDATA[<p><img src="https://s3.ax1x.com/2020/12/04/DbHJ2T.png" alt="typescript"></p>
<a id="more"></a>

<h2 id="具体流程"><a href="#具体流程" class="headerlink" title="具体流程"></a>具体流程</h2><p>TypeScript要转换为js，可用npm安装，安装npm同JavaScript一节。</p>
<ul>
<li>安装<br>  npm install -g typescript  </li>
<li>编写如下hellowd.ts      <figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> message:<span class="built_in">string</span> = <span class="string">"Hello world!"</span></span><br><span class="line"><span class="built_in">console</span>.log(message)</span><br></pre></td></tr></table></figure></li>
<li>编译<br>  tsc hellowd.ts  </li>
<li>执行<br>  node hellowd.js  </li>
</ul>
]]></content>
      <categories>
        <category>编程语言</category>
      </categories>
      <tags>
        <tag>TypeScript</tag>
      </tags>
  </entry>
  <entry>
    <title>如何在Linux上安装及使用JavaScript语言？</title>
    <url>/title/de145717/</url>
    <content><![CDATA[<p><img src="https://s3.ax1x.com/2020/12/04/Db7hCV.png" alt="javascript"></p>
<a id="more"></a>

<h2 id="具体流程"><a href="#具体流程" class="headerlink" title="具体流程"></a>具体流程</h2><ul>
<li>安装nodejs和npm    <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo apt-get install python-software-properties  </span><br><span class="line">$ sudo add-apt-repository ppa:jerome-etienne/neoip  </span><br><span class="line">$ sudo apt-get update  </span><br><span class="line">$ sudo apt-get install nodejs  </span><br><span class="line">$ sudo curl http://npmjs.org/install.sh | sh</span><br></pre></td></tr></table></figure></li>
<li>编写hellowd.js   <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</span><br><span class="line">   </span><br><span class="line"><span class="keyword">const</span> hostname = <span class="string">'127.0.0.1'</span>;</span><br><span class="line"><span class="keyword">const</span> port = <span class="number">3000</span>;</span><br><span class="line">   </span><br><span class="line"><span class="keyword">const</span> server = http.createServer(<span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  res.end(<span class="string">'Hello, world!\n'</span>);</span><br><span class="line">&#125;);</span><br><span class="line">   </span><br><span class="line">server.listen(port, hostname, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"Server is running at %s:%s"</span>, hostname, port);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li>
<li>执行<br>  node hellowd.js<br>  # 打开浏览器输入127.0.0.1:3000查看结果</li>
</ul>
]]></content>
      <categories>
        <category>编程语言</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>如何在Linux上安装及使用Groovy语言？</title>
    <url>/title/6a7b31fb/</url>
    <content><![CDATA[<p><img src="https://s3.ax1x.com/2020/12/04/Db7k1U.png" alt="groovy"></p>
<a id="more"></a>

<h2 id="具体流程"><a href="#具体流程" class="headerlink" title="具体流程"></a>具体流程</h2><p>Groovy依赖Java，所以要安装JDK，方法同Java一节。</p>
<ul>
<li>安装Groovy<br>  sudo apt install groovy  </li>
<li>编写如下hellowd.groovy    <figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Hellowd</span> &#123;</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">void</span> main(String[] args) &#123;</span><br><span class="line">        println(<span class="string">'Hello World'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>执行<br>  groovy hellowd.groovy</li>
</ul>
]]></content>
      <categories>
        <category>编程语言</category>
      </categories>
      <tags>
        <tag>Groovy</tag>
      </tags>
  </entry>
  <entry>
    <title>如何在Linux上安装及使用Scala语言？</title>
    <url>/title/1ce6a111/</url>
    <content><![CDATA[<p><img src="https://s3.ax1x.com/2020/12/04/DbTMQg.png" alt="scala"></p>
<a id="more"></a>

<h2 id="具体流程"><a href="#具体流程" class="headerlink" title="具体流程"></a>具体流程</h2><p>Scala依赖Java，所以要安装JDK，方法如上。</p>
<ul>
<li>安装<br>  sudo apt install scala  </li>
<li>编写如下hellowd.scala    <figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">hellowd</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args : <span class="type">Array</span>[<span class="type">String</span>])&#123;</span><br><span class="line">        println(<span class="string">"Hello world!"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>编译执行<br>  scalac hellowd.scala<br>  scala hellowd  </li>
</ul>
]]></content>
      <categories>
        <category>编程语言</category>
      </categories>
      <tags>
        <tag>Scala</tag>
      </tags>
  </entry>
  <entry>
    <title>如何在Linux上安装及使用Kotlin语言？</title>
    <url>/title/22eab53d/</url>
    <content><![CDATA[<p><img src="https://s3.ax1x.com/2020/12/04/DbhW4S.png" alt="kotlin"></p>
<a id="more"></a>

<h2 id="具体流程"><a href="#具体流程" class="headerlink" title="具体流程"></a>具体流程</h2><p>Kotlin依赖Java，所以要先安装JDK，方法同Java一节。</p>
<ul>
<li>安装<br>  sudo snap install –classic kotlin  </li>
<li>编写如下hellowd.kt    <figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    println(<span class="string">"Hello world!"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>编译执行<br>  kotlinc hellowd.kt -include-runtime -d hellowd.jar<br>  java -jar hellowd.jar  </li>
</ul>
]]></content>
      <categories>
        <category>编程语言</category>
      </categories>
      <tags>
        <tag>Kotlin</tag>
      </tags>
  </entry>
  <entry>
    <title>如何在Linux上安装及使用Java语言？</title>
    <url>/title/449bb0cb/</url>
    <content><![CDATA[<p><img src="https://s3.ax1x.com/2020/12/04/Dbhm7V.png" alt="java"></p>
<a id="more"></a>

<h2 id="具体流程"><a href="#具体流程" class="headerlink" title="具体流程"></a>具体流程</h2><ul>
<li>安装Java<br>  到<a href="https://www.oracle.com/java/technologies/javase-downloads.html下载JDK" target="_blank" rel="noopener">https://www.oracle.com/java/technologies/javase-downloads.html下载JDK</a>  </li>
<li>解压到/usr/local<br>  sudo tar -xzf jdk-15.01_linux-x64_bin.tar.gz -C /usr/local  </li>
<li>设置环境变量<br>  在~/.bashrc中添加<br>  export JAVA_HOME=”/usr/local/jdk-15.0.1”<br>  export PATH=”$PATH:$JAVA_HOME/bin”<br>  然后 source ~/.bashrc  </li>
<li>确认java可用<br>  java -version  </li>
<li>编写hellowd.java    <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">      System.out.println(<span class="string">"Hello World"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>编译执行<br>  javac hellowd.java<br>  java hellowd  </li>
</ul>
]]></content>
      <categories>
        <category>编程语言</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>如何在Linux上安装及使用Haskell语言？</title>
    <url>/title/276fc7c1/</url>
    <content><![CDATA[<p><img src="https://s3.ax1x.com/2020/12/04/DbfdQs.png" alt="haskell"></p>
<a id="more"></a>

<h2 id="具体流程"><a href="#具体流程" class="headerlink" title="具体流程"></a>具体流程</h2><ul>
<li>安装<br>  sudo apt install haskell-platform  </li>
<li>编写hellowd.hs<br>  main = print “Hello world!”  </li>
<li>运行    <figure class="highlight haskell"><table><tr><td class="code"><pre><span class="line">方法一：</span><br><span class="line">    runghc hellowd.hs</span><br><span class="line">方法二：</span><br><span class="line">    ghc hellowd.hs</span><br><span class="line">    ./hellowd</span><br></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
      <categories>
        <category>编程语言</category>
      </categories>
      <tags>
        <tag>Haskell</tag>
      </tags>
  </entry>
  <entry>
    <title>如何在Linux上安装及使用Wasm语言？</title>
    <url>/title/dcdb3aa3/</url>
    <content><![CDATA[<p><img src="https://s3.ax1x.com/2020/12/04/DbfVIO.png" alt="wasm"></p>
<a id="more"></a>

<h2 id="具体流程"><a href="#具体流程" class="headerlink" title="具体流程"></a>具体流程</h2><p>WebAssembly 或 Wasm 是一种二进制命令格式，一种运行在现代网络浏览器中的新型代码。设计的目的不是为了手写代码而是为诸如C、C++、Go、Rust等语言提供一个高效的编译目标。</p>
<ul>
<li>编写如下main.go    <figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">"Hello world!"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>用Node.js执行<br>  GOOS=js GOARCH=wasm go run -exec=”$(go env GOROOT)/misc/wasm/go_js_wasm_exec” .</li>
</ul>
]]></content>
      <categories>
        <category>编程语言</category>
      </categories>
      <tags>
        <tag>WebAssembly</tag>
      </tags>
  </entry>
  <entry>
    <title>如何在Linux上安装及使用Go语言？</title>
    <url>/title/9ba62698/</url>
    <content><![CDATA[<p><img src="https://s3.ax1x.com/2020/12/04/DbWB5D.png" alt="go"></p>
<a id="more"></a>

<h2 id="具体流程"><a href="#具体流程" class="headerlink" title="具体流程"></a>具体流程</h2><ul>
<li>下载最新版安装包<br>  到 <a href="https://studygolang.com/dl" target="_blank" rel="noopener">https://studygolang.com/dl</a> 下载对应安装包<br>  例如下载 go1.15.5.linux-amd64.tar.gz<br>  当然也可以命令行安装，但可能不是最新版<br>  sudo apt install golang-1.14 #(最新版为1.15)  </li>
<li>解压到/usr/local<br>  sudo tar -C /usr/local -xzf g01.15.5.linux-amd64.tar.gz  </li>
<li>设置GOPATH<br>  在~/.bashrc配置如下选项并保存：<br>  export GOROOT=”/usr/local/go”<br>  export GOPATH=”/home/usrname/Go” #这个随便自己设置<br>  export PATH=”$PATH:$GOPATH:$GOPATH/bin:$GOROOT/bin”<br>  export GOPROXY=”<a href="https://goproxy.cn,direct&quot;" target="_blank" rel="noopener">https://goproxy.cn,direct&quot;</a><br>  export GO111MODULE=on<br>  CGO_ENABLED=1<br>  执行 source ~/.bashrc<br>  执行 go env测试，有输出就说明成功了  </li>
<li>编写如下hellowd.go    <figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">"Hello world!"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>编译执行    <figure class="highlight go"><table><tr><td class="code"><pre><span class="line">方法一： </span><br><span class="line">    <span class="keyword">go</span> run hellowd.<span class="keyword">go</span></span><br><span class="line">方法二： </span><br><span class="line">    <span class="keyword">go</span> build hellowd.<span class="keyword">go</span> </span><br><span class="line">    ./hellowd</span><br></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
      <categories>
        <category>编程语言</category>
      </categories>
      <tags>
        <tag>Go</tag>
      </tags>
  </entry>
  <entry>
    <title>如何在Linux上安装及使用Fortran语言？</title>
    <url>/title/530722cf/</url>
    <content><![CDATA[<p><img src="https://s3.ax1x.com/2020/12/04/DbRv3d.png" alt="fortran"></p>
<a id="more"></a>

<h2 id="具体流程"><a href="#具体流程" class="headerlink" title="具体流程"></a>具体流程</h2><ul>
<li>安装<br>   sudo add-apt-repository ppa:ubuntu-toolchain-r/test<br>   sudo apt update<br>   sudo apt install gfortran-10  </li>
<li>编写hellowd.f90    <figure class="highlight fortran"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">program</span></span> hello  </span><br><span class="line">    <span class="built_in">write</span>(*,*)<span class="string">'Hello world!'</span></span><br><span class="line"><span class="keyword">stop</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure></li>
<li>编译执行<br>  gfortran-10 hellowd.f90 -o hellowd<br>  ./hellowd  </li>
</ul>
]]></content>
      <categories>
        <category>编程语言</category>
      </categories>
      <tags>
        <tag>Fortran</tag>
      </tags>
  </entry>
  <entry>
    <title>如何在Linux上安装及使用Elixir语言？</title>
    <url>/title/725ff9d2/</url>
    <content><![CDATA[<p><img src="https://s3.ax1x.com/2020/12/04/DbRt78.png" alt="elixir"></p>
<a id="more"></a>

<h2 id="具体流程"><a href="#具体流程" class="headerlink" title="具体流程"></a>具体流程</h2><p>Elixir依赖与Erlang，所以要先安装Erlang，具体在Erlang一节。</p>
<ul>
<li>安装Elixir<br>  sudo apt install elixir  </li>
<li>编写hellowd.exs    <figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line">IO.puts(<span class="string">"Hello world!"</span>)</span><br></pre></td></tr></table></figure></li>
<li>执行<br>  elixir hellowd.exs  </li>
</ul>
]]></content>
      <categories>
        <category>编程语言</category>
      </categories>
      <tags>
        <tag>Elixir</tag>
      </tags>
  </entry>
  <entry>
    <title>如何在Linux上安装及使用Erlang语言？</title>
    <url>/title/bb54ab6f/</url>
    <content><![CDATA[<p><img src="https://s3.ax1x.com/2020/12/04/Db26Fe.png" alt="erlang"></p>
<a id="more"></a>

<h2 id="具体流程"><a href="#具体流程" class="headerlink" title="具体流程"></a>具体流程</h2><ul>
<li>安装erlang<br>  sudo apt install erlang  </li>
<li>编写hellowd.erl    <figure class="highlight erlang"><table><tr><td class="code"><pre><span class="line"><span class="keyword">-module</span><span class="params">(hellowd)</span>.</span><br><span class="line"><span class="keyword">-export</span><span class="params">([start/<span class="number">0</span>])</span>.</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">start</span><span class="params">()</span> -&gt;</span></span><br><span class="line">    io:format(<span class="string">"Hello world!~n"</span>).</span><br></pre></td></tr></table></figure></li>
<li>编译<br>  erlc hellowd.erl  </li>
<li>执行<br>  命令行输入erl，回车后执行如下    <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt;c(hellowd).  </span><br><span class="line">&gt;hellowd:start().</span><br></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
      <categories>
        <category>编程语言</category>
      </categories>
      <tags>
        <tag>Erlang</tag>
      </tags>
  </entry>
  <entry>
    <title>如何在Linux上安装及使用Dart语言？</title>
    <url>/title/cf238555/</url>
    <content><![CDATA[<p><img src="https://s3.ax1x.com/2020/12/04/DbgXVO.png" alt="dart"></p>
<a id="more"></a>

<h2 id="具体流程"><a href="#具体流程" class="headerlink" title="具体流程"></a>具体流程</h2><ul>
<li>安装环境<br>  sudo apt update<br>  sudo apt install apt-transport-https<br>  sudo sh -c ‘wget -qO- <a href="https://dl.google.com/linux/linux_signing_key.pub" target="_blank" rel="noopener">https://dl.google.com/linux/linux_signing_key.pub</a> | apt-key add -‘<br>  sudo sh -c ‘wget -qO- <a href="https://storage.flutter-io.cn/download.dartlang.org/linux/debian/dart_stable.list" target="_blank" rel="noopener">https://storage.flutter-io.cn/download.dartlang.org/linux/debian/dart_stable.list</a> &gt; /etc/apt/sources.list.d/dart_stable.list’<br>  sudo apt update<br>  sudo apt install dart  </li>
<li>编写如下hellowd.dart    <figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">main() &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"Hello world!"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>编译执行    <figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">方式一：</span><br><span class="line">    dart hellowd.dart  </span><br><span class="line">方式二：</span><br><span class="line">    dart2js hellowd.dart -o hellowd  </span><br><span class="line">    node hellowd  </span><br><span class="line">方式三：  </span><br><span class="line">    dart2native hellowd.dart -o hellowd  </span><br><span class="line">    ./hellowd</span><br></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
      <categories>
        <category>编程语言</category>
      </categories>
      <tags>
        <tag>Dart</tag>
      </tags>
  </entry>
  <entry>
    <title>如何在Linux上安装及使用D语言？</title>
    <url>/title/82d0e39e/</url>
    <content><![CDATA[<p><img src="https://s3.ax1x.com/2020/12/04/DbcOhj.png" alt="d"></p>
<a id="more"></a>

<h2 id="具体流程"><a href="#具体流程" class="headerlink" title="具体流程"></a>具体流程</h2><ul>
<li>安装环境<br>  sudo wget <a href="https://netcologne.dl.sourceforge.net/project/d-apt/files/d-apt.list" target="_blank" rel="noopener">https://netcologne.dl.sourceforge.net/project/d-apt/files/d-apt.list</a> -O /etc/apt/sources.list.d/d-apt.list<br>  sudo apt-get update –allow-insecure-repositories<br>  sudo apt-get -y –allow-unauthenticated install –reinstall d-apt-keyring<br>  sudo apt-get update &amp;&amp; sudo apt-get install dmd-compiler dub  </li>
<li>编写如下hellowd.d    <figure class="highlight d"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> std.stdio;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">    writeln(<span class="string">"Hello, World!"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>编译执行<br>  dmd hellowd.d -o hellowd<br>  ./hellowd  </li>
</ul>
]]></content>
      <categories>
        <category>编程语言</category>
      </categories>
      <tags>
        <tag>D</tag>
      </tags>
  </entry>
  <entry>
    <title>如何在Linux上安装及使用Lisp语言？</title>
    <url>/title/5b495f7c/</url>
    <content><![CDATA[<p><img src="https://s3.ax1x.com/2020/12/04/Db67FJ.png" alt="lisp"></p>
<a id="more"></a>

<h2 id="具体流程"><a href="#具体流程" class="headerlink" title="具体流程"></a>具体流程</h2><p>SBCL是Steel Bank Common Lisp的简称，它是Common Lisp的一种高质量的开源实现，可运行在各个平台上。</p>
<ul>
<li>安装sbcl和slime<br>  sudo apt install sbcl<br>  sudo apt install slime  </li>
<li>结合emacs使用<br>  emacs里Alt+x输入slime，回车<br>  (message “Hello world!”)</li>
</ul>
]]></content>
      <categories>
        <category>编程语言</category>
      </categories>
      <tags>
        <tag>Lisp</tag>
      </tags>
  </entry>
  <entry>
    <title>如何在Linux上安装及使用C#语言？</title>
    <url>/title/aff9b234/</url>
    <content><![CDATA[<p><img src="https://s3.ax1x.com/2020/12/04/Dbs410.png" alt="csharp"></p>
<a id="more"></a>

<h2 id="具体流程"><a href="#具体流程" class="headerlink" title="具体流程"></a>具体流程</h2><ul>
<li>安装C#编译环境<br>  sudo apt-get install mono-devel</li>
<li>编写如下hellowd.cs  <figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">HelloMono</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[ ] args</span>)</span>&#123; </span><br><span class="line">        System.Console.WriteLine(<span class="string">"Hello world"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<p>2.编译执行<br>    mcs hellowd.cs<br>    ./hellowd.exe  #.exe表示其可执行</p>
]]></content>
      <categories>
        <category>编程语言</category>
      </categories>
      <tags>
        <tag>C#</tag>
      </tags>
  </entry>
  <entry>
    <title>如何在Linux上安装及使用C++语言？</title>
    <url>/title/19f865a1/</url>
    <content><![CDATA[<p><img src="https://s3.ax1x.com/2020/12/04/DbrcJ1.png" alt="cpp"></p>
<a id="more"></a>

<h2 id="具体流程"><a href="#具体流程" class="headerlink" title="具体流程"></a>具体流程</h2><p>Linux一般自带g++编译器，所以不需要安装，写好.cpp文件编译执行就可以了。</p>
<ul>
<li>编写如下hellowd.cpp  <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"Hello world!"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>编译执行<br> g++ hellowd.cpp -o hellowd<br>  ./hellowd</li>
</ul>
]]></content>
      <categories>
        <category>编程语言</category>
      </categories>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>如何在Linux上安装及使用CoffeeScript语言？</title>
    <url>/title/d5a4e0e6/</url>
    <content><![CDATA[<p><img src="https://s3.ax1x.com/2020/12/04/DbD2Dg.png" alt="coffescript"></p>
<a id="more"></a>

<h2 id="具体流程"><a href="#具体流程" class="headerlink" title="具体流程"></a>具体流程</h2><p>CoffeScript要转换为js，需要安装npm。</p>
<ul>
<li>安装CoffeeScript<br>  npm install -g coffee-script  </li>
<li>编写如下hellowd.coffee<br>  alert “Hello world!”  </li>
<li>编译执行<br>  coffee -w -c hellowd.coffee<br>  node hellowd.js  </li>
</ul>
]]></content>
      <categories>
        <category>编程语言</category>
      </categories>
      <tags>
        <tag>CoffeeScript</tag>
      </tags>
  </entry>
  <entry>
    <title>如何在Linux上安装及使用Clojure语言？</title>
    <url>/title/1ce6c34f/</url>
    <content><![CDATA[<p><img src="https://s3.ax1x.com/2020/12/04/DbDC7j.png" alt="clojure"></p>
<a id="more"></a>

<h2 id="具体流程"><a href="#具体流程" class="headerlink" title="具体流程"></a>具体流程</h2><ul>
<li>安装<br>  sudo apt install clojue</li>
<li>编写如下hellowd.clj  <figure class="highlight clojure"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">ns</span></span> clojure.examples.hello</span><br><span class="line">    (<span class="symbol">:gen-class</span>))</span><br><span class="line">(<span class="name"><span class="builtin-name">defn</span></span> hello-world []</span><br><span class="line">    (<span class="name">println</span> <span class="string">"Hello world!"</span>))</span><br><span class="line">(<span class="name">hello-world</span>)</span><br></pre></td></tr></table></figure></li>
<li>执行<br>  clojure hellowd.clj</li>
</ul>
]]></content>
      <categories>
        <category>编程语言</category>
      </categories>
      <tags>
        <tag>Clojure</tag>
      </tags>
  </entry>
  <entry>
    <title>如何在Linux上安装及使用C语言？</title>
    <url>/title/600cf8e7/</url>
    <content><![CDATA[<p><img src="https://s3.ax1x.com/2020/12/04/Db0dMD.png" alt="c"></p>
<a id="more"></a>

<h2 id="具体流程"><a href="#具体流程" class="headerlink" title="具体流程"></a>具体流程</h2><p>Linux一般自带gcc编译器，所以不需要安装，写好.c文件编译执行就可以了。</p>
<ul>
<li>编写如下hellowd.c    <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;  </span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Hello world!\n"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>编译执行<br> gcc hellowd.c -o hellowd<br>  ./hellowd  </li>
</ul>
]]></content>
      <categories>
        <category>编程语言</category>
      </categories>
      <tags>
        <tag>C</tag>
      </tags>
  </entry>
  <entry>
    <title>如何在Linux上安装及使用bash语言？</title>
    <url>/title/20a4afdb/</url>
    <content><![CDATA[<p><img src="https://s3.ax1x.com/2020/12/04/DqCR9e.png" alt="bash"></p>
<a id="more"></a>

<h2 id="具体流程"><a href="#具体流程" class="headerlink" title="具体流程"></a>具体流程</h2><p>Linux自带 Bash，所以不需要安装，写好 Bash 脚本直接执行就可以了。  </p>
<ul>
<li>编写如下hellowd.sh  <pre><code class="bash"><span class="meta">#!/bin/bash  </span>
<span class="built_in">echo</span> <span class="string">"Hello world!"</span>  </code></pre>
</li>
<li>执行<br>  chmod +x hellowd.sh<br>  ./hellowd.sh  </li>
</ul>
]]></content>
      <categories>
        <category>编程语言</category>
      </categories>
      <tags>
        <tag>Bash</tag>
      </tags>
  </entry>
  <entry>
    <title>如何在Linux上安装及使用AWK语言？</title>
    <url>/title/d01c3f7a/</url>
    <content><![CDATA[<p><img src="https://s3.ax1x.com/2020/12/04/DbdxcF.png" alt="awk"></p>
<a id="more"></a>


<h2 id="具体流程"><a href="#具体流程" class="headerlink" title="具体流程"></a>具体流程</h2><p>Linux自带AWK解释器，所以不需要安装，写好AWK脚本直接执行就可以了。</p>
<ul>
<li>编写如下hellowd.awk<br>  #!/usr/bin/awk -f<br>  BEGIN { printf “%s\n”, “Hello world!” }</li>
<li>执行<br>  chmod +x hellowd.awk<br>  ./hellowd.awk  </li>
</ul>
]]></content>
      <categories>
        <category>编程语言</category>
      </categories>
      <tags>
        <tag>AWK</tag>
      </tags>
  </entry>
  <entry>
    <title>如何在Linux上安装及使用Assembly语言？</title>
    <url>/title/ab1d88a4/</url>
    <content><![CDATA[<p><img src="https://s3.ax1x.com/2020/12/04/DbUJc4.png" alt="asm"></p>
<a id="more"></a>

<h2 id="具体流程"><a href="#具体流程" class="headerlink" title="具体流程"></a>具体流程</h2><ul>
<li>下载nasm安装包<br> 到<a href="https://www.nasm.us/pub/nasm/releasebuilds/" target="_blank" rel="noopener">https://www.nasm.us/pub/nasm/releasebuilds/</a> 选择合适版本并下载  </li>
<li>解压<br>  tar -xzf nasm-x.xx.xx.tar.gz  </li>
<li>编译安装<br>  cd nasm-x.xx.xx/<br>  ./configure<br>  make<br>  sudo make install  </li>
<li>编写如下 hellowd.asm    <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">section .data                     </span><br><span class="line">    msg   db   &quot;Hello world!&quot;,0xA</span><br><span class="line">    len   equ  $ - msg           </span><br><span class="line">section .text                     </span><br><span class="line">   global _start  </span><br><span class="line">_start:</span><br><span class="line">       mov     eax,4</span><br><span class="line">       mov     ebx,1</span><br><span class="line">       mov     ecx,msg</span><br><span class="line">       mov     edx,len</span><br><span class="line">       int     0x80</span><br><span class="line">       mov     eax,1</span><br><span class="line">       xor     ebx,ebx</span><br><span class="line">       int     0x80</span><br></pre></td></tr></table></figure></li>
<li>编译链接并运行<br>  nasm -f elf64 hellowd.asm<br>  ld -s hellowd.o -o hellowd<br>  ./hellwd</li>
</ul>
]]></content>
      <categories>
        <category>编程语言</category>
      </categories>
      <tags>
        <tag>Assembly</tag>
      </tags>
  </entry>
  <entry>
    <title>C、C++、Java、Python、Go、Rust、Dart实现七大搜索算法</title>
    <url>/title/9602a5e3/</url>
    <content><![CDATA[<p><img src="https://s3.ax1x.com/2020/11/15/DiDa6I.png" alt="cpygorsdart"></p>
<a id="more"></a>

<p>本文为七种语言对比学习的第二十六篇：实现七大搜索算法。</p>
<h4 id="搜索算法"><a href="#搜索算法" class="headerlink" title="搜索算法"></a>搜索算法</h4><p>查找或搜索是一类重要算法，查找既可以在原始数据上直接查找，也可以先排序再查找。查找算法其实有很多种情况，比如先排序再查找，而排序算法有很多种，比如字符串匹配也算查找算法，它们组合起来的查找算法就更多了。然而万变不离其宗，基本的查找思想就几种。</p>
<p>查找算法概念：</p>
<ul>
<li>查找表，由同一类型的数据元素构成的集合</li>
<li>查找，根据某个值，在查找表中确定关键字等于给定值的数据</li>
<li>关键字，数据元素中某个数据项的值，又称为键值</li>
<li>主键，可唯一的标识某个数据元素或记录的关键字</li>
</ul>
<p>查找表分为：</p>
<ul>
<li>静态查找表，只做查找操作的查找表</li>
<li>动态查找表，在查找的同时还会进行插入、删除等操作</li>
</ul>
<p>常见查找算法有七种：</p>
<table>
<thead>
<tr>
<th align="center">序号</th>
<th align="left">查找算法</th>
<th align="left">最坏时间复杂度</th>
<th align="left">平均时间复杂度</th>
<th align="left">最好时间复杂度</th>
<th align="left">空间复杂度</th>
<th align="left">综合类别</th>
</tr>
</thead>
<tbody><tr>
<td align="center">1</td>
<td align="left">顺序查找</td>
<td align="left">O($n$)</td>
<td align="left">O($n/2$)</td>
<td align="left">O($1$)</td>
<td align="left">O(1)</td>
<td align="left">无序遍历类</td>
</tr>
<tr>
<td align="center">2</td>
<td align="left">分块查找</td>
<td align="left">O($log_2n + k$)</td>
<td align="left">O($log_2n + k/2$)</td>
<td align="left">O($1$)</td>
<td align="left">O(k)</td>
<td align="left">有序插值遍历类</td>
</tr>
<tr>
<td align="center">3</td>
<td align="left">二分查找</td>
<td align="left">O($log_2n$)</td>
<td align="left">O($log_2n$)</td>
<td align="left">O($1$)</td>
<td align="left">O(1)</td>
<td align="left">有序插值类</td>
</tr>
<tr>
<td align="center">4</td>
<td align="left">插值查找</td>
<td align="left">O($log_2(log_2n)$)</td>
<td align="left">O($log_2(log_2n)$)</td>
<td align="left">O($1$)</td>
<td align="left">O(1)</td>
<td align="left">有序插值类</td>
</tr>
<tr>
<td align="center">5</td>
<td align="left">斐波那契查找</td>
<td align="left">O($log_2n$)</td>
<td align="left">O($log_2n$)</td>
<td align="left">O($1$)</td>
<td align="left">O(n)</td>
<td align="left">有序插值类</td>
</tr>
<tr>
<td align="center">7</td>
<td align="left">哈希查找</td>
<td align="left">O($1$)</td>
<td align="left">O($1$)</td>
<td align="left">O($1$)</td>
<td align="left">O(n)</td>
<td align="left">无序寻址类</td>
</tr>
<tr>
<td align="center">6</td>
<td align="left">树表查找</td>
<td align="left">O($n$)</td>
<td align="left">O($log_2n$)</td>
<td align="left">O($1$)</td>
<td align="left">O(n)</td>
<td align="left">有序树查找类</td>
</tr>
</tbody></table>
<h5 id="C实现七大查找算法"><a href="#C实现七大查找算法" class="headerlink" title="C实现七大查找算法"></a>C实现七大查找算法</h5><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 顺序查找</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">LinearSearch</span><span class="params">(<span class="keyword">int</span> *arr, <span class="keyword">int</span> <span class="built_in">size</span>, <span class="keyword">int</span> key)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">size</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (arr[i] == key)</span><br><span class="line">            <span class="keyword">return</span> i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 分块查找</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">index</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> key;</span><br><span class="line">    <span class="keyword">int</span> start;</span><br><span class="line">&#125;newIndex[<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">DisSearch</span><span class="params">(<span class="keyword">int</span> *arr, <span class="keyword">int</span> key)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>, start;</span><br><span class="line">    <span class="keyword">while</span> (i &lt; <span class="number">3</span> &amp;&amp; key &gt; newIndex[i].key)</span><br><span class="line">        i++;</span><br><span class="line">    <span class="keyword">if</span> (i &gt;= <span class="number">3</span>) </span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">    start = newIndex[i].start;</span><br><span class="line">    <span class="keyword">while</span> (start &lt;= start + <span class="number">5</span> &amp;&amp; arr[start] != key)</span><br><span class="line">        start++;</span><br><span class="line">    <span class="keyword">if</span> (start &gt; start + <span class="number">5</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">return</span> start;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 二分查找，数据需已排序</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">BinarySearch</span><span class="params">(<span class="keyword">int</span> *arr, <span class="keyword">int</span> <span class="built_in">size</span>, <span class="keyword">int</span> key)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> mid, low = <span class="number">0</span>, high = <span class="built_in">size</span> - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (low &lt;= high) &#123;</span><br><span class="line">        mid = (low + high) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (arr[mid] == key)</span><br><span class="line">            <span class="keyword">return</span> mid;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (arr[mid] &lt; key)</span><br><span class="line">            low = mid + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            high = mid - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 插值查找，数据需已排序</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">InsertSearch</span><span class="params">(<span class="keyword">int</span> *arr, <span class="keyword">int</span> <span class="built_in">size</span>, <span class="keyword">int</span> key)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> mid, low = <span class="number">0</span>, high = <span class="built_in">size</span> - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (low &lt;= high) &#123;</span><br><span class="line">        mid = low + (key - arr[low]) * (high - low) / (arr[high] - arr[low]);</span><br><span class="line">        <span class="keyword">if</span> (arr[mid] == key)</span><br><span class="line">            <span class="keyword">return</span> mid;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (arr[mid] &gt; key)</span><br><span class="line">            high = mid - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> </span><br><span class="line">            low = mid + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Fibonacci</span><span class="params">(<span class="keyword">int</span> *f, <span class="keyword">int</span> <span class="built_in">size</span>)</span> </span>&#123;</span><br><span class="line">    f[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    f[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">2</span>; i &lt; <span class="built_in">size</span>; i++)</span><br><span class="line">        f[i] = f[i<span class="number">-1</span>] + f[i<span class="number">-1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 斐波那契查找</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">FibonacciSearch</span><span class="params">(<span class="keyword">int</span> *arr, <span class="keyword">int</span> <span class="built_in">size</span>, <span class="keyword">int</span> key)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> mid = <span class="number">0</span>, low = <span class="number">0</span>, high = <span class="built_in">size</span> - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> k = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> F[<span class="built_in">size</span>];</span><br><span class="line"></span><br><span class="line">    Fibonacci(F, <span class="built_in">size</span>);</span><br><span class="line">    <span class="keyword">while</span> ( <span class="built_in">size</span> &gt; F[k] - <span class="number">1</span>)</span><br><span class="line">        ++k;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="built_in">size</span>; i &lt; F[k] - <span class="number">1</span>; ++i)</span><br><span class="line">        arr[i] = arr[high];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (low &lt;= high) &#123;</span><br><span class="line">        mid = low + F[k<span class="number">-1</span>] - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (arr[mid] &gt; key) &#123;</span><br><span class="line">            high = mid - <span class="number">1</span>;</span><br><span class="line">            k--;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (arr[mid] &lt; key) &#123;</span><br><span class="line">            low = mid + <span class="number">1</span>;</span><br><span class="line">            k -= <span class="number">2</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (mid &lt;= high)</span><br><span class="line">                <span class="keyword">return</span> mid;</span><br><span class="line">            <span class="keyword">else</span> </span><br><span class="line">                <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 树表查找</span></span><br><span class="line"><span class="comment">/*file:biTree.h*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> CHIYX_BITREE</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CHIYX_BITREE</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> NULL</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NULL 0</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> DataType;</span><br><span class="line"></span><br><span class="line"><span class="comment">//二叉树的节点结构</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">BiTreeNode</span> &#123;</span></span><br><span class="line">    DataType data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">BiTreeNode</span> *<span class="title">parent</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">BiTreeNode</span> *<span class="title">left</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">BiTreeNode</span> *<span class="title">right</span>;</span></span><br><span class="line">&#125;BiTreeNode, *BiTree;</span><br><span class="line"></span><br><span class="line"><span class="comment">//查找：返回第一个等于data域等于key的节点，不存在返回NULL</span></span><br><span class="line"><span class="function">BiTreeNode *<span class="title">search</span><span class="params">(BiTree *biTree, DataType key)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//返回二叉树的最小节点,空树返回NULL</span></span><br><span class="line"><span class="function">BiTreeNode *<span class="title">minImum</span><span class="params">(BiTree *biTree)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//返回二叉树的最大节点,空树返回NULL</span></span><br><span class="line"><span class="function">BiTreeNode *<span class="title">maxImum</span><span class="params">(BiTree *biTree)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//返回节点x的后继节点,不存在后继（节点x为最大节点）返回NULL</span></span><br><span class="line"><span class="function">BiTreeNode *<span class="title">successor</span><span class="params">(BiTreeNode *x)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//返回节点x的前驱节点，不存在前驱（节点x为最小节点）返回NULL</span></span><br><span class="line"><span class="function">BiTreeNode *<span class="title">predecessor</span><span class="params">(BiTreeNode *x)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//将值data插入到二叉树中（生成一个值为data的节点）</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insertNode</span><span class="params">(BiTree *biTree, DataType data)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//删除一个值为data的节点</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">deleteNode</span><span class="params">(BiTree *biTree, DataType data)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//中序遍历二叉树</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">inorderTraversal</span><span class="params">(BiTree *biTree, <span class="keyword">void</span> (*visitor)(BiTreeNode *node))</span></span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*file:biTree.c*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"biTree.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//查找：返回第一个等于data域等于key的节点，不存在返回NULL</span></span><br><span class="line"><span class="function">BiTreeNode *<span class="title">search</span><span class="params">(BiTree *biTree, DataType key)</span> </span>&#123;</span><br><span class="line">    BiTreeNode *curNode = *biTree;</span><br><span class="line">    <span class="keyword">while</span> (curNode != <span class="literal">NULL</span> &amp;&amp; curNode-&gt;data != key) &#123;</span><br><span class="line">        <span class="keyword">if</span> (key &lt; curNode-&gt;data)</span><br><span class="line">            curNode = curNode-&gt;left;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            curNode = curNode-&gt;right;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> curNode;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//返回二叉树的最小节点,空树返回NULL</span></span><br><span class="line"><span class="function">BiTreeNode *<span class="title">minImum</span><span class="params">(BiTree *biTree)</span> </span>&#123;</span><br><span class="line">    BiTreeNode *curNode = *biTree;</span><br><span class="line">    <span class="keyword">while</span> (curNode != <span class="literal">NULL</span> &amp;&amp; curNode-&gt;left != <span class="literal">NULL</span>)</span><br><span class="line">        curNode = curNode-&gt;left;</span><br><span class="line">    <span class="keyword">return</span> curNode;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//返回二叉树的最大节点,空树返回NULL</span></span><br><span class="line"><span class="function">BiTreeNode *<span class="title">maxImum</span><span class="params">(BiTree *biTree)</span> </span>&#123;</span><br><span class="line">    BiTreeNode *curNode = *biTree;</span><br><span class="line">    <span class="keyword">while</span> (curNode != <span class="literal">NULL</span> &amp;&amp; curNode-&gt;right != <span class="literal">NULL</span>)</span><br><span class="line">        curNode = curNode-&gt;right;</span><br><span class="line">    <span class="keyword">return</span> curNode;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//返回节点x的后继节点,不存在后继（节点x为最大节点）返回NULL</span></span><br><span class="line"><span class="function">BiTreeNode *<span class="title">successor</span><span class="params">(BiTreeNode *x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x == <span class="literal">NULL</span>) </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//存在右子树，则后继节点为其右子树中最小的节点</span></span><br><span class="line">    <span class="keyword">if</span> (x != <span class="literal">NULL</span> &amp;&amp; x-&gt;right != <span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> minImum(&amp;(x-&gt;right));</span><br><span class="line">    <span class="keyword">while</span> (x-&gt;parent != <span class="literal">NULL</span> &amp;&amp; x-&gt;parent-&gt;right == x)</span><br><span class="line">        x = x-&gt;parent;</span><br><span class="line">    <span class="keyword">return</span> x-&gt;parent; <span class="comment">//错误版本为 x， 此处应该返回父结点</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//返回节点x的前驱节点，不存在前驱（节点x为最小节点）返回NULL</span></span><br><span class="line"><span class="function">BiTreeNode *<span class="title">predecessor</span><span class="params">(BiTreeNode *x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x == <span class="literal">NULL</span>) </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//存在左子树，则后继节点为其左子树中最大的节点</span></span><br><span class="line">    <span class="keyword">if</span> (x != <span class="literal">NULL</span> &amp;&amp; x-&gt;left != <span class="literal">NULL</span>) </span><br><span class="line">        <span class="keyword">return</span> maxImum(&amp;(x-&gt;left));</span><br><span class="line">    <span class="keyword">while</span> (x-&gt;parent != <span class="literal">NULL</span> &amp;&amp; x-&gt;parent-&gt;left == x)</span><br><span class="line">        x = x-&gt;parent;</span><br><span class="line">    <span class="keyword">return</span> x-&gt;parent; <span class="comment">//错误版本为 x， 此处应该返回父结点</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insertNode</span><span class="params">(BiTree *biTree, DataType data)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//创建节点</span></span><br><span class="line">    BiTreeNode *targetNode;</span><br><span class="line">    targetNode = (BiTreeNode *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(BiTreeNode));</span><br><span class="line"></span><br><span class="line">    <span class="comment">//没有足够内存</span></span><br><span class="line">    <span class="keyword">if</span> (targetNode == <span class="literal">NULL</span>) <span class="keyword">return</span>;</span><br><span class="line">    targetNode-&gt;data = data;</span><br><span class="line">    targetNode-&gt;parent = <span class="literal">NULL</span>;</span><br><span class="line">    targetNode-&gt;left = <span class="literal">NULL</span>;</span><br><span class="line">    targetNode-&gt;right = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    BiTreeNode *p, *y;</span><br><span class="line">    p = *biTree;</span><br><span class="line">    y = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">while</span> (p != <span class="literal">NULL</span> ) &#123;</span><br><span class="line">        y = p;</span><br><span class="line">        <span class="keyword">if</span> (targetNode-&gt;data &lt; p-&gt;data)</span><br><span class="line">            p = p-&gt;left;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">          p = p-&gt;right;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//空树，将新节点置为树根</span></span><br><span class="line">    <span class="keyword">if</span> (y == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        *biTree = targetNode;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (targetNode-&gt;data &lt; y-&gt;data)</span><br><span class="line">            y-&gt;left = targetNode;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            y-&gt;right = targetNode;</span><br><span class="line">    &#125;</span><br><span class="line">    targetNode-&gt;parent = y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//删除一个值为data的节点</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">deleteNode</span><span class="params">(BiTree *biTree, DataType data)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//查找待删除的节点</span></span><br><span class="line">    BiTreeNode *targetNode, *x, *y;</span><br><span class="line">    targetNode = search(biTree, data);</span><br><span class="line">    <span class="keyword">if</span> (targetNode == <span class="literal">NULL</span>) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//找出真正的删除节点，如果目标节点最多只有一个子树，则其为真正删除的节点</span></span><br><span class="line">    <span class="comment">//否则其后继节点（最多只有一个子树，想想为什么）为真正删除的节点，然后将后继节点的值赋给目标节点</span></span><br><span class="line">    <span class="keyword">if</span> (targetNode-&gt;left == <span class="literal">NULL</span> || targetNode-&gt;right == <span class="literal">NULL</span>)</span><br><span class="line">        y = targetNode;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        y = successor(targetNode);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (y-&gt;left != <span class="literal">NULL</span>)</span><br><span class="line">        x = y-&gt;left;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        x = y-&gt;right;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (x != <span class="literal">NULL</span>)</span><br><span class="line">        x-&gt;parent = y-&gt;parent;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//如果y是根节点, 则根节点变为x</span></span><br><span class="line">    <span class="keyword">if</span> (y-&gt;parent == <span class="literal">NULL</span>)</span><br><span class="line">        *biTree = x;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">if</span> (y-&gt;parent-&gt;right == y)</span><br><span class="line">            y-&gt;parent-&gt;right = x;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">          y-&gt;parent-&gt;left = x;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (y != targetNode)</span><br><span class="line">        targetNode-&gt;data = y-&gt;data;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//释放y占有的空间</span></span><br><span class="line">    <span class="built_in">free</span>(y);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//中序遍历二叉树</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">inorderTraversal</span><span class="params">(BiTree *biTree, <span class="keyword">void</span> (*visitor)(BiTreeNode *node))</span> </span>&#123;</span><br><span class="line">    BiTreeNode *curNode;</span><br><span class="line"></span><br><span class="line">    curNode = *biTree;</span><br><span class="line">    <span class="keyword">if</span> (curNode != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        inorderTraversal(&amp;(curNode-&gt;left), visitor);  <span class="comment">//遍历左子树</span></span><br><span class="line">        visitor(curNode);                             <span class="comment">//访问节点</span></span><br><span class="line">        inorderTraversal(&amp;(curNode-&gt;right), visitor); <span class="comment">//遍历右子树</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 哈希查找</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;io.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;time.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> HASHSIZE 100</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NULLKEY -32768</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> L;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> *elem;</span><br><span class="line">    <span class="keyword">int</span> count;</span><br><span class="line">&#125; HashTable;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">initHashTable</span><span class="params">(HashTable *hashTable)</span> </span>&#123;</span><br><span class="line">    L = HASHSIZE;</span><br><span class="line">    hashTable-&gt;elem = (<span class="keyword">int</span> *) <span class="built_in">malloc</span>(L*<span class="keyword">sizeof</span>(<span class="keyword">int</span>));</span><br><span class="line">    hashTable-&gt;count = L;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; L; i++)</span><br><span class="line">        hashTable-&gt;elem[i] = NULLKEY;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">HashCalc</span><span class="params">(<span class="keyword">int</span> key)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> key % L;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(HashTable *hashTable, <span class="keyword">int</span> key)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> addr = HashCalc(key);</span><br><span class="line">    <span class="keyword">while</span> (hashTable-&gt;elem[addr] != NULLKEY)</span><br><span class="line">        addr = (addr + <span class="number">1</span>) % L;</span><br><span class="line">    hashTable-&gt;elem[addr] = key;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">HashSearch</span><span class="params">(HashTable *hashTable, <span class="keyword">int</span> key)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> addr = HashCalc(key);</span><br><span class="line">    <span class="keyword">while</span> (hashTable-&gt;elem[addr] != key) &#123;</span><br><span class="line">        add = (addr + <span class="number">1</span>) % L;</span><br><span class="line">        <span class="keyword">if</span> (hashTable-&gt;elem[addr] == NULLKEY || add == Hash(key))</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> addr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="C-实现七大查找算法"><a href="#C-实现七大查找算法" class="headerlink" title="C++实现七大查找算法"></a>C++实现七大查找算法</h5><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 顺序查找</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">LinearSearch</span><span class="params">(T *arr, <span class="keyword">int</span> <span class="built_in">size</span>, T key)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">size</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (arr[i] == key)</span><br><span class="line">            <span class="keyword">return</span> i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 分块查找</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">index</span> &#123;</span></span><br><span class="line">    T key;</span><br><span class="line">    <span class="keyword">int</span> start;</span><br><span class="line">&#125;newIndex[<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">DisSearch</span><span class="params">(T *arr, T key)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>, start;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (i &lt; <span class="number">3</span> &amp;&amp; key &gt; newIndex[i].key)</span><br><span class="line">        i++;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (i &gt;= <span class="number">3</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">    start = newIndex[i].start;</span><br><span class="line">    <span class="keyword">while</span> (start &lt;= start + <span class="number">5</span> &amp;&amp; arr[start] != key)</span><br><span class="line">        start++;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (start &gt; start + <span class="number">5</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> start;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 二分查找，数据需已排序</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">BinarySearch</span><span class="params">(T *arr, <span class="keyword">int</span> <span class="built_in">size</span>, T key)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> mid, low = <span class="number">0</span>, high = <span class="built_in">size</span> - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (low &lt;= high) &#123;</span><br><span class="line">        mid = (low + high) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (arr[mid] == key)</span><br><span class="line">            <span class="keyword">return</span> mid;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (arr[mid] &lt; key)</span><br><span class="line">            low = mid + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> </span><br><span class="line">            high = mid - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 插值查找，数据需已排序</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">InsertSearch</span><span class="params">(T *arr, <span class="keyword">int</span> <span class="built_in">size</span>, T key)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> mid, low = <span class="number">0</span>, high = <span class="built_in">size</span> - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (low &lt;= high) &#123;</span><br><span class="line">        mid = low + (key - arr[low]) * (high - low) / (<span class="keyword">int</span>) (arr[high] - arr[low]);</span><br><span class="line">        <span class="keyword">if</span> (arr[mid] == key)</span><br><span class="line">            <span class="keyword">return</span> mid;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (arr[mid] &gt; key)</span><br><span class="line">            high = mid - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> </span><br><span class="line">            low = mid + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Fibonacci</span><span class="params">(<span class="keyword">int</span> *f, <span class="keyword">int</span> <span class="built_in">size</span>)</span> </span>&#123;</span><br><span class="line">    f[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    f[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">2</span>; i &lt; <span class="built_in">size</span>; i++)</span><br><span class="line">        f[i] = f[i<span class="number">-1</span>] + f[i<span class="number">-1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 斐波那契查找</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">FibonacciSearch</span><span class="params">(T *arr, <span class="keyword">int</span> <span class="built_in">size</span>, T key)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> mid = <span class="number">0</span>, low = <span class="number">0</span>, high = <span class="built_in">size</span> - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> k = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> F[<span class="built_in">size</span>];</span><br><span class="line"></span><br><span class="line">    Fibonacci(F, <span class="built_in">size</span>);</span><br><span class="line">    <span class="keyword">while</span> ( <span class="built_in">size</span> &gt; F[k] - <span class="number">1</span>)</span><br><span class="line">        ++k;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="built_in">size</span>; i &lt; F[k] - <span class="number">1</span>; ++i)</span><br><span class="line">        arr[i] = arr[high];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (low &lt;= high) &#123;</span><br><span class="line">        mid = low + F[k<span class="number">-1</span>] - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (arr[mid] &gt; key) &#123;</span><br><span class="line">            high = mid - <span class="number">1</span>;</span><br><span class="line">            k--;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (arr[mid] &lt; key) &#123;</span><br><span class="line">            low = mid + <span class="number">1</span>;</span><br><span class="line">            k -= <span class="number">2</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (mid &lt;= high)</span><br><span class="line">                <span class="keyword">return</span> mid;</span><br><span class="line">            <span class="keyword">else</span> </span><br><span class="line">                <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 树表查找</span></span><br><span class="line"><span class="comment">/*file:biTree.h*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> CHIYX_BITREE</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CHIYX_BITREE</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> NULL</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NULL 0</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> DataType;</span><br><span class="line"><span class="comment">//二叉树的节点结构</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">BiTreeNode</span> &#123;</span></span><br><span class="line">    DataType data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">BiTreeNode</span> *<span class="title">parent</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">BiTreeNode</span> *<span class="title">left</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">BiTreeNode</span> *<span class="title">right</span>;</span></span><br><span class="line">&#125;BiTreeNode, *BiTree;</span><br><span class="line"></span><br><span class="line"><span class="comment">//查找：返回第一个等于data域等于key的节点，不存在返回NULL</span></span><br><span class="line"><span class="function">BiTreeNode *<span class="title">search</span><span class="params">(BiTree *biTree, DataType key)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//返回二叉树的最小节点,空树返回NULL</span></span><br><span class="line"><span class="function">BiTreeNode *<span class="title">minImum</span><span class="params">(BiTree *biTree)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//返回二叉树的最大节点,空树返回NULL</span></span><br><span class="line"><span class="function">BiTreeNode *<span class="title">maxImum</span><span class="params">(BiTree *biTree)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//返回节点x的后继节点,不存在后继（节点x为最大节点）返回NULL</span></span><br><span class="line"><span class="function">BiTreeNode *<span class="title">successor</span><span class="params">(BiTreeNode *x)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//返回节点x的前驱节点，不存在前驱（节点x为最小节点）返回NULL</span></span><br><span class="line"><span class="function">BiTreeNode *<span class="title">predecessor</span><span class="params">(BiTreeNode *x)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//将值data插入到二叉树中（生成一个值为data的节点）</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insertNode</span><span class="params">(BiTree *biTree, DataType data)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//删除一个值为data的节点</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">deleteNode</span><span class="params">(BiTree *biTree, DataType data)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//中序遍历二叉树</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">inorderTraversal</span><span class="params">(BiTree *biTree, <span class="keyword">void</span> (*visitor)(BiTreeNode *node))</span></span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*file:biTree.c*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"biTree.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//查找：返回第一个等于data域等于key的节点，不存在返回NULL</span></span><br><span class="line"><span class="function">BiTreeNode *<span class="title">search</span><span class="params">(BiTree *biTree, DataType key)</span> </span>&#123;</span><br><span class="line">    BiTreeNode *curNode = *biTree;</span><br><span class="line">    <span class="keyword">while</span> (curNode != <span class="literal">NULL</span> &amp;&amp; curNode-&gt;data != key) &#123;</span><br><span class="line">        <span class="keyword">if</span> (key &lt; curNode-&gt;data)</span><br><span class="line">            curNode = curNode-&gt;left;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            curNode = curNode-&gt;right;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> curNode;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//返回二叉树的最小节点,空树返回NULL</span></span><br><span class="line"><span class="function">BiTreeNode *<span class="title">minImum</span><span class="params">(BiTree *biTree)</span> </span>&#123;</span><br><span class="line">    BiTreeNode *curNode = *biTree;</span><br><span class="line">    <span class="keyword">while</span> (curNode != <span class="literal">NULL</span> &amp;&amp; curNode-&gt;left != <span class="literal">NULL</span>)</span><br><span class="line">        curNode = curNode-&gt;left;</span><br><span class="line">    <span class="keyword">return</span> curNode;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//返回二叉树的最大节点,空树返回NULL</span></span><br><span class="line"><span class="function">BiTreeNode *<span class="title">maxImum</span><span class="params">(BiTree *biTree)</span> </span>&#123;</span><br><span class="line">    BiTreeNode *curNode = *biTree;</span><br><span class="line">    <span class="keyword">while</span> (curNode != <span class="literal">NULL</span> &amp;&amp; curNode-&gt;right != <span class="literal">NULL</span>)</span><br><span class="line">        curNode = curNode-&gt;right;</span><br><span class="line">    <span class="keyword">return</span> curNode;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//返回节点x的后继节点,不存在后继（节点x为最大节点）返回NULL</span></span><br><span class="line"><span class="function">BiTreeNode *<span class="title">successor</span><span class="params">(BiTreeNode *x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//存在右子树，则后继节点为其右子树中最小的节点</span></span><br><span class="line">    <span class="keyword">if</span> (x != <span class="literal">NULL</span> &amp;&amp; x-&gt;right != <span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> minImum(&amp;(x-&gt;right));</span><br><span class="line">    <span class="keyword">while</span> (x-&gt;parent != <span class="literal">NULL</span> &amp;&amp; x-&gt;parent-&gt;right == x)</span><br><span class="line">        x = x-&gt;parent;</span><br><span class="line">    <span class="keyword">return</span> x-&gt;parent; <span class="comment">//错误版本为 x， 此处应该返回父结点</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//返回节点x的前驱节点，不存在前驱（节点x为最小节点）返回NULL</span></span><br><span class="line"><span class="function">BiTreeNode *<span class="title">predecessor</span><span class="params">(BiTreeNode *x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x == <span class="literal">NULL</span>) </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//存在左子树，则后继节点为其左子树中最大的节点</span></span><br><span class="line">    <span class="keyword">if</span> (x != <span class="literal">NULL</span> &amp;&amp; x-&gt;left != <span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> maxImum(&amp;(x-&gt;left));</span><br><span class="line">    <span class="keyword">while</span> (x-&gt;parent != <span class="literal">NULL</span> &amp;&amp; x-&gt;parent-&gt;left == x)</span><br><span class="line">        x = x-&gt;parent;</span><br><span class="line">    <span class="keyword">return</span> x-&gt;parent; <span class="comment">//错误版本为 x， 此处应该返回父结点</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insertNode</span><span class="params">(BiTree *biTree, DataType data)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//创建节点</span></span><br><span class="line">    BiTreeNode *targetNode;</span><br><span class="line">    targetNode = (BiTreeNode *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(BiTreeNode));</span><br><span class="line"></span><br><span class="line">    <span class="comment">//没有足够内存</span></span><br><span class="line">    <span class="keyword">if</span> (targetNode == <span class="literal">NULL</span>) <span class="keyword">return</span>;</span><br><span class="line">    targetNode-&gt;data = data;</span><br><span class="line">    targetNode-&gt;parent = <span class="literal">NULL</span>;</span><br><span class="line">    targetNode-&gt;left = <span class="literal">NULL</span>;</span><br><span class="line">    targetNode-&gt;right = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    BiTreeNode *p, *y;</span><br><span class="line">    p = *biTree;</span><br><span class="line">    y = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">while</span> (p != <span class="literal">NULL</span> ) &#123;</span><br><span class="line">        y = p;</span><br><span class="line">        <span class="keyword">if</span> (targetNode-&gt;data &lt; p-&gt;data)</span><br><span class="line">            p = p-&gt;left;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            p = p-&gt;right;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//空树，将新节点置为树根</span></span><br><span class="line">    <span class="keyword">if</span> (y == <span class="literal">NULL</span>)</span><br><span class="line">        *biTree = targetNode;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (targetNode-&gt;data &lt; y-&gt;data)</span><br><span class="line">            y-&gt;left = targetNode;</span><br><span class="line">        <span class="keyword">else</span> </span><br><span class="line">          y-&gt;right = targetNode;</span><br><span class="line">    &#125;</span><br><span class="line">    targetNode-&gt;parent = y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//删除一个值为data的节点</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">deleteNode</span><span class="params">(BiTree *biTree, DataType data)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//查找待删除的节点</span></span><br><span class="line">    BiTreeNode *targetNode, *x, *y;</span><br><span class="line"></span><br><span class="line">    targetNode = search(biTree, data);</span><br><span class="line">    <span class="keyword">if</span> (targetNode == <span class="literal">NULL</span>) </span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//找出真正的删除节点，如果目标节点最多只有一个子树，则其为真正删除的节点</span></span><br><span class="line">    <span class="comment">//否则其后继节点（最多只有一个子树，想想为什么）为真正删除的节点，然后将后继节点的值赋给目标节点</span></span><br><span class="line">    <span class="keyword">if</span> (targetNode-&gt;left == <span class="literal">NULL</span> || targetNode-&gt;right == <span class="literal">NULL</span>)</span><br><span class="line">        y = targetNode;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        y = successor(targetNode);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (y-&gt;left != <span class="literal">NULL</span>)</span><br><span class="line">        x = y-&gt;left;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        x = y-&gt;right;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (x != <span class="literal">NULL</span>)</span><br><span class="line">        x-&gt;parent = y-&gt;parent;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//如果y是根节点, 则根节点变为x</span></span><br><span class="line">    <span class="keyword">if</span> (y-&gt;parent == <span class="literal">NULL</span>)</span><br><span class="line">        *biTree = x;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (y-&gt;parent-&gt;right == y)</span><br><span class="line">            y-&gt;parent-&gt;right = x;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            y-&gt;parent-&gt;left = x;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (y != targetNode)</span><br><span class="line">        targetNode-&gt;data = y-&gt;data;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//释放y占有的空间</span></span><br><span class="line">    <span class="built_in">free</span>(y);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//中序遍历二叉树</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">inorderTraversal</span><span class="params">(BiTree *biTree, <span class="keyword">void</span> (*visitor)(BiTreeNode *node))</span> </span>&#123;</span><br><span class="line">    BiTreeNode *curNode;</span><br><span class="line"></span><br><span class="line">    curNode = *biTree;</span><br><span class="line">    <span class="keyword">if</span> (curNode != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        inorderTraversal(&amp;(curNode-&gt;left), visitor);  <span class="comment">//遍历左子树</span></span><br><span class="line">        visitor(curNode);                             <span class="comment">//访问节点</span></span><br><span class="line">        inorderTraversal(&amp;(curNode-&gt;right), visitor); <span class="comment">//遍历右子树</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 哈希查找</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;io.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;time.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> HASHSIZE 100</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NULLKEY -32768</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> L;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    T *elem;</span><br><span class="line">    <span class="keyword">int</span> count;</span><br><span class="line">&#125; HashTable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">initHashTable</span><span class="params">(HashTable *hashTable)</span></span></span><br><span class="line"><span class="function">    L </span>= HASHSIZE;</span><br><span class="line">    hashTable-&gt;elem = (T *) <span class="keyword">new</span>(L*<span class="keyword">sizeof</span>(T));</span><br><span class="line">    hashTable-&gt;count = L;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; L; i++)</span><br><span class="line">        hashTable-&gt;elem[i] = NULLKEY;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">HashCalc</span><span class="params">(T key)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">int</span> (key % L);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(HashTable *hashTable, T key)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> addr = HashCalc(key);</span><br><span class="line">    <span class="keyword">while</span> (hashTable-&gt;elem[addr] != NULLKEY)</span><br><span class="line">        addr = (addr + <span class="number">1</span>) % L;</span><br><span class="line">    hashTable-&gt;elem[addr] = key;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">HashSearch</span><span class="params">(HashTable *hashTable, T key)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> addr = HashCalc(key);</span><br><span class="line">    <span class="keyword">while</span> (hashTable-&gt;elem[addr] != key) &#123;</span><br><span class="line">        add = (addr + <span class="number">1</span>) % L;</span><br><span class="line">        <span class="keyword">if</span> (hashTable-&gt;elem[addr] == NULLKEY || add == Hash(key))</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> addr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="Java实现七大查找算法"><a href="#Java实现七大查找算法" class="headerlink" title="Java实现七大查找算法"></a>Java实现七大查找算法</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Search</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[<span class="number">10</span>] arr = &#123;<span class="number">100</span>,<span class="number">80</span>,<span class="number">10</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">13</span>,<span class="number">9</span>&#125;;</span><br><span class="line">        <span class="comment">// xxxSearch(arr);</span></span><br><span class="line">        System.out.print(arr.toString());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 顺序查找</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> &lt;T extends Comparable&lt;? <span class="keyword">super</span> T&gt;&gt; linearSearch(T[] arr, T key) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (key == arr[i])</span><br><span class="line">                <span class="keyword">return</span> i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 二分查找</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> &lt;T extends Comparable&lt;? <span class="keyword">super</span> T&gt;&gt; binarySearch(T[] arr, T key) &#123;</span><br><span class="line">        <span class="keyword">int</span> mid;</span><br><span class="line">        <span class="keyword">int</span> low = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> high = arr.length - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (low &lt;= high) &#123;</span><br><span class="line">            mid = (low + high) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span> (key == arr[mid]) &#123;</span><br><span class="line">                <span class="keyword">return</span> mid;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (key &lt; arr[mid]) &#123;</span><br><span class="line">                high = mid - <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                low = mid + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 插值查找</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> &lt;T extends Comparable&lt;? <span class="keyword">super</span> T&gt;&gt; insertSearch(T[] arr, T key) &#123;</span><br><span class="line">        <span class="keyword">int</span> mid;</span><br><span class="line">        <span class="keyword">int</span> low = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> high = arr.length - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (low &lt;= high) &#123;</span><br><span class="line">            mid = low + (key - arr[low]) * (high - low) / (arr[high] - arr[low]);</span><br><span class="line">            <span class="keyword">if</span> (arr[mid] == key) &#123;</span><br><span class="line">                <span class="keyword">return</span> mid;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (arr[mid] &gt; key) &#123;</span><br><span class="line">                high = mid - <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                low = mid + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 斐波那契查找</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">fibonacciSearch</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[arr.length] F;</span><br><span class="line">        F[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        F[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; arr.length; i++)</span><br><span class="line">            F[i] = F[i-<span class="number">1</span>] + F[i-<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> k = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (arr.length &gt; F[k] - <span class="number">1</span>)</span><br><span class="line">            k++;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length, F[k] - <span class="number">1</span>)</span><br><span class="line">            arr[i] = arr[high];</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">int</span> mid;</span><br><span class="line">        <span class="keyword">int</span> low = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> high = arr.length - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (low &lt;= high) &#123;</span><br><span class="line">            mid = low + F[k-<span class="number">1</span>] - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (arr[mid] &gt; key) &#123;</span><br><span class="line">                high = mid - <span class="number">1</span>;</span><br><span class="line">                k--;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (arr[mid] &lt; key) &#123;</span><br><span class="line">                low = mid + <span class="number">1</span>;</span><br><span class="line">                k -= <span class="number">2</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (mid &lt;= high)</span><br><span class="line">                    <span class="keyword">return</span> mid;</span><br><span class="line">                <span class="keyword">else</span> </span><br><span class="line">                    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="Python实现七大查找算法"><a href="#Python实现七大查找算法" class="headerlink" title="Python实现七大查找算法"></a>Python实现七大查找算法</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 顺序查找</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">LinearSearch</span><span class="params">(arr, key)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(arr)):</span><br><span class="line">        <span class="keyword">if</span> key == arr[i]:</span><br><span class="line">            <span class="keyword">return</span> i</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 二分查找</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">BinSearch</span><span class="params">(arr, key)</span>:</span></span><br><span class="line">    low, high = <span class="number">0</span>, len(arr) - <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> low &lt;= high:</span><br><span class="line">        mid = (low + high) / <span class="number">2</span></span><br><span class="line">        <span class="keyword">if</span> key == arr[mid]:</span><br><span class="line">            <span class="keyword">return</span> mid</span><br><span class="line">        <span class="keyword">elif</span> key &lt; arr[mid]:</span><br><span class="line">            high = mid - <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            low = mid + <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 插值查找</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">InsertSearch</span><span class="params">(arr, key)</span>:</span></span><br><span class="line">    low, high = <span class="number">0</span>, len(arr) - <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> low &lt;= high:</span><br><span class="line">        mid = low + (key - arr[low]) * (high - low) / (arr[high] - arr[low])</span><br><span class="line">        <span class="keyword">if</span> arr[mid] == key:</span><br><span class="line">            <span class="keyword">return</span> mid</span><br><span class="line">        <span class="keyword">elif</span> arr[mid] &gt; key:</span><br><span class="line">            high = mid - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            low = mid + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 斐波那契查找</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">FibonacciSearch</span><span class="params">(arr, key)</span>:</span></span><br><span class="line">    <span class="comment">#初始化斐波那契数列</span></span><br><span class="line">    F = [<span class="number">0</span>]* len(arr)</span><br><span class="line">    F[<span class="number">0</span>], F[<span class="number">1</span>] = <span class="number">1</span>, <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>, len(arr)):</span><br><span class="line">        F[i] = F[i<span class="number">-1</span>] + F[i<span class="number">-1</span>]</span><br><span class="line"></span><br><span class="line">    k = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> len(arr) &gt; F[k] - <span class="number">1</span>:</span><br><span class="line">        k += <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(arr), F[k] - <span class="number">1</span>):</span><br><span class="line">        arr[i] = arr[high]</span><br><span class="line"></span><br><span class="line">    low, high = <span class="number">0</span>, len(arr) - <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> low &lt;= high:</span><br><span class="line">        mid = low + F[k<span class="number">-1</span>] - <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> arr[mid] &gt; key:</span><br><span class="line">            high = mid - <span class="number">1</span></span><br><span class="line">            k -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> arr[mid] &lt; key:</span><br><span class="line">            low = mid + <span class="number">1</span></span><br><span class="line">            k -= <span class="number">2</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">if</span> mid &lt;= high:</span><br><span class="line">                <span class="keyword">return</span> mid</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 哈希查找</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HashStruct</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.elem = HashStruct</span><br><span class="line">        self.count = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">HashSearch</span><span class="params">(hashTable, key)</span>:</span></span><br><span class="line">    addr = key % len(hashTable)</span><br><span class="line">    <span class="keyword">while</span> hashTable.elem[addr] != key:</span><br><span class="line">        addr = (addr + <span class="number">1</span>) % L</span><br><span class="line">        <span class="keyword">if</span> hashTable.elem[addr] == <span class="literal">None</span> || addr == (key % len(hashTable)):</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span>;</span><br><span class="line">    <span class="keyword">return</span> addr</span><br></pre></td></tr></table></figure>

<h5 id="Go实现七大查找算法"><a href="#Go实现七大查找算法" class="headerlink" title="Go实现七大查找算法"></a>Go实现七大查找算法</h5><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 顺序查找</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">LinearSearch</span><span class="params">(arr []<span class="keyword">int</span>, key <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">    <span class="keyword">for</span> i, v := <span class="keyword">range</span> arr &#123;</span><br><span class="line">        <span class="keyword">if</span> key == v &#123;</span><br><span class="line">            <span class="keyword">return</span> i</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 二分查找</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">BinSearch</span><span class="params">(arr []<span class="keyword">int</span>, key <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">    mid, low , high := <span class="number">0</span>, <span class="number">0</span>, <span class="built_in">len</span>(arr) - <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> low &lt;= high &#123;</span><br><span class="line">        mid = (low + high) / <span class="number">2</span></span><br><span class="line">        <span class="keyword">if</span> key == arr[mid] &#123;</span><br><span class="line">            <span class="keyword">return</span> mid</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> key &lt; arr[mid] &#123;</span><br><span class="line">            high = mid - <span class="number">1</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            low = mid + <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 插值查找</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">InsertSearch</span><span class="params">(arr, key)</span></span> &#123;</span><br><span class="line">    mid, low, high := <span class="number">0</span>, <span class="number">0</span>, <span class="built_in">len</span>(arr) - <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> low &lt;= high &#123;</span><br><span class="line">        mid = low + (key - arr[low]) * (high - low) / (arr[high] - arr[low])</span><br><span class="line">        <span class="keyword">if</span> arr[mid] == key &#123;</span><br><span class="line">            <span class="keyword">return</span> mid</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> arr[mid] &gt; key &#123;</span><br><span class="line">            high = mid - <span class="number">1</span></span><br><span class="line">        &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">            low = mid + <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 斐波那契查找</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">FibonacciSearch</span><span class="params">(arr, key)</span></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> F [<span class="built_in">len</span>(arr)]<span class="keyword">int</span></span><br><span class="line">    F[<span class="number">0</span>], F[<span class="number">1</span>] = <span class="number">1</span>, <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">2</span>; i &lt; <span class="built_in">len</span>(arr); i++ &#123;</span><br><span class="line">        F[i] = F[i<span class="number">-1</span>] + F[i<span class="number">-1</span>]</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    k, low, high := <span class="number">0</span>, <span class="number">0</span>, <span class="built_in">len</span>(arr) - <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> <span class="built_in">len</span>(arr) &gt; F[k] - <span class="number">1</span> &#123;</span><br><span class="line">        k++</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> i := <span class="built_in">len</span>(arr); i &lt; F[k] - <span class="number">1</span>; i++ &#123;</span><br><span class="line">        arr[i] = arr[high]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> low &lt;= high &#123;</span><br><span class="line">        mid = low + F[k<span class="number">-1</span>] - <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> arr[mid] &gt; key &#123;</span><br><span class="line">            high = mid - <span class="number">1</span></span><br><span class="line">            k--</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> arr[mid] &lt; key &#123;</span><br><span class="line">            low = mid + <span class="number">1</span></span><br><span class="line">            k -= <span class="number">2</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> mid &lt;= high &#123;</span><br><span class="line">                <span class="keyword">return</span> mid</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 哈希查找</span></span><br><span class="line"><span class="keyword">type</span> HashTable <span class="keyword">struct</span> &#123;</span><br><span class="line">    elem *HashTable</span><br><span class="line">    count <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">HashSearch</span><span class="params">(hashTable, key)</span></span> &#123;</span><br><span class="line">    addr := key % <span class="built_in">len</span>(hashTable)</span><br><span class="line">    <span class="keyword">for</span> hashTable.elem[addr] != key &#123;</span><br><span class="line">        addr = (addr + <span class="number">1</span>) % <span class="built_in">len</span>(hashTable)</span><br><span class="line">        <span class="keyword">if</span> hashTable.elem[addr] == <span class="string">""</span> || addr == (key % <span class="built_in">len</span>(hashTable)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> addr</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="Rust实现七大查找算法"><a href="#Rust实现七大查找算法" class="headerlink" title="Rust实现七大查找算法"></a>Rust实现七大查找算法</h5><figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">use</span> std::cmp::&#123;<span class="built_in">PartialEq</span>, <span class="built_in">PartialOrd</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 顺序查找</span></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">LinearSearch</span></span>&lt;T:<span class="built_in">PartialEq</span>&gt;(arr: &amp;[T], key: &amp;T) -&gt; <span class="built_in">Option</span>&lt;<span class="built_in">usize</span>&gt; &#123;</span><br><span class="line">    <span class="keyword">for</span> (i, data) <span class="keyword">in</span> arr.iter().enumerate() &#123;</span><br><span class="line">        <span class="keyword">if</span> key == data &#123;</span><br><span class="line">            <span class="literal">Some</span>(i)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="literal">None</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 二分查找</span></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">BinarySearch</span></span>&lt;T:<span class="built_in">PartialEq</span> + <span class="built_in">PartialOrd</span>&gt;(arr: &amp;[T], key: &amp;T) -&gt; <span class="built_in">Option</span>&lt;<span class="built_in">usize</span>&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> arr.is_empty() &#123;</span><br><span class="line">        <span class="literal">None</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> mid: <span class="built_in">usize</span>;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> (low, high) = (<span class="number">0</span>, arr.len() - <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">while</span> (low &lt;= high) &#123;</span><br><span class="line">        mid = low + (high - low) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> key &lt; &amp;arr[mid] &#123;</span><br><span class="line">            high = mid - <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> key &gt; arr[mid] &#123;</span><br><span class="line">            low = mid + <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="literal">Some</span>(mid)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="literal">None</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 插值查找</span></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">InsertSearch</span></span>&lt;T:<span class="built_in">PartialEq</span> + <span class="built_in">PartialOrd</span>&gt;(arr: &amp;[T], key: &amp;T) -&gt; <span class="built_in">Option</span>&lt;<span class="built_in">usize</span>&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> mid: <span class="built_in">usize</span>;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> (low, high) = (<span class="number">0</span>, arr.len() - <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">while</span> low &lt;= high &#123;</span><br><span class="line">        mid = low + (key - arr[low]) * (high - low) / (arr[high] - arr[low]);</span><br><span class="line">        <span class="keyword">if</span> key == &amp;arr[mid] &#123;</span><br><span class="line">            <span class="literal">Some</span>(mid)</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> key &lt; &amp;arr[mid] &#123;</span><br><span class="line">            high = mid - <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            low = mid + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="literal">None</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 斐波那契查找</span></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">FibonacciSearch</span></span>&lt;T:<span class="built_in">PartialEq</span> + <span class="built_in">PartialOrd</span>&gt;(arr: &amp;[T], key: &amp;T) -&gt; <span class="built_in">Option</span>&lt;<span class="built_in">usize</span>&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> F: [<span class="built_in">usize</span>; arr.len()];</span><br><span class="line">    F[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    F[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">2</span>..arr.len() &#123; </span><br><span class="line">        F[i] = F[i-<span class="number">1</span>] + F[i-<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> k = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> mid <span class="built_in">usize</span>;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> (low, high) = (<span class="number">0</span>, arr.len() - <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">while</span> high &gt; F[k] - <span class="number">1</span> &#123;</span><br><span class="line">        k += <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> arr.len()..F[k] - <span class="number">1</span> &#123;</span><br><span class="line">        arr[i] = arr[high];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> low &lt;= high &#123;</span><br><span class="line">        mid = low + F[k-<span class="number">1</span>] - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> key &lt; &amp;arr[mid] &#123;</span><br><span class="line">            high = mid - <span class="number">1</span>;</span><br><span class="line">            k -= <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> key &gt; &amp;arr[mid] &#123;</span><br><span class="line">            low = mid + <span class="number">1</span>;</span><br><span class="line">            k -= <span class="number">2</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> mid &lt;= high &#123;</span><br><span class="line">                <span class="literal">Some</span>(mid)</span><br><span class="line">            &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="literal">None</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="literal">None</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 哈希查找</span></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">HashSearch</span></span>&lt;T:<span class="built_in">PartialEq</span>&gt;(hashTable: &amp;HashTable&lt;T&gt;, key: &amp;T) -&gt; <span class="built_in">Option</span>&lt;<span class="built_in">usize</span>&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> addr:<span class="built_in">usize</span>;</span><br><span class="line">    addr = key % len(hashTable);</span><br><span class="line">    <span class="keyword">while</span> &amp;hashTable.elem[addr] != key &#123;</span><br><span class="line">        addr = (addr + <span class="number">1</span>) % &amp;hashTable.len()</span><br><span class="line">        <span class="keyword">if</span> &amp;hashTable.elem[addr] == <span class="string">""</span> || addr == (key % &amp;hashTable.len()) &#123;</span><br><span class="line">            <span class="literal">None</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="literal">Some</span>(addr)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="Dart实现七大查找算法"><a href="#Dart实现七大查找算法" class="headerlink" title="Dart实现七大查找算法"></a>Dart实现七大查找算法</h5><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 线性查找</span></span><br><span class="line"><span class="built_in">int</span> LinearSearch(<span class="built_in">List</span>&lt;<span class="built_in">int</span>&gt; arr, <span class="built_in">int</span> key) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (arr[i] == key) &#123;</span><br><span class="line">            <span class="keyword">return</span> i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 二分查找</span></span><br><span class="line"><span class="built_in">int</span> BinarySearch(<span class="built_in">List</span>&lt;<span class="built_in">int</span>&gt; arr, <span class="built_in">int</span> key) &#123;</span><br><span class="line">    <span class="keyword">if</span> arr.length == <span class="number">0</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">int</span> low = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">int</span> high = arr.length  - <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">int</span> mid;</span><br><span class="line">    <span class="keyword">while</span> (low &lt;= high) &#123;</span><br><span class="line">        mid = (low + high) ~/ <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (key == arr[mid]) &#123;</span><br><span class="line">            <span class="keyword">return</span> mid;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (key &lt; arr[mid]) &#123;</span><br><span class="line">            high = mid - <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            low = mid + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 插值查找</span></span><br><span class="line"><span class="built_in">int</span> InsertSearch(<span class="built_in">List</span>&lt;<span class="built_in">int</span>&gt; arr, <span class="built_in">int</span> key) &#123;</span><br><span class="line">    <span class="built_in">int</span> mid;</span><br><span class="line">    <span class="built_in">int</span> low = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">int</span> high = arr.length - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (low &lt;= high) &#123;</span><br><span class="line">        mid = low + (key - arr[low]) * (high - low) ~/ (arr[high] - arr[low]);</span><br><span class="line">        <span class="keyword">if</span> (key == arr[mid]) &#123;</span><br><span class="line">            <span class="keyword">return</span> mid;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (key &lt; arr[mid]) &#123;</span><br><span class="line">            high = mid - <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            low = mid + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 斐波那契查找</span></span><br><span class="line"><span class="built_in">int</span> FibonacciSearch(<span class="built_in">List</span>&lt;<span class="built_in">int</span>&gt; arr, <span class="built_in">int</span> key) &#123;</span><br><span class="line">    <span class="built_in">List</span>&lt;<span class="built_in">int</span>&gt; F = <span class="built_in">List</span>();</span><br><span class="line">    F[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    F[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">2</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">        F.add(F[i<span class="number">-1</span>] + F[i<span class="number">-1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">int</span> k = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> ( arr.length &gt; F[k] - <span class="number">1</span>) &#123;</span><br><span class="line">        k++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">int</span> mid = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">int</span> low = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">int</span> high = arr.length - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i = arr.length; i &lt; F[k] - <span class="number">1</span>; i++) &#123;</span><br><span class="line">        arr[i] = arr[high];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (low &lt;= high) &#123;</span><br><span class="line">        mid = low + F[k<span class="number">-1</span>] - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (key &lt; arr[mid]) &#123;</span><br><span class="line">            high = mid - <span class="number">1</span>;</span><br><span class="line">            k--;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (arr[mid] &lt; key) &#123;</span><br><span class="line">            low = mid + <span class="number">1</span>;</span><br><span class="line">            k -= <span class="number">2</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (mid &lt;= high) &#123;</span><br><span class="line">                <span class="keyword">return</span> mid;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>编程语言</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>C</tag>
        <tag>C++</tag>
        <tag>Java</tag>
        <tag>Go</tag>
        <tag>Rust</tag>
        <tag>Dart</tag>
      </tags>
  </entry>
  <entry>
    <title>C、C++、Java、Python、Go、Rust、Dart实现十大排序算法</title>
    <url>/title/44f3ccfc/</url>
    <content><![CDATA[<p><img src="https://s3.ax1x.com/2020/11/15/Diyb9g.png" alt="cpygorsdart"></p>
<a id="more"></a>

<p>本文为七种语言对比学习的第二十五篇：实现十大排序算法。</p>
<p>排序和查找是最基本的算法，也是笔试面试的重要考点。通过不同语言的实现，可以看到算法的思想是一样的，当然语言不同算法实现起来长短不一。</p>
<h4 id="排序算法"><a href="#排序算法" class="headerlink" title="排序算法"></a>排序算法</h4><p>排序算法可分为比较类和非比较类，比较类算法需要对数据进行比较以排序。常见排序算法有十种：</p>
<table>
<thead>
<tr>
<th align="center">序号</th>
<th align="left">排序算法</th>
<th align="left">最坏时间复杂度</th>
<th align="left">平均时间复杂度</th>
<th align="left">最好时间复杂度</th>
<th align="left">空间复杂度</th>
<th align="left">稳定性</th>
<th align="left">综合类别</th>
</tr>
</thead>
<tbody><tr>
<td align="center">1</td>
<td align="left">冒泡排序</td>
<td align="left">O($n^2$)</td>
<td align="left">O($n^2$)</td>
<td align="left">O($n$)</td>
<td align="left">O(1)</td>
<td align="left">稳定</td>
<td align="left">交换比较类</td>
</tr>
<tr>
<td align="center">2</td>
<td align="left">快速排序</td>
<td align="left">O($n^2$)</td>
<td align="left">O($nlog_2n$)</td>
<td align="left">O($nlog_2n$)</td>
<td align="left">O($nlog_2n$)</td>
<td align="left">不稳定</td>
<td align="left">交换比较类</td>
</tr>
<tr>
<td align="center">3</td>
<td align="left">选择排序</td>
<td align="left">O($n^2$)</td>
<td align="left">O($n^2$)</td>
<td align="left">O($n^2$)</td>
<td align="left">O($1$)</td>
<td align="left">不稳定</td>
<td align="left">选择比较类</td>
</tr>
<tr>
<td align="center">4</td>
<td align="left">堆排序</td>
<td align="left">O($nlog_2n$)</td>
<td align="left">O($nlog_2n$)</td>
<td align="left">O($nlog_2n$)</td>
<td align="left">O($1$)</td>
<td align="left">不稳定</td>
<td align="left">选择比较类</td>
</tr>
<tr>
<td align="center">5</td>
<td align="left">插入排序</td>
<td align="left">O($n^2$)</td>
<td align="left">O($n^2$)</td>
<td align="left">O($n$)</td>
<td align="left">O($1$)</td>
<td align="left">稳定</td>
<td align="left">插入比较类</td>
</tr>
<tr>
<td align="center">6</td>
<td align="left">希尔排序</td>
<td align="left">O($n^2$)</td>
<td align="left">O($n^{1.3}$)</td>
<td align="left">O($n$)</td>
<td align="left">O($1$)</td>
<td align="left">不稳定</td>
<td align="left">插入比较类</td>
</tr>
<tr>
<td align="center">7</td>
<td align="left">归并排序</td>
<td align="left">O($nlog_2n$)</td>
<td align="left">O($nlog_2n$)</td>
<td align="left">O($nlog_2n$)</td>
<td align="left">O($n$)</td>
<td align="left">稳定</td>
<td align="left">归并比较类</td>
</tr>
<tr>
<td align="center">8</td>
<td align="left">计数排序</td>
<td align="left">O($n+k$)</td>
<td align="left">O($n+k$)</td>
<td align="left">O($n+k$)</td>
<td align="left">O($n+k$)</td>
<td align="left">稳定</td>
<td align="left">非比较类</td>
</tr>
<tr>
<td align="center">9</td>
<td align="left">桶排序</td>
<td align="left">O($n^2$)</td>
<td align="left">O($n+k$)</td>
<td align="left">O($n$)</td>
<td align="left">O($n+k$)</td>
<td align="left">稳定</td>
<td align="left">非比较类</td>
</tr>
<tr>
<td align="center">10</td>
<td align="left">基数排序</td>
<td align="left">O($nk$)</td>
<td align="left">O($nk$)</td>
<td align="left">O($nk$)</td>
<td align="left">O($n+k$)</td>
<td align="left">稳定</td>
<td align="left">非比较类</td>
</tr>
</tbody></table>
<h4 id="C实现十大排序算法"><a href="#C实现十大排序算法" class="headerlink" title="C实现十大排序算法"></a>C实现十大排序算法</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span> *a, <span class="keyword">int</span> *b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> temp;</span><br><span class="line">    temp = *a;</span><br><span class="line">    *a = *b;</span><br><span class="line">    *b = temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 冒泡排序，若已排序则提前退出</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BubbleSort</span><span class="params">(<span class="keyword">int</span> *<span class="built_in">array</span>, <span class="keyword">int</span> <span class="built_in">size</span>)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> exchange = <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">size</span>--;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">size</span> &gt; <span class="number">0</span> &amp;&amp; exchange) &#123; </span><br><span class="line">        exchange = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="built_in">size</span>; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">array</span>[j] &gt; <span class="built_in">array</span>[j+<span class="number">1</span>]) &#123;</span><br><span class="line">                swap(<span class="built_in">array</span>[j], <span class="built_in">array</span>[j+<span class="number">1</span>]);</span><br><span class="line">                exchange = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">size</span>--;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">partition</span><span class="params">(<span class="keyword">int</span> *arr, <span class="keyword">int</span> first, <span class="keyword">int</span> last)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> pivotVal  = arr[first];</span><br><span class="line">    <span class="keyword">int</span> leftmark  = first + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> rightmark = last;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (leftmark &lt;= rightmark) &#123;</span><br><span class="line">        <span class="keyword">while</span> (leftmark &lt;= rightmark) &amp;&amp; (arr[leftmark] &lt;= pivotVal)</span><br><span class="line">            leftmark++;</span><br><span class="line">        <span class="keyword">while</span> (leftmark &lt;= rightmark) &amp;&amp; (arr[rightmark] &gt;= pivotVal)</span><br><span class="line">            rightmark--;</span><br><span class="line">        <span class="keyword">if</span> (leftmark &lt;= rightmark)</span><br><span class="line">            swap(arr[leftmark], arr[rightmark]);</span><br><span class="line">    &#125;</span><br><span class="line">    swap(arr[first], arr[rightmark]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> rightmark;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 快速排序</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">QuickSort</span><span class="params">(<span class="keyword">int</span> *<span class="built_in">array</span>, <span class="keyword">int</span> first, <span class="keyword">int</span> last)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> pivotVal;</span><br><span class="line">    <span class="keyword">if</span> (first &lt; last) &#123;</span><br><span class="line">        pivotVal = partition(<span class="built_in">array</span>, first, last);</span><br><span class="line">        QuickSort(<span class="built_in">array</span>, first, pivotVal<span class="number">-1</span>);</span><br><span class="line">        QuickSort(<span class="built_in">array</span>, pivotVal+<span class="number">1</span>, last);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 选择排序，若已排序则提前停止</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SelectionSort</span><span class="params">(<span class="keyword">int</span> *<span class="built_in">array</span>, <span class="keyword">int</span> <span class="built_in">size</span>)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> posMax;</span><br><span class="line">    <span class="keyword">int</span> exchange = <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">size</span>--;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">size</span>&gt;<span class="number">0</span> &amp;&amp; exchange) &#123;</span><br><span class="line">        exchange = <span class="number">0</span>;</span><br><span class="line">        posMax = <span class="built_in">size</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> loc = <span class="number">1</span>; loc &lt; <span class="built_in">size</span>+<span class="number">1</span>; loc++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">array</span>[loc] &gt; <span class="built_in">array</span>[posMax])</span><br><span class="line">                posMax = loc;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (posMax != <span class="built_in">size</span>) &#123;</span><br><span class="line">            swap(<span class="built_in">array</span>[<span class="built_in">size</span>], <span class="built_in">array</span>[posMax]);</span><br><span class="line">            exchange = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">size</span>--;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Heapify</span><span class="params">(<span class="keyword">int</span> *arr, <span class="keyword">int</span> m, <span class="keyword">int</span> <span class="built_in">size</span>)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> tmp;</span><br><span class="line">    tmp = arr[m];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span> * m; i &lt;= <span class="built_in">size</span>; i *= <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i + <span class="number">1</span> &lt;= <span class="built_in">size</span> &amp;&amp; arr[i] &lt; arr[i+<span class="number">1</span>])</span><br><span class="line">            i++;</span><br><span class="line">        <span class="keyword">if</span> (arr[i] &lt; tmp)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        arr[m] = arr[i];</span><br><span class="line">        m = i;</span><br><span class="line">    &#125;</span><br><span class="line">    arr[m] = tmp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BulidHeap</span><span class="params">(<span class="keyword">int</span> *arr, <span class="keyword">int</span> <span class="built_in">size</span>)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="built_in">size</span> / <span class="number">2</span>; i &gt; <span class="number">0</span>; i--)</span><br><span class="line">        Heapify(arr, i, <span class="built_in">size</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swapH</span><span class="params">(<span class="keyword">int</span> *arr, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> temp;</span><br><span class="line">    temp = arr[i];</span><br><span class="line">    arr[i] = arr[j];</span><br><span class="line">    arr[j] = temp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 堆排序</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">HeapSort</span><span class="params">(<span class="keyword">int</span> *arr, <span class="keyword">int</span> <span class="built_in">size</span>)</span></span>&#123;</span><br><span class="line">    BulidHeap(arr, <span class="built_in">size</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="built_in">size</span>; i &gt; <span class="number">1</span>; i--) &#123;</span><br><span class="line">        swapH(arr, <span class="number">1</span>, i);</span><br><span class="line">        Heapify(arr, <span class="number">1</span>, i - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 插入排序</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InsertSort</span><span class="params">(<span class="keyword">int</span> *<span class="built_in">array</span>, <span class="keyword">int</span> <span class="built_in">size</span>)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> pos;</span><br><span class="line">    <span class="keyword">int</span> current;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; <span class="built_in">size</span>; i++) &#123;</span><br><span class="line">        pos = i;</span><br><span class="line">        current = <span class="built_in">array</span>[pos];</span><br><span class="line">        <span class="keyword">while</span> (pos &gt; <span class="number">0</span> &amp;&amp; current &lt; <span class="built_in">array</span>[pos - <span class="number">1</span>]) &#123;</span><br><span class="line">            <span class="built_in">array</span>[pos] = <span class="built_in">array</span>[pos - <span class="number">1</span>];</span><br><span class="line">            pos--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">array</span>[pos] = current;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">gapInsertSort</span><span class="params">(<span class="keyword">int</span> *<span class="built_in">array</span>, <span class="keyword">int</span> <span class="built_in">size</span>, <span class="keyword">int</span> start, <span class="keyword">int</span> gap)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> pos;</span><br><span class="line">    <span class="keyword">int</span> current;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = start+gap; i &lt; <span class="built_in">size</span>; i += gap) &#123;</span><br><span class="line">        pos = i;</span><br><span class="line">        current = <span class="built_in">array</span>[pos];</span><br><span class="line">        <span class="keyword">while</span> (pos &gt;= gap &amp;&amp; current &lt; <span class="built_in">array</span>[pos-gap]) &#123;</span><br><span class="line">            <span class="built_in">array</span>[pos] = <span class="built_in">array</span>[pos-gap];</span><br><span class="line">            pos -= gap;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">array</span>[pos] = current;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 希尔排序</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ShellSort</span><span class="params">(<span class="keyword">int</span> *<span class="built_in">array</span>, <span class="keyword">int</span> <span class="built_in">size</span>)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> gap;</span><br><span class="line">    gap = <span class="built_in">size</span>/<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">while</span> (gap &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; gap; i++)</span><br><span class="line">            gapInsertSort(<span class="built_in">array</span>, <span class="built_in">size</span>, i, gap);</span><br><span class="line">        gap /= <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Merge</span><span class="params">(<span class="keyword">int</span> *sr, <span class="keyword">int</span> *tr, <span class="keyword">int</span> i, <span class="keyword">int</span> mid, <span class="keyword">int</span> right)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> j, k, l;</span><br><span class="line">    <span class="keyword">for</span> (k = i, j = mid + <span class="number">1</span>; i &lt;= mid &amp;&amp; j &lt;= right; k++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (sr[i] &lt; sr[j])</span><br><span class="line">            tr[k] = sr[i++];</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            tr[k] = sr[j++];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (i &lt;= mid) &#123;</span><br><span class="line">        <span class="keyword">for</span> ( l = <span class="number">0</span>; l &lt;= mid - i; l++)</span><br><span class="line">            tr[k+l] = sr[i + l];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (j &lt;= right) &#123;</span><br><span class="line">        <span class="keyword">for</span> ( l = <span class="number">0</span>; l &lt;= right - j; l++)</span><br><span class="line">            tr[k+l] = sr[j+l];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 归并排序</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MergeSort</span><span class="params">(<span class="keyword">int</span> *sr, <span class="keyword">int</span> *tr1, <span class="keyword">int</span> s, <span class="keyword">int</span> t)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> mid;</span><br><span class="line">    <span class="keyword">int</span> tr2[MAXSIZE+<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">if</span> (s == t)</span><br><span class="line">        tr1[s] = sr[s];</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        mid = (s + t)/<span class="number">2</span>;</span><br><span class="line">        MergeSort(sr, tr2, s, mid);</span><br><span class="line">        MergeSort(sr, tr2, mid+<span class="number">1</span>, t);</span><br><span class="line">        MergeSort(tr2, tr1, s, mid, t);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取索引</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getIndex</span><span class="params">(<span class="keyword">int</span> num, <span class="keyword">int</span> dec, <span class="keyword">int</span> order)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, j, n;</span><br><span class="line">    <span class="keyword">int</span> div, index;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i = dec; i &gt; order; i--) &#123;</span><br><span class="line">        n = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; dec - <span class="number">1</span>; j++)</span><br><span class="line">            n *= <span class="number">10</span>;</span><br><span class="line">        div = num / n;</span><br><span class="line">        num -= div * n;</span><br><span class="line">        dec--;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    n = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; order - <span class="number">1</span>; i++)</span><br><span class="line">        n *= <span class="number">10</span>;</span><br><span class="line">    index = num / n;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> index;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 计数排序</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CountingSort</span><span class="params">(<span class="keyword">int</span> *a, <span class="keyword">int</span> *b, <span class="keyword">int</span> n, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> *c = (<span class="keyword">int</span> *) <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">int</span>) * (k+<span class="number">1</span>));</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= k; i++)</span><br><span class="line">        c[i] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        c[a[i]]++;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= k; i++)</span><br><span class="line">        c[i] = c[i] + c[i<span class="number">-1</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = n - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        b[c[a[i]] - <span class="number">1</span>] = a[i];</span><br><span class="line">        c[a[i]]--;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 桶排序</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BucketSort</span><span class="params">(<span class="keyword">int</span> *arr, <span class="keyword">int</span> <span class="built_in">size</span>, <span class="keyword">int</span> <span class="built_in">max</span>)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, j;</span><br><span class="line">    <span class="keyword">int</span> buckets[<span class="built_in">max</span>];</span><br><span class="line">    <span class="built_in">memset</span>(buckets, <span class="number">0</span>, <span class="built_in">max</span> + <span class="keyword">sizeof</span>(<span class="keyword">int</span>));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="built_in">size</span>; i++)</span><br><span class="line">        buckets[arr[i]]++;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>; i &lt; <span class="built_in">max</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">while</span>((buckets[i]--) &gt; <span class="number">0</span>)</span><br><span class="line">            arr[j++] = i;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 基数排序</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">RadixSort</span><span class="params">(<span class="keyword">int</span> *arr, <span class="keyword">int</span> len, <span class="keyword">int</span> dec, <span class="keyword">int</span> order)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, j;</span><br><span class="line">    <span class="keyword">int</span> index;</span><br><span class="line">    <span class="keyword">int</span> tmp[len];</span><br><span class="line">    <span class="keyword">int</span> num[<span class="number">10</span>];</span><br><span class="line">    <span class="built_in">memset</span>(num, <span class="number">0</span>, <span class="number">10</span> * <span class="keyword">sizeof</span>(<span class="keyword">int</span>));</span><br><span class="line">    <span class="built_in">memset</span>(tmp, <span class="number">0</span>, len * <span class="keyword">sizeof</span>(<span class="keyword">int</span>));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (dec &lt; order)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">        index = getIndex(arr[i], dec, order);</span><br><span class="line">        num[index]++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">        num[i] += num[i<span class="number">-1</span>];</span><br><span class="line">    <span class="keyword">for</span> (i = len - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        index = getIndex(arr[i], dec, order);</span><br><span class="line">        j = --num[index];</span><br><span class="line">        tmp[j] = arr[i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">        arr[i] = tmp[i];</span><br><span class="line">    RadixSort(arr, len, dec, order+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="C-实现十大排序算法"><a href="#C-实现十大排序算法" class="headerlink" title="C++实现十大排序算法"></a>C++实现十大排序算法</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 打印函数</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Print</span><span class="params">(<span class="keyword">const</span> T &amp; arr[], <span class="keyword">int</span> len)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; ++i) </span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; arr[i] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 交换函数</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(T *a, T *b)</span> </span>&#123;</span><br><span class="line">    T temp;</span><br><span class="line">    temp = *a;</span><br><span class="line">    *a = *b;</span><br><span class="line">    *b = temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 冒泡排序，若已排序则提前退出</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BubbleSort</span><span class="params">(T *arr, <span class="keyword">int</span> <span class="built_in">size</span>)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">bool</span> exchange = <span class="literal">true</span>;</span><br><span class="line">    <span class="built_in">size</span>--;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">size</span> &gt; <span class="number">0</span> &amp;&amp; exchange) &#123; </span><br><span class="line">        exchange = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="built_in">size</span>; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (arr[j] &gt; arr[j+<span class="number">1</span>]) &#123;</span><br><span class="line">                swap(arr[j], arr[j+<span class="number">1</span>]);</span><br><span class="line">                exchange = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">size</span>--;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">partition</span><span class="params">(T *arr, <span class="keyword">int</span> first, <span class="keyword">int</span> last)</span> </span>&#123;</span><br><span class="line">    T pivotVal  = arr[first];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> leftmark  = first + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> rightmark = last;</span><br><span class="line">    <span class="keyword">while</span> (leftmark &lt;= rightmark) &#123;</span><br><span class="line">        <span class="keyword">while</span> (leftmark &lt;= rightmark &amp;&amp; arr[leftmark] &lt;= pivotVal)</span><br><span class="line">            rightmark--;</span><br><span class="line">        <span class="keyword">if</span> (leftmark &lt;= rightmark) </span><br><span class="line">            swap(arr[leftmark], arr[rightmark]);</span><br><span class="line">    &#125;</span><br><span class="line">    swap(arr[first], arr[rightmark]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> rightmark;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 快速排序</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">QuickSort</span><span class="params">(T *arr, <span class="keyword">int</span> first, <span class="keyword">int</span> last)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> pivot;</span><br><span class="line">    <span class="keyword">if</span> (first &lt; last) &#123;</span><br><span class="line">        pivot = partition(arr, first, last);</span><br><span class="line">        QuickSort(arr, first, pivot<span class="number">-1</span>);</span><br><span class="line">        QuickSort(arr, pivot+<span class="number">1</span>, last);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 选择排序，若已排序则提前停止</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SelectionSort</span><span class="params">(T *arr, <span class="keyword">int</span> <span class="built_in">size</span>)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> posMax;</span><br><span class="line">    <span class="keyword">bool</span> exchange = <span class="literal">true</span>;</span><br><span class="line">    <span class="built_in">size</span>--;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">size</span>&gt;<span class="number">0</span> &amp;&amp; exchange) &#123;</span><br><span class="line">        exchange = <span class="literal">false</span>;</span><br><span class="line">        posMax = <span class="built_in">size</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; <span class="built_in">size</span>+<span class="number">1</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (arr[i] &gt; arr[posMax])</span><br><span class="line">                posMax = i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (posMax != <span class="built_in">size</span>) &#123;</span><br><span class="line">            swap(arr[<span class="built_in">size</span>], arr[posMax]);</span><br><span class="line">            exchange = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">size</span>--;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Heapify</span><span class="params">(T *arr, <span class="keyword">int</span> m, <span class="keyword">int</span> <span class="built_in">size</span>)</span></span>&#123;</span><br><span class="line">    T tmp = arr[m];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span> * m; i &lt;= <span class="built_in">size</span>; i *= <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i + <span class="number">1</span> &lt;= <span class="built_in">size</span> &amp;&amp; arr[i] &lt; arr[i+<span class="number">1</span>])</span><br><span class="line">            i++;</span><br><span class="line">        <span class="keyword">if</span> (arr[i] &lt; tmp)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        arr[m] = arr[i];</span><br><span class="line">        m = i;</span><br><span class="line">    &#125;</span><br><span class="line">    arr[m] = tmp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BulidHeap</span><span class="params">(T *arr, <span class="keyword">int</span> <span class="built_in">size</span>)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="built_in">size</span> / <span class="number">2</span>; i &gt; <span class="number">0</span>; i--)</span><br><span class="line">        Heapify(arr, i, <span class="built_in">size</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swapH</span><span class="params">(T *arr, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span></span>&#123;</span><br><span class="line">    T temp;</span><br><span class="line">    temp = arr[i];</span><br><span class="line">    arr[i] = arr[j];</span><br><span class="line">    arr[j] = temp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 堆排序</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">HeapSort</span><span class="params">(T *arr, <span class="keyword">int</span> <span class="built_in">size</span>)</span></span>&#123;</span><br><span class="line">    BulidHeap(arr, <span class="built_in">size</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="built_in">size</span>; i &gt; <span class="number">1</span>; i--) &#123;</span><br><span class="line">        swapH(arr, <span class="number">1</span>, i);</span><br><span class="line">        Heapify(arr, <span class="number">1</span>, i - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 插入排序</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InsertSort</span><span class="params">(T *arr, <span class="keyword">int</span> <span class="built_in">size</span>)</span> </span>&#123;</span><br><span class="line">    T cur;</span><br><span class="line">    <span class="keyword">int</span> pos;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; <span class="built_in">size</span>; i++) &#123;</span><br><span class="line">        pos = i;</span><br><span class="line">        cur = arr[pos];</span><br><span class="line">        <span class="keyword">while</span> (pos &gt; <span class="number">0</span> &amp;&amp; cur &lt; <span class="built_in">array</span>[pos - <span class="number">1</span>]) &#123;</span><br><span class="line">            arr[pos] = arr[pos - <span class="number">1</span>];</span><br><span class="line">            pos--;</span><br><span class="line">        &#125;</span><br><span class="line">        arr[pos] = cur;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">gapInsertSort</span><span class="params">(T *arr, <span class="keyword">int</span> <span class="built_in">size</span>, <span class="keyword">int</span> start, <span class="keyword">int</span> gap)</span> </span>&#123;</span><br><span class="line">    T cur;</span><br><span class="line">    <span class="keyword">int</span> pos;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = start+gap; i &lt; <span class="built_in">size</span>; i += gap) &#123;</span><br><span class="line">        pos = i;</span><br><span class="line">        cur = arr[pos];</span><br><span class="line">        <span class="keyword">while</span> (pos &gt;= gap &amp;&amp; cur &lt; arr[pos-gap]) &#123;</span><br><span class="line">            arr[pos] = arr[pos-gap];</span><br><span class="line">            pos -= gap;</span><br><span class="line">        &#125;</span><br><span class="line">        arr[pos] = cur;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 希尔排序</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ShellSort</span><span class="params">(T *arr, <span class="keyword">int</span> <span class="built_in">size</span>)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> gap;</span><br><span class="line">    gap = <span class="built_in">size</span>/<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">while</span> (gap &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; gap; i++)</span><br><span class="line">            gapInsertSort(arr, <span class="built_in">size</span>, i, gap);</span><br><span class="line">        gap /= <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Merge</span><span class="params">(T *sr, T *tr, <span class="keyword">int</span> i, <span class="keyword">int</span> mid, <span class="keyword">int</span> right)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> j, k, l;</span><br><span class="line">    <span class="keyword">for</span> (k = i, j = mid + <span class="number">1</span>; i &lt;= mid &amp;&amp; j &lt;= right; k++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (sr[i] &lt; sr[j])</span><br><span class="line">            tr[k] = sr[i++];</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            tr[k] = sr[j++];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (i &lt;= mid) &#123;</span><br><span class="line">        <span class="keyword">for</span> ( l = <span class="number">0</span>; l &lt;= mid - i; l++)</span><br><span class="line">            tr[k+l] = sr[i + l];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (j &lt;= right) &#123;</span><br><span class="line">        <span class="keyword">for</span> ( l = <span class="number">0</span>; l &lt;= right - j; l++)</span><br><span class="line">            tr[k+l] = sr[j+l];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 归并排序</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MergeSort</span><span class="params">(T *sr, T *tr1, <span class="keyword">int</span> s, <span class="keyword">int</span> t)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> mid;</span><br><span class="line">    <span class="keyword">int</span> tr2[MAXSIZE+<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">if</span> (s == t)</span><br><span class="line">        tr1[s] = sr[s];</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        mid = <span class="keyword">int</span> (s + t)/<span class="number">2</span>;</span><br><span class="line">        MergeSort(sr, tr2, s, mid);</span><br><span class="line">        MergeSort(sr, tr2, mid+<span class="number">1</span>, t);</span><br><span class="line">        MergeSort(tr2, tr1, s, mid, t);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 计数排序</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CountingSort</span><span class="params">(T *a, T *b, <span class="keyword">int</span> n, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">    T *c = (T *) <span class="keyword">new</span>(<span class="keyword">sizeof</span>(T) * (k+<span class="number">1</span>));</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= k; i++)</span><br><span class="line">        c[i] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) </span><br><span class="line">        c[a[i]]++;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= k; i++)</span><br><span class="line">        c[i] = c[i] + c[i<span class="number">-1</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = n - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        b[c[a[i]] - <span class="number">1</span>] = a[i];</span><br><span class="line">        c[a[i]]--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">delete</span> c;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 桶排序</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BucketSort</span><span class="params">(<span class="keyword">int</span> *arr, <span class="keyword">int</span> <span class="built_in">size</span>, <span class="keyword">int</span> <span class="built_in">max</span>)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, j;</span><br><span class="line">    <span class="keyword">int</span> buckets[<span class="built_in">max</span>];</span><br><span class="line">    <span class="built_in">memset</span>(buckets, <span class="number">0</span>, <span class="built_in">max</span> + <span class="keyword">sizeof</span>(<span class="keyword">int</span>));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="built_in">size</span>; i++)</span><br><span class="line">        buckets[arr[i]]++;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>; i &lt; <span class="built_in">max</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">while</span>((buckets[i]--) &gt; <span class="number">0</span>)</span><br><span class="line">            arr[j++] = i;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取索引</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getIndex</span><span class="params">(T num, <span class="keyword">int</span> dec, <span class="keyword">int</span> order)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, j, n, index;</span><br><span class="line">    T div;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i = dec; i &gt; order; i--) &#123;</span><br><span class="line">        n = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; dec - <span class="number">1</span>; j++)</span><br><span class="line">            n *= <span class="number">10</span>;</span><br><span class="line">        div = num / n;</span><br><span class="line">        num -= div * n;</span><br><span class="line">        dec--;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    n = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; order - <span class="number">1</span>; i++)</span><br><span class="line">        n *= <span class="number">10</span>;</span><br><span class="line">    index = num / n;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> index;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 基数排序</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">RadixSort</span><span class="params">(T *arr, <span class="keyword">int</span> len, <span class="keyword">int</span> dec, <span class="keyword">int</span> order)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, j;</span><br><span class="line">    <span class="keyword">int</span> index;</span><br><span class="line">    T tmp[len];</span><br><span class="line">    <span class="keyword">int</span> num[<span class="number">10</span>];</span><br><span class="line">    <span class="built_in">memset</span>(num, <span class="number">0</span>, <span class="number">10</span> * <span class="keyword">sizeof</span>(<span class="keyword">int</span>));</span><br><span class="line">    <span class="built_in">memset</span>(tmp, <span class="number">0</span>, len * <span class="keyword">sizeof</span>(T));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (dec &lt; order)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">        index = getIndex(arr[i], dec, order);</span><br><span class="line">        num[index]++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">        num[i] += num[i<span class="number">-1</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i = len - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        index = getIndex(arr[i], dec, order);</span><br><span class="line">        j = --num[index];</span><br><span class="line">        tmp[j] = arr[i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">        arr[i] = tmp[i];</span><br><span class="line"></span><br><span class="line">    RadixSort(arr, len, dec, order+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="Java实现十大排序算法"><a href="#Java实现十大排序算法" class="headerlink" title="Java实现十大排序算法"></a>Java实现十大排序算法</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Sort</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> arr = &#123;<span class="number">33</span>,<span class="number">1</span>,<span class="number">80</span>,<span class="number">2</span>,<span class="number">100</span>,<span class="number">5</span>,<span class="number">2</span>,<span class="number">70</span>,<span class="number">1</span>,<span class="number">20</span>,<span class="number">10</span>,<span class="number">0</span>,<span class="number">90</span>,<span class="number">44</span>,<span class="number">31</span>,<span class="number">45</span>,<span class="number">21</span>,<span class="number">88</span>,<span class="number">3</span>,<span class="number">9</span>&#125;;</span><br><span class="line">        <span class="comment">// xxxSort(arr);</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">6</span>; i++) &#123;</span><br><span class="line">            System.out.println(arr[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T extends Comparable &lt;? <span class="keyword">super</span> T&gt;&gt; <span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(T[] arr, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">        T temp;</span><br><span class="line">        temp   = arr[i]; </span><br><span class="line">        arr[i] = arr[j];</span><br><span class="line">        arr[j] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> &lt;T extends Comparable &lt;? <span class="keyword">super</span> T&gt;&gt; <span class="function">T <span class="title">max</span><span class="params">(T[] arr)</span> </span>&#123;</span><br><span class="line">        T max = arr[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span> (T v : arr) &#123;</span><br><span class="line">            <span class="keyword">if</span> (v &gt; max)</span><br><span class="line">                max = v;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> max;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> &lt;T extends Comparable &lt;? <span class="keyword">super</span> T&gt;&gt; <span class="function">T <span class="title">min</span><span class="params">(T[] arr)</span> </span>&#123;</span><br><span class="line">        T min = arr[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span> (T v : arr) &#123;</span><br><span class="line">            <span class="keyword">if</span> (v &lt; min)</span><br><span class="line">                min = v;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> min;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 冒泡排序</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T extends Comparable &lt;? <span class="keyword">super</span> T&gt;&gt; <span class="function"><span class="keyword">void</span> <span class="title">bubbleSort</span><span class="params">(T[] arr)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> exchange = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">int</span> passnum = arr.length - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (passnum &gt; <span class="number">0</span> &amp;&amp; exchange) &#123;</span><br><span class="line">            exchange = <span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; passnum; i++ ) &#123;</span><br><span class="line">                <span class="keyword">if</span> (arr[i].compareTo(arr[i+<span class="number">1</span>])) &gt; <span class="number">0</span> &#123;</span><br><span class="line">                    swap(arr, i, i+<span class="number">1</span>);</span><br><span class="line">                    exchange = <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            passnum--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 快速排序</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T extends Comparable &lt;? <span class="keyword">super</span> T&gt;&gt; <span class="function"><span class="keyword">void</span> <span class="title">quickSort</span><span class="params">(T[] arr, <span class="keyword">int</span> first, <span class="keyword">int</span> last)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (first &lt; last) &#123;</span><br><span class="line">            <span class="keyword">int</span> splitPoint = partition(arr, first, last);</span><br><span class="line">            quickSort(arr, first,splitPoint-<span class="number">1</span>);</span><br><span class="line">            quickSort(arr, splitPoint+<span class="number">1</span>, last);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> &lt;T extends Comparable &lt;? <span class="keyword">super</span> T&gt;&gt; <span class="function"><span class="keyword">int</span> <span class="title">partition</span><span class="params">(T[] arr, <span class="keyword">int</span> first, <span class="keyword">int</span> last)</span> </span>&#123;</span><br><span class="line">        T pivot = arr[first];</span><br><span class="line">        <span class="keyword">int</span> left = first + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> right = last;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (left &lt;= right) &#123;</span><br><span class="line">            <span class="keyword">while</span> (left &lt;= right &amp;&amp; arr[left].compareTo(pivot) &lt; <span class="number">0</span>)</span><br><span class="line">                left += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> (left &lt;= right &amp;&amp; (arr[right].compareTo(pivot) == <span class="number">0</span> \</span><br><span class="line">                || arr[right].compareTo(pivot) &gt; <span class="number">0</span>))</span><br><span class="line">                right -= <span class="number">1</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (left &lt;= right)</span><br><span class="line">                swap(arr, left, right);</span><br><span class="line">        &#125;</span><br><span class="line">        swap(arr, first, right);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> right;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 选择排序</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T extends Comparable &lt;? <span class="keyword">super</span> T&gt;&gt; <span class="function"><span class="keyword">void</span> <span class="title">selectionSort</span><span class="params">(T[] arr)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; a.length; i++) &#123;</span><br><span class="line">            T minItem = arr[i];</span><br><span class="line">            <span class="keyword">int</span> minIdx = i;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; a.length; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (arr[j].compareTo(minItem) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                    minItem  = arr[j];</span><br><span class="line">                    minIdx = j;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            arr[minIdx] = arr[i];</span><br><span class="line">            arr[i] = minItem;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 堆排序</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T extends Comparable &lt;? <span class="keyword">super</span> T&gt;&gt; <span class="function"><span class="keyword">void</span> <span class="title">heapSort</span><span class="params">(T[] arr)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = arr.length/<span class="number">2</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">            percDown(arrr,i, arr.length)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = arr.length -<span class="number">1</span>; i &gt; <span class="number">0</span>; i--) &#123;</span><br><span class="line">            swap(arr, <span class="number">0</span>, i);</span><br><span class="line">            percDown(arr, <span class="number">0</span>, i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> &lt;T extends Comparable &lt;? <span class="keyword">super</span> T&gt;&gt; <span class="function"><span class="keyword">void</span> <span class="title">percDown</span><span class="params">(T[] arr,<span class="keyword">int</span> i,<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        T temp;</span><br><span class="line">        <span class="keyword">int</span> child;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (temp = arr[i]; leftChild(i) &lt; n; i = child) &#123;</span><br><span class="line">            child = leftChild(i);</span><br><span class="line">            <span class="keyword">if</span> (arr[child].compareTo(arr[child+<span class="number">1</span>]) &lt; <span class="number">0</span> &amp;&amp; child != n - <span class="number">1</span>)</span><br><span class="line">                child++;</span><br><span class="line">            <span class="keyword">if</span> (temp.compareTo(arr[child])&lt;<span class="number">0</span>)</span><br><span class="line">                arr[i] = arr[child];</span><br><span class="line">        &#125;</span><br><span class="line">        arr[i] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">leftChild</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span> * i + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 插入排序</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T extends Comparable &lt;? <span class="keyword">super</span> T&gt;&gt; <span class="function"><span class="keyword">void</span> <span class="title">insertSort</span><span class="params">(T[] arr)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> j;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (j = i; j &gt; <span class="number">0</span> &amp;&amp; arr[i].compareTo(arr[j-<span class="number">1</span>]) &lt; <span class="number">0</span>; j--)</span><br><span class="line">                arr[j] = arr[j-<span class="number">1</span>];</span><br><span class="line">            arr[j] = temp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 希尔排序</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T extends Comparable &lt;? <span class="keyword">super</span> T&gt;&gt; <span class="function"><span class="keyword">void</span> <span class="title">shellSort</span><span class="params">(T[] arr)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> gap = arr.length/<span class="number">2</span>; gap &gt; <span class="number">0</span>; gap /= <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> j;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = gap; i &lt; a.length; i++) &#123;</span><br><span class="line">                <span class="keyword">for</span> (j = i; j &gt;= gap &amp;&amp; arr[i].compareTo(arr[j-gap]) &lt; <span class="number">0</span>; j -= gap)</span><br><span class="line">                    arr[j] = arr[j-gap]</span><br><span class="line">                arr[j] = temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 归并排序</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T extends Comparable &lt;? <span class="keyword">super</span> T&gt;&gt; <span class="function"><span class="keyword">void</span> <span class="title">mergeSort</span><span class="params">(T[] arr)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (arr.length &gt; <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> mid = arr.length / <span class="number">2</span>;</span><br><span class="line">            T[] lefthalf = slice(arr,<span class="number">0</span>, mid);</span><br><span class="line">            T[] righthalf = slice(arr,mid, arr.length);</span><br><span class="line"></span><br><span class="line">            mergeSort(lefthalf)</span><br><span class="line">            mergeSort(righthalf)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>, k = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span> (i &lt; lefthalf.length &amp;&amp; j &lt; righthalf.length) &#123;</span><br><span class="line">                <span class="keyword">if</span> (lefthalf[i] &lt; righthalf[j]) &#123;</span><br><span class="line">                    arr[k] = lefthalf[i];</span><br><span class="line">                    i++;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    arr[k] = righthalf[j];</span><br><span class="line">                    j++;</span><br><span class="line">                &#125;</span><br><span class="line">                k++;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">while</span> (i &lt; lefthalf.length) &#123;</span><br><span class="line">                arr[k] = lefthalf[i]</span><br><span class="line">                i++;</span><br><span class="line">                k++;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">while</span> (j &lt; righthalf.length) &#123;</span><br><span class="line">                arr[k] = righthalf[j];</span><br><span class="line">                j++;</span><br><span class="line">                k++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 计数排序</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T extends Comparable &lt;? <span class="keyword">super</span> T&gt;&gt; <span class="function"><span class="keyword">void</span> <span class="title">countSort</span><span class="params">(T[] arr)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (arr.length == <span class="number">0</span> )</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> maxLen = max(arr) + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span>[maxLen] newarr;</span><br><span class="line">        <span class="keyword">for</span> ( T v : arr) </span><br><span class="line">            newarr[v]++;</span><br><span class="line"></span><br><span class="line">        T[arr.length] arr;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; maxLen; i++) &#123;</span><br><span class="line">            <span class="keyword">while</span> (newarr[i] &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                arr.add(i);</span><br><span class="line">                newarr[i]--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 桶排序</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T extends Comparable &lt;? <span class="keyword">super</span> T&gt;&gt; <span class="function"><span class="keyword">void</span> <span class="title">bucketSort</span><span class="params">(T[] arr)</span> </span>&#123;</span><br><span class="line">        T maxV = max(arr); </span><br><span class="line">        T minV = min(arr); </span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> bucketNum = (maxV - minV) / arr.length + <span class="number">1</span>;</span><br><span class="line">        ArrayList&lt;ArrayList&lt;T&gt;&gt; bucketArr = <span class="keyword">new</span> ArrayList&lt;&gt;(bucketNum);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; bucketNum; i++)</span><br><span class="line">            bucketArr.add(<span class="keyword">new</span> ArrayList&lt;T&gt;());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> pos = (arr[i] - min) / arr.length;</span><br><span class="line">            bucketArr.get(pos).add(arr[i]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; bucketArr.size(); i++)</span><br><span class="line">            countSort(bucketArr.get(i));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 基数排序</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T extends Comparable &lt;? <span class="keyword">super</span> T&gt;&gt; <span class="function"><span class="keyword">void</span> <span class="title">radixSort</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> maxV = max(arr);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; maxV / i &gt; <span class="number">0</span>; i *= <span class="number">10</span>)&#123;</span><br><span class="line">            <span class="keyword">int</span>[] temp = <span class="keyword">new</span> <span class="keyword">int</span>[arr.length];</span><br><span class="line">            <span class="keyword">int</span>[] buckets = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>];</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> v : arr)</span><br><span class="line">                buckets[(v/i) % <span class="number">10</span>]++;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">                buckets[i] += buckets[i-<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = arr.length -<span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">                temp[buckets[(arr[i]/i)%<span class="number">10</span>] - <span class="number">1</span>] = arr[i];</span><br><span class="line">                buckets[(arr[i]/i)% <span class="number">10</span>]--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="Python实现十大排序算法"><a href="#Python实现十大排序算法" class="headerlink" title="Python实现十大排序算法"></a>Python实现十大排序算法</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">BubbleSort</span><span class="params">(alist)</span>:</span></span><br><span class="line">    <span class="string">"""冒泡排序：若已排序则提前停止"""</span></span><br><span class="line">    exchange = <span class="literal">True</span></span><br><span class="line">    passnum = len(alist) - <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> passnum &gt; <span class="number">0</span> <span class="keyword">and</span> exchange:</span><br><span class="line">        exchange = <span class="literal">False</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(passnum):</span><br><span class="line">            <span class="keyword">if</span> alist[i] &gt; alist[i+<span class="number">1</span>]:</span><br><span class="line">                alist[i], alist[i+<span class="number">1</span>] = alist[i+<span class="number">1</span>], alist[i]</span><br><span class="line">                exchange = <span class="literal">True</span></span><br><span class="line">        passnum -= <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">QuickSort</span><span class="params">(alist, first, last)</span>:</span></span><br><span class="line">    <span class="string">"""快速排序"""</span></span><br><span class="line">    <span class="keyword">if</span> first &lt; last:</span><br><span class="line">        splitPoint = Partition(alist, first, last)</span><br><span class="line">        QuickSort(alist, first, splitPoint<span class="number">-1</span>)</span><br><span class="line">        QuickSort(alist, splitPoint+<span class="number">1</span>, last)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Partition</span><span class="params">(alist, first, last)</span>:</span></span><br><span class="line">    <span class="string">"""pivotVal最好选一个中间值"""</span></span><br><span class="line">    pivotVal = alist[first]</span><br><span class="line"></span><br><span class="line">    left = first + <span class="number">1</span></span><br><span class="line">    right = last</span><br><span class="line">    <span class="keyword">while</span> left &lt;= right:</span><br><span class="line">        <span class="keyword">while</span> left &lt;= right <span class="keyword">and</span> alist[left] &lt;= pivotVal:</span><br><span class="line">            left += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> left &lt;= right <span class="keyword">and</span> alist[right] &gt;= pivotVal:</span><br><span class="line">            right -= <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> left &lt;= right:</span><br><span class="line">            alist[left], alist[right] = alist[right], alist[left]</span><br><span class="line">    alist[first], alist[right] = alist[right], alist[first]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> right</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">SelectionSort</span><span class="params">(alist)</span>:</span></span><br><span class="line">    <span class="string">"""选择排序：若已排序则提前停止"""</span></span><br><span class="line">    exchange = <span class="literal">True</span></span><br><span class="line">    fillslot = len(alist) - <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> fillslot &gt; <span class="number">0</span> <span class="keyword">and</span> exchange:</span><br><span class="line">        exchange = <span class="literal">False</span></span><br><span class="line">        posMax = fillslot</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> loc <span class="keyword">in</span> range(<span class="number">1</span>, fillslot+<span class="number">1</span>):</span><br><span class="line">            <span class="keyword">if</span> alist[loc] &gt; alist[posMax]:</span><br><span class="line">                posMax = loc</span><br><span class="line">        <span class="keyword">if</span> posMax != fillslot: </span><br><span class="line">            alist[fillslot], alist[posMax] = alist[posMax], alist[fillslot]</span><br><span class="line">            exchange = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">        fillslot -= <span class="number">1</span></span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">BigHeapSort</span><span class="params">(alist)</span>:</span></span><br><span class="line">    <span class="string">"""堆排序：大根堆正排序"""</span></span><br><span class="line">    BigBuildHeap(alist)                                      </span><br><span class="line">    index = len(alist) - <span class="number">1</span>                               <span class="comment">#初始化构建堆 </span></span><br><span class="line">    <span class="keyword">while</span> index &gt; <span class="number">0</span>:                                                          </span><br><span class="line">        alist[<span class="number">0</span>], alist[index] = alist[index], alist[<span class="number">0</span>]                       </span><br><span class="line">        PercUp(alist, index, <span class="number">0</span>)                          <span class="comment">#取出最大值  </span></span><br><span class="line">        index -= <span class="number">1</span>                                       <span class="comment">#从0开始构建大根堆 </span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">BigBuildHeap</span><span class="params">(alist)</span>:</span></span><br><span class="line">    <span class="string">"""构建堆，构建后的堆满足基本有序(从大到小)"""</span></span><br><span class="line">    size = len(alist)</span><br><span class="line">    lastParent = (size - <span class="number">1</span>) // <span class="number">2</span></span><br><span class="line">    <span class="keyword">while</span> lastParent &gt; <span class="number">-1</span>:  <span class="comment">#包含0</span></span><br><span class="line">        PercUp(alist, size, lastParent)</span><br><span class="line">        lastParent -= <span class="number">1</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">PercUp</span><span class="params">(alist, size, parent)</span>:</span></span><br><span class="line">    <span class="comment">#尽量将大的元素往上冒</span></span><br><span class="line">    left = <span class="number">2</span>*parent + <span class="number">1</span></span><br><span class="line">    right = <span class="number">2</span>*parent + <span class="number">2</span></span><br><span class="line"></span><br><span class="line">    largest = parent</span><br><span class="line">    <span class="keyword">if</span> left &lt; size <span class="keyword">and</span> alist[left] &gt; alist[largest]:</span><br><span class="line">        largest = left</span><br><span class="line">    <span class="keyword">if</span> right &lt; size <span class="keyword">and</span> alist[right] &gt; alist[largest]:</span><br><span class="line">        largest = right</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> largest != parent:</span><br><span class="line">        alist[largest], alist[parent] = alist[parent], alist[largest]</span><br><span class="line">        PercUp(alist, size, largest)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">LittleHeapSort</span><span class="params">(alist)</span>:</span></span><br><span class="line">    <span class="string">"""堆排序：小根堆逆排序"""</span></span><br><span class="line">    LittleBuildHeap(alist)                              <span class="comment">#初始化构建堆</span></span><br><span class="line">    index = len(alist) - <span class="number">1</span>                                </span><br><span class="line">    <span class="keyword">while</span> index &gt; <span class="number">0</span>:                                    </span><br><span class="line">        alist[<span class="number">0</span>], alist[index] = alist[index], alist[<span class="number">0</span>] <span class="comment">#取出最大值 </span></span><br><span class="line">        PercDown(alist, index, <span class="number">0</span>)                       <span class="comment">#从0开始构建小根堆</span></span><br><span class="line">        index -= <span class="number">1</span>                                      <span class="comment">#循环直到排序完成  </span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">LittleBuildHeap</span><span class="params">(alist)</span>:</span></span><br><span class="line">    <span class="comment">#构建堆，构建后的堆满足基本有序(从小到大)</span></span><br><span class="line">    size = len(alist)</span><br><span class="line">    lastParent = (size - <span class="number">1</span>) // <span class="number">2</span></span><br><span class="line">    <span class="keyword">while</span> lastParent &gt; <span class="number">-1</span>:  <span class="comment">#包含0</span></span><br><span class="line">        PercDown(alist, size, lastParent)</span><br><span class="line">        lastParent -= <span class="number">1</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">PercDown</span><span class="params">(alist, size, parent)</span>:</span></span><br><span class="line">    <span class="comment">#尽量将大的元素往下放</span></span><br><span class="line">    left = <span class="number">2</span>*parent + <span class="number">1</span></span><br><span class="line">    right = <span class="number">2</span>*parent + <span class="number">2</span></span><br><span class="line"></span><br><span class="line">    minium = parent</span><br><span class="line">    <span class="keyword">if</span> left &lt; size <span class="keyword">and</span> alist[left] &lt; alist[minium]:</span><br><span class="line">        minium = left</span><br><span class="line">    <span class="keyword">if</span> right &lt; size <span class="keyword">and</span> alist[right] &lt; alist[minium]:</span><br><span class="line">        minium = right</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> minium != parent:</span><br><span class="line">        alist[minium], alist[parent] = alist[parent], alist[minium]</span><br><span class="line">        PercDown(alist, size, minium)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">InsertSort</span><span class="params">(alist)</span>:</span></span><br><span class="line">    <span class="string">"""插入排序：始终在开始处维持一个排序队列"""</span></span><br><span class="line">    <span class="keyword">for</span> index <span class="keyword">in</span> range(<span class="number">1</span>, len(alist)): </span><br><span class="line">        pos = index</span><br><span class="line">        current = alist[pos]</span><br><span class="line">        <span class="keyword">while</span> pos &gt; <span class="number">0</span> <span class="keyword">and</span> current &lt; alist[pos - <span class="number">1</span>]:</span><br><span class="line">            alist[pos] = alist[pos - <span class="number">1</span>]</span><br><span class="line">            pos -= <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        alist[pos] = current</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ShellSort</span><span class="params">(alist)</span>:</span></span><br><span class="line">    <span class="string">"""希尔排序：将列表分裂成若干子列表再运用插入排序"""</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_gapInsertSort</span><span class="params">(lst, start, gap)</span>:</span></span><br><span class="line">        <span class="keyword">for</span> index <span class="keyword">in</span> range(start+gap, len(lst), gap):</span><br><span class="line">            pos = index</span><br><span class="line">            current = lst[pos]</span><br><span class="line">            <span class="keyword">while</span> pos &gt;= gap <span class="keyword">and</span> current &lt; lst[pos - gap]:</span><br><span class="line">                lst[pos] = lst[pos - gap]</span><br><span class="line">                pos -= gap</span><br><span class="line"></span><br><span class="line">            lst[pos] = current</span><br><span class="line">    </span><br><span class="line">    gap = len(alist) // <span class="number">2</span></span><br><span class="line">    <span class="keyword">while</span> gap &gt; <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">for</span> start <span class="keyword">in</span> range(gap):</span><br><span class="line">            _gapInsertSort(alist, start, gap)</span><br><span class="line"></span><br><span class="line">        gap = gap // <span class="number">2</span></span><br><span class="line">        </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">MergeSort</span><span class="params">(alist)</span>:</span></span><br><span class="line">    <span class="string">"""归并排序"""</span></span><br><span class="line">    <span class="keyword">if</span> len(alist) &gt; <span class="number">1</span>:</span><br><span class="line">        mid = len(alist) // <span class="number">2</span></span><br><span class="line">        lefthalf = alist[:mid]</span><br><span class="line">        righthalf = alist[mid:]</span><br><span class="line"></span><br><span class="line">        MergeSort(lefthalf)</span><br><span class="line">        MergeSort(righthalf)</span><br><span class="line"></span><br><span class="line">        i, j, k = <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> i &lt; len(lefthalf) <span class="keyword">and</span> j &lt; len(righthalf):</span><br><span class="line">            <span class="keyword">if</span> lefthalf[i] &lt; righthalf[j]:</span><br><span class="line">                alist[k] = lefthalf[i]</span><br><span class="line">                i += <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                alist[k] = righthalf[j]</span><br><span class="line">                j += <span class="number">1</span></span><br><span class="line">            k += <span class="number">1</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> i &lt; len(lefthalf):</span><br><span class="line">            alist[k] = lefthalf[i]</span><br><span class="line">            i += <span class="number">1</span></span><br><span class="line">            k += <span class="number">1</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> j &lt; len(righthalf):</span><br><span class="line">            alist[k] = righthalf[j]</span><br><span class="line">            j += <span class="number">1</span></span><br><span class="line">            k += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BitMap</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">"""位图排序：大量数据，状态不多，内存装不下时的排序法</span></span><br><span class="line"><span class="string">       读取完基本就排序完了，非常类似计数排序，但是使用byte位而非数字位(32byte)</span></span><br><span class="line"><span class="string">       复杂度：O(n)</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, maxVal)</span>:</span></span><br><span class="line">        self.size = self.elemIndex(maxVal, up=<span class="literal">True</span>)</span><br><span class="line">        self.array = [<span class="number">0</span>] * (self.size + <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">elemIndex</span><span class="params">(self, num, up=False)</span>:</span></span><br><span class="line">        <span class="string">"""计算在数组中的索引"""</span></span><br><span class="line">        <span class="keyword">if</span> up:</span><br><span class="line">            <span class="keyword">return</span> (num + <span class="number">31</span> - <span class="number">1</span>) // <span class="number">31</span> <span class="comment">#向上取整</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> num // <span class="number">31</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">byteIndex</span><span class="params">(self, num)</span>:</span></span><br><span class="line">        <span class="string">"""计算在数组元素中的位索引"""</span></span><br><span class="line">        <span class="keyword">return</span> num % <span class="number">31</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setByte</span><span class="params">(self, num)</span>:</span></span><br><span class="line">        elemIdx = self.elemIndex(num, up=<span class="literal">True</span>)</span><br><span class="line">        byteIdx = self.byteIndex(num)</span><br><span class="line">        self.array[elemIdx] |= (<span class="number">1</span> &lt;&lt; byteIdx) <span class="comment">#或操作</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">CountingSort</span><span class="params">(alist)</span>:</span></span><br><span class="line">    <span class="string">"""计数排序O(n+k)</span></span><br><span class="line"><span class="string">       因太耗内存，只适合小范围整数排序，但速度快于任何比较排序</span></span><br><span class="line"><span class="string">       计数排序利用哈希表的思想，搞映射，只是值和位置数字相同的映射 x = F(x)</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">if</span> alist == []:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    cntLstLen = max(alist) + <span class="number">1</span></span><br><span class="line">    cntLst = [<span class="number">0</span>] * cntLstLen</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(alist)):</span><br><span class="line">        cntLst[alist[i]] += <span class="number">1</span>  <span class="comment">#数据alist[i] = k就放在第k位</span></span><br><span class="line"></span><br><span class="line">    alist.clear()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(cntLstLen):</span><br><span class="line">        <span class="keyword">while</span> cntLst[i] &gt; <span class="number">0</span>:   <span class="comment">#将每个位置的数据k循环输出多次</span></span><br><span class="line">            alist.append(i)        </span><br><span class="line">            cntLst[i] -= <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">BucketSort</span><span class="params">(alist)</span>:</span></span><br><span class="line">    <span class="string">"""桶排序：计数排序的改进版，将数据均匀分配到多个桶，在各桶内可用计数排序"""</span></span><br><span class="line">    maxi, mini  = max(alist), min(alist)</span><br><span class="line">    bucketNum = (maxi - mini) // len(alist) + <span class="number">1</span>            <span class="comment">#桶的个数n，范围在1-某个合适的值</span></span><br><span class="line"></span><br><span class="line">    bucketsLst = [[] <span class="keyword">for</span> i <span class="keyword">in</span> range(bucketNum)]            <span class="comment">#准备n个空列表做桶</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(alist)):                            </span><br><span class="line">        pos = (alist[i] - mini) // len(alist)              <span class="comment">#计算数据属于哪个桶</span></span><br><span class="line">        bucketsLst[pos].append(alist[i])                   <span class="comment">#往对应桶放数据</span></span><br><span class="line">    bucketsLst = [countingSort(lst) <span class="keyword">for</span> lst <span class="keyword">in</span> bucketsLst] <span class="comment">#利用计数排序桶中数据</span></span><br><span class="line"></span><br><span class="line">    alist.clear()</span><br><span class="line">    <span class="keyword">for</span> lst <span class="keyword">in</span> bucketsLst:</span><br><span class="line">        <span class="keyword">for</span> item <span class="keyword">in</span> lst:                                   <span class="comment">#迭代输出桶内已排序数据到原列表</span></span><br><span class="line">            alist.append(item)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">RadixSort</span><span class="params">(alist)</span>:</span></span><br><span class="line">    <span class="string">"""基数排序：按低位到高位的顺序放置数据到10个桶，依次重复到最高位就排好序了</span></span><br><span class="line"><span class="string">       此法，需要二倍内存</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="comment">#辅助函数：按位重复排序:个位，十位，百位...</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__bitSort</span><span class="params">(alist, bucket, bit)</span>:</span></span><br><span class="line">        <span class="keyword">for</span> item <span class="keyword">in</span> alist:</span><br><span class="line">            pos = item // pow(<span class="number">10</span>, bit) % <span class="number">10</span> <span class="comment">#计算元素所属列表位置</span></span><br><span class="line">            bucket[pos].append(item)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#辅助函数：将桶内元素放回lst，</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__toList</span><span class="params">(alist, bucket)</span>:</span></span><br><span class="line">        alist.clear()</span><br><span class="line">        <span class="keyword">for</span> lst <span class="keyword">in</span> bucket:  </span><br><span class="line">            <span class="keyword">for</span> item <span class="keyword">in</span> lst:</span><br><span class="line">                alist.append(item)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#求最大数的位数bits</span></span><br><span class="line">    maxi = max(alist)</span><br><span class="line">    bits = len(str(maxi))         </span><br><span class="line">    </span><br><span class="line">    <span class="comment">#每次循环创建10个空桶用于放元素</span></span><br><span class="line">    <span class="keyword">for</span> bit <span class="keyword">in</span> range(bits):</span><br><span class="line">        bucket = [[] <span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">10</span>)]</span><br><span class="line">        __bitSort(alist, bucket, bit) </span><br><span class="line">        __toList(alist, bucket)</span><br></pre></td></tr></table></figure>

<h4 id="Go实现十大排序算法"><a href="#Go实现十大排序算法" class="headerlink" title="Go实现十大排序算法"></a>Go实现十大排序算法</h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 冒泡排序</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">BubbleSort</span><span class="params">(arr []<span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">    exchange := <span class="literal">true</span></span><br><span class="line">    size := <span class="built_in">len</span>(arr)</span><br><span class="line">    <span class="keyword">for</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (size &lt;= <span class="number">0</span>) || (!exchange) &#123;</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        exchange = <span class="literal">false</span></span><br><span class="line">        <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; size; i++ &#123;</span><br><span class="line">            <span class="keyword">if</span> arr[i] &gt; alist[i+<span class="number">1</span>] &#123;</span><br><span class="line">                arr[i], arr[i+<span class="number">1</span>] = arr[i+<span class="number">1</span>], arr[i]</span><br><span class="line">                exchange = <span class="literal">true</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        size--</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Partition</span><span class="params">(arr []<span class="keyword">int</span>, first, last <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">    pivotVal := arr[first]</span><br><span class="line">    left, right  := first + <span class="number">1</span>, last</span><br><span class="line">    <span class="keyword">for</span> left &lt;= right &#123;</span><br><span class="line">        <span class="keyword">for</span> left &lt;= right &amp;&amp; arr[left] &lt;= pivotVal &#123;</span><br><span class="line">            left += <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> left &lt;= right &amp;&amp; arr[right] &gt;= pivotVal &#123;</span><br><span class="line">            right -= <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> left &lt;= right &#123;</span><br><span class="line">            arr[left], arr[right] = arr[right], arr[left]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    arr[first], arr[right] = arr[right], arr[first]</span><br><span class="line">    <span class="keyword">return</span> right</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 快速排序</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">QuickSortHelper</span><span class="params">(arr []<span class="keyword">int</span>, first, last <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> first &lt; last &#123;</span><br><span class="line">        splitPoint := Partition(alist, first, last)</span><br><span class="line">        QuickSortHelper(arr, first, splitPoint<span class="number">-1</span>)</span><br><span class="line">        QuickSortHelper(arr, splitPoint+<span class="number">1</span>, last)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 选择排序</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">SelectionSort</span><span class="params">(arr []<span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">    exchange := <span class="literal">true</span></span><br><span class="line">    fillslot := <span class="built_in">len</span>(arr) - <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> fillslot &gt; <span class="number">0</span> &amp;&amp; exchange &#123; </span><br><span class="line">        exchange = <span class="literal">false</span></span><br><span class="line">        posMax := fillslot</span><br><span class="line">        <span class="keyword">for</span> loc := <span class="number">1</span>; loc &lt; fillslot+<span class="number">1</span>; loc++ &#123;</span><br><span class="line">            <span class="keyword">if</span> arr[loc] &gt; arr[posMax]&#123;</span><br><span class="line">                posMax = loc</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> posMax != fillslot &#123; </span><br><span class="line">            arr[fillslot], arr[posMax] = arr[posMax], arr[fillslot]</span><br><span class="line">            exchange = <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">        fillslot--</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">heapify</span><span class="params">(heap []<span class="keyword">int</span>, n, i <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">    <span class="keyword">for</span> &#123;</span><br><span class="line">        maxPos := i</span><br><span class="line">        <span class="keyword">if</span> i*<span class="number">2</span> &lt;= n &amp;&amp; heap[i] &lt; heap[i*<span class="number">2</span>] &#123; <span class="comment">//比左边的子元素大</span></span><br><span class="line">            maxPos = i * <span class="number">2</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> i*<span class="number">2</span>+<span class="number">1</span> &lt;= n &amp;&amp; heap[maxPos] &lt; heap[i*<span class="number">2</span>+<span class="number">1</span>] &#123; <span class="comment">//比右边的子元素大</span></span><br><span class="line">            maxPos = i*<span class="number">2</span> + <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> maxPos == i &#123; <span class="comment">//比左右子元素都小,跳出循环</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        &#125;</span><br><span class="line">        heap[i], heap[maxPos] = heap[maxPos], heap[i]</span><br><span class="line">        i = maxPos</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//堆排序(大根堆正排序)</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">HeapSort</span><span class="params">(arr []<span class="keyword">int</span>, size <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">    size--</span><br><span class="line">    initHeap(arr, size)</span><br><span class="line">    k := size</span><br><span class="line">    <span class="keyword">for</span> k &gt; <span class="number">1</span> &#123;</span><br><span class="line">        arr[<span class="number">1</span>], arr[k] = arr[k], arr[<span class="number">1</span>]</span><br><span class="line">        k--</span><br><span class="line">        heapify(arr, k, <span class="number">1</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 插入排序</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">InsertSort</span><span class="params">(arr []<span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">1</span>; i &lt; <span class="built_in">len</span>(arr); i++ &#123;</span><br><span class="line">        pos := index</span><br><span class="line">        current := alist[pos]</span><br><span class="line">        <span class="keyword">for</span> pos &gt; <span class="number">0</span> &amp;&amp; current &lt; arr[pos<span class="number">-1</span>] &#123;</span><br><span class="line">            arr[pos] = arr[pos - <span class="number">1</span>]</span><br><span class="line">            pos--</span><br><span class="line">        &#125;</span><br><span class="line">        arr[pos] = current</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">gapInsertSort</span><span class="params">(arr []<span class="keyword">int</span>, start, gap <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">    <span class="keyword">for</span> i := start+gap; i &lt; <span class="built_in">len</span>(arr); i += gap &#123;</span><br><span class="line">        pos := i</span><br><span class="line">        current := arr[pos]</span><br><span class="line">        <span class="keyword">for</span> pos &gt;= gap &amp;&amp; current &lt; arr[pos-gap] &#123;</span><br><span class="line">            arr[pos] = arr[pos - gap]</span><br><span class="line">            pos -= gap</span><br><span class="line">        &#125;</span><br><span class="line">        arr[pos] = current</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 希尔排序</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ShellSort</span><span class="params">(arr []<span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> gap <span class="keyword">int</span></span><br><span class="line">    gap = <span class="built_in">len</span>(arr) / <span class="number">2</span></span><br><span class="line">    <span class="keyword">for</span> gap &gt; <span class="number">0</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; gap; i++ &#123;</span><br><span class="line">            gapInsertSort(arr, i, gap)</span><br><span class="line">        &#125;</span><br><span class="line">        gap /= <span class="number">2</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 归并排序</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">MergeSort</span><span class="params">(arr []<span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(arr) &gt; <span class="number">1</span> &#123;</span><br><span class="line">        mid := <span class="keyword">int</span>(<span class="built_in">len</span>(arr) / <span class="number">2</span>)</span><br><span class="line">        lefthalf  := arr[:mid]</span><br><span class="line">        righthalf := arr[mid:]</span><br><span class="line">        MergeSort(lefthalf)</span><br><span class="line">        MergeSort(righthalf)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> i, j, k</span><br><span class="line">        <span class="keyword">for</span> i &lt; <span class="built_in">len</span>(lefthalf) &amp;&amp; j &lt; <span class="built_in">len</span>(righthalf) &#123;</span><br><span class="line">            <span class="keyword">if</span> lefthalf[i] &lt; righthalf[j] &#123;</span><br><span class="line">                arr[k] = lefthalf[i]</span><br><span class="line">                i++</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                arr[k] = righthalf[j]</span><br><span class="line">                j++</span><br><span class="line">            &#125;</span><br><span class="line">            k += <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i &lt; <span class="built_in">len</span>(lefthalf) &#123;</span><br><span class="line">            arr[k] = lefthalf[i]</span><br><span class="line">            i++</span><br><span class="line">            k++</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> j &lt; <span class="built_in">len</span>(righthalf) &#123;</span><br><span class="line">            arr[k] = righthalf[j]</span><br><span class="line">            j++</span><br><span class="line">            k++</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getMax</span><span class="params">(ar []<span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    max := arr[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">for</span> _, v := <span class="keyword">range</span> arr &#123;</span><br><span class="line">        <span class="keyword">if</span> v &gt; max &#123;</span><br><span class="line">            max = v</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> max</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getMin</span><span class="params">(ar []<span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    min := arr[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">for</span> _, v := <span class="keyword">range</span> arr &#123;</span><br><span class="line">        <span class="keyword">if</span> v &lt; min &#123;</span><br><span class="line">            min = v</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> min</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 计数排序</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">CountingSort</span><span class="params">(arr []<span class="keyword">int</span>)</span> []<span class="title">int</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(arr) == <span class="number">0</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> arr</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    cntLstLen := getMax(arr) + <span class="number">1</span></span><br><span class="line">    cntLst := <span class="built_in">make</span>([]<span class="keyword">int</span>, cntLstLen)</span><br><span class="line">    <span class="keyword">for</span> i:= <span class="number">0</span>; i &lt; <span class="built_in">len</span>(arr); i++ &#123;</span><br><span class="line">        cntLst[arr[i]]++</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    arr = <span class="built_in">make</span>([]<span class="keyword">int</span>, <span class="built_in">len</span>(arr)) </span><br><span class="line">    <span class="keyword">for</span> i:= <span class="number">0</span>; i &lt; cntLstLen; i++ &#123;</span><br><span class="line">         <span class="keyword">for</span> cntLst[i] &gt; <span class="number">0</span> &#123;</span><br><span class="line">            arr = <span class="built_in">append</span>(arr, i)        </span><br><span class="line">            cntLst[i]--</span><br><span class="line">         &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 桶排序</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">BucketSort</span><span class="params">(arr []<span class="keyword">int</span>)</span> []<span class="title">int</span></span> &#123;</span><br><span class="line">    max, min := getMax(arr), getMin(arr)</span><br><span class="line">    bucketNum := (max - min) / <span class="built_in">len</span>(arr) + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    bucketsLst := <span class="built_in">make</span>([][]<span class="keyword">int</span>, bucketNum) </span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(arr); i++ &#123;</span><br><span class="line">        pos := (arr[i] - min) / <span class="built_in">len</span>(arr)</span><br><span class="line">        bucketsLst[pos] = <span class="built_in">append</span>(bucketsLst[pos], arr[i])</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    k := <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> _, bucket := <span class="keyword">range</span> bucketsLst &#123;</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(bucket) &lt;= <span class="number">0</span> &#123;</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        &#125;</span><br><span class="line">        bucket = CountingSort(bucket)</span><br><span class="line">        <span class="keyword">for</span> _, v := <span class="keyword">range</span> bucket &#123;</span><br><span class="line">            arr[k] = v</span><br><span class="line">            k++</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">bitSort</span><span class="params">(arr []<span class="keyword">int</span>, bit <span class="keyword">int</span>)</span> []<span class="title">int</span></span> &#123;</span><br><span class="line">    n := <span class="built_in">len</span>(arr)</span><br><span class="line"></span><br><span class="line">    bitCounts := <span class="built_in">make</span>([]<span class="keyword">int</span>, <span class="number">10</span>)</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; n; i++ &#123;</span><br><span class="line">        pos := (arr[i] / bit) % <span class="number">10</span></span><br><span class="line">        bitCounts[pos]++</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">        bitCounts[i] += bitCounts[i<span class="number">-1</span>]</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    tmp := <span class="built_in">make</span>([]<span class="keyword">int</span>, <span class="number">10</span>)</span><br><span class="line">    <span class="keyword">for</span> i := n - <span class="number">1</span>; <span class="number">0</span> &lt;= i; i-- &#123;</span><br><span class="line">        pos := (arr[i] / bit) % <span class="number">10</span></span><br><span class="line">        tmp[bitCounts[pos]<span class="number">-1</span>] = arr[i]</span><br><span class="line">        bitCounts[pos]--</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; n; i++ &#123;</span><br><span class="line">        arr[i] = tmp[i]</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> arr</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 基数排序</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">RadixSort</span><span class="params">(arr []<span class="keyword">int</span>)</span> [] <span class="title">int</span></span> &#123;</span><br><span class="line">    max := getMax(arr)</span><br><span class="line">    <span class="keyword">for</span> bit := <span class="number">1</span>; max/bit &gt; <span class="number">0</span>; bit *= <span class="number">10</span> &#123;</span><br><span class="line">        arr = bitSort(arr, bit)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="Rust实现十大排序算法"><a href="#Rust实现十大排序算法" class="headerlink" title="Rust实现十大排序算法"></a>Rust实现十大排序算法</h4><figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 冒泡排序</span></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">BubbleSort</span></span>(arr: &amp;<span class="keyword">mut</span> <span class="built_in">Vec</span>&lt;<span class="built_in">usize</span>&gt;) &#123;</span><br><span class="line">    <span class="keyword">let</span> exchange = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">let</span> length = arr.len() - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> length &gt; <span class="number">0</span> &amp;&amp; exchange &#123;</span><br><span class="line">        exchange = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span>..length &#123;</span><br><span class="line">            <span class="keyword">if</span> arr[i] &gt; arr[i+<span class="number">1</span>] &#123;</span><br><span class="line">                arr.swap(i, i+<span class="number">1</span>);</span><br><span class="line">                exchange = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        length -= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 快速排序</span></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">QuickSort</span></span>(arr: &amp;<span class="keyword">mut</span> <span class="built_in">Vec</span>&lt;<span class="built_in">usize</span>&gt;) &#123;</span><br><span class="line">    <span class="function"><span class="keyword">fn</span> <span class="title">_partition</span></span>(arr: &amp;<span class="keyword">mut</span> <span class="built_in">Vec</span>&lt;<span class="built_in">usize</span>&gt;, first:<span class="built_in">usize</span>, last:<span class="built_in">usize</span>) -&gt; <span class="built_in">usize</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> (<span class="keyword">mut</span> pivot, v) = (first, arr[last]);</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> first..last &#123;</span><br><span class="line">            <span class="keyword">if</span> arr[j] &lt;= v &#123;</span><br><span class="line">                arr.swap(pivot, j);</span><br><span class="line">                pivot += <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        arr.swap(i, last);</span><br><span class="line">        pivot</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fn</span> <span class="title">_quick_sort</span></span>(arr:&amp;<span class="keyword">mut</span> <span class="built_in">Vec</span>&lt;<span class="built_in">usize</span>&gt;, first:<span class="built_in">usize</span>, last:<span class="built_in">usize</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span> first &lt; last &#123;</span><br><span class="line">            <span class="keyword">let</span> pivot = _partition(arr, first, last-<span class="number">1</span>);</span><br><span class="line">            _quick_sort(arr, first, pivot-<span class="number">1</span>);</span><br><span class="line">            _quick_sort(arr, pivot+<span class="number">1</span>, last-<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    _quick_sort(arr, <span class="number">0</span>, arr.len());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 插入排序</span></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">InsertSort</span></span>(arr: &amp;<span class="keyword">mut</span> <span class="built_in">Vec</span>&lt;<span class="built_in">usize</span>&gt;) &#123;</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">1</span>..arr.len() &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut</span> pos = i;</span><br><span class="line">        <span class="keyword">let</span> current = arr[pos]; </span><br><span class="line">        <span class="keyword">while</span> pos &gt; <span class="number">0</span> &amp;&amp; current &lt; arr[pos - <span class="number">1</span>] &#123;</span><br><span class="line">            arr[pos] = arr[pos - <span class="number">1</span>];</span><br><span class="line">            pos -= <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        arr[pos] = current;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 希尔排序</span></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">ShellSort</span></span>(arr: &amp;<span class="keyword">mut</span> <span class="built_in">Vec</span>&lt;<span class="built_in">usize</span>&gt;) &#123;</span><br><span class="line">    <span class="function"><span class="keyword">fn</span> <span class="title">_gapInsertSort</span></span>(arr: &amp;<span class="keyword">mut</span> <span class="built_in">Vec</span>&lt;<span class="built_in">usize</span>&gt;, gap: <span class="built_in">usize</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> gap..arr.len() &#123;</span><br><span class="line">            <span class="keyword">let</span> <span class="keyword">mut</span> pos = i;</span><br><span class="line">            <span class="keyword">let</span> current = arr[pos];</span><br><span class="line">            <span class="keyword">while</span> pos &gt;= gap  &amp;&amp; current &lt; arr[pos - gap] &#123;</span><br><span class="line">                arr[pos] = arr[pos - gap];</span><br><span class="line">                pos -= gap;</span><br><span class="line">            &#125;</span><br><span class="line">            arr[pos] = current;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> gap: <span class="built_in">usize</span> = len(arr) / <span class="number">2</span></span><br><span class="line">    <span class="keyword">while</span> gap &gt; <span class="number">0</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> start <span class="keyword">in</span> <span class="number">0</span>..gap &#123;</span><br><span class="line">            _gapInsertSort(arr, start, gap);</span><br><span class="line">        &#125;</span><br><span class="line">        gap /= <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 选择排序</span></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">SelectionSort</span></span>(arr: &amp;<span class="keyword">mut</span> <span class="built_in">Vec</span>&lt;<span class="built_in">usize</span>&gt;) &#123;</span><br><span class="line">    <span class="keyword">let</span> exchange = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">let</span> fillslot = arr.len() - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> fillslot &gt; <span class="number">0</span> &amp;&amp; exchange &#123;</span><br><span class="line">        exchange = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut</span> posMax = fillslot;</span><br><span class="line">        <span class="keyword">for</span> loc <span class="keyword">in</span> <span class="number">1</span>..fillslot+<span class="number">1</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> arr[loc] &gt; arr[posMax] &#123;</span><br><span class="line">                posMax = loc;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> posMax != fillslot &#123;</span><br><span class="line">            arr.swap(fillslot, posMax);</span><br><span class="line">            exchange = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        fillslot -= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Heap</span></span>&lt;T:<span class="built_in">Ord</span>&gt; &#123;</span><br><span class="line">    elems: <span class="built_in">Vec</span>&lt;T&gt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">impl</span>&lt;T:<span class="built_in">Ord</span>&gt; Heap&lt;T&gt; &#123;</span><br><span class="line">    <span class="function"><span class="keyword">fn</span> <span class="title">new</span></span>() -&gt; Heap&lt;T&gt; &#123;</span><br><span class="line">        Heap&#123; elems:<span class="built_in">Vec</span>::new() &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fn</span> <span class="title">from</span></span>(elems: <span class="built_in">Vec</span>&lt;T&gt;) -&gt; Heap&lt;T&gt; &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut</span> heap = Heap&#123; elems:elems &#125;;</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> (<span class="number">0</span>..heap.len()/<span class="number">2</span>).rev() &#123;</span><br><span class="line">            heap.heapify();</span><br><span class="line">        &#125;</span><br><span class="line">        heap</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fn</span> <span class="title">parent</span></span>(i: <span class="built_in">usize</span>) -&gt; <span class="built_in">usize</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> i &gt; <span class="number">0</span> &#123;</span><br><span class="line">            (i - <span class="number">1</span>)/<span class="number">2</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="number">0</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">fn</span> <span class="title">left</span></span>(i: <span class="built_in">usize</span>) -&gt; <span class="built_in">usize</span> &#123;</span><br><span class="line">        <span class="number">2</span> * i  + <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">fn</span> <span class="title">right</span></span>(i: <span class="built_in">usize</span>) -&gt; <span class="built_in">usize</span> &#123;</span><br><span class="line">        <span class="number">2</span> * i + <span class="number">2</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fn</span> <span class="title">heapify</span></span>(&amp;<span class="keyword">mut</span> <span class="keyword">self</span>, i:<span class="built_in">usize</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> (left, right, <span class="keyword">mut</span> max)  = (Heap::&lt;T&gt;::left(i), Heap::&lt;T&gt;::right(i), i);</span><br><span class="line">        <span class="keyword">if</span> left &lt; <span class="keyword">self</span>.len() &amp;&amp; <span class="keyword">self</span>.elems[left] &gt; <span class="keyword">self</span>.elems[max] &#123;</span><br><span class="line">            max = left;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> right &lt; <span class="keyword">self</span>.len() &amp;&amp; <span class="keyword">self</span>.elems[right] &gt; <span class="keyword">self</span>.elems[max] &#123;</span><br><span class="line">            max = right;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> max != i &#123;</span><br><span class="line">            <span class="keyword">self</span>.elems.swap(max, i);</span><br><span class="line">            <span class="keyword">self</span>.heapify(max);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fn</span> <span class="title">push</span></span>(&amp;<span class="keyword">mut</span> <span class="keyword">self</span>, v:T) &#123;</span><br><span class="line">        <span class="keyword">self</span>.elems.push(v);</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut</span> i = <span class="keyword">self</span>.elems.len() - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> i &gt; <span class="number">0</span> &amp;&amp; <span class="keyword">self</span>.elems[Heap::&lt;T&gt;::parent(i)] &lt; <span class="keyword">self</span>.elems[i] &#123;</span><br><span class="line">            <span class="keyword">self</span>.elems.swap(i, Heap::&lt;T&gt;::parent(i));</span><br><span class="line">            i = Heap::&lt;T&gt;::parent(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fn</span> <span class="title">pop</span></span>(&amp;<span class="keyword">mut</span> <span class="keyword">self</span>) -&gt; <span class="built_in">Option</span>&lt;T&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">self</span>.elems.is_empty() &#123;</span><br><span class="line">            <span class="literal">None</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> b = <span class="keyword">self</span>.elems.len() - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">self</span>.elems.swap(<span class="number">0</span>, b);</span><br><span class="line">            <span class="keyword">let</span> v = <span class="literal">Some</span>(<span class="keyword">self</span>.elems.pop()?);</span><br><span class="line">            <span class="keyword">if</span> !<span class="keyword">self</span>.elems.is_empty() &#123;</span><br><span class="line">                <span class="keyword">self</span>.heapify(<span class="number">0</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            v</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 堆排序</span></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">HeapSort</span></span>(arr: &amp;<span class="keyword">mut</span> <span class="built_in">Vec</span>&lt;<span class="built_in">usize</span>&gt;) &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> heap: Heap&lt;<span class="built_in">usize</span>&gt; = Heap::from(arr.clone());</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> (<span class="number">0</span>..arr.len()).rev() &#123;</span><br><span class="line">        arr[i] = heap.pop()?;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 归并排序</span></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">MergeSort</span></span>(arr: &amp;<span class="keyword">mut</span> <span class="built_in">Vec</span>&lt;<span class="built_in">usize</span>&gt;) &#123;</span><br><span class="line">    <span class="keyword">if</span> arr.len() &gt; <span class="number">1</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> mid: <span class="built_in">usize</span> = arr.len() / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">let</span> lefthalf: <span class="built_in">Vec</span>&lt;<span class="built_in">usize</span>&gt; = arr[<span class="number">0</span>..mid].iter().cloned().collect();</span><br><span class="line">        <span class="keyword">let</span> righthalf: <span class="built_in">Vec</span>&lt;<span class="built_in">usize</span>&gt; = arr[mid..arr.len()].iter().cloned().collect();</span><br><span class="line">        MergeSort(lefthalf);</span><br><span class="line">        MergeSort(righthalf);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut</span> (i, j, k) = (<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">while</span> i &lt; lefthalf.len() &amp;&amp; j &lt; righthalf.len() &#123;</span><br><span class="line">            <span class="keyword">if</span> lefthalf[i] &lt; righthalf[j] &#123;</span><br><span class="line">                arr[k] = lefthalf[i];</span><br><span class="line">                i += <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                arr[k] = righthalf[j];</span><br><span class="line">                j += <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            k += <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> i &lt; lefthalf.len() &#123;</span><br><span class="line">            arr[k] = lefthalf[i];</span><br><span class="line">            i += <span class="number">1</span>;</span><br><span class="line">            k += <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> j &lt; righthalf.len() &#123;</span><br><span class="line">            arr[k] = righthalf[j];</span><br><span class="line">            j += <span class="number">1</span>;</span><br><span class="line">            k += <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 计数排序</span></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">CountingSort</span></span>(arr: &amp;<span class="keyword">mut</span> <span class="built_in">Vec</span>&lt;<span class="built_in">usize</span>&gt;) &#123;</span><br><span class="line">    <span class="keyword">let</span> maxLen = arr.iter().max()?;</span><br><span class="line">    <span class="keyword">let</span> origin = arr.clone();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> count: <span class="built_in">Vec</span>&lt;<span class="built_in">usize</span>&gt; = <span class="built_in">Vec</span>::new(); </span><br><span class="line">    <span class="keyword">for</span> _i <span class="keyword">in</span> <span class="number">0</span>..maxLen+<span class="number">1</span> &#123;</span><br><span class="line">        count.push(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> &amp;v <span class="keyword">in</span> arr.iter() &#123;</span><br><span class="line">        count[v] += <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">1</span>..count.len() &#123;</span><br><span class="line">        count[i] + = count[i-<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> &amp;v <span class="keyword">in</span> origin.iter() &#123;</span><br><span class="line">        arr[count[v]-<span class="number">1</span>] = v;</span><br><span class="line">        count[v] -= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 桶排序</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Bucket</span></span>&lt;H, T&gt; &#123;</span><br><span class="line">    hash: H,</span><br><span class="line">    elems: <span class="built_in">Vec</span>&lt;T&gt;,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">impl</span>&lt;H, T&gt; Bucket&lt;H, T&gt; &#123;</span><br><span class="line">    <span class="keyword">pub</span> <span class="function"><span class="keyword">fn</span> <span class="title">new</span></span>(hash: H, elem: T) -&gt; Bucket&lt;H, T&gt; &#123;</span><br><span class="line">        Bucket &#123;</span><br><span class="line">            hash: hash,</span><br><span class="line">            elems: <span class="built_in">vec!</span>[elem],</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">pub</span> <span class="function"><span class="keyword">fn</span> <span class="title">bucket_sort</span></span>&lt;H, F, T&gt; (arr: &amp;<span class="keyword">mut</span> [T], hasher: F) </span><br><span class="line">        <span class="keyword">where</span> H: <span class="built_in">Ord</span>,</span><br><span class="line">              F: <span class="built_in">Fn</span>(&amp;T) -&gt; H,</span><br><span class="line">              T: <span class="built_in">Ord</span> + <span class="built_in">Clone</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut</span> buckets: <span class="built_in">Vec</span>&lt;Bucket&lt;H, T&gt;&gt; = <span class="built_in">Vec</span>::new();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> v <span class="keyword">in</span> arr.iter() &#123;</span><br><span class="line">            <span class="keyword">let</span> hash = hasher(&amp;v);</span><br><span class="line">            <span class="keyword">let</span> v = v.clone();</span><br><span class="line">            <span class="keyword">match</span> buckets.binary_search_by(|bucket| bucket.hash.cmp(&amp;hash)) &#123;</span><br><span class="line">                <span class="literal">Ok</span>(index) =&gt; buckets[index].elems.push(v),</span><br><span class="line">                <span class="literal">Err</span>(index) =&gt; buckets.insert(index, Bucket::new(hash, v)),</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> ret = buckets.into_iter().flat_map(|<span class="keyword">mut</span> bucket| &#123;</span><br><span class="line">            bucket.elems.sort();</span><br><span class="line">            bucket.elems</span><br><span class="line">        &#125;).collect::&lt;<span class="built_in">Vec</span>&lt;T&gt;&gt;();</span><br><span class="line"></span><br><span class="line">        arr.clone_from_slice(&amp;ret);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 基数排序</span></span><br><span class="line"><span class="keyword">use</span> crate::sorting::counting_sort;</span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">RadixSort</span></span>(arr: &amp;<span class="keyword">mut</span> <span class="built_in">Vec</span>&lt;<span class="built_in">usize</span>&gt;) &#123;</span><br><span class="line">    <span class="keyword">let</span> radix = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> digit = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">let</span> max_value = arr</span><br><span class="line">        .iter()</span><br><span class="line">        .max()</span><br><span class="line">        .unwrap_or(&amp;<span class="number">0</span>)</span><br><span class="line">        .clone();</span><br><span class="line">    <span class="keyword">while</span> digit &lt;= max_value &#123;</span><br><span class="line">        CountingSort(arr, <span class="number">0</span>, <span class="number">9</span>, |t|(t/digit % radix) <span class="keyword">as</span> <span class="built_in">usize</span>);</span><br><span class="line">        digit *= radix;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="Dart实现十大排序算法"><a href="#Dart实现十大排序算法" class="headerlink" title="Dart实现十大排序算法"></a>Dart实现十大排序算法</h4><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 冒泡排序</span></span><br><span class="line"><span class="keyword">void</span> BubbleSort(<span class="built_in">List</span>&lt;<span class="built_in">int</span>&gt; arr) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = arr.length; i &gt; <span class="number">0</span>; i--) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt;  i - <span class="number">1</span>; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (arr[j] &gt; arr[j + <span class="number">1</span>]) &#123;</span><br><span class="line">                <span class="keyword">var</span> t = arr[j + <span class="number">1</span>];</span><br><span class="line">                arr[j + <span class="number">1</span>] = arr[j];</span><br><span class="line">                arr[j] = t;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 快速排序</span></span><br><span class="line"><span class="keyword">void</span> quickSort(<span class="built_in">List</span>&lt;<span class="built_in">int</span>&gt; alist, <span class="built_in">int</span> first, <span class="built_in">int</span> last) &#123;</span><br><span class="line">    <span class="keyword">if</span> (first &lt; last) &#123;</span><br><span class="line">        <span class="built_in">int</span> splitPoint = partition(alist, first, last);</span><br><span class="line">        quickSort(alist, first, splitPoint<span class="number">-1</span>);</span><br><span class="line">        quickSort(alist, splitPoint+<span class="number">1</span>, last);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">int</span> partition(<span class="built_in">List</span>&lt;<span class="built_in">int</span>&gt; alist, <span class="built_in">int</span> first, <span class="built_in">int</span> last) &#123;</span><br><span class="line">    <span class="built_in">int</span> pivotVal = alist[first];</span><br><span class="line"></span><br><span class="line">    <span class="built_in">int</span> left = first + <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">int</span> right = last;</span><br><span class="line">    <span class="built_in">int</span> temp;</span><br><span class="line">    <span class="keyword">while</span> (left &lt;= right) &#123;</span><br><span class="line">        <span class="keyword">while</span> (left &lt;= right) &amp;&amp; (alist[left] &lt;= pivotVal) &#123;</span><br><span class="line">            left += <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (left &lt;= right) &amp;&amp; (alist[left] &gt;= pivotVal) &#123;</span><br><span class="line">            right -= <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (left &lt;= right)&#123;</span><br><span class="line">            temp = alist[left];</span><br><span class="line">            alist[left] = alist[right];</span><br><span class="line">            alist[right] = temp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    temp = alist[first];</span><br><span class="line">    alist[first] = alist[right];</span><br><span class="line">    alist[right] = temp;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> right;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 选择排序</span></span><br><span class="line"><span class="keyword">void</span> SelectionSort(<span class="built_in">List</span>&lt;<span class="built_in">int</span>&gt; arr) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">var</span> pos = i;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> j = i + <span class="number">1</span>; j &lt; arr.length; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (arr[j] &lt; arr[pos]) &#123;</span><br><span class="line">                pos = j;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (i != pos) &#123;</span><br><span class="line">            <span class="keyword">var</span> t = arr[i];</span><br><span class="line">            arr[i] = arr[pos];</span><br><span class="line">            arr[pos] = t;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">List</span> Heapify(<span class="built_in">List</span>&lt;<span class="built_in">int</span>&gt; arr, <span class="built_in">int</span> m, <span class="built_in">int</span> size) &#123;</span><br><span class="line">    <span class="built_in">int</span> tmp = arr[m];</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">2</span> * m; i &lt;= size; i *= <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i + <span class="number">1</span> &lt;= size &amp;&amp; arr[i] &lt; arr[i+<span class="number">1</span>]) &#123;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (arr[i] &lt; tmp) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        arr[m] = arr[i];</span><br><span class="line">        m = i;</span><br><span class="line">    &#125;</span><br><span class="line">    arr[m] = tmp;</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">List</span> BulidHeap(<span class="built_in">List</span>&lt;<span class="built_in">int</span>&gt; arr, <span class="built_in">int</span> size) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> m = size / <span class="number">2</span>; m &gt; <span class="number">0</span>; m--) &#123;</span><br><span class="line">        arr = Heapify(arr, m, size);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">List</span> swapH(<span class="built_in">List</span>&lt;<span class="built_in">int</span>&gt; arr, <span class="built_in">int</span> i, <span class="built_in">int</span> j) &#123;</span><br><span class="line">    <span class="built_in">int</span> tmp;</span><br><span class="line">    tmp = arr[i];</span><br><span class="line">    arr[i] = arr[j];</span><br><span class="line">    arr[j] = tmp;</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 堆排序</span></span><br><span class="line"><span class="keyword">void</span> HeapSort(<span class="built_in">List</span>&lt;<span class="built_in">int</span>&gt; arr, <span class="built_in">int</span> size) &#123;</span><br><span class="line">    arr = BulidHeap(arr, size);</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i = size; i &gt; <span class="number">1</span>; i--) &#123;</span><br><span class="line">        arr = swapH(arr, <span class="number">1</span>, i);</span><br><span class="line">        arr = Heapify(arr, <span class="number">1</span>, i - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 插入排序</span></span><br><span class="line"><span class="keyword">void</span> InsertSort(<span class="built_in">List</span>&lt;<span class="built_in">int</span>&gt; arr) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">        <span class="built_in">int</span> j, t = arr[i];</span><br><span class="line">        <span class="keyword">for</span> (j = i - <span class="number">1</span>; j &gt;= <span class="number">0</span>; j--) &#123;</span><br><span class="line">            <span class="keyword">if</span> (t &lt; arr[j]) &#123;</span><br><span class="line">                arr[j+<span class="number">1</span>] = arr[j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (j &lt; i - <span class="number">1</span>) &#123;</span><br><span class="line">            a [j + <span class="number">1</span>] = t;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">int</span> _initInterval&lt;T&gt;(<span class="built_in">List</span>&lt;T&gt; arr) &#123;</span><br><span class="line">    <span class="keyword">var</span> interval = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (interval &lt; arr.length ~/<span class="number">3</span>) &#123;</span><br><span class="line">        interval = <span class="number">3</span> * interval + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> interval;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 希尔排序</span></span><br><span class="line"><span class="keyword">void</span> ShellSort&lt;T <span class="keyword">extends</span> <span class="built_in">Comparable</span>&gt;(<span class="built_in">List</span>&lt;T&gt; arr) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = _initInterval(arr); i &gt; <span class="number">0</span>; i = (i - <span class="number">1</span>) ~/<span class="number">3</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> g = <span class="number">0</span>; g &lt; i; g++) &#123;</span><br><span class="line">            <span class="keyword">var</span> k = j - i, t = arr[j];</span><br><span class="line">            <span class="keyword">while</span> (k &gt;= <span class="number">0</span> &amp;&amp; t.compareTo(arr[k]) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                arr[k+<span class="number">1</span>] = arr[k];</span><br><span class="line">                k -= <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (k &lt; j - i) &#123;</span><br><span class="line">                arr[k+<span class="number">1</span>] = t;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 归并排序</span></span><br><span class="line"><span class="keyword">void</span> MergeSort(<span class="built_in">List</span>&lt;<span class="built_in">int</span>&gt; alist) &#123;</span><br><span class="line">    <span class="keyword">if</span> (alist.length) &gt; <span class="number">1</span> &#123;</span><br><span class="line">        <span class="built_in">int</span> mid = alist.length ~/ <span class="number">2</span>;</span><br><span class="line">        <span class="built_in">List</span> lefthalf = alist.sublist(<span class="number">0</span>, mid);</span><br><span class="line">        <span class="built_in">List</span> righthalf = alist.sublist(mid);</span><br><span class="line"></span><br><span class="line">        MergeSort(lefthalf);</span><br><span class="line">        MergeSort(righthalf);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">int</span> j = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">int</span> k = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (i &lt; lefthalf.length) &amp;&amp; (j &lt; righthalf.length) &#123;</span><br><span class="line">            <span class="keyword">if</span> (lefthalf[i] &lt; righthalf[j]) &#123;</span><br><span class="line">                alist[k] = lefthalf[i];</span><br><span class="line">                i += <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                alist[k] = righthalf[j];</span><br><span class="line">                j += <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            k += <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> (i &lt; lefthalf.length) &#123;</span><br><span class="line">            alist[k] = lefthalf[i];</span><br><span class="line">            i += <span class="number">1</span>;</span><br><span class="line">            k += <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> (j &lt; righthalf.length) &#123;</span><br><span class="line">            alist[k] = righthalf[j];</span><br><span class="line">            j += <span class="number">1</span>;</span><br><span class="line">            k += <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">int</span> getMax(<span class="built_in">List</span>&lt;<span class="built_in">int</span>&gt; arr) &#123;</span><br><span class="line">    <span class="built_in">int</span> max = arr[<span class="number">0</span>];</span><br><span class="line">    arr.forEach((v) &#123;</span><br><span class="line">        <span class="keyword">if</span> (v &gt; max) &#123;</span><br><span class="line">            max = v</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> max;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">int</span> getMin(<span class="built_in">List</span>&lt;<span class="built_in">int</span>&gt; arr) &#123;</span><br><span class="line">    <span class="built_in">int</span> min = arr[<span class="number">0</span>];</span><br><span class="line">    arr.forEach((v) &#123;</span><br><span class="line">        <span class="keyword">if</span> (v &lt; min) &#123;</span><br><span class="line">            min = v</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> min;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 计数排序</span></span><br><span class="line"><span class="built_in">List</span> countingSort(<span class="built_in">List</span>&lt;<span class="built_in">int</span>&gt; arr) &#123;</span><br><span class="line">    <span class="keyword">if</span> arr.length == <span class="number">0</span> &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">int</span> cntLstLen = getMax(arr) + <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">List</span> cntLst = <span class="built_in">List</span>(cntLstLen);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">        cntLst[i] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">        cntLst[arr[i]]++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">List</span> narr = <span class="built_in">List</span>();</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; cntLstLen; i++) &#123;</span><br><span class="line">         <span class="keyword">while</span> (cntLst[i] &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            narr.add(i);</span><br><span class="line">            cntLst[i]--;</span><br><span class="line">         &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> narr</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 桶排序</span></span><br><span class="line"><span class="built_in">List</span> BucketSort(<span class="built_in">List</span>&lt;<span class="built_in">int</span>&gt; arr ) &#123;</span><br><span class="line">    <span class="built_in">int</span> max = getMax(arr);</span><br><span class="line">    <span class="built_in">int</span> min = getMin(arr);</span><br><span class="line">    <span class="built_in">int</span> bucketNum = (max - min) ~/ arr.length + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">List</span> &lt;<span class="built_in">List</span>&gt; bucketsLst = <span class="built_in">List</span>(<span class="built_in">List</span>(bucketNum));</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">        <span class="built_in">int</span> pos = (arr[i] - min) ~/ arr.length;</span><br><span class="line">        bucketsLst[pos].add(arr[i]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; bucketsLst.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (bucketsLst[i].length &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        &#125;</span><br><span class="line">        bucket = countingSort(bucketsLst[i])</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; bucket.length; j++) &#123;</span><br><span class="line">            arr[j] = bucket[j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">List</span> bitSort(<span class="built_in">List</span>&lt;<span class="built_in">int</span>&gt; arr, bit <span class="built_in">int</span>) &#123;</span><br><span class="line">    <span class="built_in">int</span> n = arr.length;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">List</span> bitCounts = <span class="built_in">List</span>(<span class="number">10</span>);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">        bitCounts[i] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="built_in">int</span> pos = (arr[i] ~/ bit) % <span class="number">10</span>;</span><br><span class="line">        bitCounts[pos]++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">        bitCounts[i] += bitCounts[i<span class="number">-1</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">List</span> tmp = <span class="built_in">List</span>(<span class="number">10</span>);</span><br><span class="line">    <span class="keyword">for</span> (i = n - <span class="number">1</span>; <span class="number">0</span> &lt;= i; i--) &#123;</span><br><span class="line">        <span class="built_in">int</span> pos = (arr[i] ~/ bit) % <span class="number">10</span>;</span><br><span class="line">        tmp[bitCounts[pos]<span class="number">-1</span>] = arr[i];</span><br><span class="line">        bitCounts[pos]--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        arr[i] = tmp[i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 基数排序</span></span><br><span class="line"><span class="built_in">List</span> RadixSort(<span class="built_in">List</span>&lt;<span class="built_in">int</span>&gt; arr) &#123;</span><br><span class="line">    <span class="built_in">int</span> max = getMax(arr);</span><br><span class="line">    <span class="keyword">for</span> (bit = <span class="number">1</span>; max/bit &gt; <span class="number">0</span>; bit *= <span class="number">10</span>) &#123;</span><br><span class="line">        arr = bitSort(arr, bit);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>编程语言</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>C</tag>
        <tag>C++</tag>
        <tag>Java</tag>
        <tag>Go</tag>
        <tag>Rust</tag>
        <tag>Dart</tag>
      </tags>
  </entry>
  <entry>
    <title>C、C++、Java、Python、Go、Rust、Dart源码阅读</title>
    <url>/title/7923697c/</url>
    <content><![CDATA[<p><img src="https://s3.ax1x.com/2020/11/12/BzpFjx.png" alt="cpygorsdart"></p>
<a id="more"></a>

<p>本文为七种语言对比学习的第二十四篇：源码阅读。</p>
<p>谈及阅读源码，那么一个问题就来了：为什么要阅读源码？</p>
<p>答案其实很多，一种看法是：阅读源码能了解语言，工具的内部构造，学习语法的各种最佳用法。长此以往，你自己就有了感觉，发现自己的不足，提出些新见解，知道框架怎么搭建，甚至发明新语言。</p>
<p>这里有一篇论述阅读源码的文章，写得还挺好。链接: <a href="https://pan.baidu.com/s/1lZQmqbkZM_RP0Fv5AvuDQA" target="_blank" rel="noopener">https://pan.baidu.com/s/1lZQmqbkZM_RP0Fv5AvuDQA</a> 提取码: sd55。如果过期了，网上搜索：如何看懂源码？</p>
<p>阅读语言的源码，主要就是读其标准库，标准库是对语法最精妙的阐述。</p>
<h1 id="C"><a href="#C" class="headerlink" title="C"></a>C</h1><p>C语言是底层语言，是任何学计算机的人都会学习的语言。C主要是语法定义加标准库，所以阅读的套路是先学会语法，然后找到标准库逐个开始阅读。常用标准库就是stdio、stdlib、time等库，这些库都是基础。比如math库，里面实现的是数学函数。读了C的math库，其他任何语言的math应该都难不倒你。</p>
<p>C的这些标准库都包含在glibc里面，所以搜索glibc就能下载到。一个可行的地址是<a target="_blank" href="https://github.com/lattera/glibc">glibc</a>，当然glibc在不断更新，请找到并下载最新版。</p>
<h1 id="C-1"><a href="#C-1" class="headerlink" title="C++"></a>C++</h1><p>C++语言是底层语言，也是任何学计算机的人都会学习的语言。C++主要是语法定义加标准模板库(STL)，所以阅读的套路是先学会语法，然后找到读一些STL。常用标准库就是cmath、string、array、vector、list、map等库，这些库都是基础。比如cmath库，里面实现的是数学函数。是从C的math.h移植而来。</p>
<h1 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h1><p>Java语言是类库构成的，所以需要学习各种类库。源码在 jdk-x.x.x/lib/src.zip 里面，解压即可得到。</p>
<h1 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h1><p>Python底层CPython是用C实现的，上层才是用Python实现的，所以有两部分源码可读。CPython的源码在<a target="_blank" href="https://github.com/python/cpython">CPython</a>，标准库在其Lib目录里，内置函数如len()在bultinmodule.c文件中。</p>
<h1 id="Go"><a href="#Go" class="headerlink" title="Go"></a>Go</h1><p>Go语言是一门强大的语言，强调并发，快速编译。源码地址在<a href="https://github.com/golang/go" target="_blank">Golang</a> </p>
<h1 id="Rust"><a href="#Rust" class="headerlink" title="Rust"></a>Rust</h1><p>Rust语言也是一门底层语言，强调安全高效。阅读地址在<a href="https://github.com/rust-lang/rust" target="_blank">Rust</a> </p>
<h1 id="Dart"><a href="#Dart" class="headerlink" title="Dart"></a>Dart</h1><p>Dart语言是一门面向对象的语言，但它即能当编译型语言，又有脚本语言的特性，和Flutter结合还能跨平台。源码地址在<a href="https://github.com/dart-lang/sdk" target="_blank">Dart</a> </p>
<h2 id="从哪里开始"><a href="#从哪里开始" class="headerlink" title="从哪里开始"></a>从哪里开始</h2><p>那么多库，从哪个库开始呢？如果阅读过我前面的那篇文章：<a href="https://www.shieber.cn/title/3c8372aa" target="_blank">标准库依赖关系</a>，那么你就知道该从依赖的最底层，也就是几乎没有依赖的最底层库开始，然后逐步看语言怎么构建起来的。比如C是sys库，Python是sys模块，Go是unsafe包，Rust是alloc库，Dart是path库。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>大部分语言源码都能在开源网站找到，比如github上面。另外，想阅读linux源码的可以看看<a href="https://github.com/zavg/linux-0.01" target="_blank">linux-0.01</a>版源码和托瓦兹大神维护的最新版源码<a href="https://github.com/torvalds/linux" target="_blank">torvalds/linux</a></p>
]]></content>
      <categories>
        <category>编程语言</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>C</tag>
        <tag>C++</tag>
        <tag>Java</tag>
        <tag>Go</tag>
        <tag>Rust</tag>
        <tag>Dart</tag>
      </tags>
  </entry>
  <entry>
    <title>C、C++、Java、Python、Go、Rust、Dart多进程/线程/协程</title>
    <url>/title/82f6ae13/</url>
    <content><![CDATA[<p><img src="https://s3.ax1x.com/2020/11/12/Bz1Dh9.png" alt="cpygorsdart"></p>
<a id="more"></a>

<p>本文为七种语言对比学习的第二十三篇：多进程/线程/协程。</p>
<p>进程是操作系统分配资源的单位，线程是CPU资源分配单位，实际在CPU上跑的是线程。一个进程可能有多个线程，而一个线程可能有多个协程。进程中的多个线程将共享进程中的全部系统资源，如虚拟地址空间，文件描述符和信号处理等。但同一进程中的多个线程有各自的调用栈，寄存器上下文，本地存储。一个进程的多个线程可并行执行不同的任务。线程涉及内核态和用户态的切换，耗费时间，而协程是对线程的调度，只有用户态，且协程对资源的使用比线程更少。实际开发中，往往需要使用多线程/协程技术。</p>
<p>为何需要多线程技术？主要是程序需要面对的情况就是多个任务，非常复杂。举例，如1万人进行网络购物就必须用多个线程/协程去处理。多线程/协程同时处理多个事务，效率大大提高，是编程常态。</p>
<p>编程时，写出的代码给人直观感觉往往都是单线程的，但通过不同的技术，可以写出多线程/协程的代码。</p>
<p>下面总结各语言的多线程/协程技术。</p>
<h1 id="C"><a href="#C" class="headerlink" title="C"></a>C</h1><p>C使用pthread实现多线程。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// C语言多线程</span><br><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;stdlib.h&gt;</span><br><span class="line">#include &lt;pthread.h&gt;</span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line">    pthread_t thread1, thread2;</span><br><span class="line">    char *msg1 = &quot;thread1&quot;;</span><br><span class="line">    char *msg2 = &quot;thread2&quot;;</span><br><span class="line">    int ret1, ret2;</span><br><span class="line"></span><br><span class="line">    ret1 = pthread_create(&amp;thread1, NULL, (void *)&amp;afunc, (void *)&amp;msg1);</span><br><span class="line">    if (ret1 != 0) &#123;</span><br><span class="line">        printf(&quot;thread1 failed\n&quot;);</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        printf(&quot;thread1 succeeded\n&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    // ....</span><br><span class="line"></span><br><span class="line">    int tmp1, tmp2;</span><br><span class="line">    void *ret;</span><br><span class="line">    tmp1 = pthread_join(thread1, &amp;ret);</span><br><span class="line">    printf(&quot;thread1 return value is %d, tmp is %d\n&quot;, (int)ret, tmp1);</span><br><span class="line">    if (tmp1 != 0) &#123;</span><br><span class="line">        printf(&quot;cannot joni with thread1\n&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    print(&quot;thread1 ended\n&quot;);</span><br><span class="line">    // ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void afunc(void *ptr) &#123;</span><br><span class="line">    int i = 0;</span><br><span class="line">    for (i = 0; i &lt; 10; i++) &#123;</span><br><span class="line">        print(&quot;%s:%d\n&quot;, (char *)ptr, i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="C-1"><a href="#C-1" class="headerlink" title="C++"></a>C++</h1><p>C++使用pthread实现多线程。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NUM_THREADS 5</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span>* <span class="title">say_hello</span><span class="params">(<span class="keyword">void</span>* args)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"Hello Tom！"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">pthread_t</span> tids[NUM_THREADS];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; NUM_THREADS; ++i) &#123;</span><br><span class="line">        <span class="keyword">int</span> ret = pthread_create(&amp;tids[i], <span class="literal">NULL</span>, say_hello, <span class="literal">NULL</span>);</span><br><span class="line">        <span class="keyword">if</span> (ret != <span class="number">0</span>) </span><br><span class="line">           <span class="built_in">cout</span> &lt;&lt; <span class="string">"pthread_create error: error_code="</span> &lt;&lt; ret &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    pthread_exit(<span class="literal">NULL</span>); <span class="comment">// 类似join</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h1><p>Java 有三种线程创建方式：</p>
<ul>
<li>通过实现 Runnable 接口</li>
<li>通过继承 Thread 类本身</li>
<li>通过 Callable 和 Future 创建线程</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ThreadDemo.java</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ThreadDemo</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">   <span class="keyword">private</span> Thread t;</span><br><span class="line">   <span class="keyword">private</span> String threadName;</span><br><span class="line"></span><br><span class="line">   ThreadDemo(String name) &#123;</span><br><span class="line">      threadName = name;</span><br><span class="line">      System.out.println(<span class="string">"Creating "</span> + threadName);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      System.out.println(<span class="string">"Running "</span> + threadName);</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">         <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">4</span>; i &gt; <span class="number">0</span>; i--) &#123;</span><br><span class="line">            System.out.println(<span class="string">"Thread: "</span> + threadName + <span class="string">", "</span> + i);</span><br><span class="line">            Thread.sleep(<span class="number">50</span>);</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;<span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">         System.out.println(<span class="string">"Thread "</span> +  threadName + <span class="string">" interrupted."</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      System.out.println(<span class="string">"Thread "</span> + threadName + <span class="string">" exiting."</span>);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">      System.out.println(<span class="string">"Starting "</span> +  threadName );</span><br><span class="line">      <span class="keyword">if</span> (t == <span class="keyword">null</span>) &#123;</span><br><span class="line">         t = <span class="keyword">new</span> Thread (<span class="keyword">this</span>, threadName);</span><br><span class="line">         t.start ();</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestThread</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">      ThreadDemo T1 = <span class="keyword">new</span> ThreadDemo( <span class="string">"Thread-1"</span>);</span><br><span class="line">      T1.start();</span><br><span class="line"></span><br><span class="line">      ThreadDemo T2 = <span class="keyword">new</span> ThreadDemo( <span class="string">"Thread-2"</span>);</span><br><span class="line">      T2.start();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h1><p>Python主要使用thread和threading实现多线程，thread偏底层，threading是对thread的封装，使用要简便一些。threading创建线程可以用线程对象和继承，还可以使用线程池开多线程。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#用Tread对象创建新线程</span></span><br><span class="line"></span><br><span class="line">improt threading</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">target1</span><span class="params">()</span>:</span></span><br><span class="line">    do_awork()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">target2</span><span class="params">()</span>:</span></span><br><span class="line">    do_bwork()</span><br><span class="line"></span><br><span class="line">t1 = threading.Tread(target=target1)</span><br><span class="line">t2 = threading.Tread(target=target2)</span><br><span class="line">t1.start()</span><br><span class="line">t2.start()</span><br><span class="line">t1.join()</span><br><span class="line">t2.join()</span><br></pre></td></tr></table></figure>

<h1 id="Go"><a href="#Go" class="headerlink" title="Go"></a>Go</h1><p>Go语言主要使用协程goroutine，goroutine比线程更轻，一个线程占用2M，而goroutine占用2K左右。所以Go的并发能达到非常大，而且使用协程也不需要引入包，go关键字就能开协程，下面代码几行就能开100个协程。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">100</span>; i++ &#123;</span><br><span class="line">        <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">(<span class="keyword">int</span> j)</span></span> &#123;</span><br><span class="line">            fmt.Printf(<span class="string">"this is the goroutine %d"</span>, j)</span><br><span class="line">        &#125;(i)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="Rust"><a href="#Rust" class="headerlink" title="Rust"></a>Rust</h1><p>Rust使用thread库来实现多线程。</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">use</span> std::thread;</span><br><span class="line"><span class="keyword">use</span> std::time:Duration;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> handle = thread::spawn(<span class="keyword">move</span> || &#123;</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span>..<span class="number">10</span> &#123;</span><br><span class="line">            <span class="built_in">println!</span>(<span class="string">"I am thread &#123;&#125;"</span>, i);</span><br><span class="line">            thread::sleep(Duration(from_secs(<span class="number">1</span>)));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    handle.join()?;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="Dart"><a href="#Dart" class="headerlink" title="Dart"></a>Dart</h1><p>Dart使用isolate实现多线程。</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">"dart:async"</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">"dart:isolate"</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Ketch</span> </span>&#123;</span><br><span class="line">    <span class="keyword">void</span> prepare() &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"Preparing for cooking"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> openFire() &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"Opening Fire"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> cook() &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"Cooking"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> closeFire() &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"Closing Fire"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> buyVeg(SendPort sendPort)  &#123;</span><br><span class="line">        sendPort.send(<span class="string">"I have bought some vegetable"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main() <span class="keyword">async</span> &#123;</span><br><span class="line">    Ketch ketch = <span class="keyword">new</span> Ketch();</span><br><span class="line">    ketch.prepare();</span><br><span class="line">    ketch.openFire();</span><br><span class="line">    ketch.cook();</span><br><span class="line">    ketch.closeFire();</span><br><span class="line"></span><br><span class="line">    ReceivePort receivePort = <span class="keyword">new</span> ReceivePort();</span><br><span class="line">    isolate.spawn(Ketch.buyVeg, receivePort.sendPort);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> veg = <span class="keyword">await</span> receivePort.first;</span><br><span class="line">    <span class="built_in">print</span>(veg);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>编程语言</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>C</tag>
        <tag>C++</tag>
        <tag>Java</tag>
        <tag>Go</tag>
        <tag>Rust</tag>
        <tag>Dart</tag>
      </tags>
  </entry>
  <entry>
    <title>C、C++、Java、Python、Go、Rust、Dart数据序列化</title>
    <url>/title/97872ba/</url>
    <content><![CDATA[<p><img src="https://s3.ax1x.com/2020/11/12/BxMvIs.png" alt="cpygorsdart"></p>
<a id="more"></a>

<p>本文为七种语言对比学习的第二十二篇：数据序列化。</p>
<p>数据序列化就是将对象或数据结构转化成特定的格式，使其可在网络中传输，或可存储在内存或者文件中。反序列化则是相反的操作，将对象从序列化数据中还原出来。数据序列化后的数据格式可以是二进制，XML，JSON等格式。数据序列化是为了于数据的保存、交换、传输，如果不是这些目的，根本就不需要序列化。</p>
<p>序列化的要点</p>
<ul>
<li>序列化后数据大小</li>
<li>序列化所消耗的时间</li>
<li>平台、语言支持如何</li>
</ul>
<h1 id="C"><a href="#C" class="headerlink" title="C"></a>C</h1><p>C目前没有什么好的序列化工具使用，只能纯手写。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> OUT</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IN</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">MyStruct</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> nA;</span><br><span class="line">    <span class="keyword">char</span> cB;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> _<span class="title">MyStruct</span>* <span class="title">pNext</span>;</span></span><br><span class="line">&#125;MYSTRUCT, *PMYSTRUCT;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 序列化写入文件，-1表失败 </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">serialInToFile</span><span class="params">(IN PMYSTRUCT pList, IN <span class="keyword">const</span> <span class="keyword">char</span>* pFileName)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> nReturn = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> uszBuf[<span class="number">8</span>] = &#123;<span class="number">0xff</span>,<span class="number">0xff</span>,<span class="number">0xff</span>,<span class="number">0xff</span>,<span class="number">0xff</span>,<span class="number">0xff</span>,<span class="number">0xff</span>,<span class="number">0xff</span>&#125;;</span><br><span class="line"> </span><br><span class="line">    FILE* pFile = fopen(pFileName, <span class="string">"wb+"</span>);</span><br><span class="line">    <span class="keyword">if</span> (!pFile)</span><br><span class="line">        <span class="keyword">return</span> nReturn;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">while</span> (pList!= <span class="literal">NULL</span>)&#123;</span><br><span class="line">        fwrite(pList, <span class="number">1</span>, <span class="number">5</span>, pFile);  <span class="comment">// 5个字节</span></span><br><span class="line">        pList = pList-&gt;pNext;</span><br><span class="line">        <span class="keyword">if</span> (pList)</span><br><span class="line">            fwrite(uszBuf, <span class="number">1</span>, <span class="number">8</span>, pFile);</span><br><span class="line">    &#125;</span><br><span class="line">    fclose(pFile);</span><br><span class="line">    nReturn = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> nReturn;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 序列化导出文件，-1代表失败 </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">serialOutFromeFile</span><span class="params">(OUT PMYSTRUCT* ppList, IN <span class="keyword">const</span> <span class="keyword">char</span>* pFileName)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> nReturn = <span class="number">-1</span>;</span><br><span class="line"> </span><br><span class="line">    FILE* pFile = fopen(pFileName, <span class="string">"rb"</span>);</span><br><span class="line">    PMYSTRUCT pCurNode = (PMYSTRUCT)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(MYSTRUCT));</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> uszBuf[<span class="number">8</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span>* pA = <span class="literal">NULL</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">if</span> (!pFile)</span><br><span class="line">        <span class="keyword">return</span> nReturn;</span><br><span class="line"> </span><br><span class="line">    *ppList = pCurNode;</span><br><span class="line">    <span class="keyword">while</span>(!feof(pFile))&#123;</span><br><span class="line">        pCurNode -&gt;pNext = <span class="literal">NULL</span>;</span><br><span class="line">        fread(uszBuf, <span class="number">1</span>, <span class="number">4</span>, pFile);</span><br><span class="line">        pA = (<span class="keyword">int</span>*)uszBuf;</span><br><span class="line">        pCurNode-&gt;nA = *pA;</span><br><span class="line">        <span class="built_in">fscanf</span>(pFile, <span class="string">"%c"</span>, &amp;(pCurNode-&gt;cB));</span><br><span class="line">        fread(uszBuf, <span class="number">1</span>, <span class="number">8</span>, pFile);</span><br><span class="line">         </span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i ++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (uszBuf[i] != <span class="number">0xff</span>)</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (i == <span class="number">8</span>)&#123;</span><br><span class="line">            pCurNode-&gt;pNext = (PMYSTRUCT)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(MYSTRUCT));</span><br><span class="line">            pCurNode = pCurNode-&gt;pNext;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    fclose(pFile);</span><br><span class="line">    nReturn = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> nReturn;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InitStruct</span><span class="params">(PMYSTRUCT pSTest)</span></span>&#123;</span><br><span class="line">    pSTest-&gt;nA = <span class="number">1</span>;</span><br><span class="line">    pSTest-&gt;cB = <span class="string">'C'</span>;</span><br><span class="line">    pSTest-&gt;pNext = (PMYSTRUCT)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(MYSTRUCT));</span><br><span class="line">    pSTest-&gt;pNext-&gt;nA = <span class="number">2</span>;</span><br><span class="line">    pSTest-&gt;pNext-&gt;cB = <span class="string">'A'</span>;</span><br><span class="line">    pSTest-&gt;pNext-&gt;pNext = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DeleteStruct</span><span class="params">(PMYSTRUCT pSTest)</span></span>&#123;</span><br><span class="line">    PMYSTRUCT pTmp = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">while</span> (pSTest!= <span class="literal">NULL</span>)&#123;</span><br><span class="line">        pTmp = pSTest;</span><br><span class="line">        pSTest = pSTest-&gt;pNext;</span><br><span class="line">        <span class="built_in">free</span>(pTmp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printStruct</span><span class="params">(PMYSTRUCT pSTest)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (pSTest!= <span class="literal">NULL</span>)&#123;</span><br><span class="line">        ++i;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"第%d, nA = %d, cB = %c \n"</span>, i, pSTest-&gt;nA, pSTest-&gt;cB);</span><br><span class="line">        pSTest = pSTest-&gt;pNext;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, _TCHAR* argv[])</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> nReturn = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span>* pFileName = <span class="string">"fileSerial.tmp"</span>;</span><br><span class="line">    PMYSTRUCT pSTest = (PMYSTRUCT)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(MYSTRUCT));</span><br><span class="line">    InitStruct(pSTest);</span><br><span class="line"></span><br><span class="line">    nReturn = serialInToFile(pSTest, pFileName); <span class="comment">//序列化</span></span><br><span class="line">    DeleteStruct(pSTest);  <span class="comment">//删除</span></span><br><span class="line">    <span class="keyword">if</span> (nReturn == <span class="number">-1</span>)</span><br><span class="line">        <span class="keyword">return</span> nReturn;</span><br><span class="line"> </span><br><span class="line">    pSTest = <span class="literal">NULL</span>;</span><br><span class="line">    serialOutFromeFile(&amp;pSTest, pFileName); <span class="comment">// 导出</span></span><br><span class="line">    printStruct(pSTest); </span><br><span class="line">    DeleteStruct(pSTest);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="C-1"><a href="#C-1" class="headerlink" title="C++"></a>C++</h1><p>C++ 可使用cereal库实现序列化。 </p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cereal/archives/binary.hpp"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cereal/archives/xml.hpp"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cereal/archives/json.hpp"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cereal/types/unordered_map.hpp"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cereal/types/memory.hpp"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cereal/types/string.hpp"</span>  </span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">MyRecord</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> x, y;</span><br><span class="line">    <span class="keyword">float</span> z;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">Archive</span>&gt;</span></span><br><span class="line"><span class="class">    <span class="title">void</span> <span class="title">serialize</span>(<span class="title">Archive</span> &amp; <span class="title">ar</span>) &#123;</span></span><br><span class="line">        ar(x, y, z);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">friend</span> ostream&amp; <span class="keyword">operator</span>&lt;&lt;(ostream&amp; os, <span class="keyword">const</span> MyRecord&amp; mr);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">ostream&amp; <span class="keyword">operator</span>&lt;&lt;(ostream&amp; os, <span class="keyword">const</span> MyRecord&amp; mr) &#123;</span><br><span class="line">    os &lt;&lt; <span class="string">"MyRecord("</span> &lt;&lt; mr.x &lt;&lt; <span class="string">", "</span> &lt;&lt; mr.y &lt;&lt; <span class="string">","</span> &lt;&lt; mr.z &lt;&lt; <span class="string">")\n"</span>;</span><br><span class="line">    <span class="keyword">return</span> os;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">SomeData</span> &#123;</span></span><br><span class="line">    <span class="keyword">int32_t</span> id;</span><br><span class="line">    <span class="built_in">shared_ptr</span>&lt;<span class="built_in">unordered_map</span>&lt;<span class="keyword">uint32_t</span>, MyRecord&gt;&gt; data;</span><br><span class="line"></span><br><span class="line">    SomeData(<span class="keyword">int32_t</span> id_=<span class="number">0</span>) : id(id_), data(<span class="keyword">new</span> <span class="built_in">unordered_map</span>&lt;<span class="keyword">uint32_t</span>, MyRecord&gt;) &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">Archive</span>&gt;</span></span><br><span class="line"><span class="class">    <span class="title">void</span> <span class="title">save</span>(<span class="title">Archive</span> &amp; <span class="title">ar</span>) <span class="title">const</span> &#123;</span></span><br><span class="line">        ar(id, data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">Archive</span>&gt;</span></span><br><span class="line"><span class="class">    <span class="title">void</span> <span class="title">load</span>(<span class="title">Archive</span> &amp; <span class="title">ar</span>) &#123;</span></span><br><span class="line">        ar(id, data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">uint32_t</span>, <span class="keyword">const</span> MyRecord&amp; mr)</span> </span>&#123;</span><br><span class="line">        data-&gt;insert(make_pair(<span class="number">100</span>, mr));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"ID : "</span> &lt;&lt; id &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line">        <span class="keyword">if</span> (data-&gt;empty())</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span>&amp; item : *data)</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; item.first &lt;&lt; <span class="string">"\t"</span> &lt;&lt; item.second &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Serialization_XML</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">ofstream <span class="title">os</span><span class="params">(<span class="string">"my.xml"</span>)</span></span>;</span><br><span class="line">    cereal::<span class="function">XMLOutputArchive <span class="title">archive</span><span class="params">(os)</span></span>;</span><br><span class="line">    <span class="keyword">int</span> age = <span class="number">26</span>;</span><br><span class="line">    <span class="built_in">string</span> name = <span class="string">"lizheng"</span>;</span><br><span class="line">    archive(CEREAL_NVP(age), cereal::make_nvp(<span class="string">"Name"</span>, name));</span><br><span class="line"> </span><br><span class="line">    <span class="function">ifstream <span class="title">is</span><span class="params">(<span class="string">"my.xml"</span>)</span></span>;</span><br><span class="line">    cereal::<span class="function">XMLInputArchive <span class="title">archive</span><span class="params">(is)</span></span>;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line">    <span class="built_in">string</span> name;</span><br><span class="line">    archive(age, name);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"Age: "</span> &lt;&lt; age &lt;&lt; <span class="string">"\n"</span> &lt;&lt; <span class="string">"Name: "</span> &lt;&lt; name &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Serialization_JSON</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">ofstream <span class="title">os</span><span class="params">(<span class="string">"my.json"</span>)</span></span>;</span><br><span class="line">    cereal::<span class="function">JSONOutputArchive <span class="title">archive</span><span class="params">(os)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> age = <span class="number">26</span>;</span><br><span class="line">    <span class="built_in">string</span> name = <span class="string">"lizheng"</span>;</span><br><span class="line">    archive(CEREAL_NVP(age), cereal::make_nvp(<span class="string">"Name"</span>, name));</span><br><span class="line"></span><br><span class="line">    <span class="function">ifstream <span class="title">is</span><span class="params">(<span class="string">"my.json"</span>)</span></span>;</span><br><span class="line">    cereal::<span class="function">JSONInputArchive <span class="title">archive</span><span class="params">(is)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line">    <span class="built_in">string</span> name;</span><br><span class="line">    archive(age, name);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"Age: "</span> &lt;&lt; age &lt;&lt; <span class="string">"\n"</span> &lt;&lt; <span class="string">"Name: "</span> &lt;&lt; name &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Serialization_Binary</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">ofstream <span class="title">os</span><span class="params">(<span class="string">"my.binary"</span>, ios::binary)</span></span>;</span><br><span class="line">    cereal::<span class="function">BinaryOutputArchive <span class="title">archive</span><span class="params">(os)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> age = <span class="number">26</span>;</span><br><span class="line">    <span class="built_in">string</span> name = <span class="string">"lizheng"</span>;</span><br><span class="line">    archive(CEREAL_NVP(age), CEREAL_NVP(name));</span><br><span class="line"></span><br><span class="line">    <span class="function">ifstream <span class="title">is</span><span class="params">(<span class="string">"my.binary"</span>, ios::binary)</span></span>;</span><br><span class="line">    cereal::<span class="function">BinaryInputArchive <span class="title">archive</span><span class="params">(is)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line">    <span class="built_in">string</span> name;</span><br><span class="line">    archive(age, name);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"Age: "</span> &lt;&lt; age &lt;&lt; <span class="string">"\n"</span> &lt;&lt; <span class="string">"Name: "</span> &lt;&lt; name &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Serialization_Obj</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">ofstream <span class="title">os</span><span class="params">(<span class="string">"obj.cereal"</span>, ios::binary)</span></span>;</span><br><span class="line">    cereal::<span class="function">BinaryOutputArchive <span class="title">archive</span><span class="params">(os)</span></span>;</span><br><span class="line"></span><br><span class="line">    MyRecord mr = &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3.0</span> &#125;;</span><br><span class="line">    <span class="function">SomeData <span class="title">myData</span><span class="params">(<span class="number">1111</span>)</span></span>;</span><br><span class="line">    myData.push(<span class="number">100</span>, mr);</span><br><span class="line">    archive(myData);</span><br><span class="line"></span><br><span class="line">    <span class="function">ifstream <span class="title">is</span><span class="params">(<span class="string">"obj.cereal"</span>, ios::binary)</span></span>;</span><br><span class="line">    cereal::<span class="function">BinaryInputArchive <span class="title">archive</span><span class="params">(is)</span></span>;</span><br><span class="line">    SomeData myData;</span><br><span class="line">    archive(myData);</span><br><span class="line">    myData.<span class="built_in">print</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Serialization_XML();     <span class="built_in">cout</span> &lt;&lt; <span class="string">"----------------------\n"</span>;</span><br><span class="line">    Serialization_JSON();    <span class="built_in">cout</span> &lt;&lt; <span class="string">"----------------------\n"</span>;</span><br><span class="line">    Serialization_Binary();  <span class="built_in">cout</span> &lt;&lt; <span class="string">"----------------------\n"</span>;</span><br><span class="line">    Serialization_Obj();     <span class="built_in">cout</span> &lt;&lt; <span class="string">"----------------------\n"</span>;</span><br><span class="line">    getchar();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h1><p>Java 提供了一种对象序列化的机制，该机制中，一个对象可以被表示为一个字节序列。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Employee.java</span></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Employee</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="keyword">public</span> String address;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">transient</span> <span class="keyword">int</span> SSN;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> number;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mailCheck</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Mailing a check to "</span> + name + <span class="string">" "</span> + address);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// SerializeDemo.java</span></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SerializeDemo</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String [] args)</span> </span>&#123;</span><br><span class="line">      Employee e = <span class="keyword">new</span> Employee();</span><br><span class="line">      e.name = <span class="string">"Reyan Ali"</span>;</span><br><span class="line">      e.address = <span class="string">"Phokka Kuan, Ambehta Peer"</span>;</span><br><span class="line">      e.SSN = <span class="number">11122333</span>;</span><br><span class="line">      e.number = <span class="number">101</span>;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">         FileOutputStream fileOut = <span class="keyword">new</span> FileOutputStream(<span class="string">"/tmp/employee.ser"</span>);</span><br><span class="line">         ObjectOutputStream out = <span class="keyword">new</span> ObjectOutputStream(fileOut);</span><br><span class="line">         out.writeObject(e);</span><br><span class="line">         out.close();</span><br><span class="line">         fileOut.close();</span><br><span class="line">         System.out.printf(<span class="string">"Serialized data is saved in /tmp/employee.ser"</span>);</span><br><span class="line">      &#125; <span class="keyword">catch</span>(IOException i) &#123;</span><br><span class="line">          i.printStackTrace();</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//  DeserializeDemo.java;</span></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeserializeDemo</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String [] args)</span> </span>&#123;</span><br><span class="line">      Employee e = <span class="keyword">null</span>;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">         FileInputStream fileIn = <span class="keyword">new</span> FileInputStream(<span class="string">"/tmp/employee.ser"</span>);</span><br><span class="line">         ObjectInputStream in = <span class="keyword">new</span> ObjectInputStream(fileIn);</span><br><span class="line">         e = (Employee) in.readObject();</span><br><span class="line">         in.close();</span><br><span class="line">         fileIn.close();</span><br><span class="line">      &#125; <span class="keyword">catch</span>(IOException i) &#123;</span><br><span class="line">         i.printStackTrace();</span><br><span class="line">         <span class="keyword">return</span>;</span><br><span class="line">      &#125;<span class="keyword">catch</span>(ClassNotFoundException c) &#123;</span><br><span class="line">         System.out.println(<span class="string">"Employee class not found"</span>);</span><br><span class="line">         c.printStackTrace();</span><br><span class="line">         <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      System.out.println(<span class="string">"Deserialized Employee..."</span>);</span><br><span class="line">      System.out.println(<span class="string">"Name: "</span> + e.name);</span><br><span class="line">      System.out.println(<span class="string">"Address: "</span> + e.address);</span><br><span class="line">      System.out.println(<span class="string">"SSN: "</span> + e.SSN);</span><br><span class="line">      System.out.println(<span class="string">"Number: "</span> + e.number);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h1 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h1><p>Python有多种序列化方法，其中Pickle是Python的专属序列化方案。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"></span><br><span class="line">adict = &#123;<span class="string">"Name"</span>:<span class="string">"Shieber"</span>, <span class="string">"Age"</span>:<span class="number">24</span>,<span class="string">"Addr"</span>:<span class="string">"Chenddu"</span>&#125;</span><br><span class="line"><span class="keyword">with</span> open(<span class="string">"abc.pk"</span>, <span class="string">"wb"</span>) <span class="keyword">as</span> fobj: <span class="comment">#写二进制数据</span></span><br><span class="line">    pickle.dump(adict, fobj)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">"abc.pk"</span>, <span class="string">"rb"</span>) <span class="keyword">as</span> fobj: <span class="comment">#读二进制数据</span></span><br><span class="line">    a_dict = pickle.load(fobj)</span><br><span class="line">    print(type(a_dict))</span><br></pre></td></tr></table></figure>

<h1 id="Go"><a href="#Go" class="headerlink" title="Go"></a>Go</h1><p>Go里面也有多种序列化方法，甚至能自定义。</p>
<ul>
<li>ASN.1</li>
<li>JSON</li>
<li>gob</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ASN.1</span></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"encoding/asn1"</span></span><br><span class="line">    <span class="string">"encoding/json"</span></span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">    <span class="string">"os"</span></span><br><span class="line">)</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    data, err := asn1.Marshal(<span class="number">10</span>)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        fmt.Fprintf(os.Stderr, <span class="string">"Fatal error: %s"</span>, err.Error())</span><br><span class="line">        os.Exit(<span class="number">1</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> n <span class="keyword">int</span></span><br><span class="line">    _, err := asn1.Unmarshal(data, &amp;n)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        fmt.Fprintf(os.Stderr, <span class="string">"Fatal error: %s"</span>, err.Error())</span><br><span class="line">        os.Exit(<span class="number">1</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    fmt.Println(<span class="string">"Marshaled: "</span>, n)</span><br><span class="line"></span><br><span class="line">    person := Person &#123;</span><br><span class="line">        Name: <span class="string">"Shieber"</span>,</span><br><span class="line">        Age: <span class="number">24</span>,</span><br><span class="line">        Gender: <span class="string">"Male"</span>,</span><br><span class="line">        Addr: <span class="string">"Chengdu"</span>,</span><br><span class="line">    &#125;</span><br><span class="line">    dj, err := json.Marshal(&amp;person)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        fmt.Println(err)</span><br><span class="line">    &#125;</span><br><span class="line">    fmt.Printf(<span class="string">"Serialized data:%v\n"</span>, <span class="keyword">string</span>(dj))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="Rust"><a href="#Rust" class="headerlink" title="Rust"></a>Rust</h1><p>serde, 是rust语言用来序列化和反序列化数据的一个工具，支持的数据格式多。</p>
<ul>
<li>JSON</li>
<li>YAML</li>
<li>BSON</li>
<li>URL</li>
<li>TOML</li>
<li>Pickle</li>
</ul>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="meta">#[macro_use]</span></span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">crate</span> serde_derive;</span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">crate</span> serde;</span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">crate</span> serde_json;</span><br><span class="line"></span><br><span class="line"><span class="meta">#[derive(Serialize, Deserialize, Debug)</span></span><br><span class="line"><span class="meta">struct Point &#123;</span></span><br><span class="line"><span class="meta">    x: i32,</span></span><br><span class="line"><span class="meta">    y: i32,</span></span><br><span class="line"><span class="meta">    z: i32,</span></span><br><span class="line"><span class="meta">&#125;</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">fn main() &#123;</span></span><br><span class="line"><span class="meta">    let point = Point &#123; x:1, y:2, Z:3 &#125;;</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">    let serialized = serde_json::to_string(&amp;point)</span></span><br><span class="line"><span class="meta">        .unwrap(<span class="meta-string">"Error while serializing."</span>);    // 转换为json</span></span><br><span class="line"><span class="meta">    println!(<span class="meta-string">"serialized = &#123;&#125;"</span>, serialized);</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">    let deserialized:Point = serde_json::from_str(&amp;serialized)</span></span><br><span class="line"><span class="meta">        .unwrap(<span class="meta-string">"Error while deserializing.E"</span>); //从json转回Point</span></span><br><span class="line"><span class="meta">    println!(<span class="meta-string">"deserialized = &#123;:?&#125;"</span>, deserialized);</span></span><br><span class="line"><span class="meta">&#125;</span></span><br></pre></td></tr></table></figure>

<h1 id="Dart"><a href="#Dart" class="headerlink" title="Dart"></a>Dart</h1><p>Dart可用convert库实现JSON的序列和反序列化。</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'dart:async'</span> <span class="keyword">show</span> Future;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'package:flutter/services.dart'</span> <span class="keyword">show</span> rootBundle;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'dart:convert'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'package:demo/student.dart'</span>; <span class="comment">// 模型文件</span></span><br><span class="line"></span><br><span class="line">Future&lt;<span class="built_in">String</span>&gt; _loadAStudentAsset() <span class="keyword">async</span> &#123; <span class="comment">// 加载Json</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">await</span> rootBundle.loadString(<span class="string">'assets/student.json'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Future loadStudent() <span class="keyword">async</span> &#123; <span class="comment">// 加载响应数据</span></span><br><span class="line">  <span class="built_in">String</span> jsonString = <span class="keyword">await</span> _loadAStudentAsset();</span><br><span class="line">  <span class="keyword">final</span> jsonResponse = json.decode(jsonString); </span><br><span class="line">  Student student = <span class="keyword">new</span> Student.fromJson(jsonResponse); <span class="comment">// 反序列化</span></span><br><span class="line">  <span class="built_in">print</span>(<span class="string">"student.studentScores= <span class="subst">$&#123;student.studentScores&#125;</span>"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>编程语言</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>C</tag>
        <tag>C++</tag>
        <tag>Java</tag>
        <tag>Go</tag>
        <tag>Rust</tag>
        <tag>Dart</tag>
      </tags>
  </entry>
  <entry>
    <title>C、C++、Java、Python、Go、Rust、Dart同步及异步编程</title>
    <url>/title/d1c85720/</url>
    <content><![CDATA[<p><img src="https://s3.ax1x.com/2020/11/12/BvjeXD.png" alt="cpygorsdart"></p>
<a id="more"></a>

<p>本文为七种语言对比学习的第二十一篇：同步及异步编程。</p>
<p>程序的运行不单单只是顺序执行，往往会和各类资源以及外界系统进行交互。所以，传统直观的程序编写方法可能并不能应对实际情况。比如，系统需要等待网络传输，磁盘读取。这时程序该等待还是去处理其他事务呢？遇到购物节这种高并发事务场景，程序又该如何处理？</p>
<p>实际上，应对上述种种问题的编程模型就是同步和异步编程，它们往往涉及如下概念：</p>
<ul>
<li>阻塞：任务未结束时，主调用进程需等待结果返回</li>
<li>非阻塞：任务未结束时，主调用进程可去处理其他任务</li>
<li>同步：任务未结束时，被调用进程只能处理该任务</li>
<li>异步：任务未结束时，被调用进程可去执行其他任务</li>
</ul>
<p>同步异步和阻塞非阻塞组合就有四种情况：</p>
<ul>
<li>阻塞同步： 主调用进程等待被调用返回结果，被调用进程只处理该任务，不干别的 (多用)</li>
<li>非阻塞同步：主调用进程不用等待被调用返回结果，被调用进程只处理该任务，不干别的 (少用)</li>
<li>阻塞异步： 主调用进程等待被调用返回结果，被调用进程可处理其他事 (不用)</li>
<li>非阻塞异步：主调用进程不用等待被调用返回结果，被调用进程可处理其他事 (多用)</li>
</ul>
<p>所以同步编程多说的是阻塞同步，异步编程一定是非阻塞异步。这样，四种情况就简化为两种，便于理解。</p>
<p>阻塞非阻塞是讲的主调用进程，同步异步描述的是被调用进程。同步保证有序，效率低；异步效率高，资源占用多。有序的事务，比如生成订单，扣款，次序不能颠倒。这类需要保证顺序的工作称为事务，需要满足(ACID)条件。</p>
<p>同步没什么好说的，代码怎么写，执行就怎么来。异步却需要考虑执行任务完成后如何回到当前任务。不同的语言异步编程模型不同，但大体概念是类似的。本文都只写异步的示例，同步没什么好写的。</p>
<h1 id="C"><a href="#C" class="headerlink" title="C"></a>C</h1><p>C虽是面向过程的语言，但它也可进行异步编程。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// A.c</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"B"</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">void</span> <span class="params">(*pcb)</span><span class="params">(<span class="keyword">int</span> a)</span></span>; <span class="comment">//函数指针，方便直接使用pcb</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">parameter</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> a ;</span><br><span class="line">    pcb callback;</span><br><span class="line">&#125;parameter;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">callback_thread</span><span class="params">(<span class="keyword">void</span> *p1)</span> </span>&#123; <span class="comment">//回调线程</span></span><br><span class="line">    do_works();</span><br><span class="line">    parameter* p = (parameter*)p1 ;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"GetCallBack print! \n"</span>);</span><br><span class="line">        sleep(<span class="number">3</span>);</span><br><span class="line">        p-&gt;callback(p-&gt;a); <span class="comment">//函数指针执行函数，来自于B</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//留给B的接口</span></span><br><span class="line"><span class="function"><span class="keyword">extern</span> <span class="title">SetCallBackFun</span><span class="params">(<span class="keyword">int</span> a, pcb callback)</span></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"SetCallBackFun print! \n"</span>);</span><br><span class="line">    parameter *p = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(parameter)) ;</span><br><span class="line">    p-&gt;a  = <span class="number">10</span>;</span><br><span class="line">    p-&gt;callback = callback;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">pthread_t</span> thing1;</span><br><span class="line">    pthread_create(&amp;thing1,<span class="literal">NULL</span>,callback_thread,(<span class="keyword">void</span> *) p);</span><br><span class="line">    pthread_join(thing1,<span class="literal">NULL</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    SetCallBackFun(<span class="number">4</span>, fCallBack);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// B.c</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fCallBack</span><span class="params">(<span class="keyword">int</span> a)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"a = %d\n"</span>,a)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="C-1"><a href="#C-1" class="headerlink" title="C++"></a>C++</h1><p>C++自带异步编程库future。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;future&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;thread&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fun</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">	x++;</span><br><span class="line">	x *= <span class="number">10</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; this_thread::get_id() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	this_thread::sleep_for(chrono::seconds(<span class="number">5</span>));</span><br><span class="line">	<span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	packaged_task&lt;<span class="keyword">int</span>(<span class="keyword">int</span>)&gt; pt(fun);  <span class="comment">// 将函数打包起来</span></span><br><span class="line">	<span class="built_in">future</span>&lt;<span class="keyword">int</span>&gt; fu = pt.get_future(); <span class="comment">// 并将结果返回给future</span></span><br><span class="line"></span><br><span class="line">	<span class="function">thread <span class="title">t</span><span class="params">(ref(pt), <span class="number">1</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; fu.<span class="built_in">get</span>() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; this_thread::get_id() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	t.join();</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h1><p>Java实现异步编程。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.concurrent.CompletableFuture;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ExecutorService;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Executors;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestFuture</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ExecutorService executor = Executors.newFixedThreadPool(<span class="number">2</span>);</span><br><span class="line">        CompletableFuture&lt;String&gt; future1 = CompletableFuture.supplyAsync(()-&gt; &#123;</span><br><span class="line">            System.out.println(<span class="string">"爸：小红你去买瓶酒！"</span>);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">"小红出去买酒了，女孩子跑的比较慢，估计5s后才会回来..."</span>);</span><br><span class="line">                Thread.sleep(<span class="number">5000</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="string">"我买回来了！"</span>;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                System.err.println(<span class="string">"小红路上遭遇了不测"</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="string">"来世再见！"</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, executor);</span><br><span class="line"></span><br><span class="line">        CompletableFuture&lt;String&gt; future2 = CompletableFuture.supplyAsync(()-&gt;&#123;</span><br><span class="line">            System.out.println(<span class="string">"爸：小明你去买包烟！"</span>);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">"小明出去买烟了，可能要3s后回来..."</span>);</span><br><span class="line">                Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="string">"我买回来了!"</span>;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                System.out.println(<span class="string">"小明路上遭遇了不测！"</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="string">"这是我托人带来的口信，我已经不在了。"</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, executor);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"爸：loading......"</span>);</span><br><span class="line">        System.out.println(<span class="string">"爸: 我觉得无聊甚至去了趟厕所。"</span>);</span><br><span class="line">        System.out.println(<span class="string">"爸：loading......"</span>);</span><br><span class="line"></span><br><span class="line">        future1.thenAccept((e)-&gt;&#123;System.out.println(<span class="string">"小红说："</span>+e);&#125;);</span><br><span class="line">        future2.thenAccept((e)-&gt;&#123;System.out.println(<span class="string">"小明说："</span>+e);&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h1><p>Python实现异步编程。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os, time</span><br><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Pool</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test1</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">"进程pid=%d,ppid=%d"</span>%(os.getpid(),os.getppid()))</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>):</span><br><span class="line">        print(<span class="string">"%d"</span>%i)</span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"test1"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test2</span><span class="params">(args)</span>:</span></span><br><span class="line">    print(<span class="string">"callback func-pid=%d"</span>%os.getpid())</span><br><span class="line">    print(<span class="string">"callback func-args=%s"</span>%args)</span><br><span class="line"></span><br><span class="line">pool = Pool(<span class="number">3</span>)</span><br><span class="line">pool.apply_async(func=test1, callback=test2)</span><br><span class="line">time.sleep(<span class="number">5</span>)</span><br><span class="line">print(<span class="string">"主进程-pid=%d"</span>%os.getpid())</span><br></pre></td></tr></table></figure>

<h1 id="Go"><a href="#Go" class="headerlink" title="Go"></a>Go</h1><p>使用signal和sync库实现异步。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> async</span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"os"</span></span><br><span class="line">    <span class="string">"os/signal"</span></span><br><span class="line">    <span class="string">"time"</span></span><br><span class="line">    <span class="string">"sync"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Runner <span class="keyword">struct</span> &#123; <span class="comment">// 异步执行任务</span></span><br><span class="line">    interrupt <span class="keyword">chan</span> os.Signal</span><br><span class="line">    complete <span class="keyword">chan</span> error</span><br><span class="line">    timeout &lt;- <span class="keyword">chan</span> time.Time</span><br><span class="line">    tasks []<span class="function"><span class="keyword">func</span><span class="params">(id <span class="keyword">int</span>)</span> <span class="title">error</span></span></span><br><span class="line">    waitGroup sync.WaitGroup</span><br><span class="line">    lock sync.Mutex</span><br><span class="line">    errs []error</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewRunner</span><span class="params">(d time.Duration)</span> *<span class="title">Runner</span></span> &#123; <span class="comment">// 开启新Runner</span></span><br><span class="line">    <span class="keyword">return</span> &amp;Runner&#123;</span><br><span class="line">        interrupt: <span class="built_in">make</span>(<span class="keyword">chan</span> os.Signal, <span class="number">1</span>),</span><br><span class="line">        complete: <span class="built_in">make</span>(<span class="keyword">chan</span> error),</span><br><span class="line">        timeout: time.After(d),</span><br><span class="line">        waitGroup: sync.WaitGroup&#123;&#125;,</span><br><span class="line">        lock: sync.Mutex&#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(r *Runner)</span> <span class="title">Add</span><span class="params">(tasks... <span class="keyword">func</span>(id <span class="keyword">int</span>)</span> <span class="title">error</span>)</span> &#123; <span class="comment">// 添加任务</span></span><br><span class="line">    r.tasks = <span class="built_in">append</span>(r.tasks, tasks...)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(r *Runner)</span> <span class="title">Start</span><span class="params">()</span></span> &#123; <span class="comment">// 启动Runner并监听</span></span><br><span class="line">    signal.Notify(r.interrupt, os.Interrupt)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        r.complete &lt;- r.Run()</span><br><span class="line">    &#125;()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">select</span> &#123;</span><br><span class="line">        <span class="keyword">case</span> err := &lt;- r.complete:</span><br><span class="line">            <span class="keyword">return</span> err</span><br><span class="line">        <span class="keyword">case</span> &lt;- r.timeout:</span><br><span class="line">            <span class="keyword">return</span> ErrTimeOut</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(r *Runner)</span> <span class="title">Run</span><span class="params">()</span> <span class="title">error</span></span> &#123; <span class="comment">// 异步执行任务</span></span><br><span class="line">    <span class="keyword">for</span> id, task := <span class="keyword">range</span> r.tasks &#123;</span><br><span class="line">        <span class="keyword">if</span> r.gotInterrupt() &#123;</span><br><span class="line">            <span class="keyword">return</span> ErrInterrupt</span><br><span class="line">        &#125;</span><br><span class="line">        r.waitGroup.Add(<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">(id <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">            r.lock.Lock()</span><br><span class="line">            err := task(id)</span><br><span class="line">            r.errs = <span class="built_in">append</span>(r.errs, err)</span><br><span class="line">            r.lock.Unlock()</span><br><span class="line">            r.waitGroup.Done()</span><br><span class="line">        &#125;(id)</span><br><span class="line">    &#125;</span><br><span class="line">    r.waitGroup.Wait()</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(r *Runner)</span> <span class="title">gotInterrupt</span><span class="params">()</span> <span class="title">bool</span></span> &#123; <span class="comment">// 中断处理</span></span><br><span class="line">    <span class="keyword">select</span> &#123;</span><br><span class="line">        <span class="keyword">case</span> &lt;-r.interrupt:</span><br><span class="line">            signal.Stop(r.interrupt)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(r *Runner)</span> <span class="title">GetErrs</span><span class="params">()</span> []<span class="title">error</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> r.errs</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="Rust"><a href="#Rust" class="headerlink" title="Rust"></a>Rust</h1><p>Rust使用Future和Executor、Reactor实现异步。</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">fn</span> <span class="title">read_and_write</span></span>(s: TcpStream) &#123;</span><br><span class="line">    <span class="keyword">let</span> (<span class="keyword">mut</span> r, <span class="keyword">mut</span> w) = s.split();</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> buffer = r.read().<span class="keyword">await</span>.unwrap();</span><br><span class="line">    buffer.append(<span class="string">"Hello World!"</span>);</span><br><span class="line">    w.write_all(buffer.as_bytes()).<span class="keyword">await</span>.unwrap();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>执行流程</p>
<p><img src="https://s3.ax1x.com/2020/11/12/BxVh9S.png" alt="async"></p>
<h1 id="Dart"><a href="#Dart" class="headerlink" title="Dart"></a>Dart</h1><p>Dart中也是Future实现异步，它包含完成与未完成两种状态。async和await是专门的语法糖，简化了异步编程难度。</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> Login() <span class="keyword">async</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> token = <span class="keyword">await</span> login(<span class="string">"name"</span>, <span class="string">"Password"</span>);</span><br><span class="line">        <span class="keyword">var</span> user = <span class="keyword">await</span> fetchUserInfo(token);</span><br><span class="line">        <span class="keyword">await</span> saveUserInfo(user);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"Caught error:<span class="subst">$err</span>"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>编程语言</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>C</tag>
        <tag>C++</tag>
        <tag>Java</tag>
        <tag>Go</tag>
        <tag>Rust</tag>
        <tag>Dart</tag>
      </tags>
  </entry>
  <entry>
    <title>C、C++、Java、Python、Go、Rust、Dart数据库连接</title>
    <url>/title/f431010f/</url>
    <content><![CDATA[<p><img src="https://s3.ax1x.com/2020/11/12/Bvhxyt.png" alt="cpygorsdart"></p>
<a id="more"></a>

<p>本文为七种语言对比学习的第二十篇：数据库连接。</p>
<p>数据是程序运转的核心，数据量大了就需要保存，所以编程语言都要实现相应的数据库接口，用以快速大量的提取和保存数据。</p>
<p>常见的数据库是关系型数据库，各语言实现的关系型数据库接口又称为(ORM)。目前常见的数据库是MySQL，本文也只讲解MySQL的连接使用。</p>
<h1 id="C"><a href="#C" class="headerlink" title="C"></a>C</h1><p>C使用mysql.h实现MySQL的接口。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;winsock.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;mysql.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment (lib, <span class="meta-string">"libmysql.lib"</span>) <span class="comment">// 静态库</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> data[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> yesOrnot = <span class="number">1</span>;</span><br><span class="line">    MYSQL mysqlConn;</span><br><span class="line">    MYSQL_RES *res;</span><br><span class="line">    MYSQL_FIELD *field;</span><br><span class="line">    MYSQL_ROW nextRow;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> ret;</span><br><span class="line">    <span class="keyword">int</span> i, j;</span><br><span class="line"></span><br><span class="line">    mysql_init(&amp;mysqlConn);</span><br><span class="line">    <span class="keyword">if</span> (!(mysql_real_connect(&amp;mysqlConn, <span class="string">"localhost"</span>,<span class="string">"root"</span>,<span class="string">"passwd"</span>,<span class="string">"db"</span>,<span class="number">9090</span>,<span class="literal">NULL</span>,<span class="number">0</span>))) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Failed to connect to database...Error: %s\n"</span>,mysql_error(&amp;mysqlConn));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (yesOrnot == <span class="number">1</span>) &#123;</span><br><span class="line">        yesOrnot = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">char</span> keyword[<span class="number">100</span>];</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%s"</span>,keyword);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">char</span> toSelectFrom[<span class="number">250</span>] = <span class="string">"SELECT * FROM core_db"</span>;</span><br><span class="line">        <span class="keyword">char</span> toLike[] = <span class="string">" LIKE '%'"</span>;</span><br><span class="line">        <span class="keyword">char</span> <span class="keyword">or</span>[] = <span class="string">" OR "</span>;</span><br><span class="line">        <span class="keyword">char</span> number[] = <span class="string">"course_number"</span>;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">strcat</span>(toSelectFrom, number); </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="C-1"><a href="#C-1" class="headerlink" title="C++"></a>C++</h1><p>C++使用mysql.h实现MySQL的接口。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;mysql.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	MYSQL conn;</span><br><span class="line">	MYSQL_RES *res_set;</span><br><span class="line">	MYSQL_ROW row;</span><br><span class="line"></span><br><span class="line">	mysql_init(&amp;conn);</span><br><span class="line">	<span class="keyword">if</span> (!mysql_real_connect(&amp;conn, <span class="string">"localhost"</span>, <span class="string">"root"</span>, <span class="string">"passwd"</span>, <span class="string">"mysql"</span>, <span class="number">3306</span>, <span class="literal">NULL</span>, <span class="number">0</span>))</span><br><span class="line">		<span class="built_in">cerr</span> &lt;&lt; <span class="string">"Failed to connect to database: Error: "</span> &lt;&lt;  mysql_error(&amp;conn) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="built_in">clog</span> &lt;&lt; <span class="string">"Successfully connected to Database."</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">		<span class="keyword">int</span> status = mysql_query(&amp;conn, <span class="string">"SELECT * FROM user"</span>);</span><br><span class="line">		res_set = mysql_store_result(&amp;conn);</span><br><span class="line">		<span class="keyword">int</span> count = mysql_num_rows(res_set);</span><br><span class="line">	    <span class="built_in">cout</span> &lt;&lt; <span class="string">"No of rows = "</span> &lt;&lt; count &lt;&lt; <span class="built_in">endl</span> ;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">while</span> ((row = mysql_fetch_row(res_set)) != <span class="literal">NULL</span>)&#123;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i&lt;mysql_num_fields(res_set); i++)</span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; row[i] !=  <span class="literal">NULL</span> ? row[i] : <span class="string">"NULL"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	mysql_close(&amp;conn);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h1><p>Java连接MySQL。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.sql.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MySQLDemo</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> String JDBC_DRIVER = <span class="string">"com.mysql.cj.jdbc.Driver"</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> String DB_URL = <span class="string">"jdbc:mysql://localhost:3306/dbname? \</span></span><br><span class="line"><span class="string">            useSSL=false&amp;allowPublicKeyRetrival=true&amp;serverTimeZone=UTC"</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> String USER = <span class="string">"username"</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> String PASS = <span class="string">"password"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String [] args)</span> </span>&#123;</span><br><span class="line">        Connection conn = <span class="keyword">null</span>;</span><br><span class="line">        Statement stmt = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class.forName(JDBC_DRIVER);</span><br><span class="line">            conn = DriverManager.getConnection(DB_URL, USER, PASS);</span><br><span class="line">            System.out.println(<span class="string">"Connect to mysql..."</span>);</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">"Instance of statement"</span>);</span><br><span class="line">            stmt = conn.creatStatement();</span><br><span class="line">            String sql = <span class="string">"SELECT id, name from dbname"</span>;</span><br><span class="line">            ResultSet rs = stmt.executQuery(sql);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> (rs.next()) &#123;</span><br><span class="line">                <span class="keyword">int</span> id = rs.getInt(<span class="string">"id"</span>);</span><br><span class="line">                String name = rs.getString(<span class="string">"name"</span>);</span><br><span class="line"></span><br><span class="line">                System.out.println(<span class="string">"ID: "</span> + id);</span><br><span class="line">                System.out.println(<span class="string">"Name: "</span> + name);</span><br><span class="line">            &#125;</span><br><span class="line">            rs.close();</span><br><span class="line">            stmt.close();</span><br><span class="line">            conn.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span>(SQLException se) &#123;</span><br><span class="line">            se.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span>(Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (stmt != <span class="keyword">null</span>) stmt.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException se) &#123;</span><br><span class="line">                se.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (conn != <span class="keyword">null</span>) conn.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException se2) &#123;</span><br><span class="line">                se2.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h1><p>Python连接8.0版MySQL时，使用connector</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys, csv</span><br><span class="line"><span class="keyword">from</span> mysql <span class="keyword">import</span> connector</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DoSQL</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.usr  = <span class="string">'username'</span></span><br><span class="line">        self.host = <span class="string">'127.0.0.1'</span></span><br><span class="line">        self.pwd  = <span class="string">'passwd'</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">insert</span><span class="params">(self, db, sql)</span>:</span></span><br><span class="line">        <span class="keyword">with</span> open(sys.argv[<span class="number">1</span>],<span class="string">'r'</span>) <span class="keyword">as</span> fobj:</span><br><span class="line">            reader = csv.reader(fobj)</span><br><span class="line">            rows   = [row <span class="keyword">for</span> row <span class="keyword">in</span> reader]</span><br><span class="line"></span><br><span class="line">        data = []</span><br><span class="line">        <span class="keyword">for</span> i, row <span class="keyword">in</span> enumerate(rows):</span><br><span class="line">            tmp = (str(i+<span class="number">1</span>),row[<span class="number">0</span>],row[<span class="number">1</span>],row[<span class="number">2</span>],row[<span class="number">3</span>]) </span><br><span class="line">            data.append(tmp)</span><br><span class="line"></span><br><span class="line">        cnx = connector.connect(user=self.usr,host=self.host, </span><br><span class="line">            password=self.pwd, database=db)</span><br><span class="line">        cur = cnx.cursor()</span><br><span class="line">        cur.executemany(sql,data)</span><br><span class="line">        cnx.commit()   <span class="comment">#关键</span></span><br><span class="line">        cur.close()</span><br><span class="line">        cnx.close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    db  = <span class="string">"people"</span></span><br><span class="line">    sql = <span class="string">"INSERT INTO contacts (Id,Name,Gender,Nation,Country) VALUES(%s,%s,%s,%s,%s)"</span></span><br><span class="line">    Dosql = DoSQL()</span><br><span class="line">    Dosql.insert(db, sql)</span><br></pre></td></tr></table></figure>

<h1 id="Go"><a href="#Go" class="headerlink" title="Go"></a>Go</h1><p>Go连接数据库需要相应的go-sql-driver/mysql包。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">    <span class="string">"database/sql"</span></span><br><span class="line">    _ <span class="string">"github.com/go-sql-driver/mysql"</span></span><br><span class="line"></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    db, _ := sql.open(<span class="string">"mysql"</span>, <span class="string">"root:xxx@tcp(127.0.0.1:3306)"</span>)</span><br><span class="line">    db.SetConnMaxLifetime(<span class="number">100</span>)</span><br><span class="line">    db.SetMaxIdleConns(<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> err := db.Ping(); err != <span class="literal">nil</span> &#123;</span><br><span class="line">        fmt.Println(<span class="string">"Open database failed"</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    fmt.Println(<span class="string">"connection established"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> user User</span><br><span class="line">    rows, err := db.Query(<span class="string">`SELECT * FROM user where id in (1,2,3)`</span>)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        errors.New(<span class="string">"query incur error"</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> rows.Next() &#123;</span><br><span class="line">        err := rows.Scan(user.sex, user.phone, user.name, user.id, user.age)</span><br><span class="line">        <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">            fmt.Println(json.Marshal(user))</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    rows.Close()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="Rust"><a href="#Rust" class="headerlink" title="Rust"></a>Rust</h1><figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">extern</span> <span class="keyword">crate</span> sqlx;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> pool = sqlx::MySqlPool::builder()</span><br><span class="line">        .max_size(<span class="number">100</span>)</span><br><span class="line">        .min_size(<span class="number">10</span>)</span><br><span class="line">        .connect_timeout(std::time::Duration::from_secs(<span class="number">10</span>))</span><br><span class="line">        .max_lifetime(std::time::Duration::from_secs(<span class="number">1800</span>))</span><br><span class="line">        .idle_timeout(std::time::Duration::from_secs(<span class="number">600</span>))</span><br><span class="line">         build(&amp;std::env::var(<span class="string">"DATABASE_URL"</span>).unwrap()).<span class="keyword">await</span>?;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// cursor</span></span><br><span class="line">    <span class="keyword">let</span> sql = <span class="string">"select id, username from t_user where id &lt; ?"</span>;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> cursor = sqlx::query(sql).bind(<span class="number">3</span>).fetch(&amp;pool);</span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">let</span> <span class="literal">Some</span>(row) = cursor.next().<span class="keyword">await</span>? &#123;</span><br><span class="line">        <span class="keyword">let</span> user = User &#123;</span><br><span class="line">            id: row.get(<span class="string">"id"</span>),</span><br><span class="line">            username: row.get(<span class="string">"username"</span>),</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">"&#123;:?&#125;"</span>, user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// commit </span></span><br><span class="line">    <span class="keyword">let</span> sql = <span class="string">r#"update t_user set username = ? where id &gt; ?"#</span>;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> affect_rows = sqlx::query(sql).bind(<span class="string">"wy"</span>).bind(<span class="number">1</span>).execute(&amp;pool).<span class="keyword">await</span>?;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;:?&#125;"</span>, affect_rows);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="Dart"><a href="#Dart" class="headerlink" title="Dart"></a>Dart</h1><p>Dart使用sqljocky连接mysql数据库。</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">"package:sqljocky/sqljocky.dart"</span></span><br><span class="line"></span><br><span class="line">main(<span class="built_in">List</span>&lt;<span class="built_in">String</span>&gt; arguments) &#123;</span><br><span class="line">  <span class="keyword">var</span> pool = <span class="keyword">new</span> ConnectionPool(</span><br><span class="line">        host: <span class="string">'localhost'</span>,port: <span class="number">3306</span>, user: <span class="string">'root'</span>,</span><br><span class="line">        password: <span class="string">'xxxx'</span>, db: <span class="string">'people'</span>, max: <span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 查询</span></span><br><span class="line">  pool.query(<span class="string">"SELECT * FROM users"</span>).then( (results) &#123;</span><br><span class="line">      results.forEach( (row) &#123;</span><br><span class="line">          <span class="built_in">print</span>(<span class="string">"<span class="subst">$&#123;row[<span class="number">1</span>]&#125;</span>, <span class="subst">$&#123;row[<span class="number">2</span>]&#125;</span>"</span>);</span><br><span class="line">      &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 用字段查询</span></span><br><span class="line">  pool.query(<span class="string">"SELECT * FROM users"</span>).then( (results) &#123;</span><br><span class="line">      results.forEach( (row) &#123;</span><br><span class="line">          <span class="built_in">print</span>(<span class="string">"<span class="subst">$&#123;row.name&#125;</span>, <span class="subst">$&#123;row.age&#125;</span>"</span>);</span><br><span class="line">      &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 批量处理</span></span><br><span class="line">  pool.prepare(<span class="string">"insert into users (name, age, email) values (?, ?, ?)"</span>)</span><br><span class="line">    ..then( (query) &#123;</span><br><span class="line">        query.executeMulti(</span><br><span class="line">          [</span><br><span class="line">              [<span class="string">"U1"</span>, <span class="number">18</span>,, <span class="string">"ld@xx.com"</span>],</span><br><span class="line">              [<span class="string">"U2"</span>, <span class="number">19</span>,, <span class="string">"ll@xx.com"</span>],</span><br><span class="line">              [<span class="string">"U3"</span>, <span class="number">21</span>,, <span class="string">"lm@xx.com"</span>],</span><br><span class="line">              [<span class="string">"U4"</span>, <span class="number">23</span>,, <span class="string">"la@xx.com"</span>],</span><br><span class="line">          ]</span><br><span class="line">        )</span><br><span class="line">        ..then((results) &#123;</span><br><span class="line">           <span class="keyword">for</span> (<span class="keyword">var</span> result <span class="keyword">in</span> results) &#123;</span><br><span class="line">               <span class="built_in">print</span>(<span class="string">"Userid:<span class="subst">$&#123;result.userId&#125;</span>"</span>);</span><br><span class="line">           &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>编程语言</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>C</tag>
        <tag>C++</tag>
        <tag>Java</tag>
        <tag>Go</tag>
        <tag>Rust</tag>
        <tag>Dart</tag>
      </tags>
  </entry>
  <entry>
    <title>C、C++、Java、Python、Go、Rust、Dart网络编程</title>
    <url>/title/5f93f118/</url>
    <content><![CDATA[<p><img src="https://s3.ax1x.com/2020/11/11/BvR3rT.png" alt="cpygorsdart"></p>
<a id="more"></a>

<p>本文为七种语言对比学习的第十九篇：网络编程。</p>
<p>网络诞生于上世纪70，80年代，那时的网络不像现在需要高并发，处理的任务也远不如现在多。随着时代的发展，网络成为了一项基本服务，一种社会运转的基本组件。任何一门语言都需要考虑网络。网络编程就是指通过计算机语言实现网络通信。网络编程需要考虑网络通信的模型，目前的网络通信在计算机内部被看成一项服务，而且多是server/client模式，</p>
<p>Linux下一切皆文件，所以网络通信是通过对一个文件的读写来实现的，这个文件叫做socket文件。通过读写数据到该文件，就能实现网络传输。目前，所有网络编程都要用socket文件并涉及相关操作：</p>
<ul>
<li>建立socket</li>
<li>绑定bind</li>
<li>连接connect</li>
<li>监听listen</li>
<li>接受accept</li>
<li>关闭close</li>
</ul>
<h1 id="C"><a href="#C" class="headerlink" title="C"></a>C</h1><p>C语言中的网络编程，分为server和client端。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// C 网络通信</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PORT 9090</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SIZE 1024</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">creatSocket</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> socket = socket(AF_INET, SOCK_STREAM, <span class="number">0</span>);  <span class="comment">// socket </span></span><br><span class="line">    <span class="keyword">if</span> (socket == <span class="number">-1</span>) &#123;</span><br><span class="line">        perror(<span class="string">"creatSocket failed"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">addr</span>;</span></span><br><span class="line">    <span class="built_in">memset</span>(&amp;addr, <span class="number">0</span>, <span class="keyword">sizeof</span>(addr));</span><br><span class="line">    addr.sin_family = AF_INET;</span><br><span class="line">    addr.sin_port = htons(PORT);</span><br><span class="line">    addr.sin_addr.s_addr = = htonl(INADDR_ANY);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> ret = bind(socket, (struct sockaddr *)&amp;addr, <span class="keyword">sizeof</span>(addr)); <span class="comment">// bind</span></span><br><span class="line">    <span class="keyword">if</span> (ret == <span class="number">-1</span>) &#123;</span><br><span class="line">        perror(<span class="string">"bind failed"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ret = <span class="built_in">listen</span>(socket, <span class="number">5</span>); <span class="comment">// listen</span></span><br><span class="line">    <span class="keyword">if</span> (ret == <span class="number">-1</span>) &#123;</span><br><span class="line">        perror(<span class="string">"listen failed"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> socket;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">wait_client</span><span class="params">(<span class="keyword">int</span> listen_socket)</span></span>&#123;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">cliaddr</span>;</span></span><br><span class="line">	<span class="keyword">int</span> addrlen = <span class="keyword">sizeof</span>(cliaddr);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"等待客户端连接。。。。\n"</span>);</span><br><span class="line">	<span class="keyword">int</span> client_socket = accept(listen_socket, (struct sockaddr *)&amp;cliaddr, &amp;addrlen);</span><br><span class="line">	<span class="keyword">if</span>(client_socket == <span class="number">-1</span>)&#123;</span><br><span class="line">		perror(<span class="string">"accept"</span>);</span><br><span class="line">		<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"成功接收到一个客户端：%s\n"</span>, inet_ntoa(cliaddr.sin_addr));</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> client_socket;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">hanld_client</span><span class="params">(<span class="keyword">int</span> listen_socket, <span class="keyword">int</span> client_socket)</span></span>&#123;</span><br><span class="line">	<span class="keyword">char</span> buf[SIZE];</span><br><span class="line">	<span class="keyword">while</span>(<span class="number">1</span>) &#123;</span><br><span class="line">		<span class="keyword">int</span> ret = <span class="built_in">read</span>(client_socket, buf, SIZE<span class="number">-1</span>);</span><br><span class="line">		<span class="keyword">if</span>(ret == <span class="number">-1</span>)&#123;</span><br><span class="line">			perror(<span class="string">"read"</span>);</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(ret == <span class="number">0</span>)&#123;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		buf[ret] = <span class="string">'\0'</span>;</span><br><span class="line">		<span class="keyword">int</span> i;</span><br><span class="line">		<span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; ret; i++)&#123;</span><br><span class="line">			buf[i] = buf[i] + <span class="string">'A'</span> - <span class="string">'a'</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"%s\n"</span>, buf);</span><br><span class="line">		<span class="built_in">write</span>(client_socket, buf, ret);</span><br><span class="line">		<span class="keyword">if</span>(<span class="built_in">strncmp</span>(buf, <span class="string">"end"</span>, <span class="number">3</span>) == <span class="number">0</span>)&#123;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">close</span>(client_socket);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> listen_socket = Creat_socket();</span><br><span class="line">	<span class="keyword">int</span> client_socket = wait_client(listen_socket);</span><br><span class="line">	hanld_client(listen_socket, client_socket);</span><br><span class="line">	<span class="built_in">close</span>(listen_socket);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="C-1"><a href="#C-1" class="headerlink" title="C++"></a>C++</h1><p>C++语言中的网络编程，分为server和client端。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Common.h</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> CHATROOM_COMMON_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CHATROOM_COMMON_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;list&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;netinet/in.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/epoll.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;errno.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SERVER_IP <span class="meta-string">"127.0.0.1"</span> <span class="comment">// 默认服务器端IP地址</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SERVER_PORT 8888  <span class="comment">// 服务器端口号</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> EPOLL_SIZE 5000   <span class="comment">// 为epoll支持的最大句柄数</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> BUF_SIZE 0xFFFF   <span class="comment">// 缓冲区大小65535</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SERVER_WELCOME <span class="meta-string">"Welcome you join to the chat room! Your chat ID is: Client #%d"</span> </span></span><br><span class="line">                          <span class="comment">// 新用户登录后的欢迎信息</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SERVER_MESSAGE <span class="meta-string">"ClientID %d say &gt;&gt; %s"</span></span></span><br><span class="line">                         <span class="comment">// 其他用户收到消息的前缀</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SERVER_PRIVATE_MESSAGE <span class="meta-string">"Client %d say to you privately &gt;&gt; %s"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SERVER_PRIVATE_ERROR_MESSAGE <span class="meta-string">"Client %d is not in the chat room yet~"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> EXIT <span class="meta-string">"EXIT"</span>  <span class="comment">// 退出系统</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CAUTION <span class="meta-string">"There is only one int the char room!"</span> <span class="comment">// 提醒聊天室中唯一的客户</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">addfd</span><span class="params">( <span class="keyword">int</span> epollfd, <span class="keyword">int</span> fd, <span class="keyword">bool</span> enable_et )</span> </span>&#123; <span class="comment">// 注册新的fd到epollfd中</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">epoll_event</span> <span class="title">ev</span>;</span></span><br><span class="line">    ev.data.fd = fd;</span><br><span class="line">    ev.events = EPOLLIN;</span><br><span class="line">    <span class="keyword">if</span>( enable_et )</span><br><span class="line">    ev.events = EPOLLIN | EPOLLET;</span><br><span class="line">    epoll_ctl(epollfd, EPOLL_CTL_ADD, fd, &amp;ev);</span><br><span class="line">    fcntl(fd, F_SETFL, fcntl(fd, F_GETFD, <span class="number">0</span>)| O_NONBLOCK); <span class="comment">// 设置socket为非阻塞模式</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"fd added to epoll!\n\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Msg</span> &#123;</span><span class="comment">//定义信息结构，在服务端和客户端之间传送</span></span><br><span class="line">    <span class="keyword">int</span> type;</span><br><span class="line">    <span class="keyword">int</span> fromID;</span><br><span class="line">    <span class="keyword">int</span> toID;</span><br><span class="line">    <span class="keyword">char</span> content[BUF_SIZE];</span><br><span class="line">&#125;;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">// CHATROOM_COMMON_H</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Server.h</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> CHATROOM_SERVER_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CHATROOM_SERVER_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"Common.h"</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Server</span> &#123;</span>  <span class="comment">// 服务端类，用来处理客户端请求</span></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="built_in">Server</span>();</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">Init</span><span class="params">()</span></span>;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">Close</span><span class="params">()</span></span>;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">Start</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">        <span class="function"><span class="keyword">int</span> <span class="title">SendBroadcastMessage</span><span class="params">(<span class="keyword">int</span> clientfd)</span></span>;</span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">serverAddr</span>;</span></span><br><span class="line">        <span class="keyword">int</span> listener;</span><br><span class="line">        <span class="keyword">int</span> epfd;</span><br><span class="line">        <span class="built_in">list</span>&lt;<span class="keyword">int</span>&gt; clients_list;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Server.cpp</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"Server.h"</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="built_in">Server</span>::<span class="built_in">Server</span>()&#123;</span><br><span class="line">    serverAddr.sin_family = PF_INET;</span><br><span class="line">    serverAddr.sin_port = htons(SERVER_PORT);</span><br><span class="line">    serverAddr.sin_addr.s_addr = inet_addr(SERVER_IP);</span><br><span class="line">    listener = <span class="number">0</span>;</span><br><span class="line">    epfd = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">void</span> <span class="built_in">Server</span>::Init() &#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"Init Server..."</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    listener = socket(PF_INET, SOCK_STREAM, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span>(listener &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        perror(<span class="string">"listener"</span>); </span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>( bind(listener, (struct sockaddr *)&amp;serverAddr, <span class="keyword">sizeof</span>(serverAddr)) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        perror(<span class="string">"bind error"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//监听</span></span><br><span class="line">    <span class="keyword">int</span> ret = <span class="built_in">listen</span>(listener, <span class="number">5</span>);</span><br><span class="line">    <span class="keyword">if</span>(ret &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        perror(<span class="string">"listen error"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"Start to listen: "</span> &lt;&lt; SERVER_IP &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    epfd = epoll_create (EPOLL_SIZE);</span><br><span class="line">    <span class="keyword">if</span>(epfd &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        perror(<span class="string">"epfd error"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//往事件表里添加监听事件</span></span><br><span class="line">    addfd(epfd, listener, <span class="literal">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="built_in">Server</span>::Close() &#123;</span><br><span class="line">    <span class="built_in">close</span>(listener);</span><br><span class="line">    <span class="built_in">close</span>(epfd);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> <span class="built_in">Server</span>::SendBroadcastMessage(<span class="keyword">int</span> clientfd) &#123;</span><br><span class="line">    <span class="keyword">char</span> recv_buf[BUF_SIZE];</span><br><span class="line">    <span class="keyword">char</span> send_buf[BUF_SIZE];</span><br><span class="line">    Msg msg;</span><br><span class="line">    bzero(recv_buf, BUF_SIZE);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"read from client(clientID = "</span> &lt;&lt; clientfd &lt;&lt; <span class="string">")"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">int</span> len = recv(clientfd, recv_buf, BUF_SIZE, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//清空结构体，把接受到的字符串转换为结构体</span></span><br><span class="line">    <span class="built_in">memset</span>(&amp;msg,<span class="number">0</span>,<span class="keyword">sizeof</span>(msg));</span><br><span class="line">    <span class="built_in">memcpy</span>(&amp;msg,recv_buf,<span class="keyword">sizeof</span>(msg));</span><br><span class="line"></span><br><span class="line">    <span class="comment">//判断接收到的信息是私聊还是群聊</span></span><br><span class="line">    msg.fromID=clientfd;</span><br><span class="line">    <span class="keyword">if</span>(msg.content[<span class="number">0</span>]==<span class="string">'\\'</span>&amp;&amp;<span class="built_in">isdigit</span>(msg.content[<span class="number">1</span>]))&#123;</span><br><span class="line">        msg.type=<span class="number">1</span>;</span><br><span class="line">        msg.toID=msg.content[<span class="number">1</span>]-<span class="string">'0'</span>;</span><br><span class="line">        <span class="built_in">memcpy</span>(msg.content,msg.content+<span class="number">2</span>,<span class="keyword">sizeof</span>(msg.content));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        msg.type=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(len == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">close</span>(clientfd);</span><br><span class="line">        clients_list.<span class="built_in">remove</span>(clientfd);</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"ClientID = "</span> &lt;&lt; clientfd</span><br><span class="line">        &lt;&lt; <span class="string">" closed.\n now there are "</span></span><br><span class="line">        &lt;&lt; clients_list.<span class="built_in">size</span>()</span><br><span class="line">        &lt;&lt; <span class="string">" client in the char room"</span></span><br><span class="line">        &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(clients_list.<span class="built_in">size</span>() == <span class="number">1</span>)&#123;</span><br><span class="line">        <span class="built_in">memcpy</span>(&amp;msg.content,CAUTION,<span class="keyword">sizeof</span>(msg.content));</span><br><span class="line">        bzero(send_buf, BUF_SIZE);</span><br><span class="line">        <span class="built_in">memcpy</span>(send_buf,&amp;msg,<span class="keyword">sizeof</span>(msg));</span><br><span class="line">        send(clientfd, send_buf, <span class="keyword">sizeof</span>(send_buf), <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> len;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">char</span> format_message[BUF_SIZE];</span><br><span class="line">    <span class="keyword">if</span>(msg.type==<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="built_in">sprintf</span>(format_message, SERVER_MESSAGE, clientfd, msg.content);</span><br><span class="line">        <span class="built_in">memcpy</span>(msg.content,format_message,BUF_SIZE);</span><br><span class="line">        <span class="comment">// 遍历客户端列表依次发送消息，需要判断不要给来源客户端发</span></span><br><span class="line">        <span class="built_in">list</span>&lt;<span class="keyword">int</span>&gt;::iterator it;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(it = clients_list.<span class="built_in">begin</span>(); it != clients_list.<span class="built_in">end</span>(); ++it) &#123;</span><br><span class="line">            <span class="keyword">if</span>(*it != clientfd)&#123;</span><br><span class="line">            <span class="comment">//把发送的结构体转换为字符串</span></span><br><span class="line">                bzero(send_buf, BUF_SIZE);</span><br><span class="line">                <span class="built_in">memcpy</span>(send_buf,&amp;msg,<span class="keyword">sizeof</span>(msg));</span><br><span class="line">                <span class="keyword">if</span>( send(*it,send_buf, <span class="keyword">sizeof</span>(send_buf), <span class="number">0</span>) &lt; <span class="number">0</span> )</span><br><span class="line">                     <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(msg.type==<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">bool</span> private_offline=<span class="literal">true</span>;</span><br><span class="line">        <span class="built_in">sprintf</span>(format_message, SERVER_PRIVATE_MESSAGE, clientfd, msg.content);</span><br><span class="line">        <span class="built_in">memcpy</span>(msg.content,format_message,BUF_SIZE);</span><br><span class="line"> </span><br><span class="line">        <span class="built_in">list</span>&lt;<span class="keyword">int</span>&gt;::iterator it;</span><br><span class="line">        <span class="keyword">for</span>(it = clients_list.<span class="built_in">begin</span>(); it != clients_list.<span class="built_in">end</span>(); ++it) &#123;</span><br><span class="line">            <span class="keyword">if</span>(*it == msg.toID)&#123;</span><br><span class="line">            private_offline=<span class="literal">false</span>;</span><br><span class="line"> </span><br><span class="line">            bzero(send_buf, BUF_SIZE);</span><br><span class="line">            <span class="built_in">memcpy</span>(send_buf,&amp;msg,<span class="keyword">sizeof</span>(msg));</span><br><span class="line">                 <span class="keyword">if</span>( send(*it,send_buf, <span class="keyword">sizeof</span>(send_buf), <span class="number">0</span>) &lt; <span class="number">0</span> )</span><br><span class="line">                      <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">if</span>(private_offline)&#123;</span><br><span class="line">            <span class="built_in">sprintf</span>(format_message,SERVER_PRIVATE_ERROR_MESSAGE,msg.toID);</span><br><span class="line">            <span class="built_in">memcpy</span>(msg.content,format_message,BUF_SIZE);</span><br><span class="line">            bzero(send_buf,BUF_SIZE);</span><br><span class="line">            <span class="built_in">memcpy</span>(send_buf,&amp;msg,<span class="keyword">sizeof</span>(msg));</span><br><span class="line">            <span class="keyword">if</span>(send(msg.fromID,send_buf,<span class="keyword">sizeof</span>(send_buf),<span class="number">0</span>)&lt;<span class="number">0</span>)</span><br><span class="line">                 <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> len;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 启动服务端</span></span><br><span class="line"><span class="keyword">void</span> <span class="built_in">Server</span>::Start() &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">epoll_event</span> <span class="title">events</span>[<span class="title">EPOLL_SIZE</span>];</span></span><br><span class="line">    Init();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">int</span> epoll_events_count = epoll_wait(epfd, events, EPOLL_SIZE, <span class="number">-1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(epoll_events_count &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            perror(<span class="string">"epoll failure"</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"epoll_events_count =\n"</span> &lt;&lt; epoll_events_count &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; epoll_events_count; ++i) &#123;</span><br><span class="line">            <span class="keyword">int</span> sockfd = events[i].data.fd;</span><br><span class="line">            <span class="keyword">if</span>(sockfd == listener) &#123;</span><br><span class="line">                <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">client_address</span>;</span></span><br><span class="line">                <span class="keyword">socklen_t</span> client_addrLength = <span class="keyword">sizeof</span>(struct sockaddr_in);</span><br><span class="line">                <span class="keyword">int</span> clientfd = accept( listener, ( struct sockaddr* )&amp;client_address, &amp;client_addrLength );</span><br><span class="line"></span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; <span class="string">"client connection from: "</span></span><br><span class="line">                &lt;&lt; inet_ntoa(client_address.sin_addr) &lt;&lt; <span class="string">":"</span></span><br><span class="line">                &lt;&lt; ntohs(client_address.sin_port) &lt;&lt; <span class="string">", clientfd = "</span></span><br><span class="line">                &lt;&lt; clientfd &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">                addfd(epfd, clientfd, <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">                clients_list.push_back(clientfd);</span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; <span class="string">"Add new clientfd = "</span> &lt;&lt; clientfd &lt;&lt; <span class="string">" to epoll"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; <span class="string">"Now there are "</span> &lt;&lt; clients_list.<span class="built_in">size</span>() &lt;&lt; <span class="string">" clients int the chat room"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 服务端发送欢迎信息</span></span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; <span class="string">"welcome message"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">                <span class="keyword">char</span> message[BUF_SIZE];</span><br><span class="line">                bzero(message, BUF_SIZE);</span><br><span class="line">                <span class="built_in">sprintf</span>(message, SERVER_WELCOME, clientfd);</span><br><span class="line">                <span class="keyword">int</span> ret = send(clientfd, message, BUF_SIZE, <span class="number">0</span>);</span><br><span class="line">                <span class="keyword">if</span>(ret &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                    perror(<span class="string">"send error"</span>);</span><br><span class="line">                    Close();</span><br><span class="line">                    <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">int</span> ret = SendBroadcastMessage(sockfd);</span><br><span class="line">                <span class="keyword">if</span>(ret &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                    perror(<span class="string">"error"</span>);</span><br><span class="line">                    Close();</span><br><span class="line">                    <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    Close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Client.h</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> CHATROOM_CLIENT_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CHATROOM_CLIENT_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"Common.h"</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Client</span> &#123;</span></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="built_in">Client</span>();</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">Connect</span><span class="params">()</span></span>;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">Close</span><span class="params">()</span></span>;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">Start</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">        <span class="keyword">int</span> sock;</span><br><span class="line">        <span class="keyword">int</span> pid;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> epfd;</span><br><span class="line">        <span class="keyword">int</span> pipe_fd[<span class="number">2</span>];</span><br><span class="line">        <span class="keyword">bool</span> isClientwork;</span><br><span class="line"></span><br><span class="line">        Msg msg;</span><br><span class="line">        <span class="keyword">char</span> send_buf[BUF_SIZE];</span><br><span class="line">        <span class="keyword">char</span> recv_buf[BUF_SIZE];</span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">serverAddr</span>;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Client.cpp</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"Client.h"</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Client</span>::<span class="built_in">Client</span>()&#123;</span><br><span class="line">    serverAddr.sin_family = PF_INET;</span><br><span class="line">    serverAddr.sin_port = htons(SERVER_PORT);</span><br><span class="line">    serverAddr.sin_addr.s_addr = inet_addr(SERVER_IP);</span><br><span class="line">    sock = <span class="number">0</span>;</span><br><span class="line">    pid = <span class="number">0</span>;</span><br><span class="line">    isClientwork = <span class="literal">true</span>;</span><br><span class="line">    epfd = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 连接服务器</span></span><br><span class="line"><span class="keyword">void</span> <span class="built_in">Client</span>::Connect() &#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"Connect Server: "</span> &lt;&lt; SERVER_IP &lt;&lt; <span class="string">" : "</span> &lt;&lt; SERVER_PORT &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    sock = socket(PF_INET, SOCK_STREAM, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span>(sock &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        perror(<span class="string">"sock error"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 连接服务端</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">connect</span>(sock, (struct sockaddr *)&amp;serverAddr, <span class="keyword">sizeof</span>(serverAddr)) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        perror(<span class="string">"connect error"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(pipe(pipe_fd) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        perror(<span class="string">"pipe error"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    epfd = epoll_create(EPOLL_SIZE);</span><br><span class="line">    <span class="keyword">if</span>(epfd &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        perror(<span class="string">"epfd error"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    addfd(epfd, sock, <span class="literal">true</span>);</span><br><span class="line">    addfd(epfd, pipe_fd[<span class="number">0</span>], <span class="literal">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 断开连接，清理并关闭文件描述符</span></span><br><span class="line"><span class="keyword">void</span> <span class="built_in">Client</span>::Close() &#123;</span><br><span class="line">    <span class="keyword">if</span>(pid)&#123;</span><br><span class="line">        <span class="built_in">close</span>(pipe_fd[<span class="number">0</span>]);</span><br><span class="line">        <span class="built_in">close</span>(sock);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">close</span>(pipe_fd[<span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 启动客户端</span></span><br><span class="line"><span class="keyword">void</span> <span class="built_in">Client</span>::Start() &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">epoll_event</span> <span class="title">events</span>[2];</span></span><br><span class="line">    Connect();</span><br><span class="line"></span><br><span class="line">    pid = fork();</span><br><span class="line">    <span class="keyword">if</span>(pid &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        perror(<span class="string">"fork error"</span>);</span><br><span class="line">        <span class="built_in">close</span>(sock);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span>(pid == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">close</span>(pipe_fd[<span class="number">0</span>]);</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"Please input 'exit' to exit the chat room"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"\\ + ClientID to private chat "</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">while</span>(isClientwork)&#123;</span><br><span class="line">            <span class="built_in">memset</span>(msg.content,<span class="number">0</span>,<span class="keyword">sizeof</span>(msg.content));</span><br><span class="line">            fgets(msg.content, BUF_SIZE, <span class="built_in">stdin</span>);</span><br><span class="line">            <span class="keyword">if</span>(strncasecmp(msg.content, EXIT, <span class="built_in">strlen</span>(EXIT)) == <span class="number">0</span>)</span><br><span class="line">                isClientwork = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="built_in">memset</span>(send_buf,<span class="number">0</span>,BUF_SIZE);</span><br><span class="line">                <span class="built_in">memcpy</span>(send_buf,&amp;msg,<span class="keyword">sizeof</span>(msg));</span><br><span class="line">                <span class="keyword">if</span>( <span class="built_in">write</span>(pipe_fd[<span class="number">1</span>], send_buf, <span class="keyword">sizeof</span>(send_buf)) &lt; <span class="number">0</span> ) &#123;</span><br><span class="line">                    perror(<span class="string">"fork error"</span>);</span><br><span class="line">                    <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">close</span>(pipe_fd[<span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">while</span>(isClientwork) &#123;</span><br><span class="line">            <span class="keyword">int</span> epoll_events_count = epoll_wait( epfd, events, <span class="number">2</span>, <span class="number">-1</span> );</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; epoll_events_count ; ++i) &#123;</span><br><span class="line">                <span class="built_in">memset</span>(recv_buf,<span class="number">0</span>,<span class="keyword">sizeof</span>(recv_buf));</span><br><span class="line">                <span class="keyword">if</span>(events[i].data.fd == sock) &#123;</span><br><span class="line">                    <span class="keyword">int</span> ret = recv(sock, recv_buf, BUF_SIZE, <span class="number">0</span>);</span><br><span class="line">                    <span class="built_in">memset</span>(&amp;msg,<span class="number">0</span>,<span class="keyword">sizeof</span>(msg));</span><br><span class="line">                    <span class="built_in">memcpy</span>(&amp;msg,recv_buf,<span class="keyword">sizeof</span>(msg));</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span>(ret == <span class="number">0</span>) &#123;</span><br><span class="line">                        <span class="built_in">cout</span> &lt;&lt; <span class="string">"Server closed connection: "</span> &lt;&lt; sock &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">                        <span class="built_in">close</span>(sock);</span><br><span class="line">                        isClientwork = <span class="number">0</span>;</span><br><span class="line">                    &#125; <span class="keyword">else</span> </span><br><span class="line">                        <span class="built_in">cout</span> &lt;&lt; msg.content &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">int</span> ret = <span class="built_in">read</span>(events[i].data.fd, recv_buf, BUF_SIZE);</span><br><span class="line">                    <span class="keyword">if</span>(ret == <span class="number">0</span>)</span><br><span class="line">                        isClientwork = <span class="number">0</span>;</span><br><span class="line">                    <span class="keyword">else</span> </span><br><span class="line">                        send(sock, recv_buf, <span class="keyword">sizeof</span>(recv_buf), <span class="number">0</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    Close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ClientMain.cpp</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"Client.h"</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> \*argv[])</span> </span>&#123;</span><br><span class="line">    <span class="built_in">Client</span> client;</span><br><span class="line">    client.Start();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// ServerMain.cpp</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"Server.h"</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> \*argv[])</span> </span>&#123;</span><br><span class="line">    <span class="built_in">Server</span> server;</span><br><span class="line">    server.Start();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h1><p>Java 语言中的网络编程，也分为server和client端。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// GreetingClient.java</span></span><br><span class="line"><span class="keyword">import</span> java.net.*;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GreetingClient</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String [] args)</span> </span>&#123;</span><br><span class="line">      String serverName = args[<span class="number">0</span>];</span><br><span class="line">      <span class="keyword">int</span> port = Integer.parseInt(args[<span class="number">1</span>]);</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">         System.out.println(<span class="string">"Connect to："</span> + serverName + <span class="string">" ，port："</span> + port);</span><br><span class="line">         Socket client = <span class="keyword">new</span> Socket(serverName, port);</span><br><span class="line">         System.out.println(<span class="string">"RemoteAddress："</span> + client.getRemoteSocketAddress());</span><br><span class="line">         OutputStream outToServer = client.getOutputStream();</span><br><span class="line">         DataOutputStream out = <span class="keyword">new</span> DataOutputStream(outToServer);</span><br><span class="line"></span><br><span class="line">         out.writeUTF(<span class="string">"Hello from "</span> + client.getLocalSocketAddress());</span><br><span class="line">         InputStream inFromServer = client.getInputStream();</span><br><span class="line">         DataInputStream in = <span class="keyword">new</span> DataInputStream(inFromServer);</span><br><span class="line">         System.out.println(<span class="string">"Server response： "</span> + in.readUTF());</span><br><span class="line">         client.close();</span><br><span class="line">      &#125; <span class="keyword">catch</span>(IOException e) &#123;</span><br><span class="line">         e.printStackTrace();</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// GreetingServer.java</span></span><br><span class="line"><span class="keyword">import</span> java.net.*;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GreetingServer</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">   <span class="keyword">private</span> ServerSocket serverSocket;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">GreetingServer</span><span class="params">(<span class="keyword">int</span> port)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">      serverSocket = <span class="keyword">new</span> ServerSocket(port);</span><br><span class="line">      serverSocket.setSoTimeout(<span class="number">10000</span>);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">while</span>(<span class="keyword">true</span>) &#123;</span><br><span class="line">         <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"Waiting to connect to port "</span>+serverSocket.getLocalPort());</span><br><span class="line">            Socket server = serverSocket.accept();</span><br><span class="line">            System.out.println(<span class="string">"RemoteAddress："</span> + server.getRemoteSocketAddress());</span><br><span class="line">            DataInputStream in = <span class="keyword">new</span> DataInputStream(server.getInputStream());</span><br><span class="line">            System.out.println(in.readUTF());</span><br><span class="line">            DataOutputStream out = <span class="keyword">new</span> DataOutputStream(server.getOutputStream());</span><br><span class="line">            out.writeUTF(<span class="string">"Your response："</span> + server.getLocalSocketAddress() + <span class="string">"\nGoodbye!"</span>);</span><br><span class="line">            server.close();</span><br><span class="line">         &#125; <span class="keyword">catch</span>(SocketTimeoutException s) &#123;</span><br><span class="line">            System.out.println(<span class="string">"Socket timed out!"</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">         &#125; <span class="keyword">catch</span>(IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String [] args)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">int</span> port = Integer.parseInt(args[<span class="number">0</span>]);</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">         Thread t = <span class="keyword">new</span> GreetingServer(port);</span><br><span class="line">         t.run();</span><br><span class="line">      &#125; <span class="keyword">catch</span>(IOException e) &#123;</span><br><span class="line">         e.printStackTrace();</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h1 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h1><p>Python的网络编程也是用socket，不过比C简单。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># server</span></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line">s = socket.socket()  // socket</span><br><span class="line">host = socket.gethostbyname()</span><br><span class="line">port = <span class="number">9090</span></span><br><span class="line">s.bind(host, port)   // bind</span><br><span class="line"></span><br><span class="line">s.listen(<span class="number">5</span>)</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    c, addr = s.accept()</span><br><span class="line">    print(<span class="string">"url"</span>, addr)</span><br><span class="line"></span><br><span class="line">    c.send(<span class="string">"Welcome"</span>)</span><br><span class="line">    c.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># client</span></span><br><span class="line"><span class="keyword">import</span> socket </span><br><span class="line"> </span><br><span class="line">s = socket.socket()        </span><br><span class="line">host = socket.gethostname()</span><br><span class="line">port = <span class="number">12345</span> </span><br><span class="line">s.connect((host, port))</span><br><span class="line"></span><br><span class="line">print(s.recv(<span class="number">1024</span>))</span><br></pre></td></tr></table></figure>

<h1 id="Go"><a href="#Go" class="headerlink" title="Go"></a>Go</h1><p>Go中的socket编程。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// server</span></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">    <span class="string">"net"</span></span><br><span class="line">    <span class="string">"bufio"</span></span><br><span class="line">    <span class="string">"strings"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">process</span><span class="params">(conn net.Conn)</span></span> &#123;</span><br><span class="line">    <span class="keyword">defer</span> conn.Close()</span><br><span class="line">    <span class="keyword">for</span> &#123;</span><br><span class="line">        reader := bufio.NewReader(conn)</span><br><span class="line">        <span class="keyword">var</span> buf [<span class="number">128</span>]<span class="keyword">byte</span></span><br><span class="line"></span><br><span class="line">        n, err := reader.Read(buf[:])</span><br><span class="line">        <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">            fmt.Println(<span class="string">"Failed to read connect"</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        recvStr := <span class="keyword">string</span>(buf[:n])</span><br><span class="line">        fmt.Println(<span class="string">"Recieved msg: "</span>, recvStr)</span><br><span class="line">        conn.Write([]<span class="keyword">byte</span>(recvStr))</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    listen, err := net.Listen(<span class="string">"tcp"</span>, <span class="string">"127.0.0.1:9090"</span>)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        fmt.Println(<span class="string">"Listen failed"</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> &#123;</span><br><span class="line">        conn, err := listen.Accept()</span><br><span class="line">        <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">            fmt.Println(<span class="string">"Failed to connect"</span>)</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">go</span> process(conn)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// client</span></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"bufio"</span></span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">    <span class="string">"net"</span></span><br><span class="line">    <span class="string">"os"</span></span><br><span class="line">    <span class="string">"strings"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>  &#123;</span><br><span class="line">    conn ,err := net.Dial(<span class="string">"tcp"</span>,<span class="string">"127.0.0.1:8888"</span>)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        fmt.Println(<span class="string">"Failed: "</span>,err)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">defer</span> conn.Close()</span><br><span class="line"></span><br><span class="line">    inputReader := bufio.NewReader(os.Stdout)</span><br><span class="line">    <span class="keyword">for</span> &#123;</span><br><span class="line">        input, _ := inputReader.ReadString(<span class="string">'\n'</span>)</span><br><span class="line">        inputInfo := strings.Trim(input,<span class="string">"\r\n"</span>)</span><br><span class="line">        <span class="keyword">if</span> strings.ToUpper(inputInfo) == <span class="string">"q"</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> </span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        _,err = conn.Write([]<span class="keyword">byte</span>(inputInfo))</span><br><span class="line">        <span class="keyword">if</span> err != <span class="literal">nil</span>&#123;</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        buf := [<span class="number">512</span>]<span class="keyword">byte</span>&#123;&#125;</span><br><span class="line">        n,err := conn.Read(buf[:])</span><br><span class="line">        <span class="keyword">if</span> err != <span class="literal">nil</span>&#123;</span><br><span class="line">            fmt.Println(<span class="string">"Accept failed, error:"</span>,err)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">        fmt.Println(<span class="keyword">string</span>(buf[:n]))</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="Rust"><a href="#Rust" class="headerlink" title="Rust"></a>Rust</h1><p>Rust中网络编程可使用serde序列化数据。</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">use</span> serde::&#123;Deserialize, Serialize&#125;;</span><br><span class="line"><span class="keyword">use</span> serde_json;</span><br><span class="line"><span class="keyword">use</span> std::io::&#123;<span class="keyword">self</span>, prelude::*, BufReader, Write&#125;;</span><br><span class="line"><span class="keyword">use</span> std::net::&#123;TcpListener, TcpStream&#125;;</span><br><span class="line"><span class="keyword">use</span> std::&#123;<span class="built_in">str</span>, thread&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#[derive(Debug, Serialize, Deserialize)]</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Point3D</span></span> &#123;</span><br><span class="line">    x: <span class="built_in">u32</span>,</span><br><span class="line">    y: <span class="built_in">u32</span>,</span><br><span class="line">    z: <span class="built_in">u32</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">handle_client</span></span>(stream: TcpStream) -&gt; io::<span class="built_in">Result</span>&lt;()&gt;&#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"Incoming connection form: &#123;&#125;"</span>, stream.peer_addr()?);</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> data = <span class="built_in">Vec</span>:new();</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> stream = BufReader::new(stream);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">loop</span> &#123;</span><br><span class="line">        data.clear();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> bytes = stream.read_until(<span class="string">b'\n'</span>, &amp;<span class="keyword">mut</span> data);</span><br><span class="line">        <span class="keyword">if</span> bytes === <span class="number">0</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">Ok</span>(());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> input: Point3D = serde_json::from_slice(&amp;data);</span><br><span class="line">        <span class="keyword">let</span> value = input.x.pow(<span class="number">2</span>) + input.y.pow(<span class="number">2</span>) + input.z.pow(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        stream.get_mut().write(&amp;(serde_json::to_vec(&amp;(<span class="built_in">f64</span>:from(value).sqrt()))?))?;</span><br><span class="line">        stream.get_mut().write(&amp;(<span class="string">"\n"</span>.as_bytes()))?;</span><br><span class="line">        stream.get_mut().flush();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() -&gt; io::<span class="built_in">Result</span>&lt;()&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> listen = TcpListener::bind(<span class="string">"127.0.0.1:9090"</span>);</span><br><span class="line">    <span class="keyword">for</span> stream <span class="keyword">in</span> listen.incoming() &#123;</span><br><span class="line">        <span class="keyword">match</span> stream &#123;</span><br><span class="line">            <span class="literal">Err</span>(e) =&gt; eprintln!(<span class="string">"Failed: &#123;&#125;"</span>, e);</span><br><span class="line">            <span class="literal">Ok</span>(stream) =&gt; &#123;</span><br><span class="line">                thread::spawn(<span class="keyword">move</span> || &#123;</span><br><span class="line">                    handle_client(stream)unwrap_or_else(|error| eprintln!(<span class="string">"&#123;:?&#125;"</span>,error));</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="literal">Ok</span>(());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="Dart"><a href="#Dart" class="headerlink" title="Dart"></a>Dart</h1><p>Dart使用io库来处理socket。</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="comment">// server</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">"dart:io"</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">"dart:convert"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">    TCPServer();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> TCPServer() <span class="keyword">async</span> &#123;</span><br><span class="line">    ServerSocket socket = <span class="keyword">await</span> ServerSocket.bind(InternetAddress.loopbackIPv4, <span class="number">9090</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">await</span> <span class="keyword">for</span>(Socket skt <span class="keyword">in</span> socket) &#123;</span><br><span class="line">        skt.cast&lt;<span class="built_in">List</span>&lt;<span class="built_in">int</span>&gt;&gt;().transform(utf8.decoder).listen((data) &#123;</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">"From <span class="subst">$&#123;skt.remoteAddress.address&#125;</span> data:"</span> + data);</span><br><span class="line">            skt.add(utf8.encode(<span class="string">"hello client!"</span>));</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// client</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">"dart:io"</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">"dart:convert"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">    TCPClient();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> TCPClient() <span class="keyword">async</span> &#123;</span><br><span class="line">    Socket socket = <span class="keyword">await</span> Socket.connect(<span class="string">"127.0.0.1"</span>, <span class="number">9090</span>);</span><br><span class="line">    socket.write(<span class="string">"hello server!"</span>);</span><br><span class="line">    socket.cast&lt;<span class="built_in">List</span>&lt;<span class="built_in">int</span>&gt;&gt;().transform(utf8.decoder).listen(<span class="built_in">print</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>编程语言</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>C</tag>
        <tag>C++</tag>
        <tag>Java</tag>
        <tag>Go</tag>
        <tag>Rust</tag>
        <tag>Dart</tag>
      </tags>
  </entry>
  <entry>
    <title>C、C++、Java、Python、Go、Rust、Dart日期和时间</title>
    <url>/title/bbeafb11/</url>
    <content><![CDATA[<p><img src="https://s3.ax1x.com/2020/11/11/BvrY9K.png" alt="cpygorsdart"></p>
<a id="more"></a>

<p>本文为七种语言对比学习的第十八篇：日期和时间。</p>
<p>时间是任何系统都需要的基本物理量，时间是一门语言的重要组成部分。因为人类使用的时间有秒，分，时，天，周，月，季度，年，代，世纪等等记录方法，所以时间函数实现较为复杂。计算机时间多是用整数来表示，以unix时间戳–秒为单位。</p>
<h1 id="C"><a href="#C" class="headerlink" title="C"></a>C</h1><p>C的time.h头文件定义了时间整数，时间存储等数据结构。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;time.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">time_t</span> <span class="built_in">begin</span>, <span class="built_in">end</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">begin</span> = clock();</span><br><span class="line">    do_work();</span><br><span class="line">    <span class="built_in">end</span> = clock();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Timeused=%.21f\n"</span>, (<span class="keyword">double</span>)(<span class="built_in">end</span> - <span class="built_in">begin</span>)/CLOCKS_PER_SEC);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="C-1"><a href="#C-1" class="headerlink" title="C++"></a>C++</h1><p>C++的ctime头文件定义了时间相关结构和函数，它是从C的time.h移植过来的。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">clock_t</span> <span class="built_in">begin</span>, <span class="built_in">end</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">begin</span> = clock();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1e8</span>; ++i)</span><br><span class="line">    <span class="built_in">end</span> = clock();</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"Timeused = "</span> &lt;&lt; <span class="keyword">double</span> (<span class="built_in">end</span> - <span class="built_in">begin</span>)/CLOCKS_PER_SEC &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h1><p>Java的Date类定义了时间相关结构和函数。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DateTime</span> &#123;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">String</span>[] args)</span> </span>&#123;</span><br><span class="line">        Date date = <span class="keyword">new</span> Date()</span><br><span class="line">        System.out.<span class="built_in">println</span>(<span class="string">"y-m-d: %tF"</span>, date);</span><br><span class="line">        System.out.<span class="built_in">println</span>(<span class="string">"y/m/d: %/tD"</span>, date);</span><br><span class="line">        System.out.<span class="built_in">println</span>(date.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h1><p>Python的time模块定义了时间处理函数。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">start = time.time()</span><br><span class="line">do_something()</span><br><span class="line">end = time.time()</span><br><span class="line"></span><br><span class="line">print(<span class="string">"Timeused=%.21f\n"</span>, (end - start))</span><br></pre></td></tr></table></figure>

<h1 id="Go"><a href="#Go" class="headerlink" title="Go"></a>Go</h1><p>Go 有专门的time包来处理时间，它的一个特殊的地方是2006-01-02 15:04:05。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"time"</span></span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    now := <span class="keyword">int32</span>(time.Now().Unix())</span><br><span class="line">    fmt.Println(now)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 下面Format处只能写2006-01-02 15:04:05  </span></span><br><span class="line">    timeStr := time.Now().Format(<span class="string">"2006-01-02 15:04:05"</span>) </span><br><span class="line">    fmt.Println(timeStr)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="Rust"><a href="#Rust" class="headerlink" title="Rust"></a>Rust</h1><p>Rust 时间库使用chrono，非官方。</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">extern</span> <span class="keyword">crate</span> chrono;</span><br><span class="line"><span class="keyword">use</span> chrono::prelude::*;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> sys_time = SystemTime::now()</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"Now time is &#123;:?&#125;"</span>, sys_time);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> local: DateTime&lt;Local&gt; = Local:now();</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"当地时间，以秒计：&#123;:?&#125;"</span>, local.format(<span class="string">"%Y-%m-%d %H:%M:%S"</span>).to_string());</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"当地时间，以毫秒计：&#123;:?&#125;"</span>, local.format(<span class="string">"%Y-%m-%d %H:%M:%S%.3f"</span>).to_string());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="Dart"><a href="#Dart" class="headerlink" title="Dart"></a>Dart</h1><p>Dart 自带DateTime类，直接使用时间。</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">main() &#123;</span><br><span class="line">    <span class="keyword">var</span> now = <span class="keyword">new</span> <span class="built_in">DateTime</span>.now();</span><br><span class="line">    <span class="built_in">print</span>(now);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> d = <span class="keyword">new</span> <span class="built_in">DateTime</span>(<span class="number">2020</span>,<span class="number">11</span>,<span class="number">11</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">print</span>(d);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> ds = <span class="keyword">new</span> <span class="built_in">DateTime</span>.utc(<span class="number">2020</span>,<span class="number">11</span>,<span class="number">11</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">print</span>(ds);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> dp = <span class="built_in">DateTime</span>.parse(<span class="string">"2020-11-11 00:00:00"</span>);</span><br><span class="line">    <span class="built_in">print</span>(dp);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>编程语言</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>C</tag>
        <tag>C++</tag>
        <tag>Java</tag>
        <tag>Go</tag>
        <tag>Rust</tag>
        <tag>Dart</tag>
      </tags>
  </entry>
  <entry>
    <title>C、C++、Java、Python、Go、Rust、Dart正则表达式</title>
    <url>/title/3ab0e898/</url>
    <content><![CDATA[<p><img src="https://s3.ax1x.com/2020/11/11/BvGtlq.png" alt="cpygorsdart"></p>
<a id="more"></a>

<p>本文为六种语言对比学习的第十七篇：正则表达式。</p>
<p>正则表达式(regular expression，RegExp)描述了一种字符串匹配模式，该模式可用来检查字符串是否含有某种子串。正则表达式可将匹配到的子串替换，或者从中取出符合条件的子串，比如可用正则表达式匹配手机号、邮箱等。</p>
<p>正则表达式起源于上世纪的美国。新泽西州的Warren McCulloch和底特律的duWalter Pitts两位神经生理科学家研究出了一种用数学方式来描述神经网络的新方法，他们将神经系统中的神经元描述成了小而简单的自动控制元。</p>
<p>1956年，哈特福德市的数学家Stephen Kleene在两位前辈早期工作的基础之上，发表了论文–《神经网事件表示法》。他利用称之为正则集合的数学符号来描述此模型，引入了正则表达式的概念。正则被他用来描述其称之为“正则集代数”的一种表达式，因而采用了“正则表达式”这个术语。</p>
<p>之后，研究人员发现可将这一工作成果应用于其他方面。Unix的主要发明人Ken Thompson把这一成果应用到搜索算法，并将此符号系统引入到Unix上的编辑器QED，用于字符匹配。接着演化出了编辑器ed，并最终引入到grep工具。</p>
<p>正则表达式分为三部分：</p>
<ul>
<li>锚，锚的作用是限定一个匹配起始和结束环境，比如词头，行首等。</li>
<li>字符集，字符集就是对常见符号的抽象。比如人类常用的符号就是数字，字符，单词，小数点，空格等。所以用\d代表数字，\s代表字符，\w代表单词，.代表小数点，*代表任意字符。</li>
<li>匹配次数，匹配次数是重复匹配某种字符集的次数，比如\d{3,4}表示匹配数字至少三次，至多四次。</li>
</ul>
<p>通过组合这三个部分，正则表达式就能完美的匹配任何需要的子字符串。具体的锚、字符集、次数如何搭配使用是需要学习的，各种编程语言里面也有相应说明，此文不详述。</p>
<p>正则表达式是一种通用的处理机制，不属于某一门语言，所以许多编程语言和工具都实现了正则表达式，并用以实现查询，替换等功能。</p>
<p>正则表达式虽然高效，但是一旦写得不好，往往会陷入深度查找，耗时非常长，近乎死循环。所以写正则表达式时一定要细心，反复检查，测试。</p>
<h1 id="C"><a href="#C" class="headerlink" title="C"></a>C</h1><p>C语言中没有实现正则表达式，当然可以自己设计。</p>
<h1 id="C-1"><a href="#C-1" class="headerlink" title="C++"></a>C++</h1><p>C++ 的regex 库提供了专门处理正则表达式的函数。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;regex&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">regex <span class="title">r</span><span class="params">(<span class="string">"[[:alpha:]]*"</span> + <span class="string">"[^c]ei"</span> + [[:alpha:]]*<span class="string">");</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="string">    smatch m;</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="string"></span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="string">    bool found = regex_search(str, m ,r);</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="string">    if (found) &#123;</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="string">        cout &lt;&lt; "</span>m.<span class="built_in">size</span>() <span class="string">" &lt;&lt; m.size() &lt;&lt; endl;</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="string">        for (int i = 0; i &lt; m.size(); i++) &#123;</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="string">            cout &lt;&lt;"</span>m.str(<span class="string">" &lt;&lt; i &lt;&lt; "</span>): <span class="string">" &lt;&lt; m.str(i) &lt;&lt; endl;</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="string">        &#125;</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="string">    &#125;</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="string">    else </span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="string">        cout &lt;&lt; "</span>Not found<span class="string">" &lt;&lt; endl;</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="string"></span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="string">    return 0;</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="string">&#125;</span></span></span></span><br></pre></td></tr></table></figure>

<h1 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h1><p>Java 的java.util.regex 类库提供了专门处理正则表达式的函数。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.regex.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Regexp</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String line = <span class="string">"This is a colorfull text and as a big fully"</span>;</span><br><span class="line"></span><br><span class="line">        Pattern r = Pattern.compile(<span class="string">"a.*ful"</span>);</span><br><span class="line">        Matcher m = r.matcher(line);</span><br><span class="line">        <span class="keyword">if</span> (m.find()) &#123;</span><br><span class="line">            System.out.println(<span class="string">"Size: %d"</span>, m.length());</span><br><span class="line">            System.out.println(<span class="string">"Value: "</span> + m.group(<span class="number">1</span>));</span><br><span class="line">            System.out.println(<span class="string">"Value: "</span> + m.group(<span class="number">2</span>));</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"Not found"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h1><p>Python的re模块是专门处理正则表达式的模块。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">find_substring</span><span class="params">(s)</span>:</span></span><br><span class="line">    pattern = re.compile(<span class="string">r"n.*e"</span>)</span><br><span class="line">    results = pattern.findall(s)</span><br><span class="line"></span><br><span class="line">    data = []</span><br><span class="line">    <span class="keyword">for</span> res <span class="keyword">in</span> results:</span><br><span class="line">        data.append(res)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> data</span><br></pre></td></tr></table></figure>

<h1 id="Go"><a href="#Go" class="headerlink" title="Go"></a>Go</h1><p>Go的regexp包是专门处理正则表达式的包。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">    <span class="string">"regexp"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    buf := <span class="string">"abc azzc a7c aac 1ac a9c  tac"</span></span><br><span class="line">    reg := regexp.MustCompile(<span class="string">`a.c`</span>)</span><br><span class="line">    <span class="keyword">if</span> reg == <span class="literal">nil</span> &#123;</span><br><span class="line">        fmt.Println(<span class="string">"regexp err"</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    result := reg.FindAllStringSubmatch(buf, <span class="number">-1</span>)</span><br><span class="line">    fmt.Println(<span class="string">"result1 = "</span>, result)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="Rust"><a href="#Rust" class="headerlink" title="Rust"></a>Rust</h1><p>Rust的半官方包regex可提供正则表达式解析器。</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">extern</span> <span class="keyword">crate</span> regex;</span><br><span class="line"><span class="keyword">use</span> regex::Regex;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> num_regex = Regex::new(<span class="string">r"\d+"</span>).unwrap();</span><br><span class="line">    <span class="built_in">assert!</span>(num_regex.is_match(<span class="string">"some string with number 1"</span>)); <span class="comment">// 匹配到数字1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> example_string = <span class="string">"some 123 numbers"</span>; </span><br><span class="line">    <span class="keyword">match</span> num_regex.find(example_string) &#123;  <span class="comment">// 匹配到数字123</span></span><br><span class="line">        <span class="literal">Some</span>(x) =&gt; <span class="built_in">println!</span>(<span class="string">"&#123;&#125;"</span>, &amp;example_string[x.<span class="number">0</span> .. x.<span class="number">1</span>]),</span><br><span class="line">        <span class="literal">None</span>    =&gt; <span class="built_in">unreachable!</span>()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="Dart"><a href="#Dart" class="headerlink" title="Dart"></a>Dart</h1><p>Dart原生自带正则类RegExp，所以使用正则非常方便，连库都不用导入。</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 匹配电话号码</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">RegExp</span> phoneExp = <span class="built_in">RegExp</span>(</span><br><span class="line">    <span class="string">r'&amp;((13[0-9])|(14[0-9])|(15[0-9])|(16[0-9])|(17[0-9])|(18[0-9])|(19[0-9]))\d&#123;8&#125;$'</span></span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line"><span class="built_in">bool</span> matched = phoneExp.hasMatch(<span class="string">"ajkg14381301230"</span>);</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>编程语言</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>C</tag>
        <tag>C++</tag>
        <tag>Java</tag>
        <tag>Go</tag>
        <tag>Rust</tag>
        <tag>Dart</tag>
      </tags>
  </entry>
  <entry>
    <title>C、C++、Java、Python、Go、Rust、Dart异常处理</title>
    <url>/title/d29eef7e/</url>
    <content><![CDATA[<p><img src="https://s1.ax1x.com/2020/11/10/BqY9Og.png" alt="cpygorsdart"></p>
<a id="more"></a>

<p>本文为七种语言对比学习的第十六篇：异常处理。</p>
<p>程序中往往会出现错误和异常。</p>
<ul>
<li>错误指无法预料的错误或逻辑错误，不可恢复。</li>
<li>异常指某种可能出现且能预料到的错误，可恢复。</li>
</ul>
<p>错误会导致程序崩溃和运行出错，而异常则能得到处理并恢复，下文将异常和错误统称为异常。</p>
<h1 id="C错误处理"><a href="#C错误处理" class="headerlink" title="C错误处理"></a>C错误处理</h1><p>C语言不直接提供错误处理，但作为系统编程语言，它以返回值的形式允许访问底层数据。C语言中，正常退出会返回0；在发生错误时，大多数的C函数返回1或-1，同时会设置一个错误代码errno，该错误代码为全局变量，表示在函数调用期间发生了错误。</p>
<p>C语言提供了perror()和strerror()函数来显示与errno相关的消息。perror()函数显示传给它的字符串<br>，strerror()函数返回一个指针，指针指向当前errno值的文本表示。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;errno.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">int</span> errno; <span class="comment">// 错误号</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    FILE *pf;</span><br><span class="line">    <span class="keyword">int</span> errnum;</span><br><span class="line"></span><br><span class="line">    pf = fopen(<span class="string">"unexist.txt"</span>,<span class="string">"rb"</span>);</span><br><span class="line">    <span class="keyword">if</span> (pf == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        errnum = errno;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>,<span class="string">"错误号: %d\n"</span>,errnum);</span><br><span class="line">        perror(<span class="string">"通过perror输出错误信息"</span>);</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>,<span class="string">"打开文件错误:%s\n"</span>,strerror(errnum));</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        fclose(pf);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>; <span class="comment">// 正常退出，返回0给操作系统</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="C-错误处理"><a href="#C-错误处理" class="headerlink" title="C++错误处理"></a>C++错误处理</h1><p>C++语言提供错误处理机制：</p>
<ul>
<li>try catch</li>
<li>throw</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a &#123;<span class="number">10</span>&#125;, b;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"Please enter a number: "</span>;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; b;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (b == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="string">"ZeroDivisionError"</span>;</span><br><span class="line">        a /= b;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"Result: "</span> &lt;&lt; a &lt;&lt; <span class="built_in">endl</span>; </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">catch</span> (<span class="built_in">string</span> &amp; e) &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; e &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="Java错误处理"><a href="#Java错误处理" class="headerlink" title="Java错误处理"></a>Java错误处理</h1><p>Java语言提供错误处理机制：</p>
<ul>
<li>try catch</li>
<li>throw throws</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">divisio</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"Enter a number: "</span>)</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">int</span> b = System.in.read()</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            System.out.println(e);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> res = result(a, b);</span><br><span class="line">        System.out.println(<span class="string">"%d/%d = %d"</span>, a, b, res);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">result</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (b == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">throw</span> ZeroDivisionError();</span><br><span class="line">            &#125;</span><br><span class="line">            a /= b;</span><br><span class="line">        &#125; </span><br><span class="line">        <span class="keyword">catch</span> (string &amp; e) &#123;</span><br><span class="line">            System.out.println(e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="Python异常处理"><a href="#Python异常处理" class="headerlink" title="Python异常处理"></a>Python异常处理</h1><p>Python自带一套错误断言，处理机制。</p>
<ul>
<li>assert 断言</li>
<li>raise 直接产生错误</li>
<li>try expect else finally 错误捕获处理</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">assert</span> <span class="number">1</span> == <span class="number">2</span> <span class="string">'Error: not equal!'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">raise</span> Exception(<span class="string">"Something wrong, error occurred!"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    x = int(input(<span class="string">"Enter number"</span>))</span><br><span class="line">expect ValueError <span class="keyword">as</span> e:</span><br><span class="line">    print(e)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">if</span> x &gt; <span class="number">10000</span>:</span><br><span class="line">        <span class="keyword">raise</span> Exception(<span class="string">"x must less than 10000"</span>)</span><br><span class="line">    print(x+<span class="number">1</span>)</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    print(<span class="string">"Done"</span>)</span><br></pre></td></tr></table></figure>

<h1 id="Go异常处理"><a href="#Go异常处理" class="headerlink" title="Go异常处理"></a>Go异常处理</h1><p>Go语言通过内置的错误error接口提供了非常简单的错误处理机制。error类型是一个接口类型，它的定义如下：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> error <span class="keyword">interface</span> &#123;</span><br><span class="line">    Error() <span class="keyword">string</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在编码中通过实现error接口类型来生成错误信息，通常在最后的返回值中返回错误信息。使用errors.New可返回一个错误信息：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sqrt</span><span class="params">(x <span class="keyword">float64</span>)</span> <span class="params">(<span class="keyword">float64</span>, error)</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> f &lt; <span class="number">0</span> &#123;</span><br><span class="line">        err := errors.New(<span class="string">"square root fo negative number"</span>)</span><br><span class="line">        <span class="keyword">return</span> err</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>大部分函数调用都会返回两个值，一个值，一个错误err，可以利用err值判断。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">value, err := do_works()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">    log.Fatal(err)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="Rust异常处理"><a href="#Rust异常处理" class="headerlink" title="Rust异常处理"></a>Rust异常处理</h1><p>Rust有一套独特的处理异常情况的机制，它不像Python中的try机制那样简单。对于可恢复错误，可使用Result&lt;T,E&gt;来处理，</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Result</span></span>&lt;T,E&gt; &#123;</span><br><span class="line">    <span class="literal">Ok</span>(T),</span><br><span class="line">    <span class="literal">Err</span>(E),</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>不可恢复用panic!，match用于匹配正常或错误情况。</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">use</span> std::io::File;</span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> f = File::open(<span class="string">"main.jpeg"</span>);</span><br><span class="line">    <span class="keyword">match</span> f &#123;</span><br><span class="line">        <span class="literal">Ok</span>(f) =&gt; &#123;</span><br><span class="line">            <span class="built_in">println!</span>(<span class="string">"file found &#123;:?&#125;"</span>, f);</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="literal">Err</span>(msg) =&gt; &#123;</span><br><span class="line">            <span class="built_in">println!</span>(<span class="string">"file not found \n&#123;:?&#125;"</span>, msg);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">panic!</span>(<span class="string">"Error occurred"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="Dart异常处理"><a href="#Dart异常处理" class="headerlink" title="Dart异常处理"></a>Dart异常处理</h1><p>Dart自带异常处理，且异常本身可被传递。Dart提供异常和错误的类型以及预定义的子类，也可以预定义自己的异常子类，Dart允许抛出任意类型的非空对象作为一个异常。</p>
<ul>
<li>assert 断言</li>
<li>throw rethrow  抛出错误/传递错误</li>
<li>try on catch finnaly 捕获并处理错误</li>
</ul>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">    <span class="keyword">assert</span>(urlString.startsWith(<span class="string">"https"</span>), <span class="string">"URL (<span class="subst">$urlString</span>) should start with https."</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">throw</span> <span class="string">"Expected at least 1 section"</span>;</span><br><span class="line">    <span class="keyword">throw</span> FormatException(<span class="string">"Expected at least 1 section"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        do_work1();</span><br><span class="line">    &#125; <span class="keyword">on</span> OutOfLlamasException &#123;</span><br><span class="line">        do_work2();</span><br><span class="line">        <span class="keyword">rethrow</span>; <span class="comment">// 传递错误下去</span></span><br><span class="line">    &#125; <span class="keyword">on</span> Expection <span class="keyword">catch</span>(e) &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"Unknown error: <span class="subst">$e</span>"</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span>(e, s) &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"Unknown error <span class="subst">$e</span>"</span>);</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"errors stack trace <span class="subst">$s</span>"</span>); <span class="comment">// s是错误栈追踪信息</span></span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        clear();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>编程语言</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>C</tag>
        <tag>C++</tag>
        <tag>Java</tag>
        <tag>Go</tag>
        <tag>Rust</tag>
        <tag>Dart</tag>
      </tags>
  </entry>
  <entry>
    <title>C、C++、Java、Python、Go、Rust、Dart的IO和文件读写</title>
    <url>/title/5209e731/</url>
    <content><![CDATA[<p><img src="https://s1.ax1x.com/2020/11/09/BHLnCd.png" alt="cpygorsdart"></p>
<a id="more"></a>

<p>本文为七种语言对比学习的第十五篇：IO和文件读写。</p>
<p>Linux存在基本的IO，stdin、stdout、stderr。输入可以从stdin、文件、网络而来。输出则对应stdout、stderr、文件、网络。</p>
<h1 id="C语言的标准IO和文件读写"><a href="#C语言的标准IO和文件读写" class="headerlink" title="C语言的标准IO和文件读写"></a>C语言的标准IO和文件读写</h1><p>C中的IO和File操作函数</p>
<ul>
<li>IO (scanf, getchar/putchar, gets/puts)</li>
<li>File (fopen, fclose, fputc, fputs, fgetc, fgets, fopen, seek, read, write, close)</li>
<li>File operation mode: r w a r+ w+ a+ together with b</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> integer;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Enter a number:"</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;integer);  <span class="comment">// 1</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, integer);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">char</span> c;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Enter a char:"</span>);</span><br><span class="line">    c = getchar();  <span class="comment">// 2</span></span><br><span class="line">    <span class="built_in">putchar</span>(c);     <span class="comment">// 3</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">char</span> str[<span class="number">100</span>];</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Enter a string:"</span>);</span><br><span class="line">    gets(str); <span class="comment">// 4</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\nYou entered::"</span>);</span><br><span class="line">    <span class="built_in">puts</span>(str); <span class="comment">// 5</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 文件描述符fp</span></span><br><span class="line">    fp = fopen(<span class="string">"/tmp/test.txt"</span>, <span class="string">"w+"</span>); <span class="comment">// 6</span></span><br><span class="line">    <span class="built_in">fprintf</span>(fp, <span class="string">"This is testing for fprintf...\n"</span>);</span><br><span class="line">    <span class="built_in">fputs</span>(<span class="string">"This is testing for fputs...\n"</span>, fp); <span class="comment">// 7</span></span><br><span class="line">    fclose(fp); <span class="comment">// 8</span></span><br><span class="line"></span><br><span class="line">    FILE *fp = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">char</span> <span class="built_in">buffer</span>[<span class="number">1024</span>];</span><br><span class="line">    fp = fopen(<span class="string">"/tmp/test.txt"</span>, <span class="string">"r"</span>);</span><br><span class="line">    <span class="built_in">fscanf</span>(fp, <span class="string">"%s"</span>, <span class="built_in">buffer</span>); <span class="comment">// 9</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"1:%s\n"</span>, <span class="built_in">buffer</span>);</span><br><span class="line">    fgets(buff, <span class="number">1024</span>, (FILE*)fp); <span class="comment">// 10</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"2:%s\n"</span>, <span class="built_in">buffer</span>);</span><br><span class="line">    fclose(fp); </span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="C-语言的标准IO和文件读写"><a href="#C-语言的标准IO和文件读写" class="headerlink" title="C++语言的标准IO和文件读写"></a>C++语言的标准IO和文件读写</h1><p>C++中的IO和File操作函数</p>
<ul>
<li>IO (cout cin get getline)</li>
<li>File (fstream open read write close swap is_open)</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> integer;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"Enter a number:"</span>;   <span class="comment">// 1</span></span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; integer;              <span class="comment">// 2</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"Your input is "</span> &lt;&lt; integer &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">char</span> c;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"Enter a char: "</span>;    </span><br><span class="line">    getline(<span class="built_in">cin</span>, c);             <span class="comment">// 3</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"Your input char is "</span> &lt;&lt; c &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    </span><br><span class="line">    fstream outFile;             <span class="comment">// 4</span></span><br><span class="line">    outFile.<span class="built_in">open</span>(<span class="string">"test.txt"</span>);    <span class="comment">// 5</span></span><br><span class="line">    outFile &lt;&lt; <span class="string">"Some text."</span>;     <span class="comment">// 6</span></span><br><span class="line">    outFile &lt;&lt; <span class="string">"More text."</span>;</span><br><span class="line">    outFile.<span class="built_in">close</span>();             <span class="comment">// 7</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="Java语言的标准IO和文件读写"><a href="#Java语言的标准IO和文件读写" class="headerlink" title="Java语言的标准IO和文件读写"></a>Java语言的标准IO和文件读写</h1><p>Java中的IO和File操作函数</p>
<ul>
<li>IO (io.InputStream lang.System.out)</li>
<li>File (io.FileInputStream io.InputStream)</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="comment">// import java.lang.System; lang模块默认已导入</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileOper</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">512</span>];</span><br><span class="line">        <span class="keyword">int</span> numberRead = <span class="number">0</span>;</span><br><span class="line">        FileInputStream input = <span class="keyword">null</span>;</span><br><span class="line">        FileOutputStream output = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            input = <span class="keyword">new</span> FileInputStream(<span class="string">"text.txt"</span>);</span><br><span class="line">            output = <span class="keyword">new</span> FileOutputStream(<span class="string">"text1.txt"</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> ((numberRead = input.read(buffer)) != -<span class="number">1</span>) &#123;</span><br><span class="line">                output.write(buffer, <span class="number">0</span>, numberRead);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (<span class="keyword">final</span> IOEXception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                input.close();</span><br><span class="line">                output.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOEXception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"All done"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="Python语言的标准IO和文件读写"><a href="#Python语言的标准IO和文件读写" class="headerlink" title="Python语言的标准IO和文件读写"></a>Python语言的标准IO和文件读写</h1><p>Python中的IO和File操作函数</p>
<ul>
<li>IO (input, sys.readline, print)</li>
<li>File (open, fileno, read, readline, readlines, seek, write) open原型<br>  open(file,mode=’r’,buffering=-1,encoding=None,errors=None, newline=None,closefd=True,opener=None)</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">// IO</span><br><span class="line">ipt = int(input(<span class="string">"Please enter a number:"</span>))</span><br><span class="line">print(<span class="string">"You input %d"</span>%ipt)</span><br><span class="line"></span><br><span class="line">// File</span><br><span class="line"><span class="keyword">with</span> open(<span class="string">"/tmp/test.txt"</span>, <span class="string">"r"</span>) <span class="keyword">as</span> fobj:</span><br><span class="line">    data = fobj.read()</span><br><span class="line">    print(data)</span><br></pre></td></tr></table></figure>

<h1 id="Go语言的标准IO和文件读写"><a href="#Go语言的标准IO和文件读写" class="headerlink" title="Go语言的标准IO和文件读写"></a>Go语言的标准IO和文件读写</h1><p>Go中的IO和File操作函数</p>
<ul>
<li>IO (io.Read, io.Write)</li>
<li>File (os.Open, ioutil, buffer)</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">    <span class="string">"os"</span></span><br><span class="line">    <span class="string">"io/ioutil"</span></span><br><span class="line">    <span class="string">"bufio"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// IO</span></span><br><span class="line">    p := <span class="built_in">make</span>([]<span class="keyword">byte</span>, <span class="number">1024</span>)</span><br><span class="line">    n, _ := os.Stdin.Read(p[:]) <span class="comment">// 1</span></span><br><span class="line">    fmt.Fprintln(os.Stdout, <span class="keyword">string</span>(p[:]))</span><br><span class="line"></span><br><span class="line">    rd := bufio.NewReader(os.Stdin) <span class="comment">// 2</span></span><br><span class="line">    res, err := rd.ReadString(<span class="string">'\n'</span>)</span><br><span class="line">    fmt.Println(res)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// File</span></span><br><span class="line">    buf := <span class="built_in">make</span>([]<span class="keyword">byte</span>, <span class="number">1024</span>)</span><br><span class="line">    file, _ := os.Open(<span class="string">"/tmp/test.txt"</span>)</span><br><span class="line">    <span class="keyword">defer</span> file.Close() <span class="comment">// 3</span></span><br><span class="line">    file.Read(buf) <span class="comment">// 4</span></span><br><span class="line">    fmt.Fprintln(os.Stdout, buf)</span><br><span class="line"></span><br><span class="line">    f, _ := ioutil.ReadFile(<span class="string">"file.txt"</span>) <span class="comment">// 5</span></span><br><span class="line">    fmt.Println(<span class="keyword">string</span>(f))</span><br><span class="line"></span><br><span class="line">    fi, _ := os.Open(<span class="string">"file.txt"</span>)</span><br><span class="line">    bf := bufio.NewReader(fi) <span class="comment">// 6</span></span><br><span class="line">    bf.Read(buf) <span class="comment">// 7</span></span><br><span class="line"></span><br><span class="line">    f, _ := os.OpenFile(<span class="string">"file.txt"</span>, os.O_APPEND, <span class="number">0666</span>) <span class="comment">// 8</span></span><br><span class="line">    n, _ := io.WriteString(f, <span class="string">"FUCK"</span>) <span class="comment">// 9</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="Rust语言的标准IO和文件读写"><a href="#Rust语言的标准IO和文件读写" class="headerlink" title="Rust语言的标准IO和文件读写"></a>Rust语言的标准IO和文件读写</h1><p>Rust中的IO和File操作函数</p>
<ul>
<li>IO (args, read_line, io.Write)</li>
<li>FILE (open, read_to_string)</li>
</ul>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">use</span> std::&#123;env, fs&#125;;</span><br><span class="line"><span class="keyword">use</span> std::io::stdin;</span><br><span class="line"><span class="keyword">use</span> std::io::prelude::*;</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">    <span class="comment">// IO</span></span><br><span class="line">    <span class="keyword">let</span> args = env::args(); <span class="comment">// 1</span></span><br><span class="line">    <span class="keyword">for</span> arg <span class="keyword">in</span> args &#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">"&#123;&#125;"</span>, arg);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> str_buf = <span class="built_in">String</span>::new();</span><br><span class="line">    stdin().read_line(&amp;<span class="keyword">mut</span> str_buf); <span class="comment">// 2</span></span><br><span class="line">        .expect(<span class="string">"Failed to read line"</span>);</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"Your input line is\n&#123;&#125;"</span>, str_buf);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// FILE</span></span><br><span class="line">    <span class="keyword">let</span> text = fs::read_to_string(<span class="string">"file.txt"</span>).unwrap(); <span class="comment">// 3</span></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;&#125;"</span>, text);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> buffer = [<span class="number">0u8</span>;<span class="number">5</span>];</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> file = fs::File::open(<span class="string">"file.txt"</span>).unwrap(); <span class="comment">// 4</span></span><br><span class="line">    file.read(&amp;<span class="keyword">mut</span> buffer).unwrap(); <span class="comment">// 5</span></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;:?&#125;"</span>,buffer);</span><br><span class="line"></span><br><span class="line">    fs::write(<span class="string">"test.txt"</span>, buffer).unwrap(); <span class="comment">// 6</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="Dart语言的标准IO和文件读写"><a href="#Dart语言的标准IO和文件读写" class="headerlink" title="Dart语言的标准IO和文件读写"></a>Dart语言的标准IO和文件读写</h1><p>Dart中的IO和File操作函数</p>
<ul>
<li>IO (readLineSync)</li>
<li>FILE (create, readAsString, writeString)</li>
</ul>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">"dart:io"</span>;</span><br><span class="line"></span><br><span class="line">main() &#123;</span><br><span class="line">    <span class="comment">// IO</span></span><br><span class="line">    <span class="keyword">var</span> line = stdin.readLineSync(encoding:Encoding.getByName(<span class="string">"utf-8"</span>)); <span class="comment">// 1</span></span><br><span class="line">    <span class="built_in">print</span>(line.trim() == <span class="string">"2"</span> ? <span class="string">"Yup"</span>:<span class="string">"Nope"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// File</span></span><br><span class="line">    <span class="keyword">var</span> sysTempDir = Directory.systemTemp;</span><br><span class="line">    <span class="keyword">new</span> File(<span class="string">"$(sysTempDir.path)/dir/subdir/file.txt"</span>)</span><br><span class="line">        .create(recursive:<span class="keyword">true</span>) <span class="comment">// 2</span></span><br><span class="line">        .then((file) &#123;</span><br><span class="line">            <span class="built_in">print</span>(file.path);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">new</span> File(filename).writeString(<span class="string">"Fuck"</span>); <span class="comment">// 3</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">new</span> File(<span class="string">"$(sysTempDir.path)/subdir/file.txt"</span>)</span><br><span class="line">        .readAsString() <span class="comment">// 4</span></span><br><span class="line">        .then((<span class="built_in">String</span> contents) &#123;</span><br><span class="line">            <span class="built_in">print</span>(contents);</span><br><span class="line">        &#125;);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> file = <span class="keyword">new</span> File(<span class="string">"file.txt"</span>);</span><br><span class="line">    <span class="keyword">var</span> sink = file.openWrite(); <span class="comment">// 5</span></span><br><span class="line">    sink.write(<span class="string">"File accessed $(new DateTime.now()&#125;\n"</span>); <span class="comment">// 6</span></span><br><span class="line">    sink.close(); <span class="comment">// 7</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>编程语言</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>C</tag>
        <tag>C++</tag>
        <tag>Java</tag>
        <tag>Go</tag>
        <tag>Rust</tag>
        <tag>Dart</tag>
      </tags>
  </entry>
  <entry>
    <title>C、C++、Python、Go、Rust、Dart标准库依赖关系</title>
    <url>/title/3c8372aa/</url>
    <content><![CDATA[<p><img src="https://s1.ax1x.com/2020/11/11/BjM3U1.png" alt="cpygorsdart"></p>
<a id="more"></a>

<p>本文为七种语言对比学习的第十四篇：标准库依赖关系。</p>
<p>编程语言的标准库往往存在依赖关系，但一定有些库是自满足而不引入其他库的，本文试图探究各库的依赖关系，看看到底一门语言的核心库是如何构建起来的。</p>
<h1 id="C"><a href="#C" class="headerlink" title="C"></a>C</h1><p>C的头文件依赖关系图。（箭头表示引用该库文件）</p>
<p><img src="https://s3.ax1x.com/2020/12/10/ri9CK1.png" alt="c"></p>
<p>可见，最底层为features, bits, stddef, sys库文件。</p>
<h1 id="C-1"><a href="#C-1" class="headerlink" title="C++"></a>C++</h1><p>C++的头文件依赖关系图。</p>
<p><img src="https://s3.ax1x.com/2020/12/09/rCoql4.png" alt="c++"></p>
<p>可见，最底层为bits，features 等库文件。</p>
<h1 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h1><p>Java类库文件依赖关系图。</p>
<p><img src="https://s3.ax1x.com/2020/12/12/rZGESf.png" alt="java"></p>
<p>可见，最底层为base，这也是它较base的原因。</p>
<h1 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h1><p>Python的模块依赖关系图</p>
<p><img src="https://s3.ax1x.com/2020/12/10/rFCeUK.png" alt="py"></p>
<h1 id="Go"><a href="#Go" class="headerlink" title="Go"></a>Go</h1><p>Go的包依赖关系图。</p>
<p><img src="https://s3.ax1x.com/2020/12/10/rFrlqS.png" alt="Go1"></p>
<!-- ![Go1](https://s1.ax1x.com/2020/11/11/Bj9pX8.png) -->

<!-- ![Go2](https://s1.ax1x.com/2020/11/11/Bj9J91.png) -->

<!-- ![Go3](https://s1.ax1x.com/2020/11/11/Bj9tc6.png) -->

<h1 id="Rust"><a href="#Rust" class="headerlink" title="Rust"></a>Rust</h1><p>Rust的包依赖关系图关系复杂，但经过分析，可以分层：alloc -&gt; core -&gt; std。</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line">         +---------------------------------------------------------------------------+</span><br><span class="line">std   -&gt; | any array ascii future env error ffi fs io net option os path thread time | 标准库</span><br><span class="line">         +---------------------------------------------------------------------------+</span><br><span class="line">         +----------------------------------------------------------------------+</span><br><span class="line">core  -&gt; | arch borrow cell <span class="built_in">char</span> clone cmp convert <span class="built_in">f64</span> hash <span class="built_in">i64</span> panic slice <span class="built_in">u64</span> | 核心库</span><br><span class="line">         +----------------------------------------------------------------------+</span><br><span class="line">         +--------------------------------------------------------+</span><br><span class="line">alloc -&gt; | alloc boxed rc collections <span class="built_in">str</span> string sync vec prelude |  内存分配库</span><br><span class="line">         +--------------------------------------------------------+</span><br></pre></td></tr></table></figure>

<h1 id="Dart"><a href="#Dart" class="headerlink" title="Dart"></a>Dart</h1><p>Dart的库依赖关系图</p>
<p><img src="https://s1.ax1x.com/2020/11/11/Bjnbxe.png" alt="d"></p>
]]></content>
      <categories>
        <category>编程语言</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>C</tag>
        <tag>C++</tag>
        <tag>Go</tag>
        <tag>Rust</tag>
        <tag>Dart</tag>
      </tags>
  </entry>
  <entry>
    <title>C、C++、Java、Python、Go、Rust、Dart头文件、库、包、模块</title>
    <url>/title/67b18606/</url>
    <content><![CDATA[<p><img src="https://s1.ax1x.com/2020/11/11/BX64Bj.png" alt="cpygorsdart"></p>
<a id="more"></a>

<p>本文为七种语言对比学习的第十三篇：包、库、模块。</p>
<p>不同语言往往需要引入一些外部代码，这些代码根据语言和组织规则可能被称为头文件、包、库、模块。<br>尽管名字不同，但这些文件都是为了实现代码复用，提高效率，它们都定义一些量，实现一些函数，最后组合在一起。</p>
<h1 id="C库"><a href="#C库" class="headerlink" title="C库"></a>C库</h1><p>C语言中，存在头文件和库的说法。头文件是一些函数，常量的定义文件，具体实现在各自.c文件中。一部分重要的.h头文件及其.c实现文件组合成了所谓的标准库。其他.c文件使用时直接包含include头文件就可以使用其内部定义的函数。</p>
<p>C标准库包含如下文件：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">C 标准库  &lt;assert.h&gt; <span class="comment">// 定义变量以验证程序</span></span><br><span class="line">C 标准库  &lt;ctype.h&gt;  <span class="comment">// 定义测试和映射字符的函数</span></span><br><span class="line">C 标准库  &lt;errno.h&gt;  <span class="comment">// 定义错误处理变量和函数</span></span><br><span class="line">C 标准库  &lt;<span class="keyword">float</span>.h&gt;  <span class="comment">// 定义浮点数相关量</span></span><br><span class="line">C 标准库  &lt;limits.h&gt; <span class="comment">// 定义各变量类型属性</span></span><br><span class="line">C 标准库  &lt;locale.h&gt; <span class="comment">// 定义特定地域的设置，如日期格式和货币符号</span></span><br><span class="line">C 标准库  &lt;math.h&gt;   <span class="comment">// 定义各种数学函数</span></span><br><span class="line">C 标准库  &lt;setjmp.h&gt; <span class="comment">// 定义特殊跳转函数</span></span><br><span class="line">C 标准库  &lt;signal.h&gt; <span class="comment">// 定义进程间信号</span></span><br><span class="line">C 标准库  &lt;stdarg.h&gt; <span class="comment">// 定义参数相关宏</span></span><br><span class="line">C 标准库  &lt;stddef.h&gt; <span class="comment">// 定义标准变量和宏</span></span><br><span class="line">C 标准库  &lt;stdio.h&gt;  <span class="comment">// 定义标准输入输出函数 </span></span><br><span class="line">C 标准库  &lt;stdlib.h&gt; <span class="comment">// 定义库变量和工具函数 </span></span><br><span class="line">C 标准库  &lt;<span class="built_in">string</span>.h&gt; <span class="comment">// 定义字符串函数</span></span><br><span class="line">C 标准库  &lt;time.h&gt;   <span class="comment">// 定义时间处理函数</span></span><br></pre></td></tr></table></figure>

<h1 id="C-库"><a href="#C-库" class="headerlink" title="C++库"></a>C++库</h1><p>C++语言中，头文件没有.h后缀了，当然其实现还是和.h文件一样的。C++自己实现了并移植了部分C的库过来。以c开头的库多是从C移植而来，比如C中的time.h在C++中叫做ctime。C++使用库和C一样，也是用include，包含头文件就可以使用了。C++20引进了模块(module)的概念，可以像Python那样用import导入。</p>
<p>C++标准库包含如下文件：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">C++ 标准库  &lt;iostream&gt; <span class="comment">// 定义标准输入输出</span></span><br><span class="line">C++ 标准库  &lt;fstream&gt;  <span class="comment">// 定义文件处理函数</span></span><br><span class="line">C++ 标准库  &lt;<span class="built_in">string</span>&gt;   <span class="comment">// 定义字符串函数</span></span><br><span class="line">C++ 标准库  &lt;cmath&gt;    <span class="comment">// 定义各种数学函数</span></span><br><span class="line">C++ 标准库  &lt;<span class="keyword">complex</span>&gt;  <span class="comment">// 定义复数相关函数</span></span><br><span class="line">C++ 标准库  &lt;ctime&gt;    <span class="comment">// 定义时间处理函数</span></span><br><span class="line">C++ 标准库  &lt;cctype&gt;   <span class="comment">// 定义测试和映射字符的函数</span></span><br><span class="line">C++ 标准库  &lt;cerrno&gt;   <span class="comment">// 定义错误处理变量和函数</span></span><br><span class="line">C++ 标准库  &lt;regex&gt;    <span class="comment">// 定义正则表达式相关函数</span></span><br><span class="line">C++ 标准库  &lt;<span class="built_in">random</span>&gt;   <span class="comment">// 定义随机函数相关函数</span></span><br><span class="line">C++ 标准库  &lt;memory&gt;   <span class="comment">// 定义内存处理相关函数</span></span><br><span class="line">C++ 标准库  &lt;<span class="built_in">array</span>&gt;    <span class="comment">// 定义静态数组相关函数 </span></span><br><span class="line">C++ 标准库  &lt;<span class="built_in">vector</span>&gt;   <span class="comment">// 定义动态数组相关函数</span></span><br><span class="line">C++ 标准库  &lt;<span class="built_in">queue</span>&gt;    <span class="comment">// 定义队列相关函数 </span></span><br><span class="line">C++ 标准库  &lt;<span class="built_in">deque</span>&gt;    <span class="comment">// 定义双端队列相关函</span></span><br><span class="line">C++ 标准库  &lt;<span class="built_in">map</span>&gt;      <span class="comment">// 定义map相关函数</span></span><br><span class="line">C++ 标准库  &lt;<span class="built_in">list</span>&gt;     <span class="comment">// 定义list相关函数</span></span><br><span class="line">C++ 标准库  &lt;<span class="built_in">set</span>&gt;      <span class="comment">// 定义集合相关函数</span></span><br><span class="line">C++ 标准库  &lt;tuple&gt;    <span class="comment">// 定义元组相关函数</span></span><br><span class="line">C++ 标准库  &lt;<span class="built_in">stack</span>&gt;    <span class="comment">// 定义栈相关函数</span></span><br></pre></td></tr></table></figure>

<p>#Java类库</p>
<p>Java中使用库组织数据和函数，类等，因为一切皆类，所以又称为类库。要使用别人的库，直接import导入。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">java.lang.*     <span class="comment">// 封装基本对象类，布尔数、字符和数字类型包容器，基本数学函数类，字符串类，标准输入输出等系统类</span></span><br><span class="line">java.io.*       <span class="comment">// 提供对不同的输入和输出设备读写数据的支持</span></span><br><span class="line">java.util.*     <span class="comment">// 提供了执行各种辅助功能的类，包括随机处理，日期类，向量和栈处理等</span></span><br><span class="line">java.net.*      <span class="comment">// 提供对网络协议的接口功能，包括Sockets、Telnet、FTP、WWW等</span></span><br><span class="line">java.time.*     <span class="comment">// 提供用于网络应用程序的类、网络应用扩展类</span></span><br><span class="line">java.text.*     <span class="comment">// 提供类和接口用于处理文本、日期、数字以及语法独立于自然语言之外格式的消息</span></span><br><span class="line">java.math.*     <span class="comment">// 提供了简明的整数算术以及十进制算数的基本函数</span></span><br><span class="line">java.applet.*   <span class="comment">// 提供用于网络应用程序的类、网络应用扩展类</span></span><br><span class="line">java.awt.*      <span class="comment">// 提供生成图像用户界面的类，包括的类方法有：窗口、按钮、菜单、字体等</span></span><br><span class="line">java.beans.*    <span class="comment">// 提供与开发beans有关的类</span></span><br><span class="line">java.nio.*      <span class="comment">// 提供用于网络应用程序的类、网络应用扩展类</span></span><br><span class="line">java.rmi.*      <span class="comment">// 提供了与远程方法调用相关的所有类</span></span><br><span class="line">java.sql.*      <span class="comment">// 提供访问和处理来自于Java标准数据源数据的类</span></span><br><span class="line">java.swing.*    <span class="comment">// 提供一组与AWT功能相同的纯java的组件类</span></span><br><span class="line">java.security.* <span class="comment">// 提供设计网络安全方案需要的类</span></span><br><span class="line">javax.crypto.*  <span class="comment">// 提供加密</span></span><br></pre></td></tr></table></figure>

<h1 id="Python模块"><a href="#Python模块" class="headerlink" title="Python模块"></a>Python模块</h1><p>Python中不需要头文件，它直接在一个文件中定义定义函数和变量，这些文件再组合成为模块。模块可以被别的程序引入(import)，以使用该模块中的函数等功能。</p>
<p>部分Python标准模块如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#文件处理            #数据压缩打包           #结构化文档</span></span><br><span class="line">string              zlib                  html</span><br><span class="line">re                  gzip                  xml</span><br><span class="line">difflib             bz2                   </span><br><span class="line">textwrap            lzma                  <span class="comment">#网络协议</span></span><br><span class="line">unicodedata         zipfile               webbrowser</span><br><span class="line">stringprep          tarfile               cgi</span><br><span class="line">readline                                  cgitb</span><br><span class="line">rlcompleter         <span class="comment">#文档格式              wsgiref</span></span><br><span class="line">                    csv                   urllib</span><br><span class="line"><span class="comment">#二进制数据服务       configparse           http</span></span><br><span class="line">struct              netrc                 ftplib</span><br><span class="line">codecs              xdrlib                poplib</span><br><span class="line">                    plistlib              imaplib</span><br><span class="line"><span class="comment">#数据类型                                  nntplib</span></span><br><span class="line">datetime            <span class="comment">#加密                  smtplib</span></span><br><span class="line">zoneinfo            hashlib               smtpd</span><br><span class="line">calendar            hamc                  telnetlib</span><br><span class="line">collections         secrets               uuid</span><br><span class="line">heapq                                     socketserver</span><br><span class="line">bisect              <span class="comment">#操作系统              xmlrpc</span></span><br><span class="line">array               os                    ipaddress</span><br><span class="line">weakref             io                    </span><br><span class="line">types               time                  <span class="comment">#多媒体</span></span><br><span class="line">copy                argparse              audioop</span><br><span class="line">pprint              getopt                aifc</span><br><span class="line">reprlib             logging               sunau</span><br><span class="line">enum                getpass               wave</span><br><span class="line">graphlib            curses                chunk</span><br><span class="line">                    platform              colorsys</span><br><span class="line"><span class="comment">#数值和数学           errno                 imghdr</span></span><br><span class="line">numbers             ctypes                sndhrd</span><br><span class="line">math                                      ossaudiodev</span><br><span class="line">cmath               <span class="comment">#并发                 </span></span><br><span class="line">decimal             threading             <span class="comment">#国际化</span></span><br><span class="line">fractions           multiprocessing       gettext</span><br><span class="line">random              concurrent            local</span><br><span class="line">statistics          subprocess            </span><br><span class="line">                    sched                 <span class="comment">#编程框架</span></span><br><span class="line"><span class="comment">#函数编程            queue                 turtle</span></span><br><span class="line">itertools                                 cmd</span><br><span class="line">functools           <span class="comment">#网络及进程间通信        shlex</span></span><br><span class="line">operator            asyncio               </span><br><span class="line">                    socket                <span class="comment">#图形化</span></span><br><span class="line"><span class="comment">#文件和目录           ssl                   tkinter</span></span><br><span class="line">pathlib             select                IDLE</span><br><span class="line">os.path             selectors             </span><br><span class="line">fileinput           asyncore              <span class="comment">#开发工具</span></span><br><span class="line">stat                asynchat              typing</span><br><span class="line">filecmp             signal                pydoc</span><br><span class="line">tempfile            mmap                  doctest</span><br><span class="line">glob                                      unittest</span><br><span class="line">fnmatch             <span class="comment">#网络数据              2to3</span></span><br><span class="line">linecache           email                 test            </span><br><span class="line">shutil              json</span><br><span class="line">                    mailcap</span><br><span class="line"><span class="comment">#数据持久化           mailbox</span></span><br><span class="line">pickle              mimetypes</span><br><span class="line">copyreg             base64</span><br><span class="line">shelve              binhex</span><br><span class="line">marshal             binascii</span><br><span class="line">dbm                 quopri</span><br><span class="line">sqlite3             uu</span><br></pre></td></tr></table></figure>


<h1 id="Go包"><a href="#Go包" class="headerlink" title="Go包"></a>Go包</h1><p>Go语言将代码集合称为包，使用包需要用import导入，下面是标准包：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">archive             压缩打包</span><br><span class="line">bufio               带缓存的I/O操作</span><br><span class="line">builtin             Go预声明标识符文档</span><br><span class="line">bytes               操作[]<span class="keyword">byte</span>常用函数</span><br><span class="line">compress            数据压缩</span><br><span class="line">container           实现了对，循环队列，链表</span><br><span class="line">context             上下文</span><br><span class="line">crypto              常用密码算法常量</span><br><span class="line">database            数据库接口</span><br><span class="line">debug               代码调试</span><br><span class="line">encoding            字节和文本间转换接口</span><br><span class="line">errors              错误处理函数</span><br><span class="line">expvar              公共变量标准接口</span><br><span class="line">flag                令行标签解析</span><br><span class="line">fmt                 格式化I/O函数</span><br><span class="line"><span class="keyword">go</span>                  工具函数</span><br><span class="line">hash                哈希函数接口</span><br><span class="line">html                转义和解转义HTML文本</span><br><span class="line">image               基本的<span class="number">2</span>D图片库</span><br><span class="line">index               索引</span><br><span class="line">io                  为I/O原语提供基础接口</span><br><span class="line">log                 实现简单日志服务</span><br><span class="line">math                提供基本常数和数学函数</span><br><span class="line">mime                实现MIME部分规定</span><br><span class="line">net                 提供可移植的网络I/O接口</span><br><span class="line">os                  提供不依赖平台接口的操作系统函数</span><br><span class="line">path                对斜杠分隔的路径操作</span><br><span class="line">plugin              加载插件</span><br><span class="line">reflect             实现运行时反射，允许操作任意类型对象</span><br><span class="line">regexp              实现正则表达式搜索</span><br><span class="line">runtime             包含与Go运行时系统进行交互的操作</span><br><span class="line">sort                为切片及用户定义集合排序操作提供原语</span><br><span class="line">strconv             实现基本数据类型和其字符串表示的相互转换</span><br><span class="line">strings             实现了用于操作字符的简单函数</span><br><span class="line">sync                提供互斥锁这类基本的同步原语</span><br><span class="line">syscall             系统调用</span><br><span class="line">testing             测试框架</span><br><span class="line">text                实现文本处理</span><br><span class="line">time                提供时间显示和测量函数</span><br><span class="line">unicode             提供测试Unicode码点属性的数据和函数</span><br><span class="line">unsafe              包含关于Go程序类型安全的所有操作</span><br></pre></td></tr></table></figure>

<h1 id="Rust包-crate、库-模块"><a href="#Rust包-crate、库-模块" class="headerlink" title="Rust包/crate、库/模块"></a>Rust包/crate、库/模块</h1><p>Rust里面存在包，库，模块，crate等说法，且都有对应实体。应该说Rust里面，用cargo new<br>生成的就是包，一个包里有多个目录，一个目录看成一个crate，当这个crate编译后，可能是一个二进制可执行文件，也可能是一个供其他函数调用的库。一个crate里面，往往有很多.rs文将，这些文件称为模块(mod)，使用这些文件或模块需要用use。</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line">package --&gt; crates  (dirs)     一个包存在多个<span class="keyword">crate</span>(dir)</span><br><span class="line"><span class="keyword">crate</span>   --&gt; modules (lib/EFL)  一个<span class="keyword">crate</span>包含多个模块(<span class="keyword">mod</span>)，其<span class="keyword">crate</span>可编译成库或可执行文件</span><br><span class="line">module  --&gt; file.rs (file)     一个模块就是一个.rs文件</span><br><span class="line"></span><br><span class="line">package            &lt;-- 包</span><br><span class="line">├── Cargo.toml</span><br><span class="line">├── src            &lt;-- <span class="keyword">crate</span></span><br><span class="line">│    ├── main.rs   &lt;-- 模块，主模块</span><br><span class="line">│    ├── lib.rs    &lt;-- 模块，库模块(可编译成库或可执行文件)</span><br><span class="line">│    └── math      &lt;-- 模块，数学函数模块math</span><br><span class="line">│        ├─ <span class="keyword">mod</span>.rs &lt;-- 模块，为math模块引入add和sub模块中函数</span><br><span class="line">│        ├─ add.rs &lt;-- 模块，实现数学函数模块的add函数</span><br><span class="line">│        └─ sub.rs &lt;-- 模块，实现数学函数模块的sub函数</span><br><span class="line">└── file           &lt;-- <span class="keyword">crate</span></span><br><span class="line">     ├── core      &lt;-- 模块，文件操作模块</span><br><span class="line">     └── clear     &lt;-- 模块，清理模块</span><br></pre></td></tr></table></figure>

<p>Rust标准库如下：</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line">alloc              hint            mem    </span><br><span class="line">any                <span class="built_in">i8</span>              ptr</span><br><span class="line">array              <span class="built_in">i16</span>             rc</span><br><span class="line">ascii              <span class="built_in">i32</span>             result</span><br><span class="line">borrow             <span class="built_in">i64</span>             slice</span><br><span class="line">boxed              <span class="built_in">i128</span>            <span class="built_in">str</span></span><br><span class="line">cell               io              string</span><br><span class="line"><span class="built_in">char</span>               <span class="built_in">isize</span>           sync</span><br><span class="line">clone              iter            task</span><br><span class="line">cmp                marker          thread</span><br><span class="line">collections        net             time</span><br><span class="line">convert            num             <span class="built_in">u8</span>      </span><br><span class="line">default            ops             <span class="built_in">u16</span></span><br><span class="line">env                option          <span class="built_in">u32</span></span><br><span class="line">error              os              <span class="built_in">u64</span></span><br><span class="line"><span class="built_in">f32</span>                panic           <span class="built_in">u128</span></span><br><span class="line"><span class="built_in">f64</span>                path            <span class="built_in">usize</span></span><br><span class="line">ffi                pin             vec</span><br><span class="line">fmt                prelude         backtrace</span><br><span class="line">fs                 primitive       intrinsics</span><br><span class="line">future             process         lazy</span><br><span class="line">hash                               raw</span><br></pre></td></tr></table></figure>
<h1 id="Dart库"><a href="#Dart库" class="headerlink" title="Dart库"></a>Dart库</h1><p>Dart语言将各种代码组合起来称为库，使用时用import引入。</p>
<p>Dart标准库如下：</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span>          异步编程    </span><br><span class="line">archive        打包压缩</span><br><span class="line">http           使用http</span><br><span class="line">intl           国际化</span><br><span class="line">logging        日志</span><br><span class="line">path           路径处理</span><br><span class="line">shelf          web中间件</span><br><span class="line">test           测试</span><br><span class="line">yaml           yaml解析器</span><br><span class="line"><span class="keyword">async</span>          异步编程    </span><br><span class="line">collection     集合操作工具类</span><br><span class="line">convert        编码转换</span><br><span class="line">core           内置类型，集合</span><br><span class="line">developer      调试器和分析器</span><br><span class="line">math           数学函数</span><br><span class="line">type_data      高效处理固定大小数据</span><br><span class="line">io             IO操作</span><br><span class="line">isolate        并发</span><br><span class="line">mirrors        反射功能</span><br><span class="line">html           web开发</span><br><span class="line">indexed_db     使用键值对索引</span><br><span class="line">web_*          浏览器相关</span><br><span class="line">js             javascript支持</span><br><span class="line">ffi            支持和其他语言的调用</span><br><span class="line">wasm           编译成webassembly</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>编程语言</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>C</tag>
        <tag>C++</tag>
        <tag>Java</tag>
        <tag>Go</tag>
        <tag>Rust</tag>
        <tag>Dart</tag>
      </tags>
  </entry>
  <entry>
    <title>C、C++、Java、Python、Go、Rust、Dart面向过程和对象</title>
    <url>/title/7aab52cf/</url>
    <content><![CDATA[<p><img src="https://s1.ax1x.com/2020/11/09/BbPTC6.png" alt="cpygorsdart"></p>
<a id="more"></a>

<p>本文为七种语言对比学习的第十二篇：面向过程和面向对象。</p>
<p>面向对象的特点</p>
<ul>
<li>封装</li>
<li>继承</li>
<li>多态</li>
</ul>
<p>面向对象涉及术语</p>
<ul>
<li>类: 用来描述具有相同的属性和方法的对象的集合。</li>
<li>基类: 只能被继承，不能实例化对象的集合。</li>
<li>继承：一个派生类继承基类的字段和方法。</li>
<li>对象：通过类定义的数据结构实例。对象包括数据成员和方法。</li>
<li>方法：类中定义的函数。</li>
<li>类变量：类变量是类的属性，类变量定义在类中且在函数体之外。</li>
<li>数据成员：类变量或者实例变量用于处理类及其实例对象的相关的数据。</li>
<li>方法重写：从父类继承的方法不能满足子类需求，可对其进行改写，这个过程叫方法覆盖或重写。</li>
<li>局部变量：定义在方法中的变量，只作用于当前实例的类。</li>
<li>类实例化：创建一个类的实例，类的具体对象。</li>
<li>公有、私有、保护：指类中定义得成员使用的权限。</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 以Python为例子</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span><span class="params">()</span>:</span>          <span class="comment">#Animal类</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, age, weight)</span>:</span></span><br><span class="line">        self.name = name <span class="comment">#类变量</span></span><br><span class="line">        self.age = age</span><br><span class="line">        self.weight = weight</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getName</span><span class="params">(self)</span>:</span>   <span class="comment">#方法</span></span><br><span class="line">        <span class="keyword">return</span> self.name</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getAge</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.age</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getWeight</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.weight</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getInfo</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="string">"name"</span>: self.name, <span class="string">"age"</span>: self.age, <span class="string">"weight"</span>: self.weight&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span><span class="params">(Animal)</span>:</span>       <span class="comment">#继承</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, age, weight, color)</span>:</span></span><br><span class="line">        super().__init__(name, age, weight)</span><br><span class="line">        self.color = color</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getName</span><span class="params">(self)</span>:</span>   <span class="comment">#重写</span></span><br><span class="line">        tp = <span class="string">"Cat: "</span>     <span class="comment">#局部变量</span></span><br><span class="line">        <span class="keyword">return</span> tp + self.name</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getColor</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.color</span><br><span class="line"></span><br><span class="line">animal = Animal()        <span class="comment">#实例化，animal为对象</span></span><br></pre></td></tr></table></figure>

<p>面向过程和对象的语言</p>
<ul>
<li>C语言是面向过程的语言，只需要实现各种函数，然后调用，各函数独立。</li>
<li>C++语言是面向对象的语言，用class 或模板实现类，然后实例化并调用。</li>
<li>Python语言是面向对象的语言，可用class来定义类，函数定义在类中。</li>
<li>Go语言中没有面向对象的类，但通过struct和interface能实现面向对象功能。</li>
<li>Rust不是面向对象的编程语言，但通过组合，这些面向对象的功能都能得以实现。</li>
<li>Dart语言是面向对象的语言，在Dart中一切都是对象，即便是数字和空都是对象Object的子类。</li>
</ul>
<p>可见，只有C语言才真的无法实现面向对象，C++正好补充了C的这点不足。</p>
<h1 id="C面向过程"><a href="#C面向过程" class="headerlink" title="C面向过程"></a>C面向过程</h1><p>实现各种函数，再在对应函数中调用，最后由main调用。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">square</span><span class="params">(<span class="keyword">int</span>, <span class="keyword">int</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">quadratic</span><span class="params">(<span class="keyword">int</span>, <span class="keyword">int</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a, b;</span><br><span class="line">    a = <span class="number">3</span>;</span><br><span class="line">    b = <span class="number">4</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"square of a+b is %d\n"</span>, square(a,b)); <span class="comment">// 调用1</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"quadratic of a+b is %d\n"</span>, quadratic(a+b)); <span class="comment">// 调用2</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">square</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> ( a + b) * ( a + b);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">quadratic</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (a + b) * (a + b) * ( a + b) * (a + b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="C-面向对象"><a href="#C-面向对象" class="headerlink" title="C++面向对象"></a>C++面向对象</h1><p>C++自带this表示类自身。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> &#123;</span></span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">        <span class="built_in">string</span> name;</span><br><span class="line">        <span class="built_in">string</span> sex;</span><br><span class="line">        <span class="keyword">unsigned</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">protected</span>:</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">Name</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> name; &#125;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">Sex</span><span class="params">()</span>  </span>&#123; <span class="keyword">return</span> sex; &#125;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">Age</span><span class="params">()</span>  </span>&#123; <span class="keyword">return</span> age; &#125;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        Person(): name(<span class="string">"None"</span>), sex(<span class="string">"None"</span>), age(<span class="number">0</span>) &#123;&#125;</span><br><span class="line">        Person(<span class="built_in">string</span> nm, <span class="built_in">string</span> sx, <span class="keyword">unsigned</span> <span class="keyword">int</span> ag);</span><br><span class="line">        ~Person()&#123;&#125;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">showInfo</span><span class="params">()</span></span>;</span><br><span class="line">        <span class="function">Person &amp; <span class="title">older</span><span class="params">(Person &amp; other)</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line">Person::Person(<span class="built_in">string</span> nm, <span class="built_in">string</span> sx, <span class="keyword">unsigned</span> <span class="keyword">int</span> ag) &#123;</span><br><span class="line">    name = nm;</span><br><span class="line">    sex  = sx;</span><br><span class="line">    age  = ag;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">void</span> Person::showInfo() &#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"Name: "</span> &lt;&lt; Name() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"Sex : "</span> &lt;&lt; Sex()  &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"Age : "</span> &lt;&lt; Age()  &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">Person &amp; Person::older(Person &amp; other) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.Age() &gt;= other.Age())</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> other;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="Java面向对象"><a href="#Java面向对象" class="headerlink" title="Java面向对象"></a>Java面向对象</h1><p>Java中一切皆对象。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> legs;</span><br><span class="line">    <span class="keyword">int</span> tails;</span><br><span class="line">    <span class="keyword">int</span> lifeSpan;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">showInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Legs: "</span> + <span class="keyword">this</span>.legs);</span><br><span class="line">        System.out.println(<span class="string">"Tails: "</span> + <span class="keyword">this</span>.tails);</span><br><span class="line">        System.out.println(<span class="string">"LifeSpan: "</span> + <span class="keyword">this</span>.lifeSpan);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="keyword">boolean</span> furry = <span class="keyword">true</span>;</span><br><span class="line">    <span class="keyword">double</span> weight;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">showInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.showInfo();</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.furry) &#123;</span><br><span class="line">            System.out.println(<span class="string">"Furry!"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"Weight: "</span> + <span class="keyword">this</span>.weight);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        showInfo();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="Python面向对象"><a href="#Python面向对象" class="headerlink" title="Python面向对象"></a>Python面向对象</h1><p>Python自带self表示类自身。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Circle</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, radius)</span>:</span></span><br><span class="line">        self.radius = radius</span><br><span class="line">        self.__PI = <span class="number">3.141592653</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getArea</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.__PI * self.radius * self.radius</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getDiameter</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span> * self.radius</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getPerimeter</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span> * self.__PI * self.radius</span><br></pre></td></tr></table></figure>

<h1 id="Go面向对象"><a href="#Go面向对象" class="headerlink" title="Go面向对象"></a>Go面向对象</h1><p>Go利用struct和interface组合实现面向对象功能。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> PI = <span class="number">3.141592653</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 形状接口</span></span><br><span class="line"><span class="keyword">type</span> Shape <span class="keyword">interface</span> &#123;</span><br><span class="line">    getArea() <span class="keyword">float64</span></span><br><span class="line">    getDiameter() <span class="keyword">float64</span></span><br><span class="line">    getPerimeter() <span class="keyword">float64</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 圆及其面积，周长，直径计算方法</span></span><br><span class="line"><span class="keyword">type</span> Circle <span class="keyword">struct</span> &#123;</span><br><span class="line">    Radius <span class="keyword">float64</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *Circle)</span> <span class="title">getArea</span><span class="params">()</span> <span class="title">float64</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> PI * s.Radius * s.Radius</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *Circle)</span> <span class="title">getPerimeter</span><span class="params">()</span> <span class="title">float64</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">2</span> * PI * s.Radius</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *Circle)</span> <span class="title">getDiameter</span><span class="params">()</span> <span class="title">float64</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">2</span> * s.Radius</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 长方形及其面积，周长，直径(斜边长)计算方法</span></span><br><span class="line"><span class="keyword">type</span> Rectangle <span class="keyword">struct</span> &#123;</span><br><span class="line">    width <span class="keyword">float64</span></span><br><span class="line">    length <span class="keyword">float64</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(r *Rectangle)</span> <span class="title">getArea</span><span class="params">()</span> <span class="title">float64</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> r.width * r.length</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(r *Rectangle)</span> <span class="title">getPerimeter</span><span class="params">()</span> <span class="title">float64</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">2</span> * ( r.width + r.length )</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(r *Rectangle)</span> <span class="title">getDiameter</span><span class="params">()</span> <span class="title">float64</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> math.sqrt(r.width * r.width + r.length * r.length)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getArea</span><span class="params">(s *Shape)</span> <span class="title">float64</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> s.getArea()</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getDiameter</span><span class="params">(s *Shape)</span> <span class="title">float64</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> s.getDiameter()</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getPerimeter</span><span class="params">(s *Shape)</span> <span class="title">float64</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> s.getPerimeter()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> area, diameter, perimeter <span class="keyword">float64</span></span><br><span class="line"></span><br><span class="line">    circle := Circle&#123; Radius: <span class="number">2.54</span> &#125;</span><br><span class="line">    area = getArea(circle)</span><br><span class="line">    diameter = getDiameter(circle)</span><br><span class="line">    perimeter = getPerimeter(circle)</span><br><span class="line">    fmt.Printf(<span class="string">"Area: %.2f"</span>, area)</span><br><span class="line">    fmt.Printf(<span class="string">"Diam: %.2f"</span>, diameter)</span><br><span class="line">    fmt.Printf(<span class="string">"Peri: %.2f"</span>, perimeter)</span><br><span class="line"></span><br><span class="line">    rectangle = Rectangle&#123; width: <span class="number">2.13</span>, height: <span class="number">3.54</span> &#125;</span><br><span class="line">    area = getArea(rectangle)</span><br><span class="line">    diameter = getDiameter(rectangle)</span><br><span class="line">    perimeter = getPerimeter(rectangle)</span><br><span class="line">    fmt.Printf(<span class="string">"Area: %.2f"</span>, area)</span><br><span class="line">    fmt.Printf(<span class="string">"Diam: %.2f"</span>, diameter)</span><br><span class="line">    fmt.Printf(<span class="string">"Peri: %.2f"</span>, perimeter)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="Rust面向对象"><a href="#Rust面向对象" class="headerlink" title="Rust面向对象"></a>Rust面向对象</h1><p>Rust可通过模块来实现封装，使用结构体的impl实现类的功能，trait实现多态。</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="comment">// f.rs</span></span><br><span class="line"><span class="keyword">pub</span> <span class="class"><span class="keyword">struct</span> <span class="title">Number</span></span> &#123;</span><br><span class="line">    field: <span class="built_in">i32</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">impl</span> Number &#123; <span class="comment">// 为Number实现各种操作函数</span></span><br><span class="line">    <span class="keyword">pub</span> <span class="function"><span class="keyword">fn</span> <span class="title">new</span></span>(value: <span class="built_in">i32</span>) -&gt; Number &#123;</span><br><span class="line">        Number&#123;</span><br><span class="line">            field: value</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">pub</span> <span class="function"><span class="keyword">fn</span> <span class="title">do_public_works</span></span>(&amp;<span class="keyword">self</span>) &#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">"from public method"</span>);</span><br><span class="line">        <span class="keyword">self</span>.private_works();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fn</span> <span class="title">private_works</span></span>(&amp;<span class="keyword">self</span>) &#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">"from private method"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// main.rs</span></span><br><span class="line"><span class="keyword">mod</span> f</span><br><span class="line"><span class="keyword">use</span> f::Number;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> obj = Number::new(<span class="number">1024</span>);</span><br><span class="line">    obj.do_public_works();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="Dart面向对象"><a href="#Dart面向对象" class="headerlink" title="Dart面向对象"></a>Dart面向对象</h1><p>Dart本身支持面向对象，使用class定义.</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123; <span class="comment">// 类</span></span><br><span class="line">    <span class="built_in">String</span> name;</span><br><span class="line">    <span class="built_in">int</span> age;</span><br><span class="line">    <span class="keyword">final</span> <span class="built_in">String</span> address = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    Person(<span class="built_in">String</span> name, <span class="built_in">int</span> age) &#123; <span class="comment">// 构造函数</span></span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> getInfo &#123; <span class="comment">// 默认公开</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"Name: <span class="subst">$name</span>, Age: <span class="subst">$age</span>, Address: <span class="subst">$address</span>"</span>); </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> _work() &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"Private work"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">    <span class="comment">//var person = new Person("Tim", 20);</span></span><br><span class="line">    <span class="keyword">var</span> person = Person();</span><br><span class="line">    person.name = <span class="string">"Tom"</span>;</span><br><span class="line">    person.age = <span class="number">24</span>;</span><br><span class="line">    person.address = <span class="string">"UESTC"</span>;</span><br><span class="line"></span><br><span class="line">    person?.getInfo; <span class="comment">// person为空时，不调用</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> person1;</span><br><span class="line">    person1 = <span class="string">""</span>;</span><br><span class="line">    (person1 <span class="keyword">as</span> Person)?.getInfo;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>编程语言</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>C</tag>
        <tag>C++</tag>
        <tag>Java</tag>
        <tag>Go</tag>
        <tag>Rust</tag>
        <tag>Dart</tag>
      </tags>
  </entry>
  <entry>
    <title>C、C++、Java、Python、Go、Rust、Dart内置库函数</title>
    <url>/title/20d2819d/</url>
    <content><![CDATA[<p><img src="https://s1.ax1x.com/2020/11/10/BqzEUx.png" alt="cpygorsdart"></p>
<a id="more"></a>

<p>本文为七种语言对比学习的第十一篇：内置库函数。</p>
<p>内置库函数多是实现的某些通用功能，可以提高程序开发的效率，提升代码的重用性。</p>
<h1 id="C内置库函数"><a href="#C内置库函数" class="headerlink" title="C内置库函数"></a>C内置库函数</h1><p>C的内置库函数在stdio.h，time.h，ctype.h，string.h等头文件中定义，使用时需导入对应头文件。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// C各头文件内置库函数		</span></span><br><span class="line">&lt;stdio.h&gt;   <span class="built_in">isalpha</span>()</span><br><span class="line"><span class="built_in">printf</span>()    <span class="built_in">isdigit</span>()</span><br><span class="line"><span class="built_in">scanf</span>()     <span class="built_in">toupper</span>()</span><br><span class="line">getchar()   <span class="built_in">tolower</span>()</span><br><span class="line"><span class="built_in">putchar</span>()   </span><br><span class="line">            &lt;math.h&gt;</span><br><span class="line">&lt;time.h&gt;    <span class="built_in">ceil</span>()</span><br><span class="line">time()      <span class="built_in">floor</span>()</span><br><span class="line">            <span class="built_in">sqrt</span>();</span><br><span class="line">&lt;<span class="built_in">string</span>.h&gt;  <span class="built_in">pow</span>();</span><br><span class="line"><span class="built_in">strcpy</span>()    <span class="built_in">abs</span>();</span><br><span class="line"><span class="built_in">strcmp</span>()    </span><br><span class="line">            &lt;stdlib.h&gt;</span><br><span class="line">&lt;ctype.h&gt;   srand()</span><br><span class="line"><span class="built_in">isupper</span>()   rand()</span><br><span class="line"><span class="built_in">islower</span>()   <span class="built_in">exit</span>()</span><br><span class="line">            system()</span><br></pre></td></tr></table></figure>

<h1 id="C-内置库函数"><a href="#C-内置库函数" class="headerlink" title="C++内置库函数"></a>C++内置库函数</h1><p>C++的内置库函数在 iostream, ctime，cmath, cctype，string, vector 等库文件中定义，这些库很多都是从C标准库移植过来得，所以前面有个c，如ctime是time.h移植得到的。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// C各++头文件内置库函数		</span></span><br><span class="line">&lt;iostream&gt;   &lt;cctype&gt;     &lt;<span class="built_in">string</span>&gt;</span><br><span class="line"><span class="function"><span class="built_in">cin</span>          <span class="title">isupper</span><span class="params">()</span>    <span class="title">string</span><span class="params">()</span></span></span><br><span class="line">cout         islower()    str.length()</span><br><span class="line">cerr         isalpha()    str.size()</span><br><span class="line">clog         isalnum()    str.begin()</span><br><span class="line"><span class="built_in">get</span>()        <span class="built_in">iscntrl</span>()    str.<span class="built_in">end</span>()</span><br><span class="line">getline()    isblank()    str.copy()</span><br><span class="line">             <span class="built_in">isdigit</span>()    str.empty()</span><br><span class="line">&lt;ctime&gt;      <span class="built_in">isprint</span>()    str.resize()</span><br><span class="line">ctime()      <span class="built_in">isspace</span>()    str.swap()</span><br><span class="line">asctime()    <span class="built_in">isxdigit</span>()   str.substr()</span><br><span class="line">mktime()     <span class="built_in">ispunct</span>()</span><br><span class="line">localtime()  <span class="built_in">toupper</span>()</span><br><span class="line">clock()      <span class="built_in">tolower</span>()</span><br></pre></td></tr></table></figure>

<h1 id="Java内置库函数"><a href="#Java内置库函数" class="headerlink" title="Java内置库函数"></a>Java内置库函数</h1><p>Java一切皆类，所以它通过提供核心类库来提供函数。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Java内置库函数都在类库中，各类库含有很多函数</span></span><br><span class="line">java.lang.*</span><br><span class="line">System.*()</span><br><span class="line">Math.*()</span><br><span class="line">String.*()</span><br><span class="line"></span><br><span class="line">java.math.*</span><br><span class="line">Math.*()  </span><br><span class="line"></span><br><span class="line">java.io.*</span><br><span class="line">Stirng.*()</span><br><span class="line"></span><br><span class="line">java.util.*</span><br><span class="line">Date()</span><br><span class="line">Random()</span><br><span class="line">Calendar()</span><br><span class="line"></span><br><span class="line">java.net.*</span><br><span class="line">java.awt.*</span><br><span class="line">java.nio.*</span><br><span class="line">java.applet.*</span><br><span class="line">java.beans.*</span><br><span class="line">java.swing.*</span><br><span class="line">java.rmi.* </span><br><span class="line">java.security.* </span><br><span class="line">java.sql.*</span><br><span class="line">java.text.*</span><br><span class="line">javax.naming.*</span><br><span class="line">javax.rmi.* </span><br><span class="line">javax.crypto.*</span><br></pre></td></tr></table></figure>

<h1 id="Python内置库函数"><a href="#Python内置库函数" class="headerlink" title="Python内置库函数"></a>Python内置库函数</h1><p>Python内置的函数非常好用，不需要导入包，写代码时直接使用。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Python内置库函数		</span></span><br><span class="line">abs()          dict()       help()        min()       setattr()</span><br><span class="line">all()          dir()        hex()         next()      slice()</span><br><span class="line">any()          divmod()     id()          object()    sorted()</span><br><span class="line">ascii()        enumerate()  input()       oct()       staticmethod()</span><br><span class="line">bin()          eval()       int()         open()      str()</span><br><span class="line">bool()         exec()       isinstance()  ord()       sum()</span><br><span class="line">bytearray()    filter()     issubclass()  pow()       super()</span><br><span class="line">bytes()        float()      iter()        print()     tuple()</span><br><span class="line">callable()     format()     len()         property()  type()</span><br><span class="line">chr()          frozenset()  list()        range()     vars()</span><br><span class="line">classmethod()  getattr()    locals()      repr()      zip()</span><br><span class="line">compile()      globals()    map()         reversed()  __import__()</span><br><span class="line">complex()      hasattr()    max()         round()</span><br><span class="line">delattr()      hash()       memoryview()  set()</span><br></pre></td></tr></table></figure>

<h1 id="Go内置库函数"><a href="#Go内置库函数" class="headerlink" title="Go内置库函数"></a>Go内置库函数</h1><p>Go虽然继承了C的很多特性，但它的内置库函数不是如C那般放在库中，反而如Python般，直接实现在编译器中。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Go内置库函数</span></span><br><span class="line">init()     初始化<span class="keyword">package</span></span><br><span class="line"><span class="built_in">append</span>()   追加元素到数组、slice</span><br><span class="line"><span class="built_in">copy</span>()     复制和连接slice</span><br><span class="line"><span class="built_in">close</span>()    关闭channel</span><br><span class="line"><span class="built_in">delete</span>()   从<span class="keyword">map</span>中删除key对应的value</span><br><span class="line"><span class="built_in">new</span>()      用来分配内存，用来分配值类型</span><br><span class="line"><span class="built_in">make</span>()     来分配内存，返回Type本身，只用于slice, <span class="keyword">map</span>, channel</span><br><span class="line"><span class="built_in">len</span>()      求长度</span><br><span class="line"><span class="built_in">cap</span>()      求容量</span><br><span class="line"><span class="built_in">real</span>()     返回<span class="built_in">complex</span>的实部</span><br><span class="line"><span class="built_in">imag</span>()     返回<span class="built_in">complex</span>的虚部</span><br><span class="line"><span class="built_in">panic</span>()    立即崩溃</span><br><span class="line"><span class="built_in">recover</span>()  从崩溃中恢复</span><br></pre></td></tr></table></figure>

<h1 id="Rust内置库函数"><a href="#Rust内置库函数" class="headerlink" title="Rust内置库函数"></a>Rust内置库函数</h1><p>Rust中并不存在内置库函数，一切都需要自己定义。但是Rust实现了一套高效的宏（函数宏，过程宏），函数宏也可看成内置库函数来用。当然也可用macro_rules!自定义宏。</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Rust内建函数宏</span></span><br><span class="line"><span class="built_in">println!</span>()</span><br><span class="line"><span class="built_in">panic!</span>()</span><br><span class="line"><span class="built_in">vec!</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// Rust建宏规则</span></span><br><span class="line"><span class="built_in">macro_rules!</span> xxx_macro &#123;</span><br><span class="line">    code_body</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="Dart内置库函数"><a href="#Dart内置库函数" class="headerlink" title="Dart内置库函数"></a>Dart内置库函数</h1><p>Dart内置的函数多放置在dart:core, dart:io, dart:math, dart:convert库中。其他一些函数是内建的，可以直接使用。</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>()</span><br><span class="line"><span class="keyword">assert</span>()</span><br><span class="line"><span class="built_in">List</span>()</span><br><span class="line"><span class="built_in">Map</span>()</span><br><span class="line"><span class="built_in">Set</span>()</span><br><span class="line">Runes()</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>编程语言</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>C</tag>
        <tag>C++</tag>
        <tag>Java</tag>
        <tag>Go</tag>
        <tag>Rust</tag>
        <tag>Dart</tag>
      </tags>
  </entry>
  <entry>
    <title>C、C++、Java、Python、Go、Rust、Dart作用域</title>
    <url>/title/6587fc8f/</url>
    <content><![CDATA[<p><img src="https://s1.ax1x.com/2020/11/09/BHYJtP.png" alt="cpygorsdart"></p>
<a id="more"></a>

<p>本文为七种语言对比学习的第十篇：作用域。</p>
<p>作用域是程序中定义的变量所存在的区域，超过该区域变量就不能被访问。如果再访问，就可能访问到其他内存区域引起程序崩溃。不同的语言对其变量都设置了作用域。</p>
<h1 id="C作用域规则"><a href="#C作用域规则" class="headerlink" title="C作用域规则"></a>C作用域规则</h1><p>C语言中存在三种变量  </p>
<ul>
<li>在函数或块内部的局部变量，它们只能被该函数或该代码块内部的语句使用。 </li>
<li>在所有函数外部的全局变量，在整个程序生命周期内有效，任意函数内部能访问。</li>
<li>在函数中定义的的形式参数，被当作该函数内的局部变量，如与全局变量同名会优先使用参数。</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;      // 数据类型        初始化值</span></span></span><br><span class="line">                        <span class="comment">// int             0</span></span><br><span class="line"><span class="keyword">int</span> g; <span class="comment">//全局           // char            '\0'</span></span><br><span class="line">                        <span class="comment">// float           0</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;            <span class="comment">// double          0</span></span><br><span class="line">                        <span class="comment">// pointer         NULL</span></span><br><span class="line">    <span class="keyword">int</span> a, b, c; <span class="comment">//局部</span></span><br><span class="line">    a = <span class="number">10</span>;</span><br><span class="line">    b = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line">    g = a + b;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"a = %d, b = %d, d = %d\n"</span>, a, b, g);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span>, <span class="keyword">int</span>)</span></span>;</span><br><span class="line">    c = sum(a, b); <span class="comment">// 参数</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"c = %d\n"</span>, c);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="C-作用域规则"><a href="#C-作用域规则" class="headerlink" title="C++作用域规则"></a>C++作用域规则</h1><p>C++语言中存在三种变量，和C差不多    </p>
<ul>
<li>在函数或块内部的局部变量，它们只能被该函数或该代码块内部的语句使用。 </li>
<li>在所有函数外部的全局变量，在整个程序生命周期内有效，任意函数内部能访问。</li>
<li>在函数中定义的的形式参数，被当作该函数内的局部变量，如与全局变量同名会优先使用参数。</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;     // 数据类型        初始化值</span></span></span><br><span class="line">                        <span class="comment">// int             0</span></span><br><span class="line"><span class="keyword">int</span> g; <span class="comment">//全局           // char            '\0'</span></span><br><span class="line">                        <span class="comment">// float           0</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>;  <span class="comment">// double          0</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;            <span class="comment">// pointer         NULL</span></span><br><span class="line">    <span class="keyword">int</span> a &#123;<span class="number">10</span>&#125;, b &#123;<span class="number">20</span>&#125;, c; <span class="comment">//局部带初始化和不初始化</span></span><br><span class="line">    g = a + b;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"a = "</span> &lt;&lt; a &lt;&lt; <span class="string">", b = "</span> &lt;&lt; b &lt;&lt; <span class="string">", g = "</span> &lt;&lt; g &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span>, <span class="keyword">int</span>)</span></span>;</span><br><span class="line">    c = sum(a, b); <span class="comment">// 参数</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"c = "</span>&lt;&lt;  c &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="Java作用域规则"><a href="#Java作用域规则" class="headerlink" title="Java作用域规则"></a>Java作用域规则</h1><p>Java语言中存在三种变量  </p>
<ul>
<li>在类中定义的内部变量，不属于任何函数，类中可用。</li>
<li>在函数内部的局部变量，在整个函数生命周期内有效，函数内部可用。</li>
<li>在函数中定义的形式参数，被当作该函数内的局部变量，函数内部可用。</li>
<li>在异常处理中定义的参数，与函数参数变量类似。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Hellowd</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i; <span class="comment">// global</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> j = <span class="number">10</span>; <span class="comment">// local</span></span><br><span class="line">        System.out.println(<span class="string">"i + j = "</span>);</span><br><span class="line">        System.out.println(sum(i,j));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> temp;</span><br><span class="line">        temp = a + b;</span><br><span class="line">        <span class="keyword">return</span> temp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="Python作用域规则"><a href="#Python作用域规则" class="headerlink" title="Python作用域规则"></a>Python作用域规则</h1><p>Python的作用域又叫命名空间(Namespace)。命名空间是从名称到对象的映射，大部分的命名空间都是通过字典来实现的。命名空间提供了在项目中避免名字冲突的一种方法。各个命名空间是独立的，没有任何关系的，所以一个命名空间中不能有重名，但不同的命名空间是可以重名而没有任何影响。</p>
<p>Python中存在四种作用域</p>
<ul>
<li>内置空间，Python内置的函数名，异常等。</li>
<li>全局空间，模块中定义，包括模块，类，函数，常量/变量。</li>
<li>嵌套空间，在内层函数中引用外层函数定义的名称，变量，参数。</li>
<li>局部空间，函数中定义的名称，变量，参数。</li>
</ul>
<p>搜索规则是局部-&gt;嵌套-&gt;全局-&gt;内置，使用不同空间的变量要使用global和nonlocal关键字。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">v1 = <span class="number">5</span> <span class="comment">#全局</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func_1</span><span class="params">()</span>:</span></span><br><span class="line">    v2 = <span class="number">7</span>   <span class="comment">#局部</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">func_2</span><span class="params">()</span>:</span></span><br><span class="line">        v3 = <span class="number">9</span>   <span class="comment">#内嵌局部</span></span><br><span class="line"></span><br><span class="line">num = <span class="number">1</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func_3</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">global</span> num</span><br><span class="line"></span><br><span class="line">    num1 = num + <span class="number">1</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">func_4</span><span class="params">()</span>:</span></span><br><span class="line">        <span class="keyword">nonlocal</span> num1</span><br><span class="line">        num1 +=  <span class="number">1</span></span><br><span class="line">        print(num1)</span><br><span class="line"></span><br><span class="line">    func_4()</span><br><span class="line">    print(num, num1)</span><br><span class="line"></span><br><span class="line">    num = <span class="number">123</span></span><br><span class="line">    print(num)</span><br></pre></td></tr></table></figure>

<h1 id="Go作用域规则"><a href="#Go作用域规则" class="headerlink" title="Go作用域规则"></a>Go作用域规则</h1><p>Go作为类C语言，作用域规则和C一样。</p>
<p>Go的作用域规则</p>
<ul>
<li>函数内定义的变量称为局部变量</li>
<li>函数外定义的变量称为全局变量</li>
<li>函数定义中的变量称为形式参数</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main             <span class="comment">// 数据类型        初始化值    </span></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span>             <span class="comment">// int            0</span></span><br><span class="line">                         <span class="comment">// float32        0</span></span><br><span class="line"><span class="keyword">var</span> g <span class="keyword">int</span>                <span class="comment">// pointer        nil</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> a, b, c <span class="keyword">int</span> <span class="comment">// 局部</span></span><br><span class="line">    a,b = <span class="number">10</span>, <span class="number">20</span></span><br><span class="line">    c = sum(a, b)   <span class="comment">// 参数</span></span><br><span class="line">    g = c * a;      <span class="comment">// 全局</span></span><br><span class="line"></span><br><span class="line">    fmt.Printf(<span class="string">"a=%d, b=%d, c=%d, g=%d\n"</span>, a,b,c,g)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sum</span><span class="params">(a, b <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> a + b</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="Rust作用域规则"><a href="#Rust作用域规则" class="headerlink" title="Rust作用域规则"></a>Rust作用域规则</h1><p>Rust引入了所有权/借用，生命周期等概念，所以它的作用域规则是所有语言中最严格的，Rust的变量只能按照生命周期和所有权机制，在某个代码块中存在，Rust的困难有一部分就在于其作用域规则。引入这些概念主要还是为了应对复杂类型系统中资源管理的问题，解决悬荡引用等安全问题。</p>
<p>Rust语言中的作用域概念</p>
<ul>
<li>所有权/借用</li>
<li>生命周期，用’加小写字母，如’a</li>
<li>静态生命周期，表示从程序运行开始到结束都存在，用’static</li>
</ul>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">longer</span></span>&lt;<span class="symbol">'a</span>&gt;(s1:&amp;<span class="symbol">'a</span> <span class="built_in">str</span>, s2:&amp;<span class="symbol">'a</span> <span class="built_in">str</span>) -&gt; &amp;<span class="symbol">'a</span> <span class="built_in">str</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> s2.len() &gt; s1.len() &#123;</span><br><span class="line">        s2</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        s1</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> long_lived = <span class="number">1</span>;             &lt;----------- long_lived  出现</span><br><span class="line">                                    </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">let</span> short_lived = <span class="number">2</span>;        &lt;----------- short_lived 出现</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">"inner short: &#123;&#125;"</span>, short_lived);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> long_lived = <span class="number">5_f32</span>;     &lt;----------- long_lived  出现(内部)</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">"inner long: &#123;&#125;"</span>, long_lived);</span><br><span class="line">    &#125;                               &lt;----------- long_lived 和 short_lived 清除</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> long_lived = <span class="string">'a'</span>;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"outer long: &#123;&#125;"</span>, long_lived);</span><br><span class="line">&#125;                                   &lt;----------- long_lived  清除(外部)</span><br></pre></td></tr></table></figure>

<h1 id="Dart作用域规则"><a href="#Dart作用域规则" class="headerlink" title="Dart作用域规则"></a>Dart作用域规则</h1><p>Dart是一门真正面向对象的语言，甚至其中的函数也是对象，并且有它的类型Function。这意味着函数可以被赋值给变量或者作为参数传递给其他函数。在函数main之外定义的函数，或是直接在main函数中定义的函数都是全局函数，除此之外，其他函数中定义函数为局部函数。</p>
<p>Dart作用域概念</p>
<ul>
<li>局部变量，函数内可见。</li>
<li>形式参数，函数内可见。</li>
<li>全局变量，程序中可见。</li>
<li>词法闭包，只要调用就可见。</li>
</ul>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Function</span> makeAdder(<span class="built_in">num</span> addBy) &#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="built_in">num</span> i) =&gt; addBy + i;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">bool</span> topLevel = <span class="keyword">true</span>;</span><br><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">    <span class="keyword">var</span> innerMain = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> myFunction() &#123;</span><br><span class="line">        <span class="keyword">var</span> insideFunc = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">void</span> nestedFunction() &#123;</span><br><span class="line">            <span class="keyword">var</span> insideNestedFunction = <span class="keyword">true</span>;</span><br><span class="line">            <span class="keyword">assert</span>(topLevel);              <span class="comment">// 顶层变量</span></span><br><span class="line">            <span class="keyword">assert</span>(innerMain);             <span class="comment">// 主函数变量</span></span><br><span class="line">            <span class="keyword">assert</span>(insideFunc);            <span class="comment">// 外层变量</span></span><br><span class="line">            <span class="keyword">assert</span>(insideNestedFunction);  <span class="comment">// 局部变量</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> add1 = makeAdder(<span class="number">1</span>); <span class="comment">// 使用闭包</span></span><br><span class="line">    <span class="keyword">var</span> add2 = makeAdder(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">assert</span>(add1(<span class="number">3</span>) == <span class="number">4</span>);</span><br><span class="line">    <span class="keyword">assert</span>(add2(<span class="number">3</span>) == <span class="number">5</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>编程语言</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>C</tag>
        <tag>C++</tag>
        <tag>Java</tag>
        <tag>Go</tag>
        <tag>Rust</tag>
        <tag>Dart</tag>
      </tags>
  </entry>
  <entry>
    <title>C、C++、Java、Python、Go、Rust、Dart函数</title>
    <url>/title/7fe9af78/</url>
    <content><![CDATA[<p><img src="https://s1.ax1x.com/2020/11/09/B7lTIS.png" alt="cpygorsdart"></p>
<a id="more"></a>

<p>本文为七种语言对比学习的第九篇：函数。</p>
<p>函数是一组一起执行任务的语句，通过将这些语句组合起来形成一个独立单元有助于代码模块化管理、复用、审阅。函数是程序中的主体，是代码执行的逻辑单元。函数也有其他叫法，比如方法、例程、程序等。</p>
<p>函数存在声明和定义。声明就是告诉编译器函数的名称、返回类型和参数。而定义则提供了函数的实际主体，真正的代码存在于定义里面。</p>
<p>函数根据其开放原则可能被自身或其他函数调用。</p>
<h1 id="C函数"><a href="#C函数" class="headerlink" title="C函数"></a>C函数</h1><p>每个C程序都至少有一个主函数main()，主函数是程序执行的入口。程序还可以定义其他额外的函数，这些函数通过调用结合到一起，最后由main()函数驱动并执行。 C函数往往接收一些参数(parameters)进去，然后内部主体(body)执行，最后返回(return)。还可以将代码划分到不同的函数，划分函数是一门学问，但在逻辑上，通常是根据每个函数执行的特定任务来进行划分的。</p>
<p>C标准库提供了大量可供程序调用的内置函数，这些函数往往涉及到和操作系统打交道，是C语言的精粹。Linux平台下的glibc就是C标准库和系统调用的合集，所以又称运行时。</p>
<p>C语言中，函数的参数可能是变量值或变量地址，返回值也可能是值或地址。使用地址是因为有的变量太大，直接传递效率低，费内存。 函数的调用往往涉及到栈操作，调用者会入栈，保存参数和返回地址。被调用者执行时从栈取参数并执行，返回时取返回地址并返回。</p>
<p>C函数命名大小写均可，原则上都能被调用。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// C函数的声明</span></span><br><span class="line"><span class="function">returnType <span class="title">functionName</span><span class="params">(parameters...)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">max</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>;  <span class="comment">// 声明时要加;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// C函数的定义                             </span></span><br><span class="line">returnType functionName(parameters...)  functionName 函数名</span><br><span class="line">&#123;                                       parameters 调用参数</span><br><span class="line">    codeBody                            codeBody 执行的代码 </span><br><span class="line">&#125;                                       returnType 返回类型</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">max</span><span class="params">(<span class="keyword">int</span> num1, <span class="keyword">int</span> num2)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> result;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (num1 &gt; num2)</span><br><span class="line">        result = num1;</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        result = num2;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> num1, num2, result;</span><br><span class="line"></span><br><span class="line">    num1 = <span class="number">10</span>;</span><br><span class="line">    num2 = <span class="number">30</span>;</span><br><span class="line">    result = <span class="built_in">max</span>(num1, num2);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>, result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="C-函数"><a href="#C-函数" class="headerlink" title="C++函数"></a>C++函数</h1><p>每个C++程序都至少有一个主函数main()，主函数是程序执行的入口。程序还可以定义其他额外的函数，这些函数通过调用结合到一起，最后由main()函数驱动并执行。 C++函数往往接收一些参数(parameters)进去，然后内部主体(body)执行，最后返回(return)。还可以将代码划分到不同的函数，划分函数是一门学问，但在逻辑上，通常是根据每个函数执行的特定任务来进行划分的。</p>
<p>C++标准模板库(STL)提供了大量可供程序调用的函数，这些函数往往涉及数据处理、和操作系统打交道，是C++语言的精粹。</p>
<p>C++语言中，函数的参数可能是变量值或变量地址，返回值也可能是值或地址。使用地址是因为有的变量太大，直接传递效率低，费内存。 函数的调用往往涉及到栈操作，调用者会入栈，保存参数和返回地址。被调用者执行时从栈取参数并执行，返回时取返回地址并返回。</p>
<p>C++函数命名大小写均可，原则上都能被调用。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// C++函数的声明</span></span><br><span class="line"><span class="function">returnType <span class="title">functionName</span><span class="params">(parameters...)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">max</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>;  <span class="comment">// 声明时要加;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// C++函数的定义                             </span></span><br><span class="line">returnType functionName(parameters...)  functionName 函数名</span><br><span class="line">&#123;                                       parameters 调用参数</span><br><span class="line">    codeBbody                           codeBbody 执行的代码 </span><br><span class="line">&#125;                                       returnType 返回类型</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">max</span><span class="params">(<span class="keyword">int</span> num1, <span class="keyword">int</span> num2)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> result;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (num1 &gt; num2)</span><br><span class="line">        result = num1;</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        result = num2;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> num1, num2, result;</span><br><span class="line"></span><br><span class="line">    num1 = <span class="number">10</span>;</span><br><span class="line">    num2 = <span class="number">30</span>;</span><br><span class="line">    result = <span class="built_in">max</span>(num1, num2);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; result &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="Java函数"><a href="#Java函数" class="headerlink" title="Java函数"></a>Java函数</h1><p>每个Java程序都至少有一个主函数main()，主函数是程序执行的入口。程序还可以定义其他额外的函数，这些函数通过调用结合到一起，最后由main()函数驱动并执行。 Java函数往往接收一些参数(parameters)进去，然后内部主体(body)执行，最后返回(return)。还可以将代码划分到不同的函数。</p>
<p>Java默认提供了许多类，比如java.lang是默认导入的。这些类中含有大量函数，可直接调用。Java语言中，函数的参数是变量值，返回值也值。使用引用作为值可修改外部变量。</p>
<p>Java函数命名大小写均可，原则上都能被调用。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Java函数的声明</span></span><br><span class="line">[openType] <span class="function">returnType <span class="title">functionName</span><span class="params">(parameters...)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">max</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>;  <span class="comment">// 声明时要加;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Java函数的定义                             </span></span><br><span class="line"><span class="function">openType returnType <span class="title">functionName</span><span class="params">(parameters...)</span>  functionName 函数名</span></span><br><span class="line"><span class="function"></span>&#123;                                                parameters 调用参数</span><br><span class="line">    codeBbody                                    codeBody 执行的代码 </span><br><span class="line">&#125;                                                returnType 返回类型</span><br><span class="line">                                                 openType 保护类型</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">max</span><span class="params">(<span class="keyword">int</span> num1, <span class="keyword">int</span> num2)</span>  </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> result;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (num1 &gt; num2)</span><br><span class="line">        result = num1;</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        result = num2;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> num1, num2, result;</span><br><span class="line">    num1 = <span class="number">10</span>;</span><br><span class="line">    num2 = <span class="number">30</span>;</span><br><span class="line">    result = max(num1, num2);</span><br><span class="line">    System.out.println(result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="Python函数"><a href="#Python函数" class="headerlink" title="Python函数"></a>Python函数</h1><p>Python中函数有两种，一种的普通函数，一种时lambda函数，函数参数有普通参数、默认参数、收集参数、关键字参数、收集关键字参数。参数混合调用规则：普通参数、默认参数、关键字参数、收集参数、收集关键字参数依次放置。</p>
<p>以__开头的函数是私有函数，以__开头和结尾的方法是专有函数。</p>
<p>Python函数命名一般是下划线分割或驼峰法。Python函数内可以定义内部函数。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Python函数的定义</span><br><span class="line">def functionName(parameter, *pargs, **kargs):</span><br><span class="line">    codeBbody</span><br><span class="line">    return_values   </span><br><span class="line"></span><br><span class="line"># 普通参数</span><br><span class="line">def max(num1, num2):</span><br><span class="line">    if num1 &gt; num2:</span><br><span class="line">        return num1</span><br><span class="line">    else:</span><br><span class="line">        return num2</span><br><span class="line"></span><br><span class="line"># 默认参数</span><br><span class="line">def student(name, age, gender=&apos;male&apos;):</span><br><span class="line">    if gender == &apos;male&apos;:</span><br><span class="line">        print(&quot;He is good&quot;)</span><br><span class="line">    else:</span><br><span class="line">        print(&quot;She is good&quot;)</span><br><span class="line"></span><br><span class="line"># 关键字参数</span><br><span class="line">def student(name=&apos;Tom&apos;, age=20, gender=&apos;male&apos;):</span><br><span class="line">    if gender == &apos;male&apos;:</span><br><span class="line">        print(&quot;%s is a student and he is %d years old&quot;%(name, age))</span><br><span class="line">    else:</span><br><span class="line">        print(&quot;%s is a student and she is %d years old&quot;%(name, age))</span><br><span class="line"></span><br><span class="line"># 收集参数</span><br><span class="line">def student(*args):</span><br><span class="line">    for param in args:</span><br><span class="line">        print(param)</span><br><span class="line"></span><br><span class="line"># 收集关键字参数</span><br><span class="line">def student(**kwargs):</span><br><span class="line">    for k, v in kwargs.items():</span><br><span class="line">        print(k, &apos;---&gt;&apos;, v)</span><br><span class="line"></span><br><span class="line"># Python lambda函数定义</span><br><span class="line">lambda [args[,arg2,...argn]]: expression</span><br><span class="line"></span><br><span class="line">x, y = 3, 2</span><br><span class="line">s = lambda x, y: x % y   # s = 1</span><br><span class="line"></span><br><span class="line">class MyClass:</span><br><span class="line">    #专有函数</span><br><span class="line">    def __init__(self,x):</span><br><span class="line">        self.x = x</span><br><span class="line"></span><br><span class="line">    #私有函数</span><br><span class="line">    def __setStr(self):</span><br><span class="line">        self.str = &quot;a&quot;</span><br></pre></td></tr></table></figure>

<h1 id="Go函数"><a href="#Go函数" class="headerlink" title="Go函数"></a>Go函数</h1><p>Go函数和C函数是类似的，都有返回值，函数名，参数，但Go中还有闭包和方法。Go函数依照其首字母的大小写来判定是否可导出，命名一般是驼峰法。Go函数内部可以定义并使用匿名函数。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Go函数定义</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">functionname</span><span class="params">(parameters)</span> <span class="title">returnTypes</span></span> &#123;</span><br><span class="line">    codeBbody</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Go函数实现，可外部引用Max</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Max</span><span class="params">(num1, num2 <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> result <span class="keyword">int</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> num1 &gt; num2 &#123;</span><br><span class="line">        result = num1</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        result = num2</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    result result</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 不可外部引用max</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">max</span><span class="params">(num1, num2 <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> num1 &gt; num2 &#123;</span><br><span class="line">        <span class="keyword">return</span> num1</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> num2</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Go闭包，指外部值直接被go函数引用</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">        <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">            fmt.Println(i*i) <span class="comment">// 闭包</span></span><br><span class="line">        &#125;()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">        <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">(<span class="keyword">int</span> i)</span></span> &#123;</span><br><span class="line">            fmt.Println(i*i)</span><br><span class="line">        &#125;(i) <span class="comment">// 非闭包</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Go方法，指一个包含了接受者的函数，接受者是类型、结构体的值或指针。所以给定类型的方法是该类型的方法集，相当于实现了一个类。</span></span><br><span class="line">PI = <span class="number">3.141592653</span>                           class Circle: #Python实现的Circle类</span><br><span class="line"><span class="keyword">type</span> Circle <span class="keyword">struct</span> &#123;                           def __init__(self, radius):</span><br><span class="line">    radius <span class="keyword">float64</span>                                 self.R = radius</span><br><span class="line">&#125;                                                  self.PI = <span class="number">3.141592653</span></span><br><span class="line">                                           </span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *Circle)</span> <span class="title">getDiameter</span><span class="params">()</span> <span class="title">float64</span></span> &#123;       def getDiameter(self):</span><br><span class="line">    <span class="keyword">return</span> <span class="number">2</span> * c.radius                            <span class="keyword">return</span> <span class="number">2</span> * self.R</span><br><span class="line">&#125;                                          </span><br><span class="line">                                               def getPerimeter(self):</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *Circle)</span> <span class="title">getPerimeter</span><span class="params">()</span> <span class="title">float64</span></span> &#123;          <span class="keyword">return</span> <span class="number">2</span> * self.PI * self.R</span><br><span class="line">    <span class="keyword">return</span> <span class="number">2</span> * PI * c.radius               </span><br><span class="line">&#125;                                              def getArea(self):</span><br><span class="line">                                                       <span class="keyword">return</span> self.PI * self.R * self.R</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *Circle)</span> <span class="title">getArea</span><span class="params">()</span> <span class="title">float64</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> PI * c.radius * c.radius</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="Rust函数"><a href="#Rust函数" class="headerlink" title="Rust函数"></a>Rust函数</h1><p>Rust也有主函数main。Rust中一个模块中函数默认私有，要想导出供其他程序使用，需要加上pub关键字，命名多以以下划线分割。</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Rust函数定义</span></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">func_name</span></span>(parameters) -&gt; returnTypes &#123;</span><br><span class="line">    codeBbody</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">max_func</span></span>(num1:<span class="built_in">i32</span>, num2:<span class="built_in">i32</span>) -&gt; <span class="built_in">i32</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> x = <span class="number">5</span>;</span><br><span class="line">    <span class="keyword">let</span> y = &#123;</span><br><span class="line">        <span class="keyword">let</span> x = <span class="number">3</span>;</span><br><span class="line">        x + <span class="number">1</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> num1 &gt; num2 &#123;</span><br><span class="line">        <span class="keyword">return</span> num1 + y;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> num2 - y;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> num1 = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">let</span> num2 = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">let</span> res = max_func(num1, num2);</span><br><span class="line">    <span class="built_in">println!</span>(res);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 公开模块</span></span><br><span class="line"><span class="keyword">pub</span> <span class="keyword">mod</span> a_public_module &#123;</span><br><span class="line">    <span class="keyword">pub</span> <span class="function"><span class="keyword">fn</span> <span class="title">func_1</span></span>() &#123; <span class="comment">// 公开函数</span></span><br><span class="line">        codeBbody;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fn</span> <span class="title">func_2</span></span>() &#123;     <span class="comment">// 私有函数</span></span><br><span class="line">        codeBbody;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="Dart函数"><a href="#Dart函数" class="headerlink" title="Dart函数"></a>Dart函数</h1><p>Dart函数有main函数、lambda函数、闭包、内嵌函数(内部定义的函数)。参数包含无参数、位置参数(必须位置参数，可选位置参数，默认可选位置参数，{}表示)、命名参数（可选命名参数，默认可选命名参数，用{}表示）。</p>
<p>以_开头的函数私有，命名用大驼峰，小驼峰，下划线分割均可，但要统一。</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Dart函数定义</span></span><br><span class="line">returnType functionName(parameters...) =&gt; expression;</span><br><span class="line">returnType functionName(parameters...) &#123;</span><br><span class="line">    codeBbody;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">void</span> main(<span class="built_in">List</span>&lt;<span class="built_in">String</span>&gt; arguments) &#123;</span><br><span class="line">    <span class="built_in">print</span>(arguments);</span><br><span class="line">    <span class="keyword">assert</span>(arguments.length == <span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 闭包</span></span><br><span class="line"><span class="built_in">Function</span> makeAdder(<span class="built_in">num</span> addBy) &#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="built_in">num</span> i) =&gt; addBy + i; <span class="comment">// lambda函数</span></span><br><span class="line">&#125;</span><br><span class="line">(<span class="built_in">num</span> x) =&gt; x;</span><br><span class="line">(<span class="built_in">num</span> x) &#123;<span class="keyword">return</span> x;&#125;</span><br><span class="line">(<span class="built_in">num</span> x, [<span class="built_in">int</span> step]) =&gt; x + setp;</span><br><span class="line">(<span class="built_in">num</span> x, &#123;<span class="built_in">int</span> step&#125;) =&gt; x + setp;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 参数使用</span></span><br><span class="line"><span class="built_in">String</span> getDefaultMsg() =&gt; <span class="string">"Unknown Error!"</span>; <span class="comment">// 无参数</span></span><br><span class="line"><span class="built_in">String</span> getErrorMsg(Exception e) =&gt; e.toString();  <span class="comment">// 必须位置参数</span></span><br><span class="line"><span class="built_in">String</span> getErrorMsg([<span class="built_in">String</span> e]) =&gt; e ?? <span class="string">"Unknown Error!"</span>;  <span class="comment">// 可选位置参数</span></span><br><span class="line"><span class="built_in">String</span> getErrorMsg([Exception exp], [<span class="built_in">String</span> e]) =&gt; <span class="string">"<span class="subst">$&#123;exp.toString()&#125;</span>--<span class="subst">$e</span>"</span>;  <span class="comment">// 混合参数</span></span><br><span class="line"><span class="built_in">num</span> add1(&#123;<span class="built_in">num</span> a, <span class="built_in">num</span> b, <span class="built_in">num</span> c&#125;) &#123; <span class="comment">// 命名参数</span></span><br><span class="line">    <span class="keyword">return</span> a + b + c;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">num</span> add2(<span class="built_in">num</span> a,<span class="built_in">num</span> b, &#123;<span class="built_in">num</span> c, <span class="built_in">num</span> d&#125;) &#123; <span class="comment">// 可选命名参数位于后面</span></span><br><span class="line">    <span class="keyword">return</span> a + b + c + d;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">num</span> add3(<span class="built_in">num</span> a, <span class="built_in">num</span> b, [<span class="built_in">num</span> c=<span class="number">5</span>]) &#123; <span class="comment">// 可选位置默认参数位于后面</span></span><br><span class="line">    <span class="keyword">return</span> a + b + c;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">num</span> add3(<span class="built_in">num</span> a, <span class="built_in">num</span> b, <span class="built_in">num</span> c=<span class="number">5</span>) &#123; <span class="comment">// 可选命名默认参数位于后面</span></span><br><span class="line">    <span class="keyword">return</span> a + b + c;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 顶层函数</span></span><br><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">    <span class="built_in">print</span>(add1(c:<span class="number">1</span>,a:<span class="number">2</span>,b:<span class="number">3</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 内嵌函数</span></span><br><span class="line"><span class="built_in">int</span> fibonacci(<span class="built_in">int</span> n) &#123;</span><br><span class="line">    <span class="built_in">List</span>&lt;<span class="built_in">int</span>&gt; lastTwo(<span class="built_in">int</span> n) &#123;</span><br><span class="line">        <span class="keyword">if</span> (n &lt; <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> &lt;<span class="built_in">int</span>&gt;[<span class="number">0</span>,<span class="number">1</span>];</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">var</span> p = lastTwo(n<span class="number">-1</span>);</span><br><span class="line">            <span class="keyword">return</span> &lt;<span class="built_in">int</span>&gt;[p[<span class="number">1</span>],p[<span class="number">0</span>]+p[<span class="number">1</span>]];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> lastTwo(n)[<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Number</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="built_in">int</span> getValue() =&gt; <span class="number">100</span>;  <span class="comment">// 静态函数</span></span><br><span class="line">    <span class="built_in">String</span> _name; <span class="comment">// 私有变量</span></span><br><span class="line">    <span class="built_in">int</span> _age;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">void</span> PrintInfo() &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"<span class="subst">$&#123;<span class="keyword">this</span>._name&#125;</span>---<span class="subst">$&#123;<span class="keyword">this</span>._age&#125;</span>"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> _run() &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"私有函数"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    execRun() &#123;</span><br><span class="line">        <span class="keyword">this</span>._run();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>编程语言</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>C</tag>
        <tag>C++</tag>
        <tag>Java</tag>
        <tag>Go</tag>
        <tag>Rust</tag>
        <tag>Dart</tag>
      </tags>
  </entry>
  <entry>
    <title>C、C++、Java、Python、Go、Rust、Dart控制原语</title>
    <url>/title/5ad75c9d/</url>
    <content><![CDATA[<p><img src="https://s1.ax1x.com/2020/11/08/BTBsJI.png" alt="cpygorsdart"></p>
<a id="more"></a>

<p>本文为七种语言对比学习的第八篇：流程控制原语。</p>
<p>流程控制原语，主要管理代码执行逻辑和路径，包括判断，跳转，循环，错误与异常。无论是面向对象还是面向过程，流程控制都必不可少。</p>
<h1 id="C流程控制原语-无错误处理"><a href="#C流程控制原语-无错误处理" class="headerlink" title="C流程控制原语[无错误处理]"></a>C流程控制原语[无错误处理]</h1><ul>
<li>if else </li>
<li>switch case</li>
<li>?:</li>
<li>for </li>
<li>while </li>
<li>do while </li>
<li>goto continue break</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line"></span><br><span class="line">int main() </span><br><span class="line">&#123;</span><br><span class="line">    int num;</span><br><span class="line">    printf(&quot;Please enter a numer:&quot;);</span><br><span class="line">    scanf(&quot;%d&quot;, &amp;num);</span><br><span class="line"></span><br><span class="line">    if (num &gt; 0)</span><br><span class="line">        printf(&quot;Greater than zero\n&quot;);</span><br><span class="line">    else if (num &lt; 0)</span><br><span class="line">        printf(&quot;Less than zero\n&quot;);</span><br><span class="line">    else </span><br><span class="line">        printf(&quot;Equal to zero\n&quot;);</span><br><span class="line"></span><br><span class="line">    switch (num) &#123;</span><br><span class="line">        case 0:</span><br><span class="line">            printf(&quot;Zero\n&quot;);</span><br><span class="line">            break;</span><br><span class="line">        case 1:</span><br><span class="line">            printf(&quot;One\n&quot;);</span><br><span class="line">            break;</span><br><span class="line">        default:</span><br><span class="line">            printf(&quot;Other&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    (num % 2 == 0) ? printf(&quot;Even\n&quot;):printf(&quot;Odd\n&quot;);</span><br><span class="line"></span><br><span class="line">    int i;</span><br><span class="line">    for (i = 0; i &lt; num; i++) &#123;</span><br><span class="line">        if (i % 2 == 0)</span><br><span class="line">            continue;</span><br><span class="line">        printf(&quot;%d&quot;,i);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    while (num &gt; 0)</span><br><span class="line">        printf(&quot;%d&quot;, 2*num--);</span><br><span class="line"></span><br><span class="line">    do &#123;</span><br><span class="line">        printf(&quot;%d&quot;, 3*num++);</span><br><span class="line">    &#125; while (num &lt;= 0);</span><br><span class="line"></span><br><span class="line">    LOOP: if (num &lt; 10) &#123;</span><br><span class="line">        printf(&quot;%d&quot;, num++);</span><br><span class="line">        goto LOOP;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="C-流程控制原语"><a href="#C-流程控制原语" class="headerlink" title="C++流程控制原语"></a>C++流程控制原语</h1><ul>
<li>if else </li>
<li>switch case</li>
<li>try catch throw</li>
<li>?:</li>
<li>for </li>
<li>while </li>
<li>do while </li>
<li>goto continue break</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">int main() </span><br><span class="line">&#123;</span><br><span class="line">    int num;</span><br><span class="line">    cout &lt;&lt; &quot;Please enter a numer: &quot;;</span><br><span class="line">    cin &gt;&gt; num;</span><br><span class="line"></span><br><span class="line">    if (num &gt; 0)</span><br><span class="line">        cout &lt;&lt; &quot;Greater than zero&quot; &lt;&lt; endl;</span><br><span class="line">    else if (num &lt; 0)</span><br><span class="line">        cout &lt;&lt; &quot;Less than zero&quot; &lt;&lt; endl;</span><br><span class="line">    else</span><br><span class="line">        cout &lt;&lt; &quot;Equal to zero&quot; &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    switch (num) &#123;</span><br><span class="line">        case 0:</span><br><span class="line">            cout &lt;&lt; &quot;Zero&quot; &lt;&lt; endl;</span><br><span class="line">            break;</span><br><span class="line">        case 1:</span><br><span class="line">            cout &lt;&lt; &quot;One&quot; &lt;&lt; endl;</span><br><span class="line">            break;</span><br><span class="line">        default:</span><br><span class="line">            cout &lt;&lt; &quot;Other&quot; &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    try &#123;</span><br><span class="line">        if ( num == 0 ) </span><br><span class="line">            throw -1;</span><br><span class="line">        cout &lt;&lt; 100.0 / num &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    catch (double d)</span><br><span class="line">        cout &lt;&lt; &quot;catch(double) &quot; &lt;&lt; d &lt;&lt; endl;</span><br><span class="line">    catch (int e)</span><br><span class="line">        cout &lt;&lt; &quot;catch(double) &quot; &lt;&lt; e &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    (num % 2 == 0) ? cout &lt;&lt; &quot;Even\n&quot; : cout &lt;&lt;  &quot;Odd\n&quot;;</span><br><span class="line"></span><br><span class="line">    int i;</span><br><span class="line">    for (i = 0; i &lt; num; i++) &#123;</span><br><span class="line">        if (i % 2 == 0)</span><br><span class="line">            continue;</span><br><span class="line">        cout &lt;&lt; i;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    while (num &gt; 0)</span><br><span class="line">        cout &lt;&lt; 2*num-- ;</span><br><span class="line"></span><br><span class="line">    do &#123;</span><br><span class="line">        cout &lt;&lt; 3*num++;</span><br><span class="line">    &#125; while (num &lt;= 0);</span><br><span class="line"></span><br><span class="line">    LOOP: if (num &lt; 10) &#123;</span><br><span class="line">        cout &lt;&lt; num++;</span><br><span class="line">        goto LOOP;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="Java流程控制原语"><a href="#Java流程控制原语" class="headerlink" title="Java流程控制原语"></a>Java流程控制原语</h1><ul>
<li>if else</li>
<li>for foreach do while</li>
<li>switch case</li>
<li>continue break</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hellowd</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> num;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Hellowd</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Hello world"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        num = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (num &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">"Greater than zero"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (num &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">"Less than zero"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"Equal to zero"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        switchFunc();</span><br><span class="line">        exceptionFunc();</span><br><span class="line">        forStringFunc();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">switchFunc</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">switch</span> (num) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">                System.out.println(<span class="string">"Zero"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                System.out.println(<span class="string">"One"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                System.out.println(<span class="string">"Other"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">exceptionFunc</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (num == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> XxxException();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">"%f"</span>, <span class="number">100.0</span> / num);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (DivisionByZeroException ze) &#123;</span><br><span class="line">            System.out.println(e);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"Done"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">forStringFunc</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String res = (num % <span class="number">2</span> == <span class="number">0</span>) ? <span class="string">"Even"</span> : <span class="string">"Odd"</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; num; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(i);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (num &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            System.out.println(<span class="number">2</span>*num);</span><br><span class="line">            num--;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            System.out.println(<span class="number">3</span>*num);</span><br><span class="line">            num++;</span><br><span class="line">        &#125; <span class="keyword">while</span> (num &lt;= <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="Python流程控制原语"><a href="#Python流程控制原语" class="headerlink" title="Python流程控制原语"></a>Python流程控制原语</h1><ul>
<li>if elif else</li>
<li>for in range</li>
<li>for else</li>
<li>while</li>
<li>while else</li>
<li>continue break pass </li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3 </span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line">num = int(input(<span class="string">"Please enter a numer:"</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> num &gt; <span class="number">0</span>:</span><br><span class="line">    print(<span class="string">"Greater than zero"</span>)</span><br><span class="line"><span class="keyword">elif</span> num &lt; <span class="number">0</span>:</span><br><span class="line">    print(<span class="string">"Less than zero"</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">"Equal to zero"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(num):</span><br><span class="line">    <span class="keyword">if</span> i % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    print(i)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> [<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>]:</span><br><span class="line">    print(i)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(i)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> num &lt; <span class="number">10</span>:</span><br><span class="line">    num += <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> num &gt; <span class="number">8</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> num % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(num)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> num &gt; <span class="number">0</span>:</span><br><span class="line">    <span class="keyword">if</span> num % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">        num -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">    print(<span class="number">2</span>*num)</span><br><span class="line">    num -= <span class="number">1</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(num)</span><br></pre></td></tr></table></figure>

<h1 id="Go流程控制原语"><a href="#Go流程控制原语" class="headerlink" title="Go流程控制原语"></a>Go流程控制原语</h1><ul>
<li>if else</li>
<li>switch case default fallthrough</li>
<li>select case default</li>
<li>for</li>
<li>goto continue break</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span> </span><br><span class="line">    <span class="string">"os"</span> </span><br><span class="line">    <span class="string">"strconv"</span> </span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> n stirng</span><br><span class="line">    fmt.Print(<span class="string">"Please enter a numer:"</span>)</span><br><span class="line">    fmt.Scanln(&amp;n)</span><br><span class="line"></span><br><span class="line">    num, err := strconv.Atoi(n)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        e = errors.New(<span class="string">"convert error"</span>)</span><br><span class="line">        fmt.Println(e)</span><br><span class="line">        os.Exit(<span class="number">1</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> num &gt; <span class="number">0</span> &#123;</span><br><span class="line">        fmt.Println(<span class="string">"Greater than zero"</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> num &lt; <span class="number">0</span> &#123;</span><br><span class="line">        fmt.Println(<span class="string">"Less than zero"</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        fmt.Println(<span class="string">"Equal to zero\n"</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">switch</span> num &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">            fmt.Println(<span class="string">"Zero"</span>);</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">            fmt.Println(<span class="string">"One"</span>)</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            fmt.Println(<span class="string">"Other"</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> nums <span class="keyword">interface</span>&#123;&#125; = num</span><br><span class="line">    <span class="keyword">switch</span> nums.(<span class="keyword">type</span>) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="literal">nil</span>:</span><br><span class="line">            fmt.Println(<span class="string">"Nil"</span>)</span><br><span class="line">        <span class="keyword">case</span> <span class="keyword">int</span>:</span><br><span class="line">            fmt.Println(<span class="string">"Int"</span>)</span><br><span class="line">        <span class="keyword">case</span> <span class="keyword">float64</span>:</span><br><span class="line">            fmt.Println(<span class="string">"Float64"</span>)</span><br><span class="line">        <span class="keyword">case</span> <span class="keyword">bool</span>, <span class="keyword">string</span>:</span><br><span class="line">            fmt.Println(<span class="string">"Bool or String"</span>)</span><br><span class="line">            <span class="keyword">fallthrough</span></span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            fmt.Println(<span class="string">"Unknown"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> c1, c2 <span class="keyword">chan</span> <span class="keyword">int</span></span><br><span class="line">    <span class="keyword">select</span> &#123;</span><br><span class="line">        <span class="keyword">case</span> &lt;- c1:</span><br><span class="line">            fmt.Println(<span class="string">"Recieved c1"</span>)</span><br><span class="line">        <span class="keyword">case</span> &lt;- c2:</span><br><span class="line">            fmt.Println(<span class="string">"Recieved c2"</span>)</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            fmt.Println(<span class="string">"Not recieved"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; num; i++ &#123;</span><br><span class="line">        <span class="keyword">if</span> i % <span class="number">2</span> == <span class="number">0</span> &#123;</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        &#125;</span><br><span class="line">        fmt.Println(i)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> _, v := <span class="keyword">range</span>([]<span class="keyword">int</span>&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;) &#123;</span><br><span class="line">        fmt.Println(v)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> num &lt;= <span class="number">0</span> &#123;</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        &#125;</span><br><span class="line">        fmt.Println(<span class="number">2</span>*num)</span><br><span class="line">        num--</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    LOOP: <span class="keyword">if</span> num &lt; <span class="number">10</span> &#123;</span><br><span class="line">        fmt.Println(num)</span><br><span class="line">        num++</span><br><span class="line">        <span class="keyword">goto</span> LOOP</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="Rust流程控制原语"><a href="#Rust流程控制原语" class="headerlink" title="Rust流程控制原语"></a>Rust流程控制原语</h1><ul>
<li>if else</li>
<li>for in</li>
<li>while</li>
<li>loop break</li>
</ul>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">use</span> std::io;</span><br><span class="line"><span class="keyword">use</span> std::fs::File;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> line = <span class="built_in">String</span>::new();</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"Please enter a numer:"</span>);</span><br><span class="line">    <span class="keyword">let</span> _ = io::stdin()</span><br><span class="line">        .read_line(&amp;<span class="keyword">mut</span> line)</span><br><span class="line">        .unwrap();</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> num:<span class="built_in">i32</span> = line</span><br><span class="line">        .trim()</span><br><span class="line">        .parse::&lt;<span class="built_in">i32</span>&gt;()</span><br><span class="line">        .unwrap(); </span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> num &gt; <span class="number">0</span> &#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">"Greater than zero"</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> num &lt; <span class="number">0</span> &#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">"Less than zero"</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">"Equal to zero"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span>..num &#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">"&#123;&#125;"</span>,i);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> num &gt; <span class="number">0</span> &#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="number">2</span>*num);</span><br><span class="line">        num -= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">loop</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> num &gt; <span class="number">10</span> &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">"&#123;&#125;"</span>,num);</span><br><span class="line">        num += <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="Dart流程控制原语"><a href="#Dart流程控制原语" class="headerlink" title="Dart流程控制原语"></a>Dart流程控制原语</h1><ul>
<li>if else</li>
<li>switch case default</li>
<li>for</li>
<li>for in </li>
<li>while</li>
<li>do while</li>
<li>continue break</li>
<li>?: ?? ??=</li>
</ul>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">"dart:io"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main() </span><br><span class="line">&#123;</span><br><span class="line">    stdout.write(<span class="string">"Please enter a numer:"</span>);</span><br><span class="line">    <span class="keyword">var</span> line = stdin.readLineSync();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> <span class="built_in">num</span> = <span class="built_in">int</span>.parse(line);</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">num</span> &gt; <span class="number">0</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"Greater than zero"</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">num</span> &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"Less than zero"</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"Equal to zero"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">switch</span> (<span class="built_in">num</span>) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0</span>: </span><br><span class="line">            <span class="built_in">print</span>(<span class="string">"Zero"</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">"One"</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">"Other"</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="built_in">num</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i % <span class="number">2</span> == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"<span class="subst">$&#123;i&#125;</span>"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">num</span>; i++) </span><br><span class="line">        <span class="built_in">print</span>(<span class="number">2</span>*i);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> obj = <span class="keyword">const</span>[<span class="number">12</span>,<span class="number">13</span>,<span class="number">14</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> prop <span class="keyword">in</span> obj)</span><br><span class="line">        <span class="built_in">print</span>(prop);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">num</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="number">2</span>*<span class="built_in">num</span>);</span><br><span class="line">        <span class="built_in">num</span> -= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">num</span>);</span><br><span class="line">        <span class="built_in">num</span> += <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">num</span> &lt; <span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">    LOOP1: </span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">num</span> &lt; <span class="number">10</span>) &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">num</span>);</span><br><span class="line">        <span class="built_in">num</span> += <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">break</span> LOOP1;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    LOOP2:</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="built_in">num</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i % <span class="number">3</span> == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">continue</span> LOOP2;</span><br><span class="line">        <span class="built_in">print</span>(i);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> res = <span class="built_in">num</span> &gt; <span class="number">0</span> ? <span class="string">"greater"</span>:<span class="string">"less or equal"</span>;</span><br><span class="line">    <span class="built_in">print</span>(res);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">num</span> ??= <span class="number">1</span>; </span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">num</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> y = <span class="built_in">num</span> ?? <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">print</span>(y);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>编程语言</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>C</tag>
        <tag>C++</tag>
        <tag>Java</tag>
        <tag>Go</tag>
        <tag>Rust</tag>
        <tag>Dart</tag>
      </tags>
  </entry>
  <entry>
    <title>C、C++、Java、Python、Go、Rust、Dart运算符</title>
    <url>/title/ed051314/</url>
    <content><![CDATA[<p><img src="https://s1.ax1x.com/2020/11/07/BIFNv9.png" alt="cpygorsdart"></p>
<a id="more"></a>

<p>本文为七种语言对比学习的第七篇：运算符。</p>
<p>运算符是一种告诉编译器/解释器执行特定数学，逻辑，关系等操作的符号。</p>
<h1 id="C运算符"><a href="#C运算符" class="headerlink" title="C运算符"></a>C运算符</h1><ul>
<li>算术运算符 [+ - * / % ++ –]</li>
<li>关系运算符 [== != &gt; &gt;= &lt; &lt;=]</li>
<li>逻辑运算符 [&amp;&amp; || !]</li>
<li>位运算符是 [&amp; | ^ &lt;&lt; &gt;&gt;]</li>
<li>赋值运算符 [= += -= *= /= %= &lt;&lt;= &gt;&gt;= &amp;= |= ^=]</li>
<li>其他运算符 [sizeof  &amp;(取址)  *(取值)  ?:]</li>
</ul>
<h1 id="C-运算符"><a href="#C-运算符" class="headerlink" title="C++运算符"></a>C++运算符</h1><ul>
<li>算术运算符 [+ - * / % ++ –]</li>
<li>关系运算符 [== != &gt; &gt;= &lt; &lt;=]</li>
<li>逻辑运算符 [&amp;&amp; || !]</li>
<li>位运算符是 [&amp; | ^ &lt;&lt; &gt;&gt;]</li>
<li>赋值运算符 [= += -= *= /= %= &lt;&lt;= &gt;&gt;= &amp;= |= ^=]</li>
<li>其他运算符 [sizeof  &amp;(取址)  *(取值)  ?: (可做左值)]</li>
</ul>
<h1 id="Java运算符"><a href="#Java运算符" class="headerlink" title="Java运算符"></a>Java运算符</h1><ul>
<li>算术运算符 [+ - * / % ++ –]</li>
<li>关系运算符 [== != &gt; &gt;= &lt; &lt;=]</li>
<li>逻辑运算符 [&amp;&amp; || !]</li>
<li>位运算符是 [&amp; | ^ ~ &lt;&lt; &gt;&gt; &gt;&gt;&gt;]</li>
<li>赋值运算符 [= += -= *= /= %= &lt;&lt;= &gt;&gt;= &amp;= |= ^=]</li>
<li>其他运算符 [?: instanceof]</li>
</ul>
<h1 id="Python运算符"><a href="#Python运算符" class="headerlink" title="Python运算符"></a>Python运算符</h1><ul>
<li>算术运算符 [+ - * / % // **]</li>
<li>关系运算符 [== != &gt; &gt;= &lt; &lt;=]</li>
<li>逻辑运算符 [and or not]</li>
<li>位运算符是 [&amp; | ^ ~ &lt;&lt; &gt;&gt;]</li>
<li>赋值运算符 [= := += -= *= /= %= **= //= &lt;&lt;= &gt;&gt;= &amp;= |= ^=]</li>
<li>其他运算符 [is, is not,  in, not in]]</li>
</ul>
<h1 id="Go运算符"><a href="#Go运算符" class="headerlink" title="Go运算符"></a>Go运算符</h1><ul>
<li>算术运算符 [+ - * / % ++ –]</li>
<li>关系运算符 [== != &gt; &gt;= &lt; &lt;=]</li>
<li>逻辑运算符 [&amp;&amp; || !]</li>
<li>位运算符是 [&amp; | ^ &lt;&lt; &gt;&gt;]</li>
<li>赋值运算符 [= += -= *= /= %= &lt;&lt;= &gt;&gt;= &amp;= |= ^=]</li>
<li>其他运算符 [&amp;(取址)  *(取值)]</li>
</ul>
<h1 id="Rust运算符"><a href="#Rust运算符" class="headerlink" title="Rust运算符"></a>Rust运算符</h1><ul>
<li>算术运算符 [+ - * / %]</li>
<li>关系运算符 [== != &gt; &gt;= &lt; &lt;=]</li>
<li>逻辑运算符 [&amp;&amp; || !]</li>
<li>位运算符是 [&amp; | ^ &lt;&lt; &gt;&gt;]</li>
<li>赋值运算符 [= += -= *= /= %= &lt;&lt;= &gt;&gt;= &amp;= |= ^=]</li>
<li>其他运算符 [-(取负) !(取反) &amp;(租借)  *(取值/指针) -&gt; 函数闭包 ?(错误) as(类型转换)]</li>
</ul>
<h1 id="Dart运算符"><a href="#Dart运算符" class="headerlink" title="Dart运算符"></a>Dart运算符</h1><ul>
<li>算术运算符 [+ - * / ~/ % ++ –]</li>
<li>关系运算符 [== != &gt; &gt;= &lt; &lt;= as is is!] </li>
<li>逻辑运算符 [&amp;&amp; || !]</li>
<li>位运算符是 [&amp; | ^ ~ &lt;&lt; &gt;&gt;]</li>
<li>赋值运算符 [= += -= *= /= ~/= %= ??= &lt;&lt;= &gt;&gt;= &amp;= |= ^=]</li>
<li>其他运算符 [-(取负) ?: ?? ?. ..]</li>
</ul>
<h1 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h1><p>对比发现，下面这些运算符是所有语言都有的，且用法也一样。</p>
<ul>
<li>算术运算符 [+ - * / %]</li>
<li>关系运算符 [== != &gt; &gt;= &lt; &lt;=]</li>
<li>逻辑运算符 [&amp;&amp; || !]</li>
<li>位运算符是 [&amp; | ^ &lt;&lt; &gt;&gt;]</li>
<li>赋值运算符 [= += -= *= /= %= &lt;&lt;= &gt;&gt;= &amp;= |= ^=]</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// operators.c C中使用运算符 </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> b = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">int</span> c1, c2, c3, c4, c5, c6 = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    c1 = a + b;</span><br><span class="line">    c2 = a - b;</span><br><span class="line">    c3 = a * b;</span><br><span class="line">    c4 = b / a;</span><br><span class="line">    c5 = a % b;</span><br><span class="line">    c6 += c5;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (a == b) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"a == b\n"</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"a != b\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> !a &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"false\n"</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"ture\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> b &gt; <span class="number">0</span> &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, a&lt;&lt;<span class="number">1</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, b&lt;&lt;<span class="number">1</span>);</span><br><span class="line">        a *= <span class="number">2</span>;</span><br><span class="line">        b -= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (c1 &amp;&amp; c2) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"ture\n"</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"false\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, c3 &lt;&lt; <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, c4 &gt;&gt; <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, c4 &amp; c5);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, c5 | c6);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, c5 ^ c6);</span><br><span class="line"></span><br><span class="line">    c6 &amp;= c5;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, c6);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>编程语言</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>C</tag>
        <tag>C++</tag>
        <tag>Java</tag>
        <tag>Go</tag>
        <tag>Rust</tag>
        <tag>Dart</tag>
      </tags>
  </entry>
  <entry>
    <title>C、C++、Java、Python、Go、Rust、Dart常量和变量</title>
    <url>/title/bf474c89/</url>
    <content><![CDATA[<p><img src="https://s1.ax1x.com/2020/11/08/Bo6QFH.png" alt="cpygorsdart"></p>
<a id="more"></a>

<p>本文为七种语言对比学习的第六篇：常量和变量。</p>
<p>编程语言中的量是一种表述和存储模型，它表征了某个对象或事物在内存中的保存和解释方式。这些量即有值又有类型，同时还有保存地址。常量就是值和类型均不能变的量，相反，变量的值可以变，但类型不可变，除非重定义。</p>
<h1 id="C常量和变量"><a href="#C常量和变量" class="headerlink" title="C常量和变量"></a>C常量和变量</h1><p>C中常量</p>
<ul>
<li>define 定义</li>
<li>const 定义</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 常量定义方式</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> G 9.8   <span class="comment">// 没有;号</span></span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> M = <span class="number">54</span>;</span><br></pre></td></tr></table></figure>

<p>C中变量</p>
<ul>
<li>type variable 定义方式1</li>
<li>type variable = value 定义方式2</li>
<li>type variable1, variable2 定义方式3</li>
<li>type variable1 = value1, variable2 = value2 定义方式4</li>
<li>extern type variable 定义方式5</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// C中变量类型</span></span><br><span class="line"><span class="keyword">char</span> <span class="keyword">int</span> <span class="keyword">float</span> <span class="keyword">double</span></span><br><span class="line"><span class="keyword">enum</span> <span class="class"><span class="keyword">struct</span> <span class="title">union</span></span></span><br><span class="line"><span class="class"><span class="title">array</span></span></span><br><span class="line"><span class="class"><span class="title">pointer</span></span></span><br><span class="line"><span class="class"><span class="title">void</span></span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">// <span class="title">C</span>变量定义及初始化</span></span><br><span class="line"><span class="class"><span class="title">int</span> <span class="title">i</span>;</span></span><br><span class="line"><span class="keyword">int</span> i, j, k;</span><br><span class="line"><span class="keyword">int</span> c = <span class="number">3</span>, d = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">char</span> l = <span class="string">"s"</span>;</span><br><span class="line"><span class="keyword">float</span> m = <span class="number">2.0</span>;</span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">int</span> T;</span><br><span class="line"></span><br><span class="line"><span class="keyword">enum</span> WEEK&#123; MON = <span class="number">1</span>,Tue,Wed,Thu,Fri,Sat,Sun&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> a;</span><br><span class="line">    <span class="keyword">char</span> b;</span><br><span class="line">    <span class="keyword">double</span> c;</span><br><span class="line">&#125;s1;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Books</span> &#123;</span></span><br><span class="line">    <span class="keyword">char</span> title[<span class="number">50</span>];</span><br><span class="line">    <span class="keyword">char</span> author[<span class="number">50</span>];</span><br><span class="line">    <span class="keyword">char</span> subject[<span class="number">50</span>];</span><br><span class="line">    <span class="keyword">int</span> book_id;</span><br><span class="line">&#125;k1;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Books</span> <span class="title">t1</span>, <span class="title">t2</span>[20], *<span class="title">t3</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> a;</span><br><span class="line">    <span class="keyword">char</span> b;</span><br><span class="line">    <span class="keyword">double</span> c;</span><br><span class="line">&#125;Simple;</span><br><span class="line">Simple u1, u2[<span class="number">20</span>], *u3;</span><br><span class="line"></span><br><span class="line">unio Data &#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">float</span> f;</span><br><span class="line">    <span class="keyword">char</span> str[<span class="number">20</span>];</span><br><span class="line">&#125;data;</span><br><span class="line"></span><br><span class="line"><span class="keyword">union</span> Data newData; <span class="comment">// 一次最好只使用一个变量</span></span><br><span class="line">newData.i = <span class="number">10</span>;</span><br><span class="line">newData.f = <span class="number">12.5</span>;</span><br><span class="line"><span class="built_in">strcpy</span>(newData.str <span class="string">"C programming"</span>);</span><br></pre></td></tr></table></figure>

<h1 id="C-常量和变量"><a href="#C-常量和变量" class="headerlink" title="C++常量和变量"></a>C++常量和变量</h1><p>C++中常量</p>
<ul>
<li>define 定义</li>
<li>const 定义 (多用)</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 常量定义方式</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> G 9.8   <span class="comment">// 没有;号</span></span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> M = <span class="number">54</span>;</span><br></pre></td></tr></table></figure>

<p>C++中变量</p>
<ul>
<li>type variable 定义方式1</li>
<li>type variable = value 定义方式2</li>
<li>type variable {value} 定义方式3</li>
<li>type variable1, variable2 定义方式4</li>
<li>type variable1 = value1, variable2 = value2 定义方式5</li>
<li>extern type variable 定义方式6</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// C++中变量类型</span></span><br><span class="line"><span class="keyword">char</span> <span class="keyword">int</span> <span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">float</span> <span class="keyword">double</span></span><br><span class="line"><span class="keyword">enum</span> <span class="class"><span class="keyword">struct</span> <span class="title">union</span></span></span><br><span class="line"><span class="class"><span class="title">array</span></span></span><br><span class="line"><span class="class"><span class="title">pointer</span></span></span><br><span class="line"><span class="class"><span class="title">void</span></span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">// <span class="title">C</span>++变量定义及初始化</span></span><br><span class="line"><span class="class"><span class="title">int</span> <span class="title">i</span>;</span></span><br><span class="line"><span class="keyword">int</span> i, j, k;</span><br><span class="line"><span class="keyword">int</span> c = <span class="number">3</span>, d = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">char</span> z &#123;<span class="string">"s"</span>&#125;;</span><br><span class="line"><span class="keyword">char</span> chs[] &#123;<span class="string">"a"</span>,<span class="string">"b"</span>,<span class="string">"c"</span>&#125;;</span><br><span class="line"><span class="keyword">float</span> m &#123; <span class="number">2.0</span> &#125;;</span><br><span class="line"><span class="keyword">char</span> *s = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">3</span>];</span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">int</span> T;</span><br><span class="line"></span><br><span class="line"><span class="keyword">enum</span> WEEK&#123; MON = <span class="number">1</span>,Tue,Wed,Thu,Fri,Sat,Sun&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> a;</span><br><span class="line">    <span class="keyword">char</span> b;</span><br><span class="line">    <span class="keyword">double</span> c;</span><br><span class="line">&#125;s1;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Books</span> &#123;</span></span><br><span class="line">    <span class="keyword">char</span> title[<span class="number">50</span>];</span><br><span class="line">    <span class="keyword">char</span> author[<span class="number">50</span>];</span><br><span class="line">    <span class="keyword">char</span> subject[<span class="number">50</span>];</span><br><span class="line">    <span class="keyword">int</span> book_id;</span><br><span class="line">&#125;k1;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Books</span> <span class="title">t1</span>, <span class="title">t2</span>[20], *<span class="title">t3</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> a;</span><br><span class="line">    <span class="keyword">char</span> b;</span><br><span class="line">    <span class="keyword">double</span> c;</span><br><span class="line">&#125;Simple;</span><br><span class="line">Simple u1, u2[<span class="number">20</span>], *u3;</span><br><span class="line"></span><br><span class="line">unio Data &#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">float</span> f;</span><br><span class="line">    <span class="keyword">char</span> str[<span class="number">20</span>];</span><br><span class="line">&#125;data;</span><br><span class="line"><span class="keyword">union</span> Data newData;</span><br><span class="line">newData.i = <span class="number">9</span>;</span><br><span class="line">newData.f = <span class="number">11.5</span>;</span><br><span class="line"><span class="built_in">strcpy</span>(newData.str <span class="string">"C++ programming"</span>);</span><br></pre></td></tr></table></figure>

<h1 id="Java常量和变量"><a href="#Java常量和变量" class="headerlink" title="Java常量和变量"></a>Java常量和变量</h1><p>Java中常量定义方式</p>
<ul>
<li>final type varname = value;</li>
<li>final static type varname = value;</li>
<li>public final type varname = value;</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 常量定义方式</span></span><br><span class="line">* <span class="keyword">final</span> <span class="keyword">double</span> G = <span class="number">9.8</span>;</span><br><span class="line">* <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">int</span> M = <span class="number">54</span>;</span><br><span class="line">* <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">double</span> PI = <span class="number">3.141592653</span>;</span><br></pre></td></tr></table></figure>

<p>Java中变量</p>
<ul>
<li>type variable 定义方式1</li>
<li>type variable = value 定义方式2</li>
<li>type variable {value} 定义方式3</li>
<li>type variable1, variable2 定义方式4</li>
<li>type variable1 = value1, variable2 = value2 定义方式5</li>
<li>extern type variable 定义方式6</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Java中变量类型</span></span><br><span class="line"><span class="keyword">char</span> <span class="keyword">int</span> <span class="keyword">short</span> <span class="keyword">long</span> <span class="keyword">float</span> <span class="keyword">double</span></span><br><span class="line"><span class="keyword">enum</span> array</span><br><span class="line">String</span><br><span class="line"></span><br><span class="line"><span class="comment">// Java变量定义及初始化</span></span><br><span class="line"><span class="keyword">char</span> c = <span class="string">'a'</span>;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">int</span> i, j, k;</span><br><span class="line"><span class="keyword">int</span> c = <span class="number">3</span>, d = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">short</span> a = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">float</span> f  = <span class="number">2.0</span>;</span><br><span class="line"><span class="keyword">double</span> d = <span class="number">2.3</span>;</span><br><span class="line">String [] arr = &#123;<span class="string">"aa"</span>, <span class="string">"bbb"</span>, <span class="string">"ccc"</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">enum</span> WEEK &#123; </span><br><span class="line">    MON,Tue,Wed,Thu,Fri,Sat,Sun;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="Python常量和变量"><a href="#Python常量和变量" class="headerlink" title="Python常量和变量"></a>Python常量和变量</h1><p>Python中并没有C/C++中那种命名常量，一切都看使用形式。数字、字符串、布尔值、空值等都是常量。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">// 常量定义方式</span><br><span class="line">PI = <span class="number">3.141592653</span></span><br><span class="line">NAME = <span class="string">"Shieber"</span></span><br><span class="line">YES = <span class="literal">True</span></span><br><span class="line">RESULT = <span class="literal">None</span></span><br><span class="line">PERSON = (<span class="string">"Shieber"</span>, <span class="number">24</span>, <span class="number">172</span>)</span><br><span class="line"></span><br><span class="line">// 变量定义方式</span><br><span class="line">age = <span class="number">24</span></span><br><span class="line">name = [<span class="string">"Shieber"</span>,<span class="string">"Kew"</span>,<span class="string">"Kim"</span>]</span><br><span class="line">dics = &#123;<span class="string">"a"</span>:<span class="number">1</span>,<span class="string">"b"</span>:<span class="number">2</span>,<span class="string">"c"</span>:<span class="number">3</span>&#125;</span><br><span class="line">sets = &#123;<span class="string">"a"</span>,<span class="string">"b"</span>,<span class="string">"c"</span>&#125;</span><br></pre></td></tr></table></figure>

<h1 id="Go常量和变量"><a href="#Go常量和变量" class="headerlink" title="Go常量和变量"></a>Go常量和变量</h1><p>Go中基本变量包括布尔型，数字型，字符串，它的定义和C/C++一样使用const。</p>
<p>Go中常量</p>
<ul>
<li>const 定义</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 常量定义方式</span></span><br><span class="line"><span class="keyword">const</span> i <span class="keyword">int</span> = <span class="number">100</span></span><br><span class="line"><span class="keyword">const</span> y <span class="keyword">bool</span> = <span class="literal">true</span></span><br><span class="line"><span class="keyword">const</span> b <span class="keyword">string</span> = <span class="string">"abc"</span></span><br><span class="line"><span class="keyword">const</span> b = <span class="string">"abc"</span></span><br><span class="line"><span class="keyword">const</span> a, b = <span class="string">"a"</span>, <span class="string">"b"</span></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">    a = <span class="literal">iota</span>      <span class="comment">// 0</span></span><br><span class="line">    b             <span class="comment">// 1</span></span><br><span class="line">    _             <span class="comment">// 2</span></span><br><span class="line">    d             <span class="comment">// 3</span></span><br><span class="line">    e = <span class="number">1</span> &lt;&lt; <span class="literal">iota</span> <span class="comment">// 16</span></span><br><span class="line">    f             <span class="comment">// 32 </span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p>Go中变量</p>
<ul>
<li>var定义</li>
<li>:= 定义</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 变量定义方式</span></span><br><span class="line"><span class="keyword">var</span> a <span class="keyword">int</span></span><br><span class="line">a = <span class="number">100</span></span><br><span class="line"><span class="keyword">var</span> bar [<span class="number">10</span>]<span class="keyword">float32</span></span><br><span class="line">baz := [...]&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> m <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">int</span>      </span><br><span class="line">m = <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">int</span>)  <span class="comment">//映射</span></span><br><span class="line">n := <span class="built_in">make</span>([]<span class="keyword">int</span>, <span class="number">10</span>, <span class="number">30</span>)  <span class="comment">//切片</span></span><br><span class="line">q := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>, <span class="number">10</span>)   <span class="comment">//通道</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> person <span class="keyword">struct</span> &#123;</span><br><span class="line">    Name: <span class="keyword">string</span></span><br><span class="line">    Gender: <span class="keyword">string</span></span><br><span class="line">    Age: <span class="keyword">int</span></span><br><span class="line">    Address: <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">p := person&#123;</span><br><span class="line">    Name: <span class="string">"Shieber"</span>,</span><br><span class="line">    Gender: <span class="string">"Male"</span>,</span><br><span class="line">    Age: <span class="number">24</span>,</span><br><span class="line">    Address: <span class="string">"CD"</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> c, d, e <span class="keyword">int</span></span><br><span class="line">c, d, e = <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> c, d, e  = <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span></span><br><span class="line">c, d, e := <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> s = <span class="string">"Shieber"</span></span><br><span class="line"><span class="keyword">var</span> s <span class="keyword">string</span> = <span class="string">"Shieber"</span></span><br><span class="line"></span><br><span class="line">s := <span class="string">"Shieber"</span></span><br></pre></td></tr></table></figure>

<h1 id="Rust常量和变量"><a href="#Rust常量和变量" class="headerlink" title="Rust常量和变量"></a>Rust常量和变量</h1><p>Rust中常量定义和C中相似，只是Rust加入了生命周期概念，和C++得智能指针有些类似，但Rust得这个概念比C++强大。</p>
<p>Rust中常量</p>
<ul>
<li>const 定义常量，类似C/C++中#define </li>
<li>static 定义全局变量，可当常量使用</li>
</ul>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> AGE:<span class="built_in">i32</span> = <span class="number">24</span>;</span><br><span class="line"><span class="keyword">const</span> NUM:<span class="built_in">f64</span> = <span class="number">3.0</span>;</span><br><span class="line"><span class="keyword">const</span> NUMS:[<span class="built_in">i32</span>:<span class="number">4</span>] = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> NAME:<span class="built_in">String</span> = <span class="string">"Shieber"</span></span><br></pre></td></tr></table></figure>

<p>Rust中变量</p>
<ul>
<li>let 定义，值不能变，但变量能重定义</li>
<li>let mut 定义，值能变，变量也能重定义</li>
<li>static mut 定义，静态变量，但值可变</li>
</ul>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 变量定义方式</span></span><br><span class="line"><span class="keyword">let</span> x:<span class="built_in">f64</span> = <span class="number">3.14</span>;</span><br><span class="line"><span class="keyword">let</span> y = <span class="number">6.28</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="keyword">mut</span> z = <span class="number">70000</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="keyword">mut</span> k: int64 = <span class="number">70000</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">mut</span> NUM:<span class="built_in">i32</span> = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">unsafe</span> &#123;</span><br><span class="line">    NUM += <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"Num:&#123;&#125;"</span>,NUM);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="Dart常量和变量"><a href="#Dart常量和变量" class="headerlink" title="Dart常量和变量"></a>Dart常量和变量</h1><p>Dart中常量</p>
<ul>
<li>const  定义并赋值</li>
<li>final  定义时可不赋值，但只能赋值一次</li>
</ul>
<p>final和const区别：final修饰的是变量，定义时可不赋值，但初始化赋值只能一次，之后就不再变，类似常量。而const一开始修饰的就必须是常量，且必须初始化。final用时才申请内存，const一开始就处理好了，所以速度要快些。</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> PI = <span class="number">3.141592653</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="built_in">double</span> F = <span class="number">2.0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> <span class="built_in">int</span> A; <span class="comment">//未初始化</span></span><br><span class="line">A = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> C = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">final</span> <span class="built_in">String</span> NAME = <span class="string">'Shieber'</span>; <span class="comment">// 可以加上类型</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> bar = <span class="keyword">const</span>[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="keyword">const</span> baz = <span class="keyword">const</span>[<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="built_in">int</span> x; <span class="comment">// 内部变量必须是final，因为类型不定</span></span><br><span class="line">    <span class="keyword">final</span> <span class="built_in">int</span> y;</span><br><span class="line">    <span class="keyword">const</span> Point(<span class="keyword">this</span>.x, <span class="keyword">this</span>.y); <span class="comment">// 返回必须是const</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Dart中变量</p>
<ul>
<li>var 定义</li>
<li>dynamic 定义，类型可变</li>
<li>type variable  定义</li>
</ul>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">'Shieber'</span>; <span class="comment">// 自动推导类型</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">dynamic</span> str = <span class="string">'Shieber'</span>;</span><br><span class="line">str = <span class="number">20</span>;            <span class="comment">// dynamic变量的类型可改变</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">String</span> str = <span class="string">'Shieber'</span>;</span><br><span class="line"><span class="built_in">String</span> s = <span class="string">'''</span></span><br><span class="line"><span class="string">Hello</span></span><br><span class="line"><span class="string">Dart</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">bool</span> y = <span class="keyword">true</span>;</span><br><span class="line"><span class="built_in">int</span> str = <span class="number">100</span>;</span><br><span class="line"><span class="built_in">double</span> c = <span class="number">2.0</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">List</span> l1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="keyword">var</span> l2 = <span class="keyword">const</span>[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]; <span class="comment">// const 可构造变量, l2可修改</span></span><br><span class="line"><span class="built_in">List</span> l3 =  <span class="keyword">new</span> <span class="built_in">List</span>();</span><br><span class="line">l3.add(<span class="string">'z'</span>);</span><br><span class="line">l3.add(<span class="string">'k'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">Map</span> m1 = &#123;</span><br><span class="line">    <span class="string">'Name'</span>: <span class="string">'Shieber'</span>,</span><br><span class="line">    <span class="string">'Age'</span>: <span class="number">24</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">Map</span> m2 = <span class="keyword">const</span>&#123;</span><br><span class="line">    <span class="string">'Name'</span>: <span class="string">'Shieber'</span>,</span><br><span class="line">    <span class="string">'Age'</span>: <span class="number">24</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">Map</span> m3 = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line">m3[<span class="string">'Name'</span>] = <span class="string">'Shieber'</span>;</span><br><span class="line">m3[<span class="string">'Age'</span>] = <span class="number">24</span>;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>编程语言</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>C</tag>
        <tag>C++</tag>
        <tag>Java</tag>
        <tag>Go</tag>
        <tag>Rust</tag>
        <tag>Dart</tag>
      </tags>
  </entry>
  <entry>
    <title>C、C++、Java、Python、Go、Rust、Dart数据类型及其转换</title>
    <url>/title/6a4fc2a2/</url>
    <content><![CDATA[<p><img src="https://s1.ax1x.com/2020/11/07/B5B37R.png" alt="cpygorsdart"></p>
<a id="more"></a>

<p>本文为七种语言对比学习的第五篇：数据类型及其转换规则。</p>
<h1 id="C语言数据类型"><a href="#C语言数据类型" class="headerlink" title="C语言数据类型"></a>C语言数据类型</h1><p>因为C是底层语言，所以它的数据类型偏底层，和内存联系在一起。</p>
<h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><p><strong>基本类型</strong></p>
<ul>
<li>字符类型 char  </li>
<li>数值类型 [signed/unsigned] short int long float double </li>
</ul>
<p><strong>派生类型</strong>  </p>
<ul>
<li>枚举体型 enum  </li>
<li>结构体型 struct  </li>
<li>联合体型 union  </li>
<li>数组类型 array  </li>
<li>函数类型 function </li>
</ul>
<p><strong>指针类型</strong></p>
<ul>
<li>指针类型 pointer </li>
</ul>
<p><strong>空类型</strong></p>
<ul>
<li>空类型 void</li>
</ul>
<h3 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h3><p>C语言中的数值数据会因为所处的代码上下文环境而发生类型转换，如降级，提升。</p>
<p>以下是C语言中数据类型转换的基本规则：</p>
<ul>
<li>强制转换格式为： (类型) (表达式)</li>
<li>在表达式中，参与运算的量的类型不同时会转换为同一类型</li>
<li>在表达式中，有符号和无符号的char和short类型将自动转换为int</li>
<li>在包含两种数据类型的任何运算中，较低级别类型会转为较高级别的数据类型</li>
<li>赋值语句中结果将转换为被赋值量类型，可能级别提升或者降级，提升无损，降级可能丢失数据</li>
<li>函数参数传递时，char和short转为int，float转为double，可通过函数原型指定以阻止提升的发生</li>
<li>数据类型级别高低顺序是long double、double、float、usigned long、long、unsigned int、int，当long和int具有相同大小时，unsigned int级别高于long</li>
</ul>
<h1 id="C-语言数据类型"><a href="#C-语言数据类型" class="headerlink" title="C++语言数据类型"></a>C++语言数据类型</h1><p>因为C++是底层语言，且扩展自C，所以它的数据类型和C差不多。</p>
<h3 id="数据类型-1"><a href="#数据类型-1" class="headerlink" title="数据类型"></a>数据类型</h3><p><strong>基本类型</strong></p>
<ul>
<li>字符类型 char wchar_t char16_t char32_t</li>
<li>数值类型 [signed/unsigned] short int long (long long) float double </li>
<li>布尔类型 true false</li>
</ul>
<p><strong>派生类型</strong>  </p>
<ul>
<li>枚举体型 enum  </li>
<li>结构体型 struct  </li>
<li>联合体型 union  </li>
<li>数组类型 array  </li>
<li>函数类型 function </li>
</ul>
<p><strong>指针引用类型</strong></p>
<ul>
<li>指针类型 pointer </li>
<li>引用类型 &amp; ref</li>
</ul>
<p><strong>空类型</strong></p>
<ul>
<li>空类型 void</li>
</ul>
<h3 id="类型转换-1"><a href="#类型转换-1" class="headerlink" title="类型转换"></a>类型转换</h3><p>C++语言中的数值数据会因为所处的代码上下文环境而发生类型转换，如降级，提升。</p>
<p>以下是C++语言中数据类型转换的基本规则：</p>
<ul>
<li>强制转换格式为： 类型 (表达式)，注意和C不同，去掉第一个括号了。</li>
<li>在表达式中，参与运算的量的类型不同时会转换为同一类型</li>
<li>在表达式中，有符号和无符号的char和short类型将自动转换为int</li>
<li>在包含两种数据类型的任何运算中，较低级别类型会转为较高级别的数据类型</li>
<li>赋值语句中结果将转换为被赋值量类型，可能级别提升或者降级，提升无损，降级可能丢失数据</li>
<li>函数参数传递时，char和short转为int，float转为double，可通过函数原型指定以阻止提升的发生</li>
<li>数据类型级别高低顺序是long double、double、float、usigned long、long long、long、unsigned int、int，当long和int具有相同大小时，unsigned int级别高于long</li>
</ul>
<h1 id="Java语言数据类型"><a href="#Java语言数据类型" class="headerlink" title="Java语言数据类型"></a>Java语言数据类型</h1><p>Java是中层语言，它的数据类型偏实用。</p>
<h3 id="数据类型-2"><a href="#数据类型-2" class="headerlink" title="数据类型"></a>数据类型</h3><p><strong>基本类型</strong></p>
<ul>
<li>字符类型 char  </li>
<li>布尔类型 boolean   </li>
<li>数值类型 byte short int long float double </li>
</ul>
<p><strong>派生类型</strong>  </p>
<ul>
<li>类类型   class</li>
<li>字符串型 string</li>
<li>枚举体型 enum  </li>
<li>数组类型 array  </li>
<li>接口类型 interfac</li>
<li>索引类型 reference</li>
</ul>
<h3 id="类型转换-2"><a href="#类型转换-2" class="headerlink" title="类型转换"></a>类型转换</h3><p>基本数据类型的转换是指由系统根据转换规则自动完成，不需要明确地声明不同数据类型之间的转换。转换在编译器执行，而不是等到运行期再执行。</p>
<p>以下是Java语言中数据类型转换的基本规则：</p>
<ul>
<li>强制转换格式为： (类型) 表达式，和C相似</li>
<li>在表达式中，参与运算的量的类型不同时会转换为同一类型</li>
<li>boolean 和其它基本数据类型之间不能相互转换</li>
<li>byte 可转换为 short、int、long、float、double</li>
<li>short 可转换为 int、long、float、double</li>
<li>char 可转换为 int、long、float、double</li>
<li>int 可转换为 long、float、double</li>
<li>long 可转换为 float、double</li>
<li>float 可转换为 double</li>
</ul>
<p>基本原则就是：只能有取值窄的范围向宽范围转换，反之不行。</p>
<h1 id="Python数据类型"><a href="#Python数据类型" class="headerlink" title="Python数据类型"></a>Python数据类型</h1><p>Python作为动态语言，数据分可变与否，偏实用。</p>
<h3 id="数据类型-3"><a href="#数据类型-3" class="headerlink" title="数据类型"></a>数据类型</h3><p><strong>不可变类型</strong>    </p>
<ul>
<li>布尔类型 bool</li>
<li>字符串型 string    </li>
<li>元组类型 tuple   </li>
<li>数值类型 number [int float complex]  </li>
</ul>
<p><strong>可变类型</strong>  </p>
<ul>
<li>列表类型 list  </li>
<li>字典类型 dict  </li>
<li>集合类型 set   </li>
</ul>
<h3 id="数据类型转换"><a href="#数据类型转换" class="headerlink" title="数据类型转换"></a>数据类型转换</h3><p>Python支持的数值类型有整型int、浮点型float、复数型complex。但Python中，数据类型不会自动转换，有需要时，要自己调用相应函数实现转换。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>lst = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">""</span>.join(lst)</span><br><span class="line"><span class="string">'123'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>int(<span class="string">'3'</span>)</span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>float(<span class="string">'3'</span>)</span><br><span class="line"><span class="number">3.0</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>complex(<span class="number">3</span>,<span class="number">1</span>)</span><br><span class="line">(<span class="number">3</span>+<span class="number">1j</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>str(<span class="number">3</span>)</span><br><span class="line"><span class="string">'3'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>tuple(lst)</span><br><span class="line">(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list(<span class="string">'123'</span>)</span><br><span class="line">[<span class="string">'1'</span>,<span class="string">'2'</span>,<span class="string">'3'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>chr(<span class="number">97</span>)</span><br><span class="line"><span class="string">'a'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>ord(<span class="string">'a'</span>)</span><br><span class="line"><span class="number">97</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>hex(<span class="number">21</span>)</span><br><span class="line"><span class="string">'0x15'</span></span><br><span class="line">&gt;&gt; oct(<span class="number">21</span>)</span><br><span class="line"><span class="string">'0o25'</span></span><br></pre></td></tr></table></figure>
<p>具体转换规则如下图:</p>
<p><img src="https://s1.ax1x.com/2020/11/10/BqWWKe.png" alt="data2p"></p>
<h1 id="Go数据类型"><a href="#Go数据类型" class="headerlink" title="Go数据类型"></a>Go数据类型</h1><p>Go作为网络时代的C，其数据类型中既有偏底层的，又有偏实用的，其中有一些是Go特有的。</p>
<h3 id="数据类型-4"><a href="#数据类型-4" class="headerlink" title="数据类型"></a>数据类型</h3><p><strong>基本类型</strong>  </p>
<ul>
<li>布尔类型 bool</li>
<li>码点类型 rune</li>
<li>字符及串 byte string  </li>
<li>数值类型 (u)int(8,16,32,64) float(32,64) complex  </li>
</ul>
<p><strong>派生类型</strong>  </p>
<ul>
<li>指针类型 pt := &amp;v (nil)  </li>
<li>数组类型 nu := [4]int{0,1,2,3}   </li>
<li>切片类型 sl := []int{0,1,2,3,}  </li>
<li>映射类型 mp := make(map[string]string)  </li>
<li>结构类型 type Employee struct {}  </li>
<li>管道类型 ch := make(chan int, 2)  </li>
<li>接口类型 func (p *Ptr) getName() string{}  </li>
<li>函数类型 func sayHello(name strin){}  </li>
</ul>
<h3 id="数据类型转换-1"><a href="#数据类型转换-1" class="headerlink" title="数据类型转换"></a>数据类型转换</h3><p>GO中数据类型一般需要显式转换，但一些底层有着相同类型的数据也会隐式转换。</p>
<ul>
<li><code>byte</code> 和 <code>uint8</code></li>
<li><code>rune</code> 和 <code>int32</code></li>
<li><code>[]byte</code> 和 <code>[]uint8</code></li>
<li>转换规则是 <code>(T) (x)</code>。</li>
</ul>
<p>对于接口类型，可通过断言转换为对应类型。而所有unsafe pointer都是unsafe.Pointer类型。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a <span class="keyword">int</span> = <span class="number">10</span></span><br><span class="line"><span class="keyword">var</span> b <span class="keyword">interface</span>&#123;&#125; = a</span><br><span class="line"></span><br><span class="line">c := b.(<span class="keyword">int</span>) <span class="comment">// c是int型</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> sum <span class="keyword">int</span> = <span class="number">10</span></span><br><span class="line"><span class="keyword">var</span> count <span class="keyword">int</span> = <span class="number">5</span></span><br><span class="line">mean := <span class="keyword">float32</span>(sum) / <span class="keyword">float32</span>(count)</span><br></pre></td></tr></table></figure>

<h1 id="Rust数据类型"><a href="#Rust数据类型" class="headerlink" title="Rust数据类型"></a>Rust数据类型</h1><p>Rust面向底层，数据类型和C很像，但又有些数据类型和Go相似。</p>
<h3 id="数据类型-5"><a href="#数据类型-5" class="headerlink" title="数据类型"></a>数据类型</h3><p><strong>标量类型</strong></p>
<ul>
<li>布尔类型 bool</li>
<li>字符类型 char  </li>
<li>数值类型 u|i(8/16/32/64/128/size)  f32(64)  </li>
</ul>
<p><strong>复合类型</strong></p>
<ul>
<li>元组类型 tuple</li>
<li>数组类型 array</li>
<li>切片类型 slice</li>
<li>结构体型 struct</li>
<li>枚举类型 enum</li>
<li>泛型类型 generics [trait]</li>
</ul>
<h3 id="数据类型转换-2"><a href="#数据类型转换-2" class="headerlink" title="数据类型转换"></a>数据类型转换</h3><p>Rust不提供原生类型之间的隐式类型转换，但可使用as关键字显式类型转换。整型之间的转换大体使用且遵循C语言惯例，在Rust中所有整型转换都是定义良好的。as只能用于i64 i32 f64 f32 u32 u8 char类型。</p>
<p>Rust内部对于Struce和Enum的类型转换提供了From和Into两个trait，实现From会默认实现Into。</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">pub</span> <span class="class"><span class="keyword">trait</span> <span class="title">From</span></span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="function"><span class="keyword">fn</span> <span class="title">from</span></span>&lt;T&gt; -&gt; <span class="keyword">Self</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">pub</span> <span class="class"><span class="keyword">trait</span> <span class="title">Info</span></span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="function"><span class="keyword">fn</span> <span class="title">into</span></span>&lt;T&gt; -&gt; T;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="meta">#![allow(overflowing_literals)]</span>  <span class="comment">// 忽略类型转换的溢出警告</span></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> decimal = <span class="number">61.3214_f32</span>;</span><br><span class="line">    <span class="keyword">let</span> integer: <span class="built_in">u8</span> = decimal;   <span class="comment">// 此行错误，默认不能将f32转为u8</span></span><br><span class="line">    <span class="keyword">let</span> integer = decimal <span class="keyword">as</span> <span class="built_in">u8</span>; <span class="comment">// 正确，as转换</span></span><br><span class="line">    <span class="keyword">let</span> character = integer <span class="keyword">as</span> <span class="built_in">char</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"1000 as a u16 is: &#123;&#125;"</span>, <span class="number">1000</span> <span class="keyword">as</span> <span class="built_in">u16</span>);</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"1000 as a u8 is: &#123;&#125;"</span>, <span class="number">1000</span> <span class="keyword">as</span> <span class="built_in">u8</span>);</span><br><span class="line"></span><br><span class="line">    <span class="meta">#[derive(Debug)]</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Complex</span></span> &#123;</span><br><span class="line">        re: <span class="built_in">i32</span>,</span><br><span class="line">        im: <span class="built_in">i32</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">impl</span> <span class="built_in">From</span>&lt;<span class="built_in">i32</span>&gt; <span class="keyword">for</span> Complex &#123;</span><br><span class="line">        <span class="function"><span class="keyword">fn</span> <span class="title">from</span></span>(re: <span class="built_in">i32</span>) -&gt; <span class="keyword">Self</span> &#123;</span><br><span class="line">            Complex &#123;</span><br><span class="line">                re,</span><br><span class="line">                im:<span class="number">0</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="Dart数据类型"><a href="#Dart数据类型" class="headerlink" title="Dart数据类型"></a>Dart数据类型</h1><p>Dart即可看成动态，又可看成静态语言，数据类型丰富。</p>
<h3 id="数据类型-6"><a href="#数据类型-6" class="headerlink" title="数据类型"></a>数据类型</h3><p><strong>基本类型</strong></p>
<ul>
<li>布尔类型 bool</li>
<li>字符串型 String</li>
<li>码点类型 rune </li>
<li>符号类型 Symbol</li>
<li>数值类型 num int double</li>
</ul>
<p><strong>集合类型</strong></p>
<ul>
<li>列表类型 List</li>
<li>映射类型 Map</li>
<li>集合类型 Set</li>
<li>队列类型 Queue</li>
<li>枚举类型 enum</li>
</ul>
<p><strong>动态类型</strong></p>
<ul>
<li>动态类型 dynamic</li>
</ul>
<h3 id="数据类型转换-3"><a href="#数据类型转换-3" class="headerlink" title="数据类型转换"></a>数据类型转换</h3><p>Dart不提供隐式转换，所有类型转换需要显式执行。</p>
<ul>
<li>toXtype</li>
<li>parse(Xtype)</li>
<li>as</li>
</ul>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">    age.toString();</span><br><span class="line">    <span class="built_in">int</span>.parse(<span class="string">"100"</span>);</span><br><span class="line">    <span class="keyword">var</span> oneP = <span class="built_in">double</span>.parse(<span class="string">"1.1"</span>);</span><br><span class="line">    <span class="built_in">String</span> pi = <span class="number">3.1415926</span>.toStringAsFixed(<span class="number">3</span>)</span><br><span class="line">    </span><br><span class="line">    (emp <span class="keyword">as</span> Person).firstName = <span class="string">"Tim"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="类型对比"><a href="#类型对比" class="headerlink" title="类型对比"></a>类型对比</h1><ul>
<li>C没有布尔型</li>
<li>Go和Dart共有码点(rune)类型</li>
<li>C/C++、Rust与Dart共有枚举(enum)类型</li>
<li>Python和Rust共有元组(tuple)类型</li>
<li>Python和Dart共有列表(list)，集合(set)和映射(map)类型</li>
<li>Go独有通道(channel)和接口(interface)类型</li>
<li>Dart独有符号(Symbol)，队列(queue)，动态(dynamic)类型</li>
<li>各种语言都或多或少存在指针(*)，引用(&amp;)的使用</li>
</ul>
<p>布尔型，字符型，数值型，数组型几乎是各语言共有的类型，这说明此四类型是基础，重中之重。基于这些类型，各语言构造了不同用途的复杂数据结构。</p>
<p>学习时，要先从基础类型学(bool char number array/list/vector)，然后再学习各语言衍生的复杂结构，最后总结提升。</p>
]]></content>
      <categories>
        <category>编程语言</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>C</tag>
        <tag>C++</tag>
        <tag>Java</tag>
        <tag>Go</tag>
        <tag>Rust</tag>
        <tag>Dart</tag>
      </tags>
  </entry>
  <entry>
    <title>C、C++、Java、Python、Go、Rust、Dart程序规则和工具</title>
    <url>/title/2e9fe2ee/</url>
    <content><![CDATA[<p><img src="https://s1.ax1x.com/2020/11/07/B50NLj.png" alt="cpygorsdart"></p>
<a id="more"></a>

<p>本文为七种语言对比学习的第四篇：程序规则和工具。</p>
<p>程序中包含的基本要素(不同语言包含的元素不完全一样，只是大体上一样)</p>
<ul>
<li>库/包/头文件</li>
<li>变量</li>
<li>语句/表达式</li>
<li>控制流程</li>
<li>函数</li>
<li>类/接口</li>
<li>标签</li>
<li>注释</li>
</ul>
<p>标识符是程序中元素的名称，如变量，函数等。七种语言标识符的规则是一样的：</p>
<ul>
<li>标识符不能是关键字</li>
<li>标识符可以包括字符和数字，不能以数字开头</li>
<li>除下划线_或美元符号$外，不能包含特殊符号</li>
<li>标识符必须是唯一的，标识符区分大小写，不能包含空格</li>
</ul>
<p>各语言分割符，注释方式，括号/缩进，格式化，编译/解释器，文档，包管理，测试，工程的区别如下</p>
<table>
<thead>
<tr>
<th align="center">语言</th>
<th align="center">分隔符</th>
<th align="center">注释方式</th>
<th align="center">括号/缩进</th>
<th align="center">编译/解释器</th>
<th align="center">格式化</th>
<th align="center">文档</th>
<th align="center">包管理</th>
<th align="center">测试</th>
<th align="center">工程</th>
</tr>
</thead>
<tbody><tr>
<td align="center">C</td>
<td align="center">;</td>
<td align="center"><code>// /**/</code></td>
<td align="center">{ 可换行</td>
<td align="center">gcc</td>
<td align="center">无</td>
<td align="center">无</td>
<td align="center">无</td>
<td align="center">无</td>
<td align="center">无</td>
</tr>
<tr>
<td align="center">C++</td>
<td align="center">;</td>
<td align="center"><code>// /**/</code></td>
<td align="center">{ 可换行</td>
<td align="center">g++</td>
<td align="center">无</td>
<td align="center">无</td>
<td align="center">无</td>
<td align="center">无</td>
<td align="center">无</td>
</tr>
<tr>
<td align="center">Python</td>
<td align="center">无</td>
<td align="center"><code># &#39;&#39;&#39; &quot;&quot;&quot;</code></td>
<td align="center">: <code>\t</code> <code></code></td>
<td align="center">python</td>
<td align="center">无</td>
<td align="center">无</td>
<td align="center">pip</td>
<td align="center">unittest</td>
<td align="center">无</td>
</tr>
<tr>
<td align="center">Java</td>
<td align="center">;</td>
<td align="center"><code>// /**/</code></td>
<td align="center">{ 可换行</td>
<td align="center">javac/jvm</td>
<td align="center">无</td>
<td align="center">javadoc</td>
<td align="center">无</td>
<td align="center">junit.Test</td>
<td align="center">无</td>
</tr>
<tr>
<td align="center">Go</td>
<td align="center">无</td>
<td align="center"><code>// /**/</code></td>
<td align="center">{ 不可换</td>
<td align="center">go</td>
<td align="center">gofmt</td>
<td align="center">godoc</td>
<td align="center">go get</td>
<td align="center">testing</td>
<td align="center">mod</td>
</tr>
<tr>
<td align="center">Rust</td>
<td align="center">;</td>
<td align="center"><code>// /**/</code></td>
<td align="center">{ 可换行</td>
<td align="center">rustc</td>
<td align="center">rustfmt</td>
<td align="center">rustdoc</td>
<td align="center">rustup</td>
<td align="center">test</td>
<td align="center">cargo</td>
</tr>
<tr>
<td align="center">Dart</td>
<td align="center">;</td>
<td align="center"><code>// /**/</code></td>
<td align="center">{ 可换行</td>
<td align="center">dart/dart2js</td>
<td align="center">dartfmt</td>
<td align="center">dartdoc</td>
<td align="center">pub</td>
<td align="center">test</td>
<td align="center">pub</td>
</tr>
</tbody></table>
<p>当然，这些语言可以借助各种工具实现相应功能。比如C/C++借助apt，Java借助Maven或Gradle都能管理好项目和包。但没有原生工具感觉差些，一门语言必然涉及这些基本的内容，未来的项目开发应该走向专业工程化，各种工具最好原生。</p>
]]></content>
      <categories>
        <category>编程语言</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>C</tag>
        <tag>C++</tag>
        <tag>Java</tag>
        <tag>Go</tag>
        <tag>Rust</tag>
        <tag>Dart</tag>
      </tags>
  </entry>
  <entry>
    <title>C、C++、Java、Python、Go、Rust、Dart程序结构</title>
    <url>/title/e0879928/</url>
    <content><![CDATA[<p><img src="https://s1.ax1x.com/2020/11/07/B5wXGT.png" alt="cpygorsdart"></p>
<a id="more"></a>

<p>本文为六种语言对比学习的第三篇：程序结构。</p>
<h1 id="C程序结构"><a href="#C程序结构" class="headerlink" title="C程序结构"></a>C程序结构</h1><p>C 程序主要包括以下部分：</p>
<ul>
<li>预处理(#)</li>
<li>变量</li>
<li>语句/表达式</li>
<li>函数</li>
<li>标签</li>
<li>注释</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// C语言程序hlwd.c</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Hello, World!\n"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">shieber@Kew:c 🐁  gcc hlwd.c -o hlwd</span><br><span class="line">shieber@Kew:c 🐁  ./hlwd                 #C程序执行方法</span><br><span class="line">Hello, World!</span><br></pre></td></tr></table></figure>

<h1 id="C-程序结构"><a href="#C-程序结构" class="headerlink" title="C++程序结构"></a>C++程序结构</h1><p>C++ 程序主要包括以下部分：</p>
<ul>
<li>预处理(#)</li>
<li>变量</li>
<li>语句/表达式</li>
<li>函数</li>
<li>类</li>
<li>模板</li>
<li>标签</li>
<li>注释</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// C++语言程序hlwd.cpp</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"Hello, World!"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">shieber@Kew:cpp 🐁  g++ hlwd.cpp -o hlwd</span><br><span class="line">shieber@Kew:cpp 🐁  ./hlwd                 #C++程序执行方法</span><br><span class="line">Hello, World!</span><br></pre></td></tr></table></figure>

<h1 id="Java程序结构"><a href="#Java程序结构" class="headerlink" title="Java程序结构"></a>Java程序结构</h1><p>Java 程序主要包括以下部分：</p>
<ul>
<li>包</li>
<li>变量</li>
<li>语句/表达式</li>
<li>函数</li>
<li>方法</li>
<li>类</li>
<li>接口</li>
<li>模板</li>
<li>注释</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Java语言程序Dog.java</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> legs;</span><br><span class="line">    <span class="keyword">int</span> tails;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Animal</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Creating an animal object"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showInfo</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Dog</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        System.out.println(<span class="string">"Creating a dog which is an animal"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Legs: "</span>  + legs);</span><br><span class="line">        System.out.println(<span class="string">"Tails: "</span> + tails);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        legs += <span class="number">4</span>;</span><br><span class="line">        tails += <span class="number">1</span>;</span><br><span class="line">        showInfo();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">shieber<span class="meta">@Kew</span>:Java 🐁  javac Dog.java</span><br><span class="line">shieber<span class="meta">@Kew</span>:Java 🐁  java Dog<span class="class">.<span class="keyword">class</span>  #<span class="title">Java</span>程序执行方法</span></span><br><span class="line"><span class="class"><span class="title">Creating</span> <span class="title">an</span> <span class="title">animal</span> <span class="title">object</span></span></span><br><span class="line"><span class="class"><span class="title">Creating</span> <span class="title">a</span> <span class="title">dog</span> <span class="title">which</span> <span class="title">is</span> <span class="title">an</span> <span class="title">animal</span></span></span><br><span class="line">Legs: 4</span><br><span class="line">Tails: <span class="number">1</span></span><br></pre></td></tr></table></figure>

<h1 id="Python程序结构"><a href="#Python程序结构" class="headerlink" title="Python程序结构"></a>Python程序结构</h1><p>Python 程序主要包括以下部分：</p>
<ul>
<li>包(import)</li>
<li>编码(utf-8)</li>
<li>变量</li>
<li>语句/表达式</li>
<li>函数</li>
<li>类</li>
<li>注释</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Python语言程序hlwd.py</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hw</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">"Hello, World!"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    hw()</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">shieber@Kew:python 🐁  python3 hlwd.py     <span class="comment">#Python程序执行方法</span></span><br><span class="line">Hello, World!</span><br></pre></td></tr></table></figure>

<h1 id="Go程序结构"><a href="#Go程序结构" class="headerlink" title="Go程序结构"></a>Go程序结构</h1><p>Go 程序主要包括以下部分：</p>
<ul>
<li>包(import)</li>
<li>变量</li>
<li>语句/表达式</li>
<li>函数</li>
<li>接口</li>
<li>标签</li>
<li>注释</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Go语言程序hlwd.go</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">"Hello, World!"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">shieber@Kew:<span class="keyword">go</span> 🐁  <span class="keyword">go</span> run hlwd.<span class="keyword">go</span>         #Go程序执行方法<span class="number">1</span></span><br><span class="line">Hello, World!</span><br><span class="line">shieber@Kew:<span class="keyword">go</span> 🐁  <span class="keyword">go</span> build hlwd.py -o hlwd</span><br><span class="line">shieber@Kew:<span class="keyword">go</span> 🐁  ./hlwd                 #Go程序执行方法<span class="number">2</span></span><br><span class="line">Hello, World!</span><br></pre></td></tr></table></figure>

<h1 id="Rust程序结构"><a href="#Rust程序结构" class="headerlink" title="Rust程序结构"></a>Rust程序结构</h1><p>Rust 程序主要包括以下部分：</p>
<ul>
<li>箱(crate)/包(package)</li>
<li>变量</li>
<li>语句/表达式</li>
<li>函数</li>
<li>特性</li>
<li>模块(mod)</li>
<li>标签</li>
<li>注释</li>
</ul>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Rust语言程序hlwd.rs</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"Hello, World!"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line">shieber@Kew:rust 🐁  rustc hlwd.rs    </span><br><span class="line">shieber@Kew:rust 🐁  ./hlwd            #Rust程序执行方法<span class="number">1</span></span><br><span class="line">Hello, World!</span><br><span class="line">shieber@Kew:rust 🐁  cargo run         #Rust程序执行方法<span class="number">2</span></span><br><span class="line">Hello, World!</span><br><span class="line">shieber@Kew:rust 🐁  cargo build       </span><br><span class="line">shieber@Kew:rust 🐁  cargo run         #Rust程序执行方法<span class="number">3</span></span><br><span class="line">Hello, World!</span><br></pre></td></tr></table></figure>

<h1 id="Dart程序结构"><a href="#Dart程序结构" class="headerlink" title="Dart程序结构"></a>Dart程序结构</h1><p>Dart 程序主要包括以下部分：</p>
<ul>
<li>库(import)和包(package)</li>
<li>变量</li>
<li>语句/表达式</li>
<li>函数</li>
<li>类</li>
<li>接口</li>
<li>集合/泛型</li>
<li>注释</li>
</ul>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Dart语言程序hlwd.dart</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"Hello, World!"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">shieber@Kew:dart 🐁  dart hlwd.dart         <span class="comment">#Dart程序执行方法1</span></span><br><span class="line">Hello, World!</span><br><span class="line">shieber@Kew:dart 🐁  dart2native hlwd.dart -o hlwd</span><br><span class="line">shieber@Kew:dart 🐁  ./hlwd                 <span class="comment">#Dart程序执行方法2</span></span><br><span class="line">Hello, World!                                </span><br><span class="line">shieber@Kew:dart 🐁  dart2js hlwd.dart -o hlwd </span><br><span class="line">shieber@Kew:dart 🐁  node hlwd              <span class="comment">#Dart程序执行方法3，使用nodejs或浏览器执行</span></span><br></pre></td></tr></table></figure>

<p>通过对比，发现七种语言程序结构大体是差不多的。这七种语言同时也有许多不同：</p>
<ul>
<li>C和C++有相似，又有不同</li>
<li>Go和Python语言结尾不用分号</li>
<li>Java和C++有些类似，Dart和Java又很像</li>
<li>Dart语言和Python一样，可以看成脚本型语言</li>
<li>Dart语言和C/Go/Rust一样，又能看成编译型语言</li>
<li>C/C++/Java必须编译执行，Python直接执行，Go可即时和编译执行</li>
<li>Rust可编译也可用Cargo执行，Dart即能当脚本执行又能编译后执行</li>
<li>Python用#作为注释符号，其余六种使用的注释都是//或/**/</li>
<li>Python中并不必须要一个main函数，而其他六种语言均需要main函数</li>
</ul>
]]></content>
      <categories>
        <category>编程语言</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>C</tag>
        <tag>C++</tag>
        <tag>Java</tag>
        <tag>Go</tag>
        <tag>Rust</tag>
        <tag>Dart</tag>
      </tags>
  </entry>
  <entry>
    <title>C、C++、Java、Python、Go、Rust、Dart关键字</title>
    <url>/title/909876b5/</url>
    <content><![CDATA[<p><img src="https://s1.ax1x.com/2020/11/07/B5w4xg.png" alt="cpygorsdart"></p>
<a id="more"></a>

<p>本文是七种语言对比学习的第二篇，主要统计常用关键字。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">                     <span class="function">C <span class="title">Keywords</span><span class="params">(<span class="number">34</span>)</span></span></span><br><span class="line"><span class="function"><span class="keyword">auto</span>        <span class="keyword">double</span>       <span class="keyword">int</span>         struct       <span class="keyword">inline</span> </span></span><br><span class="line"><span class="function"><span class="keyword">break</span>       <span class="keyword">else</span>         <span class="keyword">long</span>        <span class="keyword">switch</span>       <span class="keyword">restrict</span></span></span><br><span class="line">case        enum         register    typedef      ...</span><br><span class="line"><span class="keyword">char</span>        <span class="keyword">extern</span>       <span class="keyword">return</span>      <span class="keyword">union</span></span><br><span class="line"><span class="keyword">const</span>       <span class="keyword">float</span>        <span class="keyword">short</span>       <span class="keyword">unsigned</span></span><br><span class="line"><span class="keyword">continue</span>    <span class="keyword">for</span>          <span class="keyword">signed</span>      <span class="keyword">void</span></span><br><span class="line"><span class="keyword">default</span>     <span class="keyword">goto</span>         <span class="keyword">sizeof</span>      <span class="keyword">volatile</span></span><br><span class="line"><span class="keyword">do</span>          <span class="keyword">if</span>           <span class="keyword">static</span>      <span class="keyword">while</span></span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">                     C++ Keywords(<span class="number">55</span>)</span><br><span class="line"><span class="keyword">auto</span>        <span class="keyword">delete</span>       <span class="keyword">goto</span>        <span class="keyword">public</span>       <span class="keyword">template</span>    </span><br><span class="line"><span class="keyword">asm</span>         <span class="keyword">do</span>           <span class="keyword">if</span>          <span class="keyword">register</span>     <span class="keyword">throw</span>        </span><br><span class="line"><span class="keyword">bool</span>        <span class="keyword">double</span>       <span class="keyword">inline</span>      <span class="keyword">return</span>       <span class="keyword">try</span>                        </span><br><span class="line"><span class="keyword">break</span>       <span class="keyword">else</span>         <span class="keyword">int</span>         <span class="keyword">switch</span>       <span class="literal">true</span></span><br><span class="line"><span class="keyword">case</span>        <span class="keyword">enum</span>         <span class="keyword">long</span>        <span class="keyword">short</span>        <span class="keyword">union</span>     </span><br><span class="line"><span class="keyword">catch</span>       <span class="keyword">extern</span>       <span class="keyword">namespace</span>   <span class="keyword">signed</span>       <span class="keyword">unsigned</span>      </span><br><span class="line"><span class="keyword">char</span>        <span class="keyword">explicit</span>     <span class="keyword">new</span>         <span class="keyword">static</span>       <span class="keyword">using</span></span><br><span class="line">class       <span class="literal">false</span>        <span class="literal">nullptr</span>     struct       <span class="keyword">virtual</span></span><br><span class="line"><span class="keyword">const</span>       <span class="keyword">float</span>        <span class="keyword">operator</span>    <span class="keyword">sizeof</span>       <span class="keyword">void</span>         </span><br><span class="line"><span class="keyword">continue</span>    <span class="keyword">for</span>          <span class="keyword">private</span>     <span class="keyword">this</span>         <span class="keyword">volatile</span>        </span><br><span class="line"><span class="keyword">default</span>     <span class="keyword">friend</span>       <span class="keyword">protected</span>   <span class="keyword">typedef</span>      <span class="keyword">while</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">                     <span class="function">Java <span class="title">Keywords</span><span class="params">(<span class="number">50</span>)</span></span></span><br><span class="line"><span class="function"><span class="keyword">assert</span>      <span class="keyword">continue</span>     <span class="keyword">finally</span>     <span class="keyword">native</span>       <span class="keyword">strictfp</span> </span></span><br><span class="line"><span class="function"><span class="keyword">abstract</span>    <span class="keyword">do</span>           goto        <span class="keyword">public</span>       <span class="keyword">synchronized</span> </span></span><br><span class="line"><span class="function"><span class="keyword">byte</span>        <span class="keyword">double</span>       <span class="keyword">int</span>         <span class="keyword">private</span>      <span class="keyword">try</span> </span></span><br><span class="line"><span class="function"><span class="keyword">break</span>       <span class="keyword">default</span>      <span class="keyword">import</span>      <span class="keyword">protected</span>    <span class="keyword">this</span></span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span>     <span class="keyword">else</span>         implements  <span class="keyword">package</span>      throw</span></span><br><span class="line"><span class="function"><span class="keyword">char</span>        <span class="keyword">enum</span>         <span class="keyword">if</span>          return       <span class="keyword">throws</span> </span></span><br><span class="line"><span class="function">class       extends      <span class="keyword">long</span>        <span class="keyword">super</span>        <span class="keyword">transient</span> </span></span><br><span class="line"><span class="function"><span class="keyword">case</span>        <span class="keyword">for</span>          interface   <span class="keyword">short</span>        <span class="keyword">void</span> </span></span><br><span class="line"><span class="function"><span class="keyword">catch</span>       <span class="keyword">float</span>        <span class="keyword">instanceof</span>  <span class="keyword">static</span>       <span class="keyword">volatile</span> </span></span><br><span class="line"><span class="function"><span class="keyword">const</span>       <span class="keyword">final</span>        new         <span class="keyword">switch</span>       <span class="keyword">while</span></span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">                     Python Keywords(<span class="number">33</span>)</span><br><span class="line"><span class="keyword">and</span>         <span class="function"><span class="keyword">def</span>          <span class="title">for</span>         <span class="title">in</span>           <span class="title">or</span>        <span class="title">while</span></span></span><br><span class="line"><span class="function"><span class="title">as</span>          <span class="title">del</span>          <span class="title">from</span>        <span class="title">is</span>           <span class="title">pass</span>      <span class="title">with</span> </span></span><br><span class="line"><span class="function"><span class="title">assert</span>      <span class="title">elif</span>         <span class="title">False</span>       <span class="title">lambda</span>       <span class="title">raise</span>     <span class="title">yield</span></span></span><br><span class="line"><span class="function"><span class="title">break</span>       <span class="title">else</span>         <span class="title">global</span>      <span class="title">nonlocal</span>     <span class="title">return</span></span></span><br><span class="line"><span class="function"><span class="title">class</span>       <span class="title">except</span>       <span class="title">if</span>          <span class="title">not</span>          <span class="title">try</span>    </span></span><br><span class="line"><span class="function"><span class="title">continue</span>    <span class="title">finally</span>      <span class="title">import</span>      <span class="title">None</span>         <span class="title">True</span></span></span><br></pre></td></tr></table></figure>

<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">                     Go Keywords(<span class="number">25</span>)     </span><br><span class="line"><span class="keyword">break</span>       <span class="keyword">default</span>      <span class="function"><span class="keyword">func</span>        <span class="title">interface</span>    <span class="title">select</span></span></span><br><span class="line"><span class="keyword">case</span>        <span class="keyword">defer</span>        <span class="keyword">go</span>          <span class="keyword">map</span>          <span class="keyword">struct</span></span><br><span class="line"><span class="keyword">chan</span>        <span class="keyword">else</span>         <span class="keyword">goto</span>        <span class="keyword">package</span>      <span class="keyword">switch</span></span><br><span class="line"><span class="keyword">const</span>       <span class="keyword">fallthrough</span>  <span class="keyword">if</span>          <span class="keyword">range</span>        <span class="keyword">type</span></span><br><span class="line"><span class="keyword">continue</span>    <span class="keyword">for</span>          <span class="keyword">import</span>      <span class="keyword">return</span>       <span class="keyword">var</span></span><br></pre></td></tr></table></figure>

<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line">                     Rust Keywords(<span class="number">39</span>)  </span><br><span class="line"><span class="keyword">as</span>          <span class="keyword">dyn</span>          <span class="keyword">if</span>          <span class="keyword">move</span>         <span class="class"><span class="keyword">struct</span>    <span class="title">use</span></span></span><br><span class="line"><span class="keyword">async</span>       <span class="keyword">else</span>         <span class="keyword">impl</span>        <span class="keyword">mut</span>          <span class="keyword">super</span>     <span class="keyword">where</span></span><br><span class="line"><span class="keyword">await</span>       <span class="class"><span class="keyword">enum</span>         <span class="title">in</span></span>          <span class="keyword">pub</span>          <span class="class"><span class="keyword">trait</span>     <span class="title">while</span></span></span><br><span class="line"><span class="keyword">break</span>       <span class="keyword">extern</span>       <span class="keyword">let</span>         <span class="keyword">ref</span>          <span class="literal">true</span>      <span class="keyword">Self</span></span><br><span class="line"><span class="keyword">const</span>       <span class="literal">false</span>        <span class="keyword">loop</span>        <span class="keyword">return</span>       <span class="class"><span class="keyword">type</span></span></span><br><span class="line"><span class="class"><span class="title">continue</span></span>    <span class="function"><span class="keyword">fn</span>           <span class="title">match</span>       <span class="title">self</span>         <span class="title">union</span></span></span><br><span class="line"><span class="function"><span class="title">crate</span>       <span class="title">for</span>          <span class="title">mod</span>         <span class="title">static</span>       <span class="title">unsafe</span></span></span><br></pre></td></tr></table></figure>

<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">                     Dart Keywords(<span class="number">60</span>)</span><br><span class="line"><span class="keyword">abstract</span>    <span class="keyword">continue</span>     <span class="keyword">extends</span>     <span class="keyword">implements</span>   <span class="keyword">operator</span>  <span class="keyword">this</span></span><br><span class="line"><span class="keyword">as</span>          <span class="keyword">covariant</span>    <span class="keyword">factory</span>     <span class="keyword">import</span>       <span class="keyword">part</span>      <span class="keyword">throw</span></span><br><span class="line"><span class="keyword">assert</span>      <span class="keyword">default</span>      <span class="keyword">false</span>       <span class="keyword">in</span>           <span class="keyword">rethrow</span>   <span class="keyword">true</span></span><br><span class="line"><span class="keyword">async</span>       <span class="keyword">deferred</span>     <span class="keyword">final</span>       <span class="class"><span class="keyword">interface</span>    <span class="title">return</span>    <span class="title">try</span></span></span><br><span class="line"><span class="class"><span class="title">await</span>       <span class="title">do</span>           <span class="title">finally</span>     <span class="title">is</span>           <span class="title">set</span>       <span class="title">typedef</span></span></span><br><span class="line"><span class="class"><span class="title">break</span>       <span class="title">dynamic</span>      <span class="title">for</span>         <span class="title">library</span>      <span class="title">show</span>      <span class="title">var</span>       </span></span><br><span class="line"><span class="class"><span class="title">case</span>        <span class="title">else</span>         <span class="title">function</span>    <span class="title">mixin</span>        <span class="title">static</span>    <span class="title">void</span>      </span></span><br><span class="line"><span class="class"><span class="title">catch</span>       <span class="title">enum</span>         <span class="title">get</span>         <span class="title">new</span>          <span class="title">super</span>     <span class="title">while</span>     </span></span><br><span class="line"><span class="class"><span class="title">class</span>       <span class="title">export</span>       <span class="title">hide</span>        <span class="title">null</span>         <span class="title">switch</span>    <span class="title">with</span>      </span></span><br><span class="line"><span class="class"><span class="title">const</span>       <span class="title">external</span>     <span class="title">if</span>          <span class="title">on</span>           <span class="title">sync</span>      <span class="title">yield</span></span></span><br></pre></td></tr></table></figure>

<p>下面是所有语言的都有的关键字，可见各门语言还是有差异的，不同的关键字反应了实现不同语言编译器的考量不同。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">break</span>       <span class="literal">false</span></span><br><span class="line"><span class="keyword">continue</span>    <span class="keyword">for</span></span><br><span class="line"><span class="keyword">else</span>        <span class="keyword">return</span></span><br><span class="line"><span class="keyword">if</span>          <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<p>Go是没有while的，要实现while功能得自己用for来构造。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> &#123;                            while condition &#123;</span><br><span class="line">    <span class="keyword">if</span> !condition &#123;     等于         do_works()</span><br><span class="line">        <span class="keyword">break</span>                    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    do_works()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>从上面可见，Go语言关键字最少，只25个，学习起来最轻松，Python则次之。C关键字实际不只34个，但常用就34个，C++也不只55个。C/C++语言是计算机底层的核心语言，是现代互联网的基座。Rust是新出的一门底层语言，定位类似C/C++语言，但强调安全，并发。Rust引入的生命周期，所有权/借用机制是学习的难点。最后，Dart关键字足足60个，看来学习难度较大，但因为它本身语法和Python，Go有类似的地方，所以难度会减少。但60个和Go的25个比起来，学习负担还是太重了。</p>
<p>为什么我列出了这七种语言的关键字呢？C/C++/Rust偏底层，C++提供泛型和模板，功能强大。C++中存在的问题，Rust给解决了，所以可以结合起来学习C/C++/Rust，相信未来的主流学习也是C/C++/Rust吧。Rust可能会替代部分C++，C++目前还不会被淘汰。Java是大数据、大框架和安卓App开发主要语言，事实上工业语言。Go语言在云/分布式/微服务领域大放异彩，Python和Go可以作为中间层语言使用。Dart是谷歌新操作系统Fuchsia的Flutter平台默认语言，可通过Flutter编写上层应用，未来可能成为跨系统语言。其实Go和Dart都是谷歌公司开发的语言，未来预期不会太差吧？</p>
<p><img src="https://s1.ax1x.com/2020/11/06/Bfrs4f.png" alt="dart"></p>
<p><img src="https://s1.ax1x.com/2020/11/06/BfsWRO.jpg" alt="fuchsia"></p>
<p>底层C/C++/Rust，框架Java/Go，中间件Go/Python，上层Dart，我觉得这算是一个比较好的搭配。</p>
]]></content>
      <categories>
        <category>编程语言</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>C</tag>
        <tag>C++</tag>
        <tag>Java</tag>
        <tag>Go</tag>
        <tag>Rust</tag>
        <tag>Dart</tag>
      </tags>
  </entry>
  <entry>
    <title>C、C++、Java、Python、Go、Rust、Dart语言历史</title>
    <url>/title/9b69707/</url>
    <content><![CDATA[<p><img src="https://s1.ax1x.com/2020/11/07/B5wgat.png" alt="cpygorsdart"></p>
<a id="more"></a>

<p>最近学习Rust、Dart、C++、Java语言，发现难度挺大的，尤其是在自己会python/go/c这些语言的情况下，特别容易搞混。所以就想着对比学习，总结七种语言的特性，从它们的异同间发现知识点。</p>
<p>本文为七种语言对比学习的第一篇，主要讲语言的历史沿革。</p>
<h1 id="C语言历史"><a href="#C语言历史" class="headerlink" title="C语言历史"></a>C语言历史</h1><p><img src="https://s1.ax1x.com/2020/11/06/BhcSt1.png" alt="c"></p>
<p>C语言是一种通用的高级语言，最初是由丹尼斯·里奇在贝尔实验室为开发UNIX操作系统而设计的。C语言最开始是于1972年在DEC PDP-11计算机上被首次实现。C语言是以B语言为基础的，B语言大概是在1970年被引进的。在1978年，布莱恩·柯尼汉（Brian Kernighan）和丹尼斯·里奇（Dennis Ritchie）制作了C的第一个公开可用的描述，现在被称为K&amp;R标准。</p>
<p>UNIX操作系统，C编译器，和几乎所有的UNIX应用程序都是用C语言编写的。由于这些原因，C 语言现在已经成为一种广泛使用的专业语言。C语言标准是于1988年由美国国家标准协会（ANSI，全称 American National Standard Institute）制定的。</p>
<p>C是编译型语言，运行前需要编译，在类Unix平台，gcc是默认的C编译器。</p>
<p>C优点：</p>
<ul>
<li>易于学习</li>
<li>结构化语言</li>
<li>产生高效率程序</li>
<li>处理底层的活动</li>
<li>在多种计算机平台上编译</li>
</ul>
<p>C使用领域：</p>
<ul>
<li>汇编器</li>
<li>编译器</li>
<li>解释器</li>
<li>数据库</li>
<li>操作系统</li>
<li>文本编辑器</li>
<li>网络驱动器</li>
</ul>
<h1 id="C-语言历史"><a href="#C-语言历史" class="headerlink" title="C++语言历史"></a>C++语言历史</h1><p><img src="https://s3.ax1x.com/2020/12/04/DbrcJ1.png" alt="cpp"></p>
<p>C++的历史可以追溯到1979年，当时Bjarne Stroustrup（C++之父）正在准备他的博士毕业论文，他有机会使用一种叫做Simula 的语言。顾名思义，Simula语言的主要作用是仿真。Simula 67是Simula语言的一种变种，被公认是首款支持面向对象的语言。Stroustrup 发现面向对象的思想对于软件开发非常有用，但是因Simula语言执行效率低，其实用性不强。</p>
<p>不久之后，Stroustrup开始着手“C with Classes”的研发工作，“C with Classes”表明这种新语言是在C基础上研发的，是C语言的超集。C语言以其高可移植性而广受好评，且程序执行速度以及底层函数的性能不受程序移植的影响，Stroustrup要做的就是将面向对象的思想引入C语言。新语言的初始版本除了包括C语言的基本特征之外，还具备类、简单继承、内联机制、函数默认参数以及强类型检查等特性。</p>
<p>Bjarne Stroustrup的第一款“C with classes”编译器叫Cfront，这个名字源自一个叫做Cpre的C编译器。Cfront的机理是把“C with classes”的代码翻译成原生C代码。颇为有趣的一点是Cfront源码大部分是由“C with Classes”编写，这使得Cfront成为了一种自足执行的编译器（可以编译自身源码的编译器）。由于很难整合C++的异常机制，Cfront在1993年退出了历史的舞台，但是它对以后C++编译器以及Unix操作系统的实现都产生了深远的影响。</p>
<p>1983年，“C with Classes”语言更名为C++。C语言中“++”运算子的作用是对一个变量进行递增操作，由此我们多少可以知晓Stroustrup对这种新语言的定位。这个时期，许多重要的特性被加入，其中包括虚函数、函数重载、引用机制（符号为&amp;）、const关键字以及双斜线的单行注释（从BCPL语言引入）。</p>
<p>C++是编译型语言，运行前需要编译，在类Unix平台，g++是默认的C++编译器。</p>
<p>C++优点：</p>
<ul>
<li>面向对象</li>
<li>泛型编程</li>
<li>提供模板</li>
<li>和C一样高效</li>
<li>处理底层运算</li>
<li>在多种计算机平台上编译</li>
</ul>
<p>C++使用领域：</p>
<ul>
<li>汇编器</li>
<li>编译器</li>
<li>解释器</li>
<li>数据库</li>
<li>游戏引擎</li>
<li>图形界面</li>
<li>操作系统</li>
<li>文本编辑器</li>
<li>网络驱动器</li>
</ul>
<h1 id="Java语言历史"><a href="#Java语言历史" class="headerlink" title="Java语言历史"></a>Java语言历史</h1><p><img src="https://s3.ax1x.com/2020/12/04/Dbhm7V.png" alt="java"></p>
<p>1990年年末，Sun公司预料嵌入式系统将在未来家用电器领域大显身手。于是Sun公司成立了一个由James Gosling领导的“Green计划 ”，准备为下一代智能家电编写一个通用控制系统。</p>
<p>该团队最初考虑使用C++语言，但是很多成员包括Sun的首席科学家Bill Joy，发现C++和可用的API在某些方面存在很大的问题。而且工作小组使用的是嵌入式平台，可用的系统资源极其有限。并且很多成员都发现C++太复杂，以致很多开发者经常错误使用。而且C++缺少垃圾回收系统、可移植性、分布式和多线程等功能。</p>
<p>根据可用的资金，Bill Joy决定开发一种新语言，他提议在C++的基础上，开发一种面向对象的环境。于是，Gosling试图通过修改和扩展C++的功能来满足这个要求，但是后来他放弃了。他决定创造一种全新的语言：Oak。</p>
<p>到1992年夏天，Green计划已经完成了新平台的部分功能，包括Green操作系统。Oak的程序设计语言、类库等。同年11月，Green计划被转化成FirstPerson有限公司，一个Sun公司的全资子公司。</p>
<p>FirstPerson团队致力于创建一种高度互动的设备。当时代华纳公司发布了一个关于电视机顶盒的征求提议书时，FirstPerson团队改变了他们的目标，作为对征求提议书的响应，提出了一个机顶盒平台的提议。但是有线电视业界觉得FirstPerson的平台给予用户过多的控制权，因此FirstPerson的投标败给了SGI。同时，3DO公司另外一笔关于机顶盒的交易没有成功。此时，可怜的Green项目几乎接近夭折，甚至Green项目的一半成员也被调到了其他的项目组。</p>
<p>正如中国古代的寓言所言：塞翁失马，焉知非福？如果Green项目在机顶盒平台投标成功，也许就不会诞生Java这门伟大的语言了。</p>
<p>1994年夏天，互联网和浏览器的出现不仅给广大互联网的用户带来了福音，也给Oak语言带来了新的生机。Gosling立即意识到，这是一个机会，于是对Oak进行了小规模的改造，到了1994年秋，小组中的Naughton和Jonathan Payne完成了第一个Java语言的网页浏览器：WebRunner.Sun公司实验室主任Bert Sutherland 和技术总监Eric Schmict 观看了该浏览器的演示，对该浏览器的效果给予了高度评价。当时的Oak这个商品已经被注册，于是只得将Oak更名为Java。</p>
<p>Sun公司在1995年年初发布了Java语言，Sun公司直接把Java放到互联网上，免费给大家使用，甚至连源代码也不保密，也放到互联网上向所有人公开。</p>
<p>几个月后，让所有人都吃惊的事情发生了：Java成了互联网上最热门的宝贝。竟然有10万多人次访问了Sun公司的网页，下载了Java语言。然后，互联网上立即就有了数不清的Java小程序，演示着各种小动画、小游戏等。</p>
<p>在Java语言出现之前，互联网的网页实质上就像一张纸，不会有任何动态的内容。有了Java语言之后，浏览器的功能被扩大了，Java程序可以直接在浏览器里运行，可以直接与远程服务器交互：用Java语言编程，可以在互联网上像传送电子邮件一样方便地传送程序文件！</p>
<p>1995年，Sun虽然推出了Java，但这只是一种语言，如果想开发复杂的应用程序，必须要有一个强大的开发类库。因此，Sun在1996年年初发布了JDK1.0。这个版本包括两部分：运行环境JRE和开发环境JDK。运行环境包括核心API、集成API、用户界面API、发布技术、Java虚拟机JVM5个部分；开发环境包括编译Java程序的编译器。</p>
<p>接着，Sun在1997年2月18日发布了JDK1.1。JDK1.1增加了JIT（即时编译）编译器。JIT和传统的编译器不同，传统的编译器是编译一条，运行完成后将其扔掉；而JIT会将经常用到的指令保存在内存中，当下调用时就不需要重新编译了，通过这种方式让JDK在效率上有了较大提升。</p>
<p>C++是编译型语言，运行前需要编译，在类Unix平台，g++是默认的C++编译器。</p>
<p>Java优点：</p>
<ul>
<li>面向对象</li>
<li>网络能力强</li>
<li>高可移植性</li>
<li>处理底层运算</li>
<li>规范，工业级语言</li>
</ul>
<p>Java使用领域：</p>
<ul>
<li>服务端</li>
<li>大数据                                                                                        </li>
<li>安卓应用</li>
<li>金融系统</li>
<li>嵌入式系统</li>
</ul>
<h1 id="Python语言历史"><a href="#Python语言历史" class="headerlink" title="Python语言历史"></a>Python语言历史</h1><p><img src="https://s1.ax1x.com/2020/11/06/Bh6UyD.png" alt="python"></p>
<p>Python 是一个高层次的结合了解释性、互动性和面向对象的脚本语言。Python的设计具有很强的可读性，相比其他语言经常使用英文关键字，其他语言的一些标点符号，它具有比其他语言更有特色的语法结构。</p>
<p>Python 是由 Guido van Rossum 在八十年代末和九十年代初，在荷兰国家数学和计算机科学研究所设计出来的。</p>
<p>Python 本身也是由诸多其他语言发展而来的，这包括 ABC、Modula-3、C、C++、Algol-68、SmallTalk、Unix shell 和其他的脚本语言等等。</p>
<p>Python 2.0 于 2000 年 10 月 16 日发布，增加了实现完整的垃圾回收，并且支持 Unicode。Python 3.0 于 2008 年 12 月 3 日发布，此版不完全兼容之前的 Python 源代码。不过，很多新特性后来也被移植到旧的Python 2.6/2.7版本。</p>
<p>Python是解释型语言，执行需要解释器而不是编译器，Python的解释器有多种，默认官方解释器是CPython。除此之外还有IPython，Jython，PyPY，Pyston v2等。</p>
<p>Python优点：</p>
<ul>
<li>易阅读：Python代码定义的更清晰</li>
<li>易学习：Python有较少的关键字，结构简单</li>
<li>易维护：Python的成功在于它的源代码是相当容易维护的</li>
<li>易可扩展：如果你需要一段运行很快的关键代码，或者是想要编写一些不愿开放的算法，你可以使用C或C++完成那部分程序，然后从你的Python程序中调用。</li>
<li>广泛的标准库：Python的最大的优势之一是丰富的库，跨平台，在UNIX，Windows和Mac兼容很好</li>
</ul>
<p>Python使用领域：</p>
<ul>
<li>Web开发</li>
<li>游戏开发</li>
<li>网络爬虫</li>
<li>科学计算</li>
<li>人工智能</li>
<li>自动化运维</li>
</ul>
<h1 id="Go语言历史"><a href="#Go语言历史" class="headerlink" title="Go语言历史"></a>Go语言历史</h1><p><img src="https://s1.ax1x.com/2020/11/06/Bh6cSf.png" alt="go"></p>
<p>2007年9月，Rob Pike在Google分布式编译平台上进行C++编译，在漫长的等待过程中，他和Robert Griesemer探讨了程序设计语言的一些关键性问题，他们认为，简化编程语言相比于在臃肿的语言上不断增加新特性，会是更大的进步。随后他们在编译结束之前说服了身边的Ken Thompson(发明C和Unix)，觉得有必要为此做一些事情。几天后，他们发起了一个叫Golang的项目，将它作为自由时间的实验项目。</p>
<p>2008年5月 Google发现了GO语言的巨大潜力，得到了Google的全力支持，这些人开始全职投入GO语言的设计和开发。</p>
<p>2009年11月 Go语言第一个版本发布。2012年3月 第一个正式版本Go1.0发布。</p>
<p>2015年8月 Go1.5发布，这个版本被认为是历史性的。完全移除C语言部分，使用Go编译Go，少量代码使用汇编实现。Go是编译型语言，执行需要Go编译器。</p>
<p>当前(2020)，Go语言成了云计算核心语言，网络时代的C语言。</p>
<p>Go优点：</p>
<ul>
<li>学习简单</li>
<li>编译效率高</li>
<li>内存占用少</li>
<li>包管理和工程管理(mod)使用方便</li>
<li>天生自带并发，容易实现大并发程序</li>
</ul>
<p>Go使用领域：</p>
<ul>
<li>数据库</li>
<li>云平台</li>
<li>网络编程</li>
<li>消息中间件</li>
<li>分布式系统</li>
</ul>
<h1 id="Rust语言历史"><a href="#Rust语言历史" class="headerlink" title="Rust语言历史"></a>Rust语言历史</h1><p><img src="https://s1.ax1x.com/2020/11/06/BhcV7d.png" alt="rust"></p>
<p>Rust 语言是一种高效、可靠的通用高级语言。其高效不仅限于开发效率，它的执行效率也是令人称赞的，是一种少有的兼顾开发效率和执行效率的语言。</p>
<p>Rust最早是Mozilla雇员Graydon Hoare的一个个人项目，从2009年开始，得到了Mozilla研究院的支助，2010年项目对外公布。2010 ～2011年间实现的自举。从此以后，Rust经历了巨大的设计变化和反复（历程极其艰辛），终于在2015 年5月15日发布了1.0版。在这个研发过程中，Rust建立了一个强大活跃的社区，形成了一整套完善稳定的项目贡献机制。</p>
<p>Rust能得到Mozilla研究院的支持，是因为Mozilla在开发和维护Firefox的Gecko引擎的时候，对于这样一个由C++写的维护了20多年的，累计上千万行的代码库，已经不胜厌烦。由于历史包袱及各种漏洞、性能瓶颈，Firefox已经远远落后竞争对手Google Chrome了。Mozilla亟需一种能够安全编程的语言来重新让 Firefox能跟上并超越时代。于是Rust项目就被资助并坚持孵化，直到发布1.0。</p>
<p>影响了Rust的流行的编程语言包括C、 C++、 C#、 Erlang、 Haskell、 OCaml、 Ruby、 Scheme 和 Swift 等。Rust也影响了C#7、 Elm、 Idris、 Swift。</p>
<p>Rust是编译型语言，执行需要rustc编译器。</p>
<p>Rust优点：</p>
<ul>
<li>安全</li>
<li>并发</li>
<li>宏强大</li>
<li>高性能</li>
<li>工具链完整</li>
</ul>
<p>Rust使用领域：</p>
<ul>
<li>命令行</li>
<li>数据库</li>
<li>Web应用</li>
<li>操作系统</li>
<li>网络服务器</li>
<li>嵌入式设备</li>
</ul>
<h1 id="Dart语言历史"><a href="#Dart语言历史" class="headerlink" title="Dart语言历史"></a>Dart语言历史</h1><p><img src="https://s1.ax1x.com/2020/11/06/BhcDuF.png" alt="dart"></p>
<p>Dart诞生于2011 年，刚开始的定位是取代JavaScript，但却以Flutter的编程语言出道而被人熟知，它是强类型语言却又同时支持类型推导，它支持AOT也支持JIT，由于是第一个使用声明式UI的编程语言，也引发过很过争议。除了用于Flutter，很少有人知道，Dart也可以用于后台开发，Dart甚至也可以和C直接交互。Dart语言设计者Lars Bak就是jvm发明者，从此点可以看出Dart有Java的基因。</p>
<p>Dart是既是编译型又像是解释型语言，可把dart源码当成脚本直接执行，也可用dart2js, dart2native编译器编译为js代码或原生代码再执行，所以它有三种执行方式。</p>
<p>Dart优点：</p>
<ul>
<li>异步</li>
<li>跨平台</li>
<li>包管理解决依赖</li>
</ul>
<p>Dart使用领域：</p>
<ul>
<li>命令行</li>
<li>前后端</li>
</ul>
]]></content>
      <categories>
        <category>编程语言</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>C</tag>
        <tag>C++</tag>
        <tag>Java</tag>
        <tag>Go</tag>
        <tag>Rust</tag>
        <tag>Dart</tag>
      </tags>
  </entry>
  <entry>
    <title>Go的各种数据结构底层表示</title>
    <url>/title/e985015c/</url>
    <content><![CDATA[<p><img src="https://s1.ax1x.com/2020/10/21/BCAWVS.png" alt="go-datastructure"></p>
<a id="more"></a>

<p>go语言内置数据类型包含数值，字符串和引用类型，这些不同类型的数据底层结构是不一样的。面试时问到部分的底层结构，下面对所有内容作一个总结。</p>
<h3 id="数值类型"><a href="#数值类型" class="headerlink" title="数值类型"></a>数值类型</h3><p>整数型</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">按照数值范围，是否有负数和特殊用途，存在八种类型。</span><br><span class="line">类型     数值范围</span><br><span class="line"><span class="keyword">int8</span>    [<span class="number">-128</span><span class="number">-127</span>]</span><br><span class="line"><span class="keyword">int16</span>   [<span class="number">-32768</span><span class="number">-32767</span>]</span><br><span class="line"><span class="keyword">int32</span>   [<span class="number">-2147483648</span><span class="number">-2147483647</span>]</span><br><span class="line"><span class="keyword">int64</span>   [<span class="number">-9223372036854775808</span><span class="number">-9223372036854775807</span>]</span><br><span class="line"><span class="keyword">uint8</span>   [<span class="number">0</span><span class="number">-255</span>]</span><br><span class="line"><span class="keyword">uint16</span>  [<span class="number">0</span><span class="number">-65535</span>]</span><br><span class="line"><span class="keyword">uint32</span>  [<span class="number">0</span><span class="number">-4294967295</span>]</span><br><span class="line"><span class="keyword">uint64</span>  [<span class="number">0</span><span class="number">-18446744073709551615</span>]</span><br><span class="line"><span class="keyword">int</span>     依机器为<span class="keyword">int32</span>/<span class="keyword">int64</span>位</span><br><span class="line"><span class="keyword">uint</span>    依机器为<span class="keyword">uint32</span>/<span class="keyword">uint64</span>位</span><br><span class="line"><span class="keyword">byte</span>    字节，值范围<span class="keyword">uint8</span></span><br><span class="line"><span class="keyword">rune</span>    码点，值范围<span class="keyword">int32</span></span><br><span class="line"><span class="keyword">uintptr</span> 保存指针的数值，值范围<span class="keyword">uint</span></span><br><span class="line"></span><br><span class="line">整数直接存储在存储器中，有符号数包含符号位s和尾数部分m。</span><br><span class="line">如<span class="number">32</span>位十进制有符号数d = <span class="number">-11</span></span><br><span class="line">s = <span class="number">1</span></span><br><span class="line">m = <span class="number">0000000000000000000000000001011</span></span><br><span class="line"><span class="number">1</span> <span class="number">0000000000000000000000000001011</span></span><br><span class="line">s   m 两部分组合得到d</span><br><span class="line">d = <span class="number">10000000000000000000000000001011</span> (<span class="number">32</span>位计算机存储的<span class="number">-11</span>)</span><br><span class="line"></span><br><span class="line">若是<span class="number">64</span>位十进制有符号数d = <span class="number">-11</span></span><br><span class="line">d = <span class="number">1000000000000000000000000000000000000000000000000000000000001011</span> (<span class="number">64</span>位计算机存储的<span class="number">-11</span>)</span><br></pre></td></tr></table></figure>

<p>浮点数</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">按照数值范围分为如下两种类型。</span><br><span class="line"><span class="keyword">float32</span></span><br><span class="line"><span class="keyword">float64</span></span><br><span class="line"></span><br><span class="line">浮点数涉及小数，必须将小数表示为二进制。浮点数底层结构包含符号位s，阶码e，尾数m。</span><br><span class="line">浮点数f表示规则如下</span><br><span class="line"><span class="number">1.</span>首位s为符号位，s=<span class="number">0</span>时，f为正数，s=<span class="number">1</span>时，f为负数。</span><br><span class="line"><span class="number">2.</span>接着<span class="number">8</span>/<span class="number">11</span>位为阶码，阶码为f二进制表示科学计数法的指数加<span class="number">127</span>/<span class="number">1023</span>的二进制数。</span><br><span class="line"><span class="number">3.</span>最后<span class="number">23</span>/<span class="number">52</span>位为尾数，就是二进制表示的小数部分。</span><br><span class="line">其中/两侧的数分别对应<span class="number">32</span>位和<span class="number">64</span>位。</span><br><span class="line"></span><br><span class="line">如<span class="number">32</span>位的十进制数f = <span class="number">5.0</span> = <span class="number">0</span>b101<span class="number">.0</span> = <span class="number">0</span>b1<span class="number">.01</span>x2^<span class="number">2</span></span><br><span class="line">s = <span class="number">0</span></span><br><span class="line">e = <span class="number">2</span>+<span class="number">127</span>=<span class="number">10000001</span> </span><br><span class="line">m = <span class="number">01</span> </span><br><span class="line"><span class="number">0</span> <span class="number">10000001</span> <span class="number">01000000000000000000000</span> </span><br><span class="line">s   e            m 三部分组合得到f</span><br><span class="line">f = <span class="number">01000000101000000000000000000000</span> (<span class="number">32</span>位计算机存储的<span class="number">5.0</span>)</span><br><span class="line"></span><br><span class="line">同理<span class="number">64</span>位的十进制数f = <span class="number">5.0</span> = <span class="number">0</span>b101<span class="number">.0</span> = <span class="number">0</span>b1<span class="number">.01</span>x2^<span class="number">2</span></span><br><span class="line">s = <span class="number">0</span></span><br><span class="line">e = <span class="number">2</span>+<span class="number">1023</span>=<span class="number">10000000001</span></span><br><span class="line">m = <span class="number">01</span> </span><br><span class="line"><span class="number">0</span> <span class="number">10000000001</span> <span class="number">0100000000000000000000000000000000000000000000000000</span> </span><br><span class="line">s   e            m</span><br><span class="line">f = <span class="number">0100000000010100000000000000000000000000000000000000000000000000</span> (<span class="number">64</span>位计算机存储的<span class="number">5.0</span>)</span><br></pre></td></tr></table></figure>

<p>复数</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">按照数值范围分为如下两种类型。</span><br><span class="line"><span class="keyword">complex64</span></span><br><span class="line"><span class="keyword">complex128</span></span><br><span class="line">复数存在实部和虚部，而且都为浮点数，所以底层为两个浮点数的组合，输出时虚部会添加上i</span><br></pre></td></tr></table></figure>

<h3 id="字符串类型"><a href="#字符串类型" class="headerlink" title="字符串类型"></a>字符串类型</h3><p>字符串底层结构</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="keyword">string</span> <span class="keyword">struct</span> &#123; </span><br><span class="line">    str unsafe.Pointer <span class="comment">//指针</span></span><br><span class="line">    <span class="built_in">len</span> <span class="keyword">int</span>            <span class="comment">//长度</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="引用类型"><a href="#引用类型" class="headerlink" title="引用类型"></a>引用类型</h3><p>数组底层结构   </p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> array <span class="keyword">struct</span> &#123; </span><br><span class="line">    array unsafe.Pointer <span class="comment">//指针 </span></span><br><span class="line">    <span class="built_in">len</span> <span class="keyword">int</span>              <span class="comment">//长度</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>切片底层结构   </p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> slice <span class="keyword">struct</span> &#123; </span><br><span class="line">    array unsafe.Pointer <span class="comment">//指针</span></span><br><span class="line">    <span class="built_in">len</span> <span class="keyword">int</span>              <span class="comment">//长度</span></span><br><span class="line">    <span class="built_in">cap</span> <span class="keyword">int</span>              <span class="comment">//容量(切片基于数组)</span></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<p>映射底层结构   </p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> hmap <span class="keyword">struct</span> &#123;</span><br><span class="line">    count     <span class="keyword">int</span>   </span><br><span class="line">    flags     <span class="keyword">uint8</span> </span><br><span class="line">    B         <span class="keyword">uint8</span>          <span class="comment">//平衡因子</span></span><br><span class="line">    noverflow <span class="keyword">uint16</span> </span><br><span class="line">    hash0     <span class="keyword">uint32</span> </span><br><span class="line">    buckets   unsafe.Pointer <span class="comment">//桶</span></span><br><span class="line">    bucket    unsafe.Pointer <span class="comment">//旧桶</span></span><br><span class="line">    nevacuate <span class="keyword">uintptr</span></span><br><span class="line">    extra     *mapextra </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>安全映射底层结构 </p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> Map <span class="keyword">struct</span> &#123;</span><br><span class="line">    mu Mutex   <span class="comment">//锁(并发安全)</span></span><br><span class="line">    dirty <span class="keyword">map</span>[<span class="keyword">interface</span>&#123;&#125;]*entry</span><br><span class="line">    misses <span class="keyword">int</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>通道底层结构 </p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> hchan <span class="keyword">struct</span> &#123;</span><br><span class="line">    qcount   <span class="keyword">uint</span>           <span class="comment">// 队列中元素个数</span></span><br><span class="line">    dataqsiz <span class="keyword">uint</span>           <span class="comment">// 队列中元素大小</span></span><br><span class="line">    buf      unsafe.Pointer <span class="comment">// 指向缓冲区的指针</span></span><br><span class="line">    elemsize <span class="keyword">uint16</span></span><br><span class="line">    closed   <span class="keyword">uint32</span></span><br><span class="line">    elemtype *_type         <span class="comment">// 元素类型</span></span><br><span class="line">    sendx    <span class="keyword">uint</span>           <span class="comment">// 发送下标</span></span><br><span class="line">    recvx    <span class="keyword">uint</span>           <span class="comment">// 接收下标</span></span><br><span class="line">    sendq    waitq          <span class="comment">// 发送队列</span></span><br><span class="line">    recvq    waitq          <span class="comment">// 接收队列</span></span><br><span class="line">    lock     mutex          <span class="comment">// 锁(并发安全)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>无方法的接口底层结构</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> eface <span class="keyword">struct</span> &#123;</span><br><span class="line">    _type *_type          <span class="comment">//类型指针</span></span><br><span class="line">    data unsafe.Pointer   <span class="comment">//数据指针</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>有方法的接口底层结构</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> ifcae <span class="keyword">struct</span> &#123;</span><br><span class="line">    tab *itab      </span><br><span class="line">    data unsafe.Pointer</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> itab <span class="keyword">struct</span> &#123;</span><br><span class="line">    inter *interfacetype</span><br><span class="line">    _type *_type</span><br><span class="line">    hash  <span class="keyword">uint32</span>       <span class="comment">// 类型转换时快速判断类型是否相等</span></span><br><span class="line">    _     [<span class="number">4</span>]<span class="keyword">byte</span></span><br><span class="line">    fun   [<span class="number">1</span>]<span class="keyword">uintptr</span>   <span class="comment">// 动态数组，存储函数指针</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> _type <span class="keyword">struct</span> &#123; <span class="comment">// go类型运行时表示，所有类新基础</span></span><br><span class="line">    size       <span class="keyword">uintptr</span> <span class="comment">// 内存占用</span></span><br><span class="line">    ptrdata    <span class="keyword">uintptr</span></span><br><span class="line">    hash       <span class="keyword">uint32</span>  <span class="comment">// 判断类型是否相等</span></span><br><span class="line">    tflag      tflag</span><br><span class="line">    align      <span class="keyword">uint8</span></span><br><span class="line">    fieldAlign <span class="keyword">uint8</span></span><br><span class="line">    kind       <span class="keyword">uint8</span></span><br><span class="line">    equal      <span class="function"><span class="keyword">func</span><span class="params">(unsafe.Pointer, unsafe.Pointer)</span> <span class="title">bool</span></span></span><br><span class="line">    gcdata     *<span class="keyword">byte</span></span><br><span class="line">    str        nameOff</span><br><span class="line">    ptrToThis  typeOff</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>Go</tag>
      </tags>
  </entry>
  <entry>
    <title>云原生技术栈</title>
    <url>/title/83723c7e/</url>
    <content><![CDATA[<p><img src="https://s1.ax1x.com/2020/10/07/0dYPZ6.png" alt="cloud-native"></p>
<a id="more"></a>

<p>最近折腾云原生技术，然而学了半天，感觉知识越来越复杂，涉及的技术太多了，本文特此稍做总结。</p>
<h3 id="什么是云原生"><a href="#什么是云原生" class="headerlink" title="什么是云原生"></a>什么是云原生</h3><p>云原生是一种新的构建软件并提供服务的架构或模式，云是和本地相对的。从技术的角度，云原生架构是基于云原生技术的一组架构原则和设计模式的集合，旨在将云应用中的非业务代码部分进行最大化的剥离，从而让云设施接管应用中原有的大量非功能特性(如弹性、韧性、安全、可观测性、灰度等)，使业务不再有非功能性业务中断困扰的同时，具备轻量、敏捷、高度自动化的特点。</p>
<h3 id="为什么需要云原生"><a href="#为什么需要云原生" class="headerlink" title="为什么需要云原生"></a>为什么需要云原生</h3><p>对于企业的 CIO 或者 IT 主管而言，原来企业内部 IT 建设以“烟筒”模式比较多，每个部门甚至每<br>个应用都相对独立，如何管理与分配资源成了难题。大家都基于最底层 IDC 设施独自向上构建，都需要<br>单独分配硬件资源，这就造成资源被大量占用且难以被共享。但是上云之后，由于云厂商提供了统一的<br>IaaS 能力和云服务，大幅提升了企业 IaaS 层的复用程度，CIO 或者 IT 主管自然而然想到 IaaS 以上层的系统也需要被统一，使资源、产品可被不断复用，从而能够进一步降低企业运营成本。</p>
<p>所有这些问题都指向一个共同点，那就是云的时代需要新的技术架构，来帮助企业应用能够更好地利<br>用云计算优势，充分释放云计算的技术红利，让业务更敏捷、成本更低的同时又可伸缩性更灵活，而这<br>些正好就是云原生架构专注解决的技术点。</p>
<h3 id="云原生架构原则"><a href="#云原生架构原则" class="headerlink" title="云原生架构原则"></a>云原生架构原则</h3><p>云原生架构本身作为一种架构，也有若干架构原则作为应用架构的核心架构控制面，通过遵从这些架<br>构原则可以让技术主管和架构师在做技术选择时不会出现大的偏差。</p>
<ul>
<li>服务化原则</li>
<li>弹性原则</li>
<li>可观测原则</li>
<li>韧性原则</li>
<li>自动化原则</li>
<li>零信任原则</li>
<li>持续演进原则</li>
</ul>
<h3 id="云原生主要技术"><a href="#云原生主要技术" class="headerlink" title="云原生主要技术"></a>云原生主要技术</h3><ul>
<li>容器</li>
<li>微服务</li>
<li>DevOps</li>
<li>Serverless</li>
<li>Service Mesh</li>
<li>开放应用模型</li>
<li>云原生中间件</li>
</ul>
<h3 id="云原生技术栈"><a href="#云原生技术栈" class="headerlink" title="云原生技术栈"></a>云原生技术栈</h3><p>云原生涉及众多技术，这些技术按照作用可分为四层，每层涉及的工具如下(只列出部分代表性工具)。蓝色框中代表CNCF孵化项目，是重点工具。</p>
<p><img src="https://s1.ax1x.com/2020/10/07/0dYPZ6.png" alt="cloud-native"></p>
<p>1.基础层（Provisioning）</p>
<ul>
<li>自动化和配置 KubeEdge Ansible</li>
<li>容器注册 HARBOR Dragonfly</li>
<li>安全管理 TUF falco</li>
<li>密钥管理 spiffe SPIRE</li>
</ul>
<p>2.运行时层（Runtime）  </p>
<ul>
<li>云原生存储 ROOK Portworx ceph 盘古</li>
<li>容器运行时 Containerd rkt cri-o</li>
<li>云网络 CNI</li>
</ul>
<p>3.编排和管理层（Orchestration &amp; Management）  </p>
<ul>
<li>编排和调度 K8S K3S Mesos Swarm</li>
<li>服务发现 CoreDNS etcd Consul</li>
<li>远程调用 gRPC Thrift</li>
<li>服务代理 Envoy CONTOUR MSON</li>
<li>API网关 Kong</li>
<li>服务网格 Linkerd Istio </li>
</ul>
<p>4.应用程序定义和开发层（Application Definition &amp; Development）  </p>
<ul>
<li>数据库 TiKV/TiDB Vitess Redis MySQL MongoDB Neo4j</li>
<li>流和消息传递 NATS Cloudevents Flink Spark Kafka</li>
<li>应用定义和镜像构建 Helm </li>
<li>持续集成和持续交付 Orgo Jenkins Gitlab Github</li>
</ul>
<p>除了四层技术栈，还有些跨四层运行的工具</p>
<p>1.平台类  </p>
<ul>
<li>Kubernetes发行版 谷歌K8S Azure K8S  AWS K8S Rancher </li>
<li>Kubernetes托管平台 谷歌云 AWS Azure 阿里云 阿里云 腾讯云 </li>
<li>Kubernetes安装程序 Minikube Rancher</li>
<li>PaaS/容器服务 heroku </li>
</ul>
<p>2.可观察性与分析  </p>
<ul>
<li>监控 Prometheus cortex</li>
<li>日志 Elasticsearch Logstash Kibana</li>
<li>跟踪 JAEGER </li>
<li>混沌 Gremlin Chaos mesh</li>
</ul>
<h3 id="云原生技术栈中的中国产品"><a href="#云原生技术栈中的中国产品" class="headerlink" title="云原生技术栈中的中国产品"></a>云原生技术栈中的中国产品</h3><ul>
<li>PingCAP 贡献给CNCF的有TiKV/TiDB， Chaos mesh</li>
<li>阿里自研了盘古，MSON，Dubbo-go</li>
</ul>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>技术栈涉及很多工具，像Kubernetes，Elasticsearch等都是重型工具，学习难，但光是使用它们就能干不少事。这些工具，要想都精通不太可能，基本学习使用就只用挑核心产品如Kubernetes，Docker，Etcd，Prometheus，Elasticsearch等学习，把流程搞熟悉。</p>
<p>工作流程能跑通后接着就是再深入某个技术点，比如  </p>
<ul>
<li>对容器编排有需求就研究Kubernetes，Mesos，Swarm </li>
<li>对分布式事务有需求就研究MySQL，TiDB/TiKV数据库</li>
<li>对实时搜索有需求就研究Elasticsearch涉及的ELK技术</li>
<li>对微服务有需求就研究Istio，Dubbo-go等</li>
<li>对容器有需求就研究Containerd，RunC，Docker等</li>
<li>对实时大数据处理有需求就研究Spark，Flink，MapReduce等</li>
</ul>
<p>这些技术都很复杂，而且这些技术还在随着时代发展而不断变化，不知未来以Kubernetes为代表的云原生技术又会变成什么样？精通某一个领域我认为都非常不容易，但技术人，再复杂也得学呀。</p>
]]></content>
  </entry>
  <entry>
    <title>Unix时间戳</title>
    <url>/title/f7591bd4/</url>
    <content><![CDATA[<p><img src="https://s1.ax1x.com/2020/09/13/w0Hp2n.png" alt="unixtimestamp"></p>
<a id="more"></a>

<h2 id="Unix进入16亿秒计时"><a href="#Unix进入16亿秒计时" class="headerlink" title="Unix进入16亿秒计时"></a>Unix进入16亿秒计时</h2><p>中国时间2020-09-13 20:26:40, Unix时间戳进入16亿秒计时了。回顾Unix计时以来计算机及互联网连同人类社会的发展，可以看到每亿秒人类都取得了巨大进步，每亿秒都有每亿秒的故事。科技进步的速度不断加快，每亿秒中发生的事情也多了起来。前9亿秒基本是美国人在发展，从9亿秒开始，中国人开始入场。期待中国在接下来的每亿秒中创造出更好的技术和产品。</p>
<p><strong>说明</strong>:部分时间无法查到具体时间，所以用00:00:00代替。查到月份而无日期的用该月1日代替。总的来说，时间戳数量级不会错，因为一个月的时间戳2592000秒，影响不大。</p>
<table>
<thead>
<tr>
<th align="center">Unix系统时间(UTC+8)</th>
<th align="right">时间戳</th>
<th align="left">大事件</th>
<th align="left">地点/创立者</th>
</tr>
</thead>
<tbody><tr>
<td align="center">1970-01-01 08:00:00</td>
<td align="right">0.00秒</td>
<td align="left">Unix纪元开始</td>
<td align="left">美国贝尔实验室-肯·汤普森/丹尼斯·里奇</td>
</tr>
<tr>
<td align="center">1971-01-01 00:00:00</td>
<td align="right">0.31亿秒</td>
<td align="left">硅谷命名首次提出</td>
<td align="left">美国-唐·赫夫勒</td>
</tr>
<tr>
<td align="center">1972-01-01 00:00:00</td>
<td align="right">0.63亿秒</td>
<td align="left">C语言诞生</td>
<td align="left">美国贝尔实验室-丹尼斯·里奇/肯·汤普森</td>
</tr>
<tr>
<td align="center">1973-03-03 17:46:40</td>
<td align="right">1.00亿秒</td>
<td align="left"></td>
<td align="left"></td>
</tr>
<tr>
<td align="center">1973-05-22 00:00:00</td>
<td align="right">1.06亿秒</td>
<td align="left">以太网诞生</td>
<td align="left">美国-施乐公司鲍伯·梅特卡夫</td>
</tr>
<tr>
<td align="center">1974-12-01 00:00:00</td>
<td align="right">1.55亿秒</td>
<td align="left">互联网TCP协议发布</td>
<td align="left">美国-温顿·瑟夫/罗伯特·卡恩</td>
</tr>
<tr>
<td align="center">1975-04-04 00:00:00</td>
<td align="right">1.65亿秒</td>
<td align="left">微软公司成立</td>
<td align="left">美国-比尔·盖茨</td>
</tr>
<tr>
<td align="center">1976-04-01 00:00:00</td>
<td align="right">1.97亿秒</td>
<td align="left">苹果公司成立</td>
<td align="left">美国-史蒂芬·乔布斯</td>
</tr>
<tr>
<td align="center">1976-05-04 03:33:20</td>
<td align="right">2.00亿秒</td>
<td align="left"></td>
<td align="left"></td>
</tr>
<tr>
<td align="center">1977-06-01 00:00:00</td>
<td align="right">2.33亿秒</td>
<td align="left">甲骨文公司成立</td>
<td align="left">美国-拉里·埃里森</td>
</tr>
<tr>
<td align="center">1979-07-05 13:20:00</td>
<td align="right">3.00亿秒</td>
<td align="left"></td>
<td align="left"></td>
</tr>
<tr>
<td align="center">1980-01-01 00:00:00</td>
<td align="right">3.15亿秒</td>
<td align="left">计算机实现TCP协议</td>
<td align="left">美国-Bill Joy</td>
</tr>
<tr>
<td align="center">1981-08-12 00:00:00</td>
<td align="right">3.66亿秒</td>
<td align="left">第一款PC电脑发布</td>
<td align="left">美国-IBM公司</td>
</tr>
<tr>
<td align="center">1982-09-04 23:06:40</td>
<td align="right">4.00亿秒</td>
<td align="left"></td>
<td align="left"></td>
</tr>
<tr>
<td align="center">1983-12-01 00:00:00</td>
<td align="right">4.39亿秒</td>
<td align="left">C++语言诞生</td>
<td align="left">美国贝尔实验室-Bjarne Stroustrup</td>
</tr>
<tr>
<td align="center">1984-01-01 00:00:00</td>
<td align="right">4.41亿秒</td>
<td align="left">Matlab语言诞生</td>
<td align="left">美国-Cleve Moler</td>
</tr>
<tr>
<td align="center">1985-07-01 00:00:00</td>
<td align="right">4.88亿秒</td>
<td align="left">高通公司成立</td>
<td align="left">美国-雅各布斯</td>
</tr>
<tr>
<td align="center">1985-10-17 00:00:00</td>
<td align="right">4.98亿秒</td>
<td align="left">80386处理器发布</td>
<td align="left">美国-英特尔公司</td>
</tr>
<tr>
<td align="center">1985-11-05 08:53:20</td>
<td align="right">5.00亿秒</td>
<td align="left"></td>
<td align="left"></td>
</tr>
<tr>
<td align="center">1985-11-20 00:00:00</td>
<td align="right">5.01亿秒</td>
<td align="left">Windows 1.0发布</td>
<td align="left">美国-微软公司</td>
</tr>
<tr>
<td align="center">1987-09-14 21:07:00</td>
<td align="right">5.58亿秒</td>
<td align="left">互联网进入中国</td>
<td align="left">中国-钱天白发出第一封邮件</td>
</tr>
<tr>
<td align="center">1987-09-15 00:00:00</td>
<td align="right">5.58亿秒</td>
<td align="left">华为公司成立</td>
<td align="left">中国-任正非</td>
</tr>
<tr>
<td align="center">1987-10-25 00:00:00</td>
<td align="right">5.62亿秒</td>
<td align="left">台积电公司成立</td>
<td align="left">中国·台湾-张忠谋</td>
</tr>
<tr>
<td align="center">1988-08-01 00:00:00</td>
<td align="right">5.86亿秒</td>
<td align="left">微软发布首款Office</td>
<td align="left">美国-微软公司</td>
</tr>
<tr>
<td align="center">1989-01-05 18:40:00</td>
<td align="right">6.00亿秒</td>
<td align="left"></td>
<td align="left"></td>
</tr>
<tr>
<td align="center">1989-12-25 00:00:00</td>
<td align="right">6.30亿秒</td>
<td align="left">Python语言诞生</td>
<td align="left">荷兰-Guido von Rossum</td>
</tr>
<tr>
<td align="center">1990-11-27 00:00:00</td>
<td align="right">6.59亿秒</td>
<td align="left">ARM公司成立</td>
<td align="left">英国-赫尔曼·豪泽</td>
</tr>
<tr>
<td align="center">1990-12-25 00:00:00</td>
<td align="right">6.62亿秒</td>
<td align="left">万维网(WWW)诞生</td>
<td align="left">欧洲核子研究中心-蒂姆·伯纳斯-李</td>
</tr>
<tr>
<td align="center">1991-01-01 00:00:00</td>
<td align="right">6.63亿秒</td>
<td align="left">物联网概念提出</td>
<td align="left">美国麻省理工大学-Kevin Ashton</td>
</tr>
<tr>
<td align="center">1991-08-25 00:00:00</td>
<td align="right">6.80亿秒</td>
<td align="left">Linux系统诞生</td>
<td align="left">芬兰赫尔辛基大学-林纳斯·托瓦兹</td>
</tr>
<tr>
<td align="center">1992-03-08 04:26:40</td>
<td align="right">7.00亿秒</td>
<td align="left"></td>
<td align="left"></td>
</tr>
<tr>
<td align="center">1993-08-22 00:00:00</td>
<td align="right">7.45亿秒</td>
<td align="left">英伟达公司成立</td>
<td align="left">美国-黄仁勋</td>
</tr>
<tr>
<td align="center">1994-10-13 00:00:00</td>
<td align="right">7.80亿秒</td>
<td align="left">第一个浏览器诞生</td>
<td align="left">美国-网景公司(Mozilla前身)</td>
</tr>
<tr>
<td align="center">1995-03-01 00:00:00</td>
<td align="right">7.93亿秒</td>
<td align="left">雅虎公司成立</td>
<td align="left">美国-杨致远</td>
</tr>
<tr>
<td align="center">1995-05-09 14:13:20</td>
<td align="right">8.00亿秒</td>
<td align="left"></td>
<td align="left"></td>
</tr>
<tr>
<td align="center">1995-05-23 00:00:00</td>
<td align="right">8.01亿秒</td>
<td align="left">Java语言诞生</td>
<td align="left">美国-詹姆斯·高斯林</td>
</tr>
<tr>
<td align="center">1995-07-16 00:00:00</td>
<td align="right">8.05亿秒</td>
<td align="left">亚马逊公司成立</td>
<td align="left">美国-杰夫·贝佐斯</td>
</tr>
<tr>
<td align="center">1995-09-01 00:00:00</td>
<td align="right">8.09亿秒</td>
<td align="left">JavaScript语言诞生</td>
<td align="left">美国-网景公司·Brendan Eich</td>
</tr>
<tr>
<td align="center">1996-01-01 00:00:00</td>
<td align="right">8.20亿秒</td>
<td align="left">WiFI技术诞生</td>
<td align="left">澳大利亚-约翰·沙利文团队</td>
</tr>
<tr>
<td align="center">1997-05-11 00:00:00</td>
<td align="right">8.63亿秒</td>
<td align="left">深蓝击败象棋冠军</td>
<td align="left">美国-IBM公司</td>
</tr>
<tr>
<td align="center">1997-06-01 00:00:00</td>
<td align="right">8.65亿秒</td>
<td align="left">网易公司成立</td>
<td align="left">中国-丁磊</td>
</tr>
<tr>
<td align="center">1998-07-10 00:00:00</td>
<td align="right">9.00亿秒</td>
<td align="left"></td>
<td align="left"></td>
</tr>
<tr>
<td align="center">1998-09-04 00:00:00</td>
<td align="right">9.04亿秒</td>
<td align="left">谷歌公司成立</td>
<td align="left">美国-拉里·佩奇/谢尔盖·布林</td>
</tr>
<tr>
<td align="center">1998-09-22 00:00:00</td>
<td align="right">9.06亿秒</td>
<td align="left">GFW前身开启</td>
<td align="left">中国-公安部</td>
</tr>
<tr>
<td align="center">1998-11-11 00:00:00</td>
<td align="right">9.10亿秒</td>
<td align="left">腾讯公司成立</td>
<td align="left">中国-马化腾</td>
</tr>
<tr>
<td align="center">1999-07-06 00:00:00</td>
<td align="right">9.30亿秒</td>
<td align="left">超链专利发表</td>
<td align="left">美国-李彦宏</td>
</tr>
<tr>
<td align="center">1999-09-09 00:00:00</td>
<td align="right">9.36亿秒</td>
<td align="left">阿里巴巴公司成立</td>
<td align="left">中国-马云</td>
</tr>
<tr>
<td align="center">2000-01-01 00:00:00</td>
<td align="right">9.40亿秒</td>
<td align="left">百度公司成立</td>
<td align="left">中国-李彦宏</td>
</tr>
<tr>
<td align="center">2001-09-04 00:00:00</td>
<td align="right">9.90亿秒</td>
<td align="left">佩奇超链专利发表</td>
<td align="left">美国-拉里·佩奇</td>
</tr>
<tr>
<td align="center">2001-09-09 09:46:40</td>
<td align="right">10.00亿秒</td>
<td align="left"></td>
<td align="left"></td>
</tr>
<tr>
<td align="center">2003-10-01 00:00:00</td>
<td align="right">10.64亿秒</td>
<td align="left">安卓公司成立</td>
<td align="left">美国-安迪·罗宾</td>
</tr>
<tr>
<td align="center">2003-10-15 00:00:00</td>
<td align="right">10.66亿秒</td>
<td align="left">支付宝诞生</td>
<td align="left">中国-阿里巴巴·淘宝</td>
</tr>
<tr>
<td align="center">2004-02-04 00:00:00</td>
<td align="right">10.75亿秒</td>
<td align="left">Facebook公司成立</td>
<td align="left">美国-扎克伯格</td>
</tr>
<tr>
<td align="center">2004-11-09 19:33:20</td>
<td align="right">11.00亿秒</td>
<td align="left"></td>
<td align="left"></td>
</tr>
<tr>
<td align="center">2005-01-01 00:00:00</td>
<td align="right">11.04亿秒</td>
<td align="left">大数据概念提出</td>
<td align="left">美国-Roger Mougalas</td>
</tr>
<tr>
<td align="center">2005-04-07 00:00:00</td>
<td align="right">11.12亿秒</td>
<td align="left">Git工具诞生</td>
<td align="left">美国-林纳斯·托瓦兹</td>
</tr>
<tr>
<td align="center">2006-07-28 00:00:00</td>
<td align="right">11.54亿秒</td>
<td align="left">人工神经网络诞生</td>
<td align="left">加拿大-杰弗瑞·辛顿</td>
</tr>
<tr>
<td align="center">2006-08-09 00:00:00</td>
<td align="right">11.55亿秒</td>
<td align="left">云计算概念提出</td>
<td align="left">美国-谷歌CEO埃里克·施密特</td>
</tr>
<tr>
<td align="center">2007-05-25 00:00:00</td>
<td align="right">11.80亿秒</td>
<td align="left">Pornhub上线</td>
<td align="left">加拿大-Pornhub公司</td>
</tr>
<tr>
<td align="center">2007-01-09 00:00:00</td>
<td align="right">11.68亿秒</td>
<td align="left">iPhone首款发布</td>
<td align="left">美国-苹果公司</td>
</tr>
<tr>
<td align="center">2007-11-05 00:00:00</td>
<td align="right">11.68亿秒</td>
<td align="left">安卓系统首次发布</td>
<td align="left">美国-谷歌公司</td>
</tr>
<tr>
<td align="center">2008-01-01 00:00:00</td>
<td align="right">11.99亿秒</td>
<td align="left">5G概念提出</td>
<td align="left">美国-美国航空航天管理局</td>
</tr>
<tr>
<td align="center">2008-01-11 05:20:00</td>
<td align="right">12.00亿秒</td>
<td align="left"></td>
<td align="left"></td>
</tr>
<tr>
<td align="center">2008-04-10 00:00:00</td>
<td align="right">12.07亿秒</td>
<td align="left">Github上线</td>
<td align="left">美国-汤姆·普雷斯顿</td>
</tr>
<tr>
<td align="center">2009-01-03 00:00:00</td>
<td align="right">12.30亿秒</td>
<td align="left">比特币创世区块诞生</td>
<td align="left">日本-中本聪</td>
</tr>
<tr>
<td align="center">2009-08-14 00:00:00</td>
<td align="right">12.50亿秒</td>
<td align="left">新浪微博诞生</td>
<td align="left">中国-新浪公司</td>
</tr>
<tr>
<td align="center">2009-09-21 00:00:00</td>
<td align="right">12.53亿秒</td>
<td align="left">Go语言诞生</td>
<td align="left">美国-谷歌-原贝尔实验室成员肯.汤普森等</td>
</tr>
<tr>
<td align="center">2009-11-11 00:00:00</td>
<td align="right">12.57亿秒</td>
<td align="left">双十一活动诞生</td>
<td align="left">中国-阿里巴巴·淘宝</td>
</tr>
<tr>
<td align="center">2010-03-04 00:00:00</td>
<td align="right">12.67亿秒</td>
<td align="left">美团公司成立</td>
<td align="left">中国-王兴</td>
</tr>
<tr>
<td align="center">2010-04-06 00:00:00</td>
<td align="right">12.70亿秒</td>
<td align="left">小米公司成立</td>
<td align="left">中国-雷军</td>
</tr>
<tr>
<td align="center">2011-01-21 00:00:00</td>
<td align="right">12.95亿秒</td>
<td align="left">微信诞生</td>
<td align="left">中国-腾讯·张小龙团队</td>
</tr>
<tr>
<td align="center">2011-03-13 15:06:40</td>
<td align="right">13.00亿秒</td>
<td align="left"></td>
<td align="left"></td>
</tr>
<tr>
<td align="center">2012-03-09 00:00:00</td>
<td align="right">13.31亿秒</td>
<td align="left">字节跳动成立</td>
<td align="left">中国-张一鸣</td>
</tr>
<tr>
<td align="center">2012-06-01 00:00:00</td>
<td align="right">13.38亿秒</td>
<td align="left">滴滴公司成立</td>
<td align="left">中国-程维</td>
</tr>
<tr>
<td align="center">2013-01-01 00:00:00</td>
<td align="right">13.56亿秒</td>
<td align="left">边缘计算概念提出</td>
<td align="left">美国-Ryan LaMothe</td>
</tr>
<tr>
<td align="center">2014-04-01 00:00:00</td>
<td align="right">13.96亿秒</td>
<td align="left">ofo小黄车公司成立</td>
<td align="left">中国-戴威</td>
</tr>
<tr>
<td align="center">2014-05-14 00:53:20</td>
<td align="right">14.00亿秒</td>
<td align="left"></td>
<td align="left"></td>
</tr>
<tr>
<td align="center">2014-06-02 00:00:00</td>
<td align="right">14.01亿秒</td>
<td align="left">Swift语言发布</td>
<td align="left">美国-苹果公司</td>
</tr>
<tr>
<td align="center">2015-01-01 00:00:00</td>
<td align="right">14.20亿秒</td>
<td align="left">云原生推出</td>
<td align="left">美国-CNCF</td>
</tr>
<tr>
<td align="center">2015-02-27 00:00:00</td>
<td align="right">14.24亿秒</td>
<td align="left">星际文件系统发布</td>
<td align="left">美国-协议实验室</td>
</tr>
<tr>
<td align="center">2015-05-15 00:00:00</td>
<td align="right">14.31亿秒</td>
<td align="left">Rust语言发布</td>
<td align="left">美国-Mozilla公司</td>
</tr>
<tr>
<td align="center">2016-03-15 17:02:00</td>
<td align="right">14.58亿秒</td>
<td align="left">Alpha-Go大败李世石</td>
<td align="left">韩国-Alpha-Go VS 李世石</td>
</tr>
<tr>
<td align="center">2016-08-16 01:40:00</td>
<td align="right">14.71亿秒</td>
<td align="left">墨子号量子卫星发射</td>
<td align="left">中国-中科大·潘建伟团队</td>
</tr>
<tr>
<td align="center">2016-09-20 00:00:00</td>
<td align="right">14.74亿秒</td>
<td align="left">抖音上线</td>
<td align="left">中国-字节跳动公司</td>
</tr>
<tr>
<td align="center">2017-07-14 10:40:00</td>
<td align="right">15.00亿秒</td>
<td align="left"></td>
<td align="left"></td>
</tr>
<tr>
<td align="center">2017-09-25 00:00:00</td>
<td align="right">15.06亿秒</td>
<td align="left">量子编程语言Q#发布</td>
<td align="left">美国-微软公司</td>
</tr>
<tr>
<td align="center">2017-11-16 00:00:00</td>
<td align="right">15.10亿秒</td>
<td align="left">6G概念提出</td>
<td align="left">英国-Neil McRae</td>
</tr>
<tr>
<td align="center">2019-05-23 00:00:00</td>
<td align="right">15.58亿秒</td>
<td align="left">SpaceX星链卫星发射</td>
<td align="left">美国-SpaceX公司</td>
</tr>
<tr>
<td align="center">2019-09-20 00:00:00</td>
<td align="right">15.68亿秒</td>
<td align="left">谷歌量子霸权</td>
<td align="left">美国-谷歌公司</td>
</tr>
<tr>
<td align="center">2019-11-01 00:00:00</td>
<td align="right">15.72亿秒</td>
<td align="left">5G正式商用</td>
<td align="left">中国-三大运营商/华为公司</td>
</tr>
<tr>
<td align="center">2020-01-01 08:00:00</td>
<td align="right">15.77亿秒</td>
<td align="left">Unix纪元50周年</td>
<td align="left"></td>
</tr>
<tr>
<td align="center">2020-06-18 06:55:37</td>
<td align="right">15.92亿秒</td>
<td align="left">量子编程语言Silq发布</td>
<td align="left">瑞士-苏黎世联邦理工学院Martin Vechev</td>
</tr>
<tr>
<td align="center">2020-09-13 20:26:40</td>
<td align="right">16.00亿秒</td>
<td align="left"></td>
<td align="left"></td>
</tr>
<tr>
<td align="center">2023-11-15 06:13:20</td>
<td align="right">17.00亿秒</td>
<td align="left"></td>
<td align="left"></td>
</tr>
<tr>
<td align="center">2027-01-15 16:00:00</td>
<td align="right">18.00亿秒</td>
<td align="left"></td>
<td align="left"></td>
</tr>
<tr>
<td align="center">2030-03-18 01:46:40</td>
<td align="right">19.00亿秒</td>
<td align="left"></td>
<td align="left"></td>
</tr>
<tr>
<td align="center">2033-05-18 11:33:20</td>
<td align="right">20.00亿秒</td>
<td align="left"></td>
<td align="left"></td>
</tr>
<tr>
<td align="center">2036-07-18 21:20:00</td>
<td align="right">21.00亿秒</td>
<td align="left"></td>
<td align="left"></td>
</tr>
<tr>
<td align="center">2038-01-19 11:14:08</td>
<td align="right">21.47亿秒</td>
<td align="left">所有32位操作系统报废</td>
<td align="left"></td>
</tr>
<tr>
<td align="center">2039-09-19 07:06:40</td>
<td align="right">22.00亿秒</td>
<td align="left"></td>
<td align="left"></td>
</tr>
<tr>
<td align="center">2042-11-19 16:53:20</td>
<td align="right">23.00亿秒</td>
<td align="left"></td>
<td align="left"></td>
</tr>
<tr>
<td align="center">2046-01-20 02:40:00</td>
<td align="right">24.00亿秒</td>
<td align="left"></td>
<td align="left"></td>
</tr>
<tr>
<td align="center">2049-03-22 12:26:40</td>
<td align="right">25.00亿秒</td>
<td align="left"></td>
<td align="left"></td>
</tr>
<tr>
<td align="center">2052-05-22 22:13:20</td>
<td align="right">26.00亿秒</td>
<td align="left"></td>
<td align="left"></td>
</tr>
<tr>
<td align="center">2055-07-24 08:00:00</td>
<td align="right">27.00亿秒</td>
<td align="left"></td>
<td align="left"></td>
</tr>
<tr>
<td align="center">2058-09-23 17:46:40</td>
<td align="right">28.00亿秒</td>
<td align="left"></td>
<td align="left"></td>
</tr>
<tr>
<td align="center">2061-11-24 03:33:20</td>
<td align="right">29.00亿秒</td>
<td align="left"></td>
<td align="left"></td>
</tr>
<tr>
<td align="center">2065-01-24 13:20:00</td>
<td align="right">30.00亿秒</td>
<td align="left"></td>
<td align="left"></td>
</tr>
<tr>
<td align="center">2068-03-26 23:06:40</td>
<td align="right">31.00亿秒</td>
<td align="left"></td>
<td align="left"></td>
</tr>
<tr>
<td align="center">2070-01-01 08:00:00</td>
<td align="right">31.50亿秒</td>
<td align="left">Unix纪元100周年</td>
<td align="left"></td>
</tr>
<tr>
<td align="center">2071-05-28 08:53:20</td>
<td align="right">32.00亿秒</td>
<td align="left"></td>
<td align="left"></td>
</tr>
<tr>
<td align="center">2074-07-28 18:40:00</td>
<td align="right">33.00亿秒</td>
<td align="left"></td>
<td align="left"></td>
</tr>
<tr>
<td align="center">2077-09-28 04:26:40</td>
<td align="right">34.00亿秒</td>
<td align="left"></td>
<td align="left"></td>
</tr>
<tr>
<td align="center">2080-11-28 14:13:20</td>
<td align="right">35.00亿秒</td>
<td align="left"></td>
<td align="left"></td>
</tr>
<tr>
<td align="center">2084-01-30 00:00:00</td>
<td align="right">36.00亿秒</td>
<td align="left"></td>
<td align="left"></td>
</tr>
<tr>
<td align="center">2087-04-01 09:46:40</td>
<td align="right">37.00亿秒</td>
<td align="left"></td>
<td align="left"></td>
</tr>
<tr>
<td align="center">2090-06-01 19:33:20</td>
<td align="right">38.00亿秒</td>
<td align="left"></td>
<td align="left"></td>
</tr>
<tr>
<td align="center">2093-08-02 05:20:00</td>
<td align="right">39.00亿秒</td>
<td align="left"></td>
<td align="left"></td>
</tr>
<tr>
<td align="center">2096-10-02 15:06:40</td>
<td align="right">40.00亿秒</td>
<td align="left"></td>
<td align="left"></td>
</tr>
<tr>
<td align="center">2099-12-04 00:53:20</td>
<td align="right">41.00亿秒</td>
<td align="left"></td>
<td align="left"></td>
</tr>
<tr>
<td align="center">2100-01-01 00:00:00</td>
<td align="right">41.02亿秒</td>
<td align="left">Unix纪元进入22世纪</td>
<td align="left"></td>
</tr>
<tr>
<td align="center">2103-02-04 10:40:00</td>
<td align="right">42.00亿秒</td>
<td align="left"></td>
<td align="left"></td>
</tr>
<tr>
<td align="center">2106-04-06 20:26:40</td>
<td align="right">43.00亿秒</td>
<td align="left"></td>
<td align="left"></td>
</tr>
<tr>
<td align="center">2109-06-07 06:13:20</td>
<td align="right">44.00亿秒</td>
<td align="left"></td>
<td align="left"></td>
</tr>
<tr>
<td align="center">2110-01-02 06:28:16</td>
<td align="right">44.18亿秒</td>
<td align="left">比特币时间戳溢出</td>
<td align="left"></td>
</tr>
<tr>
<td align="center">2112-08-07 16:00:00</td>
<td align="right">45.00亿秒</td>
<td align="left"></td>
<td align="left"></td>
</tr>
<tr>
<td align="center">2115-10-09 01:46:40</td>
<td align="right">46.00亿秒</td>
<td align="left"></td>
<td align="left"></td>
</tr>
<tr>
<td align="center">2118-l2-09 11:33:20</td>
<td align="right">47.00亿秒</td>
<td align="left"></td>
<td align="left"></td>
</tr>
<tr>
<td align="center">2122-02-08 21:20:00</td>
<td align="right">48.00亿秒</td>
<td align="left"></td>
<td align="left"></td>
</tr>
<tr>
<td align="center">2125-04-11 07:06:40</td>
<td align="right">49.00亿秒</td>
<td align="left"></td>
<td align="left"></td>
</tr>
<tr>
<td align="center">2128-06-11 16:53:20</td>
<td align="right">50.00亿秒</td>
<td align="left"></td>
<td align="left"></td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>互联网</category>
      </categories>
      <tags>
        <tag>Unix</tag>
      </tags>
  </entry>
  <entry>
    <title>如何制作deb包</title>
    <url>/title/583751c1/</url>
    <content><![CDATA[<p><img src="https://s1.ax1x.com/2020/09/10/wJoQ4U.png" alt="deb"></p>
<a id="more"></a>

<p>平时安装软件有可能用到deb包，那么它是如何制作的呢？</p>
<h2 id="学会包命名"><a href="#学会包命名" class="headerlink" title="学会包命名"></a>学会包命名</h2><p>包名格式：软件名_上游版本号.主版本号.次版本号-修订号_平台</p>
<p>如: gim_bash_0.0.4-1_amd64</p>
<h2 id="安排deb包内部结构"><a href="#安排deb包内部结构" class="headerlink" title="安排deb包内部结构"></a>安排deb包内部结构</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">└── gim_bash_0.0.4-1_amd64</span><br><span class="line">    ├── DEBIAN</span><br><span class="line">    │   └── control</span><br><span class="line">    └── usr</span><br><span class="line">        └── local</span><br><span class="line">            └── bin</span><br><span class="line">                └── gim</span><br></pre></td></tr></table></figure>
<p>上面是一个deb包打包前的结构，DEBIAN/control为控制文件，里面写了各种软件包信息。gim为代码，<br>usr/local/bin/是gim最终安装位置，也可以安装到/usr/bin，则结构如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">└── gim_bash_0.0.4-1_amd64</span><br><span class="line">    ├── DEBIAN</span><br><span class="line">    │   └── control</span><br><span class="line">    └── usr</span><br><span class="line">        └── bin</span><br><span class="line">            └── gim</span><br></pre></td></tr></table></figure>

<h2 id="构建流程"><a href="#构建流程" class="headerlink" title="构建流程"></a>构建流程</h2><ul>
<li>写好代码，(编译)，修改最终文件属性<blockquote>
<p>sudo chown root gim<br>sudo chgrp root gim</p>
</blockquote>
</li>
<li>准备好deb包结构</li>
<li>修改control文件</li>
<li>打包为deb</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> ls</span></span><br><span class="line">drwxrwxr-x 4 shieber shieber 4.0K 9月   8 13:55 gim_bash_0.0.4-1_amd64</span><br><span class="line"><span class="meta">$</span><span class="bash"> dpkg-deb --build gim_bash_0.0.4-1_amd64/</span></span><br><span class="line">dpkg-deb: 正在 'gim_bash_0.0.4-1_amd64.deb' 中构建软件包 'gim'。</span><br><span class="line"><span class="meta">$</span><span class="bash"> ls </span></span><br><span class="line">drwxrwxr-x 4 shieber shieber 4.0K 9月   8 13:55 gim_bash_0.0.4-1_amd64</span><br><span class="line">-rw-r--r-- 1 shieber shieber 1.9K 9月  10 18:42 gim_bash_0.0.4-1_amd64.deb</span><br></pre></td></tr></table></figure>

<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo dpkg -i gim_bash_0.0.4-1_amd64.deb</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>软件包</category>
      </categories>
      <tags>
        <tag>deb</tag>
      </tags>
  </entry>
  <entry>
    <title>编程语言的七夕</title>
    <url>/title/b4d27a1f/</url>
    <content><![CDATA[<p><img src="https://s1.ax1x.com/2020/08/25/d2lbbn.png" alt="valentine"></p>
<a id="more"></a>

<p>有Hello world项目，七夕节，今天就来个I love you。看看计算机各种编程语言如何输出I love you。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">英特尔64位机器语言(16进制，大量删节)</span><br><span class="line"></span><br><span class="line">7f45 4c46 0201 0100 0000 0000 0000 0000  .ELF............</span><br><span class="line">0300 3e00 0100 0000 3005 0000 0000 0000  ..&gt;.....0.......</span><br><span class="line">4000 0000 0000 0000 2819 0000 0000 0000  @.......(.......</span><br><span class="line">0000 0000 4000 3800 0900 4000 1d00 1c00  ....@.8...@.....</span><br><span class="line">0000 0000 4000 3800 0900 4000 1d00 1c00  .... . .........</span><br><span class="line">0000 0000 4000 3800 0900 4000 1d00 1c00  .......... .....</span><br><span class="line">4802 0000 0000 0000 4802 0000 0000 0000  H.......H.......</span><br><span class="line">0100 0000 0000 0000 2f6c 6962 3634 2f6c  ......../lib64/l</span><br><span class="line">642d 6c69 6e75 782d 7838 362d 3634 2e73  d-linux-x86-64.s</span><br><span class="line">6f2e 3200 0400 0000 1000 0000 0100 0000  o.2.............</span><br><span class="line">6f2e 3200 0400 0000 1000 0000 0100 0000  ....... ........</span><br><span class="line">6f2e 3200 0400 0000 1000 0000 0100 0000  ..... ..........</span><br><span class="line">6f2e 3200 0400 0000 1000 0000 0100 0000  ................</span><br><span class="line">6f2e 3200 0400 0000 1000 0000 0100 0000  .. .............</span><br><span class="line">474e 5500 0000 0000 0300 0000 0200 0000  GNU.............</span><br><span class="line">474e 5500 62ac 36a4 3ad7 9006 fbe2 d107  GNU.b.6.:.......</span><br><span class="line">d9c9 dd6f ce89 2222 0100 0000 0100 0000  ...o..&quot;&quot;........</span><br><span class="line">006c 6962 632e 736f 2e36 0070 7574 7300  .libc.so.6.puts.</span><br><span class="line">5f5f 6378 615f 6669 6e61 6c69 7a65 005f  __cxa_finalize._</span><br><span class="line">5f6c 6962 635f 7374 6172 745f 6d61 696e  _libc_start_main</span><br><span class="line">0047 4c49 4243 5f32 2e32 2e35 005f 4954  .GLIBC_2.2.5._IT</span><br><span class="line">415e 415f c390 662e 0f1f 8400 0000 0000  A^A_..f.........</span><br><span class="line">f3c3 0000 4883 ec08 4883 c408 c300 0000  ....H...H.......</span><br><span class="line">0100 0200 4920 6c6f 7665 2079 6f75 0000  ....I love you..</span><br><span class="line">011b 033b 3c00 0000 0600 0000 10fe ffff  ...;&lt;...........</span><br><span class="line">8800 0000 30fe ffff b000 0000 40fe ffff  ....0.......@...</span><br><span class="line">4743 433a 2028 5562 756e 7475 2037 2e35  GCC: (Ubuntu 7.5</span><br><span class="line">2e30 2d33 7562 756e 7475 317e 3138 2e30  .0-3ubuntu1~18.0</span><br><span class="line">3429 2037 2e35 2e30 0000 0000 0000 0000  4) 7.5.0........</span><br><span class="line">006d 6169 6e00 5f5f 544d 435f 454e 445f  .main.__TMC_END_</span><br><span class="line">5f00 5f49 544d 5f72 6567 6973 7465 7254  _._ITM_registerT</span><br><span class="line">4d43 6c6f 6e65 5461 626c 6500 5f5f 6378  MCloneTable.__cx</span><br><span class="line">4d43 6c6f 6e65 5461 626c 6500 5f5f 6378  ...... .. ......</span><br><span class="line">615f 6669 6e61 6c69 7a65 4040 474c 4942  a_finalize@@GLIB</span><br><span class="line">435f 322e 322e 3500 002e 7379 6d74 6162  C_2.2.5...symtab</span><br><span class="line">0200 0000 0000 0000 3802 0000 0000 0000  ........8.......</span><br><span class="line">3802 0000 0000 0000 1c00 0000 0000 0000  8...............</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">汇编语言(1949年)</span><br><span class="line">section .data            </span><br><span class="line">        msg db &quot;I love you&quot;, 0xA</span><br><span class="line">        len equ $ - msg</span><br><span class="line"></span><br><span class="line">section .text</span><br><span class="line">global _start</span><br><span class="line">_start:</span><br><span class="line">        mov eax, 4</span><br><span class="line">        mov ebx, 1 </span><br><span class="line">        mov ecx, msg</span><br><span class="line">        mov edx, len</span><br><span class="line">        int 0x80 </span><br><span class="line">                 </span><br><span class="line">        mov eax, 1</span><br><span class="line">        mov ebx, 0</span><br><span class="line">        int 0x80</span><br><span class="line">```        </span><br><span class="line"></span><br><span class="line">```Fortran</span><br><span class="line">Fortran语言(1957年诞生，上古四大语言之一，世界上第一门高级语言)</span><br><span class="line">program love</span><br><span class="line">write (*.*) &quot;I love you&quot;</span><br><span class="line">end program love</span><br></pre></td></tr></table></figure>

<figure class="highlight lisp"><table><tr><td class="code"><pre><span class="line">Lisp语言(1958年诞生，上古四大语言之一，人工智能语言)</span><br><span class="line"></span><br><span class="line">(<span class="name">print</span> <span class="string">"I love you"</span>)</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">COBOL语言(1959年诞生，上古四大语言之一，目前用于银行系统)</span><br><span class="line">IDENTIFICATION   DIVISION.</span><br><span class="line">PROGRAM-ID.      &apos;七夕快乐&apos;.</span><br><span class="line">ENVIRONMENT      DIVISION.</span><br><span class="line">DATA             DIVISION.</span><br><span class="line">FILE             SECTION.</span><br><span class="line">WORKING-STORAGE  SECTION.</span><br><span class="line">PROCEDURE        DIVISION.</span><br><span class="line">MAIN-PROCEDURE.</span><br><span class="line">DISPLAY &quot;I love you&quot;.</span><br><span class="line">STOP RUN.</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ALGOL语言(1960年诞生，上古四大语言之一，代数语言，C语言祖宗)</span><br><span class="line">(print((&quot;I love you&quot;,newline)))</span><br></pre></td></tr></table></figure>

<figure class="highlight"><table><tr><td class="code"><pre><span class="line">Basic语言(1964年诞生，比尔盖茨发家语言)</span><br><span class="line">PRINT "I love you"</span><br><span class="line">END</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">B语言(1969年诞生，C语言前身，C语言又叫NewB)</span><br><span class="line">main() &#123;</span><br><span class="line">    extern a, b, c;</span><br><span class="line">    putchar (a); putchar (b); putchar (c);</span><br><span class="line">&#125;</span><br><span class="line">a &apos;hell&apos;;</span><br><span class="line">b &apos;o, w&apos;;</span><br><span class="line">c &apos;orld&apos;;</span><br></pre></td></tr></table></figure>

<figure class="highlight pascal"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Pascal</span>语言(<span class="number">1970</span>年诞生，用于教学)</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">writeln("I love you")</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">C语言(<span class="number">1972</span>年诞生，和Unix同生，共同催生了Linux，众多编程语言以及互联网)</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span> </span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"I love you!\n"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">```        </span><br><span class="line"></span><br><span class="line">```Smalltalk</span><br><span class="line">Smalltalk语言(<span class="number">1972</span>年诞生，第一门面向对象的语言)</span><br><span class="line">Transcript show: <span class="string">"I love you"</span>; cr.</span><br></pre></td></tr></table></figure>

<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">Scheme语言(1975年诞生，Lisp变种之一)</span><br><span class="line">(<span class="name"><span class="builtin-name">display</span></span> <span class="string">"I love you"</span>)(<span class="name"><span class="builtin-name">newline</span></span>)</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Bash语言(1977年诞生，Linux系统默认工具语言)</span><br><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">echo "I love you"</span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">C++语言(<span class="number">1980</span>年诞生，C的扩展版，支持面向对象)</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"I love you"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">```        </span><br><span class="line"></span><br><span class="line">```R</span><br><span class="line">R语言(<span class="number">1980</span>年诞生，用于统计)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"I love you"</span>)</span><br></pre></td></tr></table></figure>

<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">Matlab语言(<span class="number">1984</span>年诞生，数值计算，仿真，底层基于C语言)</span><br><span class="line"><span class="built_in">disp</span>(<span class="string">"I love you"</span>)</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Objective-C语言(1986年诞生，C语言的一种扩展，用于开发IOS和Mac系统等)</span><br><span class="line">#import &lt;stdio.h&gt;</span><br><span class="line"></span><br><span class="line">#import &lt;objc/Object.h&gt;</span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line">    printf(&quot;I love you\n&quot;);</span><br><span class="line"></span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight perl"><table><tr><td class="code"><pre><span class="line">Perl语言(<span class="number">1987</span>年诞生，借鉴C，Shell)</span><br><span class="line"><span class="comment">#!/usr/bin/env perl</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> <span class="string">"I love you\n"</span></span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">Html标记语言(1990年诞生，网页语言，由互联网之父蒂姆.伯纳斯.李发明)</span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>七夕快乐<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span> <span class="tag">&lt;<span class="name">p</span>&gt;</span>I love you<span class="tag">&lt;/<span class="name">p</span>&gt;</span> <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Python2语言(1991年诞生，底层基于C语言)</span><br><span class="line">#!/usr/bin/env python2</span><br><span class="line">#-*- coding: utf-8</span><br><span class="line">print &quot;I love you&quot;</span><br></pre></td></tr></table></figure>

<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">Lua语言(<span class="number">1993</span>年诞生，大量用于游戏和数据库事务)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"I love you"</span>)</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Java语言(<span class="number">1995</span>年诞生，类C/C++语言，目前属于甲骨文公司)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 7<span class="title">x</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"I love you"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">JavaScript语言(<span class="number">1995</span>年诞生，网页交互)</span><br><span class="line"><span class="built_in">window</span>.alert(<span class="string">"I love you"</span>);</span><br></pre></td></tr></table></figure>

<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">Ruby语言(<span class="number">1995</span>年诞生，日本人松本行弘发明)</span><br><span class="line">print <span class="string">"I love you\n"</span></span><br></pre></td></tr></table></figure>

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">PHP语言(<span class="number">1995</span>年诞生，又名拍黄片，网站建设LAMP中的P)</span><br><span class="line">&lt;!DOCTYPE html&gt;  </span><br><span class="line">    &lt;body&gt;  </span><br><span class="line">    <span class="meta">&lt;?php</span>  </span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"I love you"</span>;</span><br><span class="line">    <span class="meta">?&gt;</span>  </span><br><span class="line">    &lt;/body&gt;  </span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">C<span class="meta">#语言(1999年诞生，微软公司开发)</span></span><br><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line">namespace 7x</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">love</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">"I love you"</span>);</span><br><span class="line"></span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">```        </span><br><span class="line"></span><br><span class="line">```D</span><br><span class="line">D语言(<span class="number">1999</span>年诞生)</span><br><span class="line">import std.stdio</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span>(<span class="params"><span class="keyword">string</span>[] args</span>) </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    writeln(<span class="string">"I love you"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Python3语言(2008年诞生，Python2的下一代)</span><br><span class="line">#!/usr/bin/env python3</span><br><span class="line">#-*- coding: utf-8</span><br><span class="line"></span><br><span class="line">print(&quot;I love you&quot;)</span><br></pre></td></tr></table></figure>

<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">Go语言(<span class="number">2009</span>年诞生，云时代语言，谷歌公司开发)</span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">"I love you"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line">Rust语言(<span class="number">2010</span>年诞生，Mozilla公司开发，高效安全的语言，目标是替代C/C++语言)</span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"I love you"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">WebAssembly语言文本格式(2010年诞生，Mozilla公司开发)</span><br><span class="line">(module</span><br><span class="line">    (func (result i32)</span><br><span class="line">        (i32.const 0)</span><br><span class="line">    )</span><br><span class="line">    (export &quot;I love you&quot; (func 0))</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">Dart语言(<span class="number">2011</span>年诞生，谷歌公司开发，支持其下一代操作系统fuchsia和flutter网页开发框架)</span><br><span class="line">main() &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"I love you"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line">Kotlin语言(<span class="number">2011</span>年诞生，谷歌官方指定安卓系统开发语言)</span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args: <span class="type">Array</span>)</span></span> &#123;</span><br><span class="line">    println(<span class="string">"I love you"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line">TypeScript语言(<span class="number">2012</span>年诞生，JavaScript超集，微软公司开发)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"I love you"</span>);</span><br></pre></td></tr></table></figure>

<figure class="highlight julia"><table><tr><td class="code"><pre><span class="line">Julia语言(<span class="number">2012</span>年诞生，用于高性能计算)</span><br><span class="line">println(<span class="string">"I love you"</span>)</span><br></pre></td></tr></table></figure>

<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="type">Swift</span>语言(<span class="number">2014</span>年诞生，苹果公司开发，用于开发<span class="type">IOS</span>和<span class="type">Mac</span>系统等)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"I love you"</span>)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>CS</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux内核代码结构</title>
    <url>/title/71001b59/</url>
    <content><![CDATA[<p><img src="https://s1.ax1x.com/2020/08/07/afOPyT.png" alt="linus-tux"></p>
<a id="more"></a>

<h1 id="Linux系统结构"><a href="#Linux系统结构" class="headerlink" title="Linux系统结构"></a>Linux系统结构</h1><p>大二时阅读过linus在1991年写的kernel-0.01版，现在发现和今天的内核比起来结构超级简单。下图是Linux系统架构图，中线间就是内核。</p>
<p><img src="https://s1.ax1x.com/2020/08/07/afL3in.png" alt="kernel-arch"></p>
<h3 id="1991年0-01版内核目录及文件"><a href="#1991年0-01版内核目录及文件" class="headerlink" title="1991年0.01版内核目录及文件"></a>1991年0.01版内核目录及文件</h3><table>
<thead>
<tr>
<th align="left">num</th>
<th align="left">dir</th>
<th align="left">note</th>
</tr>
</thead>
<tbody><tr>
<td align="left">1</td>
<td align="left">boot</td>
<td align="left">启动文件</td>
</tr>
<tr>
<td align="left">2</td>
<td align="left">init</td>
<td align="left">初始化/主进程</td>
</tr>
<tr>
<td align="left">2</td>
<td align="left">fs</td>
<td align="left">文件系统</td>
</tr>
<tr>
<td align="left">7</td>
<td align="left">mm</td>
<td align="left">内存管理</td>
</tr>
<tr>
<td align="left">5</td>
<td align="left">kernel</td>
<td align="left">内核文件</td>
</tr>
<tr>
<td align="left">3</td>
<td align="left">include</td>
<td align="left">头文件</td>
</tr>
<tr>
<td align="left">6</td>
<td align="left">lib</td>
<td align="left">函数库</td>
</tr>
<tr>
<td align="left">8</td>
<td align="left">tools</td>
<td align="left">工具</td>
</tr>
<tr>
<td align="left">9</td>
<td align="left">Makefile</td>
<td align="left">编译脚本</td>
</tr>
</tbody></table>
<p>启动文件中boot.s先运行，接着是head.s运行，最后切换到init中的main.c开启init线程。其他文件是kernel用来管理的各类必备文件。</p>
<h3 id="2020年5-8版本内核目录及文件"><a href="#2020年5-8版本内核目录及文件" class="headerlink" title="2020年5.8版本内核目录及文件"></a>2020年5.8版本内核目录及文件</h3><table>
<thead>
<tr>
<th align="left">num</th>
<th align="left">item</th>
<th align="left">item</th>
<th align="left">item</th>
</tr>
</thead>
<tbody><tr>
<td align="left">1</td>
<td align="left">arch</td>
<td align="left">init</td>
<td align="left">net</td>
</tr>
<tr>
<td align="left">2</td>
<td align="left">block</td>
<td align="left">ipc</td>
<td align="left">README</td>
</tr>
<tr>
<td align="left">3</td>
<td align="left">certs</td>
<td align="left">Kbuild</td>
<td align="left">samples</td>
</tr>
<tr>
<td align="left">4</td>
<td align="left">COPYING</td>
<td align="left">Kconfig</td>
<td align="left">scripts</td>
</tr>
<tr>
<td align="left">5</td>
<td align="left">CREDITS</td>
<td align="left">kernel</td>
<td align="left">security</td>
</tr>
<tr>
<td align="left">6</td>
<td align="left">crypto</td>
<td align="left">lib</td>
<td align="left">sound</td>
</tr>
<tr>
<td align="left">7</td>
<td align="left">Documentation</td>
<td align="left">Makefile</td>
<td align="left">tools</td>
</tr>
<tr>
<td align="left">8</td>
<td align="left">drivers</td>
<td align="left">mm</td>
<td align="left">usr</td>
</tr>
<tr>
<td align="left">9</td>
<td align="left">fs</td>
<td align="left">LICENSES</td>
<td align="left">virt</td>
</tr>
<tr>
<td align="left">10</td>
<td align="left">include</td>
<td align="left">MAINTAINERS</td>
<td align="left"></td>
</tr>
</tbody></table>
<p>可以看到，2020年的内核和1991年的内核相比，变化非常大。具体代码行数变化如下图所示。  </p>
<p><img src="https://s1.ax1x.com/2020/08/07/afjNsf.png" alt="code-0.01"></p>
<p><img src="https://s1.ax1x.com/2020/08/07/afjgyV.png" alt="code-5.80"></p>
<p>30年间，从89个文件变成了69319个文件。代码行数从8326行到1950万行，这就是开源的奇迹。</p>
<h3 id="0-01版代码树"><a href="#0-01版代码树" class="headerlink" title="0.01版代码树"></a>0.01版代码树</h3><p>.<br>├── boot 启动文件<br>│   ├── boot.s<br>│   └── head.s<br>├── fs  文件系统<br>│   ├── bitmap.c<br>│   ├── block_dev.c<br>│   ├── buffer.c<br>│   ├── char_dev.c<br>│   ├── exec.c<br>│   ├── fcntl.c<br>│   ├── file_dev.c<br>│   ├── file_table.c<br>│   ├── inode.c<br>│   ├── ioctl.c<br>│   ├── Makefile<br>│   ├── namei.c<br>│   ├── open.c<br>│   ├── pipe.c<br>│   ├── read_write.c<br>│   ├── stat.c<br>│   ├── super.c<br>│   ├── truncate.c<br>│   └── tty_ioctl.c<br>├── include 头文件<br>│   ├── a.out.h<br>│   ├── asm<br>│   │   ├── io.h<br>│   │   ├── memory.h<br>│   │   ├── segment.h<br>│   │   └── system.h<br>│   ├── const.h<br>│   ├── ctype.h<br>│   ├── errno.h<br>│   ├── fcntl.h<br>│   ├── linux<br>│   │   ├── config.h<br>│   │   ├── fs.h<br>│   │   ├── hdreg.h<br>│   │   ├── head.h<br>│   │   ├── kernel.h<br>│   │   ├── mm.h<br>│   │   ├── sched.h<br>│   │   ├── sys.h<br>│   │   └── tty.h<br>│   ├── signal.h<br>│   ├── stdarg.h<br>│   ├── stddef.h<br>│   ├── string.h<br>│   ├── sys<br>│   │   ├── stat.h<br>│   │   ├── times.h<br>│   │   ├── types.h<br>│   │   ├── utsname.h<br>│   │   └── wait.h<br>│   ├── termios.h<br>│   ├── time.h<br>│   ├── unistd.h<br>│   └── utime.h<br>├── init 初始化/主进程0<br>│   └── main.c<br>├── kernel 内核文件<br>│   ├── asm.s<br>│   ├── console.c<br>│   ├── exit.c<br>│   ├── fork.c<br>│   ├── hd.c<br>│   ├── keyboard.s<br>│   ├── Makefile<br>│   ├── mktime.c<br>│   ├── panic.c<br>│   ├── printk.c<br>│   ├── rs_io.s<br>│   ├── sched.c<br>│   ├── serial.c<br>│   ├── sys.c<br>│   ├── system_call.s<br>│   ├── traps.c<br>│   ├── tty_io.c<br>│   └── vsprintf.c<br>├── lib  函数库<br>│   ├── close.c<br>│   ├── ctype.c<br>│   ├── dup.c<br>│   ├── errno.c<br>│   ├── execve.c<br>│   ├── _exit.c<br>│   ├── Makefile<br>│   ├── open.c<br>│   ├── setsid.c<br>│   ├── string.c<br>│   ├── wait.c<br>│   └── write.c<br>├── Makefile<br>├── mm  内存管理<br>│   ├── Makefile<br>│   ├── memory.c<br>│   └── page.s<br>└── tools 工具<br>│   └── build.c  </p>
<p>11 directories, 88 files  </p>
<p>里面的代码不难，但细节多。看了人家大佬的代码，再反思自己的代码，差距很大。</p>
]]></content>
      <categories>
        <category>内核</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>华为面试</title>
    <url>/title/f822c036/</url>
    <content><![CDATA[<p><img src="https://s1.ax1x.com/2020/08/04/a0F4bR.png" alt="interview"></p>
<a id="more"></a>

<p>最近参加华为面试，感觉问的问题很有价值，总结了下面试的题目。</p>
<h2 id="一面-2020-08-03-10-05"><a href="#一面-2020-08-03-10-05" class="headerlink" title="一面 [2020.08.03 10:05]"></a>一面 [2020.08.03 10:05]</h2><ul>
<li>谈谈分布式。  </li>
<li>谈谈数据结构。  </li>
<li>哈希碰撞如何解决？  </li>
<li>手撕代码：集合合并。  </li>
<li>谈Python，Rust语言。  </li>
<li>四层B+树，查找需要次数？  </li>
<li>B+树的查找过程是怎么样？  </li>
<li>B+树适合的情况，B+树节点分裂的条件。  </li>
<li>存储10万左右的中国地名数据，自己设计数据模型来存储，要求实现快速访问。  </li>
</ul>
<h2 id="二面-2020-08-04-10-01"><a href="#二面-2020-08-04-10-01" class="headerlink" title="二面 [2020.08.04 10:01]"></a>二面 [2020.08.04 10:01]</h2><ul>
<li>谈汇编语言。</li>
<li>谈编程语言发展。</li>
<li>谈微服务和集群。</li>
<li>谈软件开发原则。</li>
<li>软件开发设计模式。</li>
<li>谈对Linux系统认识。</li>
<li>谈谈Linux内核架构。</li>
<li>谈Linux系统调用流程。</li>
<li>操作系统调度的单位是？</li>
<li>谈面向对象和面向过程。</li>
<li>谈软件开发，如何优化呢？</li>
<li>谈如何使用各种数据结构。</li>
<li>调用时栈的情况，栈的毁坏。</li>
<li>为什么会出现NoSql，NewSql？</li>
<li>关系型数据库和NoSQL有什么区别？</li>
<li>设计一个图书馆系统，你如何设计？</li>
<li>设计一个调度系统，你考虑如何设计？</li>
<li>100亿文档数据存储，你如何存储处理？</li>
<li>1+2这样的计算，计算机的处理流程是？</li>
</ul>
<h2 id="面试官建议"><a href="#面试官建议" class="headerlink" title="面试官建议 "></a>面试官建议 </h2><ul>
<li>计算机技术飞速发展，但底层技术永不过时，需要学好。  </li>
<li>了解技术发展的历史沿革，要做到即有广度，更有深度。</li>
</ul>
<h2 id="三面-2020-08-13-19-06"><a href="#三面-2020-08-13-19-06" class="headerlink" title="三面 [2020.08.13 19:06]"></a>三面 [2020.08.13 19:06]</h2><ul>
<li>自我介绍 </li>
<li>对加班的看法？</li>
<li>你的职业规划？</li>
<li>竞赛中遇到的困难？</li>
<li>人生中遇到的最大困难？</li>
<li>令你很有成就感的事情？</li>
<li>你如何安排自己的日常事务？</li>
<li>如何看待华为被称为血汗工厂？</li>
</ul>
<h2 id="面试官建议-1"><a href="#面试官建议-1" class="headerlink" title="面试官建议 "></a>面试官建议 </h2><ul>
<li>分配到边缘存储岗位，涉及容器，AI等技术。</li>
</ul>
]]></content>
      <categories>
        <category>面试</category>
      </categories>
      <tags>
        <tag>IT</tag>
      </tags>
  </entry>
  <entry>
    <title>21世纪计算机技术发展展望</title>
    <url>/title/a1d4a508/</url>
    <content><![CDATA[<p><img src="https://s1.ax1x.com/2020/08/02/aY6dW8.png" alt="21-new-tech"></p>
<a id="more"></a>

<p>学习计算机技术的过程中，不免发现问题，有时还能迸发些新的思想。本文就是这样的情况下诞生的，试着对本世纪计算机可能发展的趋势作预测，算是瞎猜吧！</p>
<p>对网络尤其是七层参考互联模型的研究使我相信，未来一定会有新的协议和技术出现。结合个人对技术的掌握和理解，下面两幅图整理了未来我眼中的计算机技术发展方向。</p>
<p><img src="https://s1.ax1x.com/2020/08/02/aY6jSO.png" alt="21-new-tech-part1"><br><img src="https://s1.ax1x.com/2020/08/02/aYcpmd.png" alt="21-new-tech-part2"></p>
<h2 id="对语言的看法"><a href="#对语言的看法" class="headerlink" title="对语言的看法"></a>对语言的看法</h2><p>  传统的语言，比如C/C++/Java/Python之类的语言都是在单机时代设计的，那时多CPU的机器没有，所以很多语言就没有考虑多CPU并行，更多的考虑是和机器硬件的交互，如指针，内存。虽然部分语言也支持并行，但程度不够。这类语言我称之为机器系语言。</p>
<p>  类似Go语言这样的语言，天生自带并发/并行机制，是网络时代需要的语言。Go对许多问题的处理都比较好，写出的代码也很规范。在网络大并发时代，Go必将大放异彩，我称Go这类语言为网络系语言。</p>
<p>  量子系语言，这是为量子计算机准备的。鄙人学过一点量子力学(知道名词)，知道这技术和传统IT技术的不同，所以在量子计算机上跑的语言必定需要专门设计，目前这类语言有Q#和Silq。</p>
<p>  最后是星际系语言，这是我本人的设想。设想人类在月球和火星上建立科研机构，甚至永久居住地。那么地球如何与之通信？现行的通信机制需要修改，语言核心特性也需要改。</p>
<p>  我的设想是，通过发射足够多的环日卫星和环球卫星，在火星，地球，月球周围形成通信卫星网。然后就可以利用环日卫星作中转站实现大规模跨空域信息传送。</p>
<p>  这样一种构建在太阳，地球，月球，火星等星体间的网络。我称之为银河网。据此网络，可提出银河网需要的通信协议和计算，存储等概念。</p>
<h2 id="对操作系统的看法"><a href="#对操作系统的看法" class="headerlink" title="对操作系统的看法"></a>对操作系统的看法</h2><p>  目前手机端是安卓和苹果，桌面是Linux/Mac OS/Windows，相信未来这些都会发生变化。比如谷歌正在推Fuchsia系统，计划用Dart/Flutter统一桌面和手机端。未来的趋势可能是手机和桌面统一，前端开发统一标准，一处编写，到处都可以用。</p>
<p>  工业用的系统，比如物联网系统要应对产业园，家用，医疗，交通等场景。这些场景对实时，性能的要求和传统的手机和电脑不同，所以应该会诞生适合物联网的系统。</p>
<p>  云时代，云产品商作为后台为开发者/企业服务。云产品很大程度上相当于运维，所以对存储，配置，管理，灾备要求高，反而通用系统的一些性能不用那么在意。所以云操作系统可以在传统系统上改进。目前已经有很多云系统了，阿里就有飞天系统。</p>
<p>  量子体系和传统PC不一样，所以也需要配套的操作系统。</p>
<p>  至于设想的银河网，设计星际通信，更需要专用系统，它应该会从传统的系统演进。</p>
<h2 id="对计算的看法"><a href="#对计算的看法" class="headerlink" title="对计算的看法"></a>对计算的看法</h2><p>  计算机，计算占了2/3，所以未来的计算也必定走出自己的发展道路。传统的计算，最快就是超级计算，代表了一个国家的科技实力。而云/雾/霾计算是过去几年提得比较多的，适应的是不同需求。边缘计算就是终端计算，比如手机和电脑端。量子计算是专业的，一直在搞的量子计算机就是为了作计算，这块是必然发展的。星际计算是传统计算的衍生，只是把计算放到星际环境考虑。</p>
<h2 id="对存储的看法"><a href="#对存储的看法" class="headerlink" title="对存储的看法"></a>对存储的看法</h2><p>硬盘，高速存储芯片这些我们都用过了，大型数据库也有了。今天来看似乎我们进入了大数据时代，好像数据就有多大似的。然而人的追求是无限的。比如，如何保存数据几十上百年？未来的数据，目前的数据库能不能处理得了？如何快速取出？量子信息如何保存？这些需求都需要相应的存储技术。分布式，超大规模的存储技术必然还要向前发展。对保存时间的追求诞生了玻璃存储，对数据量的追求诞生了DNA存储。这些新的存储形式如何运用到计算机系统中？还有，物联网实时数据会有多大呢？目前磁盘存储速度太慢了，无法满足高速率大数据持续写入。从目前的技术来看，未来相变(PCM)存储可能会成为主流，说不定还会替代DRAM内存。类似的还有赛道存储器、高速磁存储器。</p>
<h2 id="对协议的看法"><a href="#对协议的看法" class="headerlink" title="对协议的看法"></a>对协议的看法</h2><p>一流企业做协议(专利)，二流做产品，三流做服务。Unicode码不断发展，解决了地球人的文字保存问题。TCP/IP协议族给出了网际通信的标准。区块链协议给出了信任链。新的需求推动新的协议诞生。量子通信，必然有量子协议。星际通信则会有星际通信协议。</p>
<h2 id="对网络的看法"><a href="#对网络的看法" class="headerlink" title="对网络的看法"></a>对网络的看法</h2><p>局域网，互联网已蔚为大观。然而互联网也有问题：文件重复(不同地方重复)，文件易丢失(404)。如何解决冗余，如何避免404？以p2p技术为组成的IPFS正是为此而来。物联网，也有一张网，可能是家具，汽车，医院，工厂等大家伙构成的一张网，和人类用的互联网并行不悖。若是造出了量子计算机，是否可能重走传统计算机构成互联网的套路，再打造出一个量子网络？最后，以太阳，地球，月球，火星等星球组成一张银河网是否可能呢？</p>
<h2 id="对分布式的看法"><a href="#对分布式的看法" class="headerlink" title="对分布式的看法"></a>对分布式的看法</h2><p>云时代，大数据时代。数据多，繁杂。系统模块越来越多。如何拆分，如何优化？拆分后如何协调？传统的单体架构正不断拆解，专业化。分解后的模块要实现原有的功能，那么存储，一致性，通信，计算如何解决？</p>
<h2 id="对智能技术的看法"><a href="#对智能技术的看法" class="headerlink" title="对智能技术的看法"></a>对智能技术的看法</h2><p>AI火了，到处是谈AI的人。那么AI如何发展？目前对图像，语音，视频的处理算是可以用，但还可以优化，对自然语言的理解也还没有解决，多语言翻译如何像口译员一样？以AI技术为基础，能否得到智能机器人，智能的决策系统？最后，今天的AI还无法实现逻辑推理，也就是说它并不像人一样智能。今后如何实现逻辑推理，通过图灵测试？</p>
<h2 id="对安全的看法"><a href="#对安全的看法" class="headerlink" title="对安全的看法"></a>对安全的看法</h2><p>黑客的猖獗，计算能力的突破都使得安全问题日益突显。未来，某些今天(2020)还管用的加密技术可能就能被破解了。所以，加密技术会不断发展。前段时间IBM推出了全同态加密技术，这意味着安全又上了一个台阶，是否能破解这种技术呢？其他的安全技术，如量子加密，这技术有量子力学原理兜底，不可破。除了技术层面，个人层面，社会工程如何应对？目前的黑客攻击，问题多是出在人身上。如何保护个人隐私，如何划定员工权限？</p>
<h2 id="对应用软件的看法"><a href="#对应用软件的看法" class="headerlink" title="对应用软件的看法"></a>对应用软件的看法</h2><p>  其实一般人用的软件，大部分都有了。目前来看医疗和法律方面还比较欠缺。未来社会，一定是一个法治社会，个人对法律的需求会上升，此类应用或者服务定会多起来。对医疗的需求也差不多，没有人不需要医生和医药的。今天订外卖，以后可以订(线上预约)医生。还有是否未来人人会有一套私有云设备，这需要开发对应的产品和应用。</p>
<h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>这些问题？其实对应着各高校/企业在计算机技术方面的研究方向。它们可能在大学就是一门学科，在企业就是一个岗位，正不断培养人才。今后怎样，实在难想。我个人的水平有限，只能开脑洞到此。瞎想一番，发现计算机技术还处于快速发展阶段，还有很多发展的方向可以研究嘛! 吾辈当不断前行。</p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>CS</tag>
      </tags>
  </entry>
  <entry>
    <title>python下各种虚拟环境使用</title>
    <url>/title/3f375b95/</url>
    <content><![CDATA[<p><img src="https://s1.ax1x.com/2020/07/23/UL2XtO.png" alt="virtualenv"></p>
<a id="more"></a>

<p>Python下存在多种虚拟环境构建方式，现做整理。</p>
<h2 id="为什么需要虚拟环境"><a href="#为什么需要虚拟环境" class="headerlink" title="为什么需要虚拟环境"></a>为什么需要虚拟环境</h2><p>传统的库安装方式，如pip install package，会将包安装到系统，不管你后面用不用都在。然而大部分人安装后就忘了卸载，导致占用内存。还有的时候，项目可能需要python2.7，有时又需要python3.5，甚至对同一个包的版本需求也不一样，既要1.1版又要1.4版，然而传统安装方式只可能保留一个版本，这该怎么办？</p>
<p>为了解决占用和多版本问题，python给出了虚拟环境。虚拟环境其实就是一个目录，项目需要的包不再安装到系统而是该目录。不同的目录可以放同一个包不同的版本。项目不要了，可直接删除该目录，节约内存。如下图，一个主目录下是各种虚拟环境。</p>
<p><img src="https://s1.ax1x.com/2020/07/23/ULRCnI.png" alt="virtualenv1"></p>
<p>python的虚拟环境方式主要有三种，分别是virtualenv，virtualenvwrapper，pipenv。三者的区别是管理依赖的方式和指令的复杂度，主体功能肯定都是一样的。</p>
<h2 id="virtualenv"><a href="#virtualenv" class="headerlink" title="virtualenv"></a>virtualenv</h2><p>最早出现的就是virtualenv了，下面是其用法。</p>
<p><img src="https://s1.ax1x.com/2020/07/23/ULoaWV.png" alt="virtualenv-op"></p>
<h2 id="virtualenvwrapper"><a href="#virtualenvwrapper" class="headerlink" title="virtualenvwrapper"></a>virtualenvwrapper</h2><p>virtualenvwrapper是virtualenv的升级版，管理各个环境，切换方便</p>
<p><img src="https://s1.ax1x.com/2020/07/23/ULofSK.png" alt="virtualenvwrapper-op"></p>
<h2 id="pipenv"><a href="#pipenv" class="headerlink" title="pipenv"></a>pipenv</h2><p>pipenv 是pip和virtualenv的结合，使用Pipfile和Pipfile.lock来管理依赖关系，更加方便，未来会是Python开虚拟环境的首选方法。下面是其用法。</p>
<p><img src="https://s1.ax1x.com/2020/07/23/ULT9Ts.png" alt="pipenv-op"></p>
]]></content>
      <categories>
        <category>虚拟环境</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>virtualenv</tag>
      </tags>
  </entry>
  <entry>
    <title>学习Scrapy源代码</title>
    <url>/title/ae08e597/</url>
    <content><![CDATA[<p><img src="https://s1.ax1x.com/2020/07/21/UI6CX4.png" alt="scrapy-structure"></p>
<a id="more"></a>

<p>近期学习Scrapy源代码，稍作整理。</p>
<h2 id="Scrapy架构"><a href="#Scrapy架构" class="headerlink" title="Scrapy架构"></a>Scrapy架构</h2><p><img src="https://s1.ax1x.com/2020/07/21/UI6CX4.png" alt="scrapy-structure"></p>
<p>主体架构包含五大主体，两大中间件。</p>
<table>
<thead>
<tr>
<th align="left">主体/中间件</th>
<th align="left">作用</th>
</tr>
</thead>
<tbody><tr>
<td align="left">engine</td>
<td align="left">调动爬虫，使其运转起来</td>
</tr>
<tr>
<td align="left">scheduler</td>
<td align="left">接受新的url，并安排下载器下载Request</td>
</tr>
<tr>
<td align="left">downloader</td>
<td align="left">专注于下载，返回Response给spider</td>
</tr>
<tr>
<td align="left">spider</td>
<td align="left">爬虫，处理Response并返回url给scheduler，item给item pipeline</td>
</tr>
<tr>
<td align="left">item pipeline</td>
<td align="left">管道，保存下载的数据项item</td>
</tr>
<tr>
<td align="left">downloadermiddlewares</td>
<td align="left">下载器中间件，处理request中各种问题</td>
</tr>
<tr>
<td align="left">spidermiddlewares</td>
<td align="left">爬虫中间件，处理response中各种问题</td>
</tr>
</tbody></table>
<h2 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h2><p>Scrapy爬虫的运行流程如上图红色圆圈标示。</p>
<table>
<thead>
<tr>
<th align="left">流程</th>
<th align="left">作用</th>
</tr>
</thead>
<tbody><tr>
<td align="left">1</td>
<td align="left">引擎从初始化spider中获取start_urls</td>
</tr>
<tr>
<td align="left">2</td>
<td align="left">引擎将start_urls给调度器并请求下载任务</td>
</tr>
<tr>
<td align="left">3</td>
<td align="left">调度器取出url给引擎以驱动下载器</td>
</tr>
<tr>
<td align="left">4</td>
<td align="left">引擎分发url给下载器</td>
</tr>
<tr>
<td align="left">5</td>
<td align="left">下载器按url下载</td>
</tr>
<tr>
<td align="left">6</td>
<td align="left">下载器返回下载内容给spider</td>
</tr>
<tr>
<td align="left">7</td>
<td align="left">spider处理返回内容，提取新url和item</td>
</tr>
<tr>
<td align="left">8</td>
<td align="left">spider将新url给调度器，item给pipeline以保存</td>
</tr>
<tr>
<td align="left">9</td>
<td align="left">返回第三步，开启多线程调度，循环工作</td>
</tr>
</tbody></table>
<p>第一二步使用的是起始url，这是我们在项目spider/xxxspider.py中写好的，如下面的代码所示，这是起始时爬虫需要的，从第三步开始，爬虫自己有新爬取到的url，可以自行调度实现循环下载，直到任务结束。所以编写scrapy爬虫只需要很少的代码。</p>
<p><img src="https://s1.ax1x.com/2020/07/21/UoSGad.png" alt="scrapy-code"></p>
<h2 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a>源代码</h2><p>如下是scrapy所有目录及外层代码。目录比较重，里面包含许多处理代码，而外层代码是scrapy实现的逻辑，这些外层代码调用目录中的代码完成整个爬取流程。所有目录及代码在/usr/local/lib/python3.6/dist-packages/scrapy/下。</p>
<table>
<thead>
<tr>
<th align="left">目录</th>
<th align="left">作用</th>
</tr>
</thead>
<tbody><tr>
<td align="left">commands</td>
<td align="left">命令行命令具体实现</td>
</tr>
<tr>
<td align="left">contracts</td>
<td align="left">爬虫可用性检测代码</td>
</tr>
<tr>
<td align="left">core</td>
<td align="left">核心类，包括downloader, engine, scheduler, scraper, spidermw</td>
</tr>
<tr>
<td align="left">downloadermiddlewares</td>
<td align="left">下载器中间件，包括ajax,cookie,http,agent,robots等</td>
</tr>
<tr>
<td align="left">extensions</td>
<td align="left">扩展类，包括logstats, spiderstates等</td>
</tr>
<tr>
<td align="left">http</td>
<td align="left">网络处理，包括Request和Response等</td>
</tr>
<tr>
<td align="left">linkextractors</td>
<td align="left">链接抽取类，包括html, lxml, regex, sgml</td>
</tr>
<tr>
<td align="left">loader</td>
<td align="left">Item加载器</td>
</tr>
<tr>
<td align="left">pipelines</td>
<td align="left">Item管道，包含file, image和media</td>
</tr>
<tr>
<td align="left">selector</td>
<td align="left">基于lxml的xpath选择器</td>
</tr>
<tr>
<td align="left">settings</td>
<td align="left">爬虫基本配置，十分多，可自定义</td>
</tr>
<tr>
<td align="left">spidermiddlewares</td>
<td align="left">爬虫中间件，包括深度优先深度设置，http错误处理等</td>
</tr>
<tr>
<td align="left">spiders</td>
<td align="left">爬虫类，实现xmlFeed, sitemap，crawl</td>
</tr>
<tr>
<td align="left">templates</td>
<td align="left">项目和爬虫模板，包括一个项目架构，基本爬虫，双向爬虫等</td>
</tr>
<tr>
<td align="left">utils</td>
<td align="left">各种工具类，用于实现各种处理功能</td>
</tr>
<tr>
<td align="left"></td>
<td align="left"></td>
</tr>
<tr>
<td align="left"></td>
<td align="left"></td>
</tr>
<tr>
<td align="left"></td>
<td align="left"></td>
</tr>
<tr>
<td align="left"><strong>外层代码</strong></td>
<td align="left"><strong>作用</strong></td>
</tr>
<tr>
<td align="left">cmdline.py</td>
<td align="left">命令行参数处理</td>
</tr>
<tr>
<td align="left">crawler.py</td>
<td align="left">爬虫</td>
</tr>
<tr>
<td align="left">dupefilters.py</td>
<td align="left">去重</td>
</tr>
<tr>
<td align="left">exceptions.py</td>
<td align="left">错误处理</td>
</tr>
<tr>
<td align="left">exporters.py</td>
<td align="left">序列化保存文件</td>
</tr>
<tr>
<td align="left">extension.py</td>
<td align="left">扩展管理</td>
</tr>
<tr>
<td align="left">interfaces.py</td>
<td align="left">爬虫接口</td>
</tr>
<tr>
<td align="left">item.py</td>
<td align="left">数据流Item</td>
</tr>
<tr>
<td align="left">link.py</td>
<td align="left">链接对象结构</td>
</tr>
<tr>
<td align="left">logformatter.py</td>
<td align="left">日志生成</td>
</tr>
<tr>
<td align="left">mail.py</td>
<td align="left">邮件助手</td>
</tr>
<tr>
<td align="left">middleware.py</td>
<td align="left">中间件管理</td>
</tr>
<tr>
<td align="left">pqueues.py</td>
<td align="left">下载器先级队列</td>
</tr>
<tr>
<td align="left">resolver.py</td>
<td align="left">Twisted异步处理</td>
</tr>
<tr>
<td align="left">responsetypes.py</td>
<td align="left">请求响应数据</td>
</tr>
<tr>
<td align="left">robotstxt.py</td>
<td align="left">禁止爬取规则</td>
</tr>
<tr>
<td align="left">shell.py</td>
<td align="left">命令行工具</td>
</tr>
<tr>
<td align="left">signalmanager.py</td>
<td align="left">信号管理</td>
</tr>
<tr>
<td align="left">signals.py</td>
<td align="left">信号</td>
</tr>
<tr>
<td align="left">spiderloader.py</td>
<td align="left">爬虫加载</td>
</tr>
<tr>
<td align="left">squeues.py</td>
<td align="left">调度器队列</td>
</tr>
<tr>
<td align="left">statscollectors.py</td>
<td align="left">爬虫信息统计</td>
</tr>
<tr>
<td align="left">mime.types</td>
<td align="left">支持的文件类型</td>
</tr>
<tr>
<td align="left">VERSION</td>
<td align="left">版本信息</td>
</tr>
<tr>
<td align="left">_monkeypatches.py</td>
<td align="left">猴子补丁，处理Twisted</td>
</tr>
<tr>
<td align="left">__init__.py</td>
<td align="left">项目初始化</td>
</tr>
<tr>
<td align="left">__main__.py</td>
<td align="left">执行入口</td>
</tr>
</tbody></table>
<h2 id="大概流程"><a href="#大概流程" class="headerlink" title="大概流程"></a>大概流程</h2><p>__main__(或命令行的scrapy crawl xxx等) 调用cmdline.py，cmdline.py调用utils中文件处理配置，再调用crawler.py。crcrawler.py调用spider和core中引擎。引擎初始化scheduler，downloader，scraper等，开启下载流程。</p>
<p>重要文件：cmdline.py, crawler.py<br>重要目录：core, http, pipelines, utils, spider<br>其他的目录和文件都为重要文件和目录服务，主逻辑实现也在重要目录和文件中。  </p>
<h2 id="调用关系图"><a href="#调用关系图" class="headerlink" title="调用关系图"></a>调用关系图</h2><p>图一是从命令行开始的全过程，图二是核心架构运行流程，也即图一crawl下面那部分。当然，很多都省略了，比如日志，错误处理，这些不是主要的内容，加上反而让人看不懂。</p>
<p><img src="https://s1.ax1x.com/2020/07/21/UIIPGd.png" alt="whole"></p>
<p>我们自己写的代码只在start_request处执行一次，此后就是核心线程开启循环下载直到结束，可以看到scrapy为我们完成了大多数内容。由于scrapy整体架构高度解耦合，所以需要什么功能，我们可以自己去添加配置。每一个箭头就是一步，对这一步需要添加功能就编写好代码然后串在中间。比如觉得downloader和scraper中还需要处理，自己写好代码，将其放在downloader和scraper间，这样整个爬虫处理流程是不变的，但增加了自定义内容。</p>
<p><img src="https://s1.ax1x.com/2020/07/21/UIImdS.png" alt="core"></p>
]]></content>
      <categories>
        <category>爬虫</category>
      </categories>
      <tags>
        <tag>Code</tag>
        <tag>scrapy</tag>
      </tags>
  </entry>
  <entry>
    <title>linux下软件安装方式</title>
    <url>/title/d63ca381/</url>
    <content><![CDATA[<p><img src="https://s1.ax1x.com/2020/07/11/UQtLvT.png" alt="linux-software"></p>
<a id="more"></a>

<p>Windows下安装软件似乎只有一种方式，那就是下载.exe，然后执行安装。然而Linux系统中软件安装方式可谓五花八门，下面总结一番。</p>
<p>因为Linux系统发行版多，各家有各家的软件安装方式，这种种不同方式可称为专用安装方式。另外，有人开发的软件若是想要支持各大发行版，那么就需要一种通用的软件安装方式。</p>
<h2 id="A-Linux通用的跨发行版软件包安装方式"><a href="#A-Linux通用的跨发行版软件包安装方式" class="headerlink" title="A.Linux通用的跨发行版软件包安装方式"></a>A.Linux通用的跨发行版软件包安装方式</h2><p>1.snap<br>2.flatpak<br>3.AppImage<br>4.source-code  </p>
<p>1.snap是ubuntu搞的，但目前已经支持多种发行版的安装，可归类为通用安装方式。snap目前甚至可以安装微信到linux。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo snap install xxx #用snap安装软件</span><br></pre></td></tr></table></figure>

<p>2.flatpak(前身为xdg-app) 是一种用于构建，分发，安装和运行应用程序的技术。通过在沙箱中隔离应用程序来提高Linux桌面的安全性，允许应用程序安装在任何Linux发行版上。 </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo flatpak install xxx #用flatpak安装软件</span><br></pre></td></tr></table></figure>

<p>3.AppImage是打包好的可执行镜像，赋予执行权限后直接运行就可。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">chmod +x AppImage</span><br><span class="line">./AppImage</span><br></pre></td></tr></table></figure>
<p>4.source-code，源代码安装，这是最基本的，最通用的安装方式。而源代码发布时，作者可能提供了不同安装选项给用户，有以下三种。  </p>
<blockquote>
<p>a. 只有configure文件，则按如下方式安装<br>    ./configure #为了生成makefile<br>    make<br>    make install<br>b. 已有makefile<br>    make<br>    make install<br>c. 只有Imake<br>    xmkmf<br>    make<br>    make install  </p>
</blockquote>
<p>说完通用的方式，接着看看专用的方式。</p>
<h2 id="B-Linux专用的软件包管理器"><a href="#B-Linux专用的软件包管理器" class="headerlink" title="B.Linux专用的软件包管理器"></a>B.Linux专用的软件包管理器</h2><ol>
<li>.deb</li>
<li>.rpm</li>
<li>etc…</li>
</ol>
<p>主要是两大类 </p>
<blockquote>
<p><strong>a</strong>.以Debian系列的dpkg安装deb包，和apt-get方式<br>sudo dpkg -i xxx.deb<br>sudo apt-get install xxx<br><strong>b</strong>.以Redhat系列的rpm安装rpm包，和yum方式<br>sudo rpm xxx.rpm<br>sudo yum install xxx<br><strong>c</strong>.其他的，比如Arch用pacman -S xxx 安装</p>
</blockquote>
<h2 id="rpm包转deb包"><a href="#rpm包转deb包" class="headerlink" title="rpm包转deb包"></a>rpm包转deb包</h2><p>rpm包还可以转换为deb包，以便安装到debian系linux系统。具体方式如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo apt install alien</span><br><span class="line">sudo aline xxx.rpm     #当前目录生成xxx.deb</span><br><span class="line">sudo dpkg -i xxx.deb</span><br></pre></td></tr></table></figure>
<p>这样，就能将rpm包转换为deb包，然后装到debian系系统，不过有的软件转换后未必能安装。</p>
]]></content>
      <categories>
        <category>软件</category>
      </categories>
      <tags>
        <tag>software</tag>
      </tags>
  </entry>
  <entry>
    <title>理解递归和动态规划</title>
    <url>/title/1e14846f/</url>
    <content><![CDATA[<p><img src="https://s1.ax1x.com/2020/07/08/UE1Wad.png" alt="recursion"></p>
<a id="more"></a>

<p>什么是递归，尾递归呢？动态规划和递归有什么关系，区别？什么时候用递归，什么时候用动态规划？<br>这些问题令人苦恼，有人长时间搞不清楚其中道理。</p>
<h2 id="先说结论，再逐个分析"><a href="#先说结论，再逐个分析" class="headerlink" title="先说结论，再逐个分析"></a>先说结论，再逐个分析</h2><blockquote>
<p>1.递归是一种调用自身，通过<strong>分解大问题成小问题</strong>以解决问题的技术。<br>2.尾递归解决了递归<strong>大量占用栈</strong>的缺点，是对递归的一种优化，节约了内存。<br>3.动态规划是一种利用<strong>小问题解决大问题</strong>的技术。<br>4.递归从大到小，自顶(大)向下(小)；动态规划从小到大，自底(小)向上(大)。<br>5.两者选取了不同角度解决问题，同时都各自<strong>带来了新问题</strong>。  </p>
</blockquote>
<h2 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h2><p>第一条：递归是一种调用自身，通过<strong>分解大问题成小问题</strong>以解决问题的技术。大问题分解成小问题是重点，我们来看一例。</p>
<p>最著名的斐波那契数列问题。都知道斐波那契数列是一列数字，现在我问你第23个斐波那契数是多少？答不上来吧？这就叫大问题，因为你脑袋一下子算不出来，这问题就大了。计算机最不怕算了，它就是干计算的。要让计算机解决这个问题，就需要告诉他，<strong>a.该怎么开始，b.怎么结束，c.计算规则</strong>是什么，然后它就能算出来了。</p>
<p>现在的问题是，计算机不知道这个问题如何下手。这时人就想，我能不能先算第21和22个数，我知道第21个和22个数就能由规则计算出第23个了。此处<strong>规则</strong>，就是需要告诉机器的，这里是Fib(23) = Fib(22) + Fib(21)。现在问题是Fib(22)和Fib(21)还是不知道。聪明的人类又想，我再知道前面两个数不就能算了？所以问题演变成Fib(23) = Fib(21) + Fib(20) + Fib(20) + Fib(19)。可是这么还是不知道，还要算再前面的数，什么时候是个头啊？对，就是头，找到头，不就算出来了吗？头，就是停止，就是端，就是边界，就是约束。也就是该 <strong>b.怎么结束</strong>。而<strong>c.计算规则Fib(n) = Fib(n-1) + Fib(n-2)</strong>是人类定义的。如果你将Fib(23)展开，发现是一串加法，特别长。而计算机计算时也是这么干的，所以它特别耗费内存，就像你不能记住展开式一样，因为占用你的脑存。仔细一看，发现Fib(23)最后会变成由Fib(0)和Fib(1)组成的超长加法。而Fib(0)和Fib(1)也是人类定义的，这就是<strong>b.该怎么结束</strong>。Fib(0)和Fib(1)既然是人定义的，肯定对我们和计算机来说就是小问题了，too simple，sometimes naive。这就是<strong>分解大问题成小问题</strong>。所以利用递归，我们把Fib(23)变成了一堆Fib(1)和Fib(0)的加法运算，<strong>a.该怎么开始</strong>则指从23开始，这是需求。</p>
<p>所以看到一来就是一个超大的数，规模，尺度的问题，多半可以考虑递归手段。就是化大为小，化繁为简。这是该用递归的时候。</p>
<p>现在再去翻书，看递归定义：1.出口，2.转移条件。你发现就好懂了。因为解决大问题，需要必要的规则和起始条件(或终止条件)。其实，理科有什么科学规律不是这样呢？</p>
<p>比如描述宇宙规律，牛顿爵士提出理解和解决世界小问题的方案，加点约束，就可以解决宇宙的大问题了。</p>
<p><img src="https://s1.ax1x.com/2020/07/21/UoFFr6.png" alt="newtown-laws"></p>
<p>受力与否为起始条件(边界)，三大定律就是转移条件。有了力，宇宙就动起来了。</p>
<p>当然，你说既然力是起始条件(边界)，那力呢？牛顿发现不把起始原因找到，肯定不行，因为那套运动规则就没法动起来。所以牛逼的爵士，再来一律，万有引力定律。就是说，到处都是起始原因，万有嘛，大家都有，这下宇宙不就动了吗。</p>
<p>$$万有引力定律:  F = G\frac{M_{1}M_{2}}{R^{2}}$$</p>
<p>所以，牛，很牛！我看了觉得简单，自己要是不看，到死也想不出来。所以，牛顿牛逼。就这几句话，你我独自是整不出来的，所以要尊重数学家和物理学家嘛！</p>
<p>扯远了，但是这么个理解法。下面写出Fibnacci的算法。</p>
<p><img src="https://s1.ax1x.com/2020/07/21/UoFfQ1.png" alt="fibnacci1"></p>
<p>上面的代码，就可以用来计算了。但是，我们上面分析指出，它占内存，不断的压栈。所以是否能够优化一下，减少内存占用呢？当然可以，尾递归就是干这事的。</p>
<p>尾递归，字面意思，就是它是尾巴上的，最后一个调用的。所以，尾递归只能调用自身，不能乘除加减。下面就是斐波那契的尾递归版本。最后一行，不加减，无乘除，单是调用自身，这就是尾递归。</p>
<p><img src="https://s1.ax1x.com/2020/07/21/UoFbJH.png" alt="fibnacci2"></p>
<p>那它如何减少内存消耗呢？我们知道纯递归版中，栈主要用来记录中间状态了，而这些中间状态中我们需要的无非就是些加法罢了，因为依据规则Fib(n) = Fib(n-1) + Fib(n-2)，这里就只有加法。那么我们把加法保留到下次函数调用，不就可以只用一个栈了吗？所以我们就这么干了。下面的参数中y和x+y就是保留的值和加法状态。</p>
<p>现在回过头看第二条：尾递归解决了递归<strong>大量占用栈</strong>的缺点，是对递归的一种优化，节约了内存。可第五条又说，都各自<strong>带来了新问题</strong>。什么问题？</p>
<p>函数递归调用，参数入栈，栈上还有很多操作系统用得到的信息，尤其出Bug了，调试时，就需要栈上的信息。现在尾递归给优化了，全部信息都在一份参数里，而且还是多次相加后的值，找不出问题了。所以尾递归在操作系统层面，还有许多需要栈信息的应用上并没有得到太多应用。别看优化了，节约资源了，但是也引入了新问题。</p>
<p>全部最优，最后结果可能最糟，许多问题都是这样，工程问题要考虑全局，不要一来就优化，就凸优化。</p>
<blockquote>
<p>过早的优化是万恶之源，因为让正确的程序更快，要比让快速的程序正确容易得多。– Donald Knuth</p>
</blockquote>
<h2 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h2><p>第三条：动态规划是一种利用<strong>小问题解决大问题</strong>的技术。刚才我们看了递归是把大问题分解成小问题，现在我们从小问题能不能推导些大问题出来呢？当然能，这就是动态规划。动态二字是说，新问题是热乎的，才得到的。比如还是用斐波那契数列说，我们用两个小问题Fib(0) + Fib(1)就得到Fib(2)了，看到没，没叫你算Fib(2)，但是由小问题构造出了大问题。而且Fib(3) = Fib(2) + Fib(1)，这里Fib(3)又是由刚生成的Fib(2)构成，和最开始的Fib(0)无关了，始终用这种规律动态生成下一个。是不是利用小问题解决大问题？</p>
<p>再看动态规划版的斐波那契数列计算代码。</p>
<p><img src="https://s1.ax1x.com/2020/07/21/UoFqWd.png" alt="fibnacci3"></p>
<p>此处是从2开始计算到n，由0和1两个基本条件构造大问题，这就是动态规划。递归的终止条件恰好就是动态规划的起始条件，所以不同的叫法，出口，边界，约束，其实都一样。</p>
<p>再看第五条，各自<strong>带来了新问题</strong>。 动态规划带来什么问题？动态规划不好找准转移规则和起始条件。而这两点又是必须的，所以动态规划好用，不好理解。比如爬楼梯问题，可以爬1阶，2阶，3阶。计算到n阶楼梯的爬法。<br>还有很多问题，乍一看是看不出能用动态规划的，甚至条件复杂得很。还有上面的dp数组也很费内存。</p>
<p>当然，费内存可以优化，用两个变量来存储信息。</p>
<p><img src="https://s1.ax1x.com/2020/07/21/UoFjyt.png" alt="fibnacci4"></p>
<p>这也是数学教材上的斐波那契算法定义。</p>
<h2 id="联系"><a href="#联系" class="headerlink" title="联系"></a>联系</h2><p>第四条：递归从大到小，自顶(大)向下(小)；动态规划从小到大，自底(小)向上(大)。现在应该好理解了。自顶向下和自底向上是另一种说法罢了。递归时，从一个大问题不断产生新的小问题，画成树，不就是顶上一个点，下面一堆点吗？所以从顶向下，最下面刚好是基本条件。而动态规划恰好就从基本条件开始，不断向上计算较大的问题。自然自底向上了。递归和动态规划两者联系就在于此，看从哪头开始。</p>
<p><img src="https://s1.ax1x.com/2020/07/08/UElmkR.png" alt="recursion_fibnacci"></p>
<h2 id="斐波那契数列算法合集"><a href="#斐波那契数列算法合集" class="headerlink" title="斐波那契数列算法合集"></a>斐波那契数列算法合集</h2><p>计算斐波那契数列的5种方法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#纯递归 最糟糕的算法</span><br><span class="line">def fibnacci(n):</span><br><span class="line">    if n &lt; 2: return n</span><br><span class="line"></span><br><span class="line">    return fibnacci(n-1) + fibnacci(n-2)</span><br><span class="line"></span><br><span class="line">#动态规划，迭代，不要数组</span><br><span class="line">def fibnacci0(n):</span><br><span class="line">    if n &lt; 2: return n</span><br><span class="line"></span><br><span class="line">    p, q, = 0, 1</span><br><span class="line">    for i in range(2, n+1):</span><br><span class="line">        p , q = q, p + q</span><br><span class="line"></span><br><span class="line">    return q</span><br><span class="line"></span><br><span class="line">#尾递归，x, y保存了递归的状态</span><br><span class="line">def fibnacci1(n, x=0, y=1):</span><br><span class="line">    if n &lt; 2:</span><br><span class="line">        return y</span><br><span class="line">    else:</span><br><span class="line">        return fibnacci0(n-1, y, x+y)</span><br><span class="line"></span><br><span class="line">#递归 + 自备缓存 (减少重复计算)</span><br><span class="line">res = []</span><br><span class="line">def fibnacci2(n):</span><br><span class="line">    if n &lt; 2:</span><br><span class="line">        val = n</span><br><span class="line">    else:</span><br><span class="line">        val = fibnacci2(n-1) + fibnacci2(n-2)</span><br><span class="line">    res.append(val)</span><br><span class="line"></span><br><span class="line">    return val</span><br><span class="line"></span><br><span class="line">#递归 + python官方提供缓存</span><br><span class="line">from functools import lru_cache</span><br><span class="line">@lru_cache(maxsize=1000)</span><br><span class="line">def fibnacci3(n):</span><br><span class="line">    if n &lt; 2: return n      #return后的值会放到lru_cache里</span><br><span class="line"></span><br><span class="line">    return fibnacci3(n-1) + fibnacci3(n-2)</span><br><span class="line"></span><br><span class="line">#面向线上笔试编程</span><br><span class="line">def fibnacci4(n):</span><br><span class="line">    offer =[  </span><br><span class="line">             0,</span><br><span class="line">           1,   1,</span><br><span class="line">         2,       3,</span><br><span class="line">        5,         8,</span><br><span class="line">       13,          21,</span><br><span class="line">      34,            55,</span><br><span class="line">      89,            144,</span><br><span class="line">     233,            377,</span><br><span class="line">     610,            987,</span><br><span class="line">     1597,           2584,</span><br><span class="line">     4181,         6765,</span><br><span class="line">      10946,      17711,</span><br><span class="line">        28657,   46368,</span><br><span class="line">             75025,</span><br><span class="line"></span><br><span class="line">        121393, 196418, 317811,</span><br><span class="line">        514229, 832040, 1346269,</span><br><span class="line">        2178309, 3524578, 5702887,</span><br><span class="line">        9227465, 4930352, 24157817,</span><br><span class="line">        39088169,</span><br><span class="line">        63245986,</span><br><span class="line">        102334155,</span><br><span class="line">        165580141,</span><br><span class="line">        267914296,</span><br><span class="line">        433494437,</span><br><span class="line">        701408733,</span><br><span class="line">        1134903170,</span><br><span class="line">        1836311903,</span><br><span class="line">        2971215073,</span><br><span class="line">        4807526976,</span><br><span class="line">        7778742049,</span><br><span class="line">        12586269025, 20365011074,32951280099,</span><br><span class="line">        53316291173, 86267571272, 139583862445,</span><br><span class="line">        225851433717, 365435296162, 591286729879,</span><br><span class="line">        956722026041, 1548008755920,2504730781961</span><br><span class="line">        4052739537881,</span><br><span class="line">        6557470319842,</span><br><span class="line">        10610209857723,</span><br><span class="line">        17167680177565,</span><br><span class="line">        27777890035288,</span><br><span class="line">        44945570212853,</span><br><span class="line">        72723460248141,</span><br><span class="line">        117669030460994,</span><br><span class="line">        190392490709135,</span><br><span class="line">        308061521170129,</span><br><span class="line">        498454011879264,</span><br><span class="line">        806515533049393,</span><br><span class="line">        1304969544928657,</span><br><span class="line">        2111485077978050,</span><br><span class="line">        3416454622906707,</span><br><span class="line">        5527939700884757,</span><br><span class="line">        8944394323791464,</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        14472334024676221, 23416728348467685</span><br><span class="line">        37889062373143906, 61305790721611591,</span><br><span class="line">        99194853094755497, 160500643816367088,</span><br><span class="line">        259695496911122585, 420196140727489673,</span><br><span class="line">        679891637638612258, 1100087778366101931,</span><br><span class="line">        1779979416004714189,</span><br><span class="line">        2880067194370816120,</span><br><span class="line">        4660046610375530309,</span><br><span class="line">        7540113804746346429,</span><br><span class="line">        12200160415121876738,</span><br><span class="line">        19740274219868223167,</span><br><span class="line">        31940434634990099905,</span><br><span class="line">        51680708854858323072,</span><br><span class="line">        83621143489848422977,</span><br><span class="line">        135301852344706746049,</span><br><span class="line">        218922995834555169026,</span><br><span class="line">        354224848179261915075,</span><br><span class="line">        573147844013817084101,</span><br><span class="line">        927372692193078999176,</span><br><span class="line">        1500520536206896083277,2427893228399975082453, </span><br><span class="line">        3928413764606871165730, 6356306993006846248183,</span><br><span class="line">        10284720757613717413913,16641027750620563662096,</span><br><span class="line">        26925748508234281076009, 43566776258854844738105, </span><br><span class="line">        70492524767089125814114, 114059301025943970552219,</span><br><span class="line">        184551825793033096366333, 298611126818977066918552,</span><br><span class="line">        483162952612010163284885,</span><br><span class="line">        781774079430987230203437,</span><br><span class="line">        1264937032042997393488322,</span><br><span class="line">        2046711111473984623691759,</span><br><span class="line">        3311648143516982017180081,</span><br><span class="line">        5358359254990966640871840,</span><br><span class="line">        8670007398507948658051921,</span><br><span class="line">        14028366653498915298923761,</span><br><span class="line">        22698374052006863956975682,</span><br><span class="line">        36726740705505779255899443,</span><br><span class="line">        59425114757512643212875125,</span><br><span class="line">        96151855463018422468774568,</span><br><span class="line">        155576970220531065681649693,</span><br><span class="line">        251728825683549488150424261,</span><br><span class="line">        407305795904080553832073954,</span><br><span class="line">        659034621587630041982498215,</span><br><span class="line">        1066340417491710595814572169,</span><br><span class="line">        1725375039079340637797070384,</span><br><span class="line">                    </span><br><span class="line">                                 2791715456571051233611642553,</span><br><span class="line">                               4517090495650391871408712937,</span><br><span class="line">                     7308805952221443105020355490,  11825896447871834976429068427,</span><br><span class="line">             19134702400093278081449423917,               30960598847965113057878492344,</span><br><span class="line">      50095301248058391139327916261,                       81055900096023504197206408605,  </span><br><span class="line">    131151201344081895336534324866,                         212207101440105399533740733471, </span><br><span class="line">   343358302784187294870275058337,                           555565404224292694404015791808,</span><br><span class="line">   898923707008479989274290850145,                            1454489111232772683678306641953,</span><br><span class="line">   2353412818241252672952597492098,                           3807901929474025356630904134051,</span><br><span class="line">   6161314747715278029583501626149,                           9969216677189303386214405760200,</span><br><span class="line">   16130531424904581415797907386349,                         26099748102093884802012313146549,</span><br><span class="line">    42230279526998466217810220532898,                       68330027629092351019822533679447,</span><br><span class="line">    110560307156090817237632754212345,                     178890334785183168257455287891792,</span><br><span class="line">     89450641941273985495088042104137,                    468340976726457153752543329995929,</span><br><span class="line">      757791618667731139247631372100066,                 1226132595394188293000174702095995,</span><br><span class="line">        1983924214061919432247806074196061,            3210056809456107725247980776292056,</span><br><span class="line">          5193981023518027157495786850488117,        8404037832974134882743767626780173,</span><br><span class="line">              13598018856492162040239554477268290, 22002056689466296922983322104048463,</span><br><span class="line">                  35600075545958458963222876581316753,</span><br><span class="line">                    57602132235424755886206198685365216,</span><br><span class="line">                       93202207781383214849429075266681969,</span><br><span class="line">                         150804340016807970735635273952047185,</span><br><span class="line">                              244006547798191185585064349218729154,</span><br><span class="line">                                 394810887814999156320699623170776339,</span><br><span class="line">                                    638817435613190341905763972389505493,</span><br><span class="line">                                         1033628323428189498226463595560281832,</span><br><span class="line">                                           1672445759041379840132227567949787325,</span><br><span class="line">                                               2706074082469569338358691163510069157,</span><br><span class="line">                                                   4378519841510949178490918731459856482,</span><br><span class="line">                                                      7084593923980518516849609894969925639,</span><br><span class="line">                                                         11463113765491467695340528626429782121,</span><br><span class="line">                                                           18547707689471986212190138521399707760,</span><br><span class="line"></span><br><span class="line">        30010821454963453907530667147829489881,</span><br><span class="line">        48558529144435440119720805669229197641,</span><br><span class="line">        78569350599398894027251472817058687522,</span><br><span class="line">        127127879743834334146972278486287885163,</span><br><span class="line">        205697230343233228174223751303346572685,</span><br><span class="line">        332825110087067562321196029789634457848,</span><br><span class="line">        538522340430300790495419781092981030533,</span><br><span class="line">        871347450517368352816615810882615488381,</span><br><span class="line">        1409869790947669143312035591975596518914,</span><br><span class="line">        2281217241465037496128651402858212007295,</span><br><span class="line">        3691087032412706639440686994833808526209,          5972304273877744135569338397692020533504,</span><br><span class="line">        9663391306290450775010025392525829059713,         15635695580168194910579363790217849593217,</span><br><span class="line">        25299086886458645685589389182743678652930,       40934782466626840596168752972961528246147,</span><br><span class="line">        66233869353085486281758142155705206899077,      107168651819712326877926895128666735145224,</span><br><span class="line">        173402521172797813159685037284371942044301,    280571172992510140037611932413038677189525,</span><br><span class="line">        453973694165307953197296969697410619233826,   734544867157818093234908902110449296423351,</span><br><span class="line">        1188518561323126046432205871807859915657177, 1923063428480944139667114773918309212080528,</span><br><span class="line">        3111581989804070186099320645726169127737705,5034645418285014325766435419644478339818233,</span><br><span class="line">        8146227408089084511865756065370647467555938,13180872826374098837632191485015125807374171,</span><br><span class="line">        21327100234463183349497947550385773274930109,</span><br><span class="line">        34507973060837282187130139035400899082304280,</span><br><span class="line">        55835073295300465536628086585786672357234389,</span><br><span class="line">        90343046356137747723758225621187571439538669,</span><br><span class="line">        146178119651438213260386312206974243796773058,</span><br><span class="line">        236521166007575960984144537828161815236311727,</span><br><span class="line">        382699285659014174244530850035136059033084785,</span><br><span class="line">        619220451666590135228675387863297874269396512,</span><br><span class="line">        1001919737325604309473206237898433933302481297,</span><br><span class="line">        1621140188992194444701881625761731807571877809,</span><br><span class="line">        2623059926317798754175087863660165740874359106,</span><br><span class="line">        4244200115309993198876969489421897548446236915,</span><br><span class="line">        6867260041627791953052057353082063289320596021,</span><br><span class="line">        11111460156937785151929026842503960837766832936,</span><br><span class="line">        17978720198565577104981084195586024127087428957,</span><br><span class="line">        29090180355503362256910111038089984964854261893,</span><br><span class="line">        47068900554068939361891195233676009091941690850,</span><br><span class="line">        76159080909572301618801306271765994056795952743,</span><br><span class="line">        123227981463641240980692501505442003148737643593,</span><br><span class="line">        199387062373213542599493807777207997205533596336,</span><br><span class="line">        322615043836854783580186309282650000354271239929,</span><br><span class="line">        522002106210068326179680117059857997559804836265,</span><br><span class="line">        844617150046923109759866426342507997914076076194,</span><br><span class="line">        1366619256256991435939546543402365995473880912459,</span><br><span class="line">        2211236406303914545699412969744873993387956988653,</span><br><span class="line">        3577855662560905981638959513147239988861837901112,</span><br><span class="line">        5789092068864820527338372482892113982249794889765,</span><br><span class="line">        9366947731425726508977331996039353971111632790877,</span><br><span class="line">        15156039800290547036315704478931467953361427680642,</span><br><span class="line">        24522987531716273545293036474970821924473060471519,</span><br><span class="line">        39679027332006820581608740953902289877834488152161,</span><br><span class="line">        64202014863723094126901777428873111802307548623680,</span><br><span class="line">        103881042195729914708510518382775401680142036775841,</span><br><span class="line">        168083057059453008835412295811648513482449585399521,</span><br><span class="line">        271964099255182923543922814194423915162591622175362,</span><br><span class="line">        440047156314635932379335110006072428645041207574883,</span><br><span class="line">        712011255569818855923257924200496343807632829750245,</span><br><span class="line">        1152058411884454788302593034206568772452674037325128,</span><br><span class="line">        1864069667454273644225850958407065116260306867075373,</span><br><span class="line">        3016128079338728432528443992613633888712980904400501,</span><br><span class="line">        4880197746793002076754294951020699004973287771475874,</span><br><span class="line">        ]</span><br><span class="line">    return offer[n] #这个函数是没问题的，可以直接返回，共250位斐波那契数</span><br></pre></td></tr></table></figure>

<p>计算出来，用的时候直接返回是最快的，面试时n不超过30的。最后一种看起来傻，但实际用得多。计算机里实际运用的就是这么干的。一个定理，若是被证明了，直接计算出数保存，用的时候返回就是最好的，谁还拿机器去算呐，无法确定的需要机器算，确定的值直接用不就好了吗？比如第13个梅森素数是多少？是不是要CPU去跑？肯定不会啊，算出足够多的素数，保存成表，用的时候返回，多省事儿啊！傻了吧叽的算，别人孩子都两岁了。</p>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>Algorithm</tag>
      </tags>
  </entry>
  <entry>
    <title>Let&#39;s Go</title>
    <url>/title/23e3bd3/</url>
    <content><![CDATA[<p><img src="https://s1.ax1x.com/2020/07/01/NHF7on.png" alt="gopher"></p>
<a id="more"></a>

<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>Go这门语言，感觉有很多特性和Python一样，但又有很多特性和C一样。Go语言借鉴了许多其他语言的优秀用法。</p>
<p>Go由Google推出，主要开发者是贝尔实验室的大佬们(Rob Pike, Robert Griesemer, Ken Thompson)。</p>
<p>开发的目的主要是解决C++编译时间长的问题。Go于2009年11月正式推出第一个版本，到如今快11年了。而这十余年来，Go也逐渐火了起来。</p>
<h2 id="Go的几大优点"><a href="#Go的几大优点" class="headerlink" title="Go的几大优点"></a>Go的几大优点</h2><blockquote>
<p>1.简洁<br>2.速度接近C<br>3.原生并发非常好<br>4.对网络支持很好<br>5.文档支持也不错   </p>
</blockquote>
<h2 id="Go的几大特性"><a href="#Go的几大特性" class="headerlink" title="Go的几大特性"></a>Go的几大特性</h2><blockquote>
<p>1.反射<br>2.defer<br>3.工程化<br>4.错误处理<br>5.通道概念<br>6.goroutine<br>7.垃圾收集器GC<br>8.包机制(类似python)</p>
</blockquote>
<h2 id="Go的重要数据类型"><a href="#Go的重要数据类型" class="headerlink" title="Go的重要数据类型"></a>Go的重要数据类型</h2><blockquote>
<p>1.complex<br>2.string<br>3.slice<br>4.map<br>5.chan<br>6.interface  </p>
</blockquote>
<h2 id="Go的应用领域"><a href="#Go的应用领域" class="headerlink" title="Go的应用领域"></a>Go的应用领域</h2><blockquote>
<p>1.Web<br>2.分布式<br>3.中间件<br>4.服务器<br>5.数据库<br>6.网络编程<br>7.图像处理<br>8.游戏引擎  </p>
</blockquote>
<p>Go的重要产品Docker和Kubernetes，基本上大的互联网公司都在使用Go和Docker，微服务的实践因Docker和Kubernetes而火了起来。</p>
<p>目前云是热点，而Go天生的网络能力，使得Go成了云上的C语言。感觉未来的物联网时代，Go还会大放异彩。Go再许多方面超过了Java，又能接下许多C/C++的工作，能力是毋庸置疑的。</p>
<p>现在学习Go正是时候，Let’s Go!</p>
<p><img src="https://s1.ax1x.com/2020/07/01/NHuPxI.png" alt="golearn"></p>
]]></content>
      <categories>
        <category>编程语言</category>
      </categories>
      <tags>
        <tag>Go</tag>
      </tags>
  </entry>
  <entry>
    <title>国内软件源</title>
    <url>/title/39893abb/</url>
    <content><![CDATA[<p><img src="https://s1.ax1x.com/2020/06/29/NWW8LF.png" alt="sources-list"></p>
<a id="more"></a>

<p>Linux系统安装软件，尤其是国外软件特别麻烦，因为GFW的封锁，很多软件下载安装速度简直是龟速。好在国内各大公司，机构还备有软件源，我们可以利用国内源加快下载速度。</p>
<h2 id="常见的国内源"><a href="#常见的国内源" class="headerlink" title="常见的国内源"></a>常见的国内源</h2><table>
<thead>
<tr>
<th align="left">机构</th>
<th align="left">源主地址</th>
</tr>
</thead>
<tbody><tr>
<td align="left">阿里云</td>
<td align="left"><a href="http://mirrors.aliyun.com/" target="_blank" rel="noopener">http://mirrors.aliyun.com/</a></td>
</tr>
<tr>
<td align="left">网易</td>
<td align="left"><a href="http://mirrors.163.com/" target="_blank" rel="noopener">http://mirrors.163.com/</a></td>
</tr>
<tr>
<td align="left">华为</td>
<td align="left"><a href="http://mirrors.huaweicloud.com/" target="_blank" rel="noopener">http://mirrors.huaweicloud.com/</a></td>
</tr>
<tr>
<td align="left">搜狐</td>
<td align="left"><a href="http://mirrors.sohu.com/" target="_blank" rel="noopener">http://mirrors.sohu.com/</a></td>
</tr>
<tr>
<td align="left">清华</td>
<td align="left"><a href="http://mirrors.tuna.tsinghua.edu.cn/" target="_blank" rel="noopener">http://mirrors.tuna.tsinghua.edu.cn/</a></td>
</tr>
<tr>
<td align="left">中科大</td>
<td align="left"><a href="http://mirrors.ustc.edu.cn/" target="_blank" rel="noopener">http://mirrors.ustc.edu.cn/</a></td>
</tr>
</tbody></table>
<h2 id="如何设置呢"><a href="#如何设置呢" class="headerlink" title="如何设置呢?"></a>如何设置呢?</h2><p>找到软件更新器，点击进去是如下界面。</p>
<p><img src="https://s1.ax1x.com/2020/06/29/NWWxyT.png" alt="sources-list"></p>
<p>在<strong>下载自</strong>处点击，进去找China或者中国，点开下面就是国内可用的源了，选择一个，然后确认，接着会显示过期了，点更新。</p>
<p><img src="https://s1.ax1x.com/2020/06/29/NWW8LF.png" alt="sources-list"></p>
<p>接着是处理/etc/apt/sources.list内容。</p>
<p>首先备份</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo cp /etc/apt/sources.list /etc/apt/sources.list.back</span><br></pre></td></tr></table></figure>

<p>然后</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ sudo vi /etc/apt/sources.list</span><br></pre></td></tr></table></figure>

<p>加入如下内容</p>
<p>deb <a href="http://mirrors.aliyun.com/ubuntu/" target="_blank" rel="noopener">http://mirrors.aliyun.com/ubuntu/</a> bionic main restricted<br>deb <a href="http://mirrors.aliyun.com/ubuntu/" target="_blank" rel="noopener">http://mirrors.aliyun.com/ubuntu/</a> bionic-updates main restricted<br>deb <a href="http://mirrors.aliyun.com/ubuntu/" target="_blank" rel="noopener">http://mirrors.aliyun.com/ubuntu/</a> bionic universe<br>deb <a href="http://mirrors.aliyun.com/ubuntu/" target="_blank" rel="noopener">http://mirrors.aliyun.com/ubuntu/</a> bionic-updates universe<br>deb <a href="http://mirrors.aliyun.com/ubuntu/" target="_blank" rel="noopener">http://mirrors.aliyun.com/ubuntu/</a> bionic multiverse<br>deb <a href="http://mirrors.aliyun.com/ubuntu/" target="_blank" rel="noopener">http://mirrors.aliyun.com/ubuntu/</a> bionic-updates multiverse<br>deb <a href="http://mirrors.aliyun.com/ubuntu/" target="_blank" rel="noopener">http://mirrors.aliyun.com/ubuntu/</a> bionic-security main restricted<br>deb <a href="http://mirrors.aliyun.com/ubuntu/" target="_blank" rel="noopener">http://mirrors.aliyun.com/ubuntu/</a> bionic-security universe<br>deb <a href="http://mirrors.aliyun.com/ubuntu/" target="_blank" rel="noopener">http://mirrors.aliyun.com/ubuntu/</a> bionic-security multiverse  </p>
<p>最后更新    </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ sudo apt update   </span><br><span class="line">$ sudo apt upgrade</span><br></pre></td></tr></table></figure>

<p>现在安装软件速度就快了，可以试试。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ sudo apt install xxx</span><br></pre></td></tr></table></figure>

<h2 id="加入其他源"><a href="#加入其他源" class="headerlink" title="加入其他源"></a>加入其他源</h2><p>若要安装其他软件，可以自行添加对应源，比如要安装docker<br>deb [arch=amd64] <a href="http://download.docker.com/linux/ubuntu" target="_blank" rel="noopener">http://download.docker.com/linux/ubuntu</a> bionic stable  </p>
<p><strong>注意：</strong>bionic是ubuntu18.04的代号，若是16.04和20.04就需要更换为对应的xenial及focal。上面的阿里云源的bionic也对应更换。比如20.04是如下</p>
<p>deb <a href="http://mirrors.aliyun.com/ubuntu/" target="_blank" rel="noopener">http://mirrors.aliyun.com/ubuntu/</a> focal main restricted<br>deb <a href="http://mirrors.aliyun.com/ubuntu/" target="_blank" rel="noopener">http://mirrors.aliyun.com/ubuntu/</a> focal-updates main restricted<br>deb <a href="http://mirrors.aliyun.com/ubuntu/" target="_blank" rel="noopener">http://mirrors.aliyun.com/ubuntu/</a> focal universe<br>deb <a href="http://mirrors.aliyun.com/ubuntu/" target="_blank" rel="noopener">http://mirrors.aliyun.com/ubuntu/</a> focal-updates universe<br>deb <a href="http://mirrors.aliyun.com/ubuntu/" target="_blank" rel="noopener">http://mirrors.aliyun.com/ubuntu/</a> focal multiverse<br>deb <a href="http://mirrors.aliyun.com/ubuntu/" target="_blank" rel="noopener">http://mirrors.aliyun.com/ubuntu/</a> focal-updates multiverse<br>deb <a href="http://mirrors.aliyun.com/ubuntu/" target="_blank" rel="noopener">http://mirrors.aliyun.com/ubuntu/</a> focal-security main restricted<br>deb <a href="http://mirrors.aliyun.com/ubuntu/" target="_blank" rel="noopener">http://mirrors.aliyun.com/ubuntu/</a> focal-security universe<br>deb <a href="http://mirrors.aliyun.com/ubuntu/" target="_blank" rel="noopener">http://mirrors.aliyun.com/ubuntu/</a> focal-security multiverse  </p>
<h2 id="若软件不在源-ubuntu下，如何处理？"><a href="#若软件不在源-ubuntu下，如何处理？" class="headerlink" title="若软件不在源/ubuntu下，如何处理？"></a>若软件不在源/ubuntu下，如何处理？</h2><p>用阿里云的源，比如deb <a href="http://mirrors.aliyun.com/ubuntu/" target="_blank" rel="noopener">http://mirrors.aliyun.com/ubuntu/</a>  结尾是/ubuntu/，那么只有ubuntu加入了官方软件仓库的软件才能命令行一行代码下载，可有的是没有加入/ubuntu仓库的，如何解决？</p>
<p>其实也很间单，没加入/ubuntu/，说不定阿里云源或者其他源单独准备了。比如安装Rust可用中科大的源<br><a href="http://mirrors.ustc.edu.cn/rust-static/rustup" target="_blank" rel="noopener">http://mirrors.ustc.edu.cn/rust-static/rustup</a> 这个源是可以用的。</p>
<h2 id="若各个源都没有，只能安装外网的软件怎么办？"><a href="#若各个源都没有，只能安装外网的软件怎么办？" class="headerlink" title="若各个源都没有，只能安装外网的软件怎么办？"></a>若各个源都没有，只能安装外网的软件怎么办？</h2><p>这种情况我遇到过一次，而且是被封的软件。解决办法很间单：翻墙。</p>
<p>如果能找到代理ip，就可以用代理ip在命令行翻墙下载。</p>
<p>具体操作<br>1.网上(或自己的)找一个代理Ip<br>2.按照如下格式下载安装xxx软件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ sudo apt install xxx -o Acquire::http::proxy=&quot;http://190.103.178.14:8080&quot;   #http协议</span><br><span class="line">$ sudo apt install xxx -o Acquire::https::proxy=&quot;https://190.103.178.14:8080&quot; #https协议</span><br></pre></td></tr></table></figure>

<p>注意端口不一定是8080，协议也不一定是https，上面Ip是随意写的，你需要自己找一个可用的。</p>
]]></content>
      <categories>
        <category>软件</category>
      </categories>
      <tags>
        <tag>software</tag>
      </tags>
  </entry>
  <entry>
    <title>100本西方元典书籍(metabook)</title>
    <url>/title/7ba15624/</url>
    <content><![CDATA[<p><img src="https://s1.ax1x.com/2020/06/29/NWagmV.png" alt="metabook"></p>
<a id="more"></a>

<h1 id="100本值得读的西方元典书籍-metabook"><a href="#100本值得读的西方元典书籍-metabook" class="headerlink" title="100本值得读的西方元典书籍(metabook)"></a>100本值得读的西方元典书籍(metabook)</h1><p>前段时间整理了<a href="https://blog.csdn.net/Shieber/article/details/89295299" target="_blank" rel="noopener">一百本中华元典书籍</a>，今日顺便把值得读的100本西方元典书籍补上。还是那个观点，先读基本书籍，才能对西方的文明有深入了解，我自己也得按照这份书单来学习，西方元典大概也是按照朝代列出。</p>
<p><a id="download" href="https://github.com/QMHTMY/Ebooks/blob/master/%E5%85%83%E5%85%B8%E4%B9%A6%E7%B1%8D.pdf" target="_blank" rel="noopener"><i class="fa fa-download"></i><span>100本元典书籍PDF文件下载</span></a></p>
<table>
<thead>
<tr>
<th align="left">书名</th>
<th align="left">作者</th>
</tr>
</thead>
<tbody><tr>
<td align="left">《圣经和合本》</td>
<td align="left">众信徒</td>
</tr>
<tr>
<td align="left">《古兰经》</td>
<td align="left">奥托曼</td>
</tr>
<tr>
<td align="left">《奥德赛》</td>
<td align="left">荷马</td>
</tr>
<tr>
<td align="left">《伊利亚特》</td>
<td align="left">荷马</td>
</tr>
<tr>
<td align="left">《伯罗奔尼撒战争史》</td>
<td align="left">修昔底德</td>
</tr>
<tr>
<td align="left">《对话录》</td>
<td align="left">柏拉图</td>
</tr>
<tr>
<td align="left">《申辩篇》</td>
<td align="left">柏拉图</td>
</tr>
<tr>
<td align="left">《克力同篇》</td>
<td align="left">柏拉图</td>
</tr>
<tr>
<td align="left">《政治家篇》</td>
<td align="left">柏拉图</td>
</tr>
<tr>
<td align="left">《法律篇》</td>
<td align="left">柏拉图</td>
</tr>
<tr>
<td align="left">《会饮篇》</td>
<td align="left">柏拉图</td>
</tr>
<tr>
<td align="left">《理想国》</td>
<td align="left">柏拉图</td>
</tr>
<tr>
<td align="left">《诗学》</td>
<td align="left">亚里士多德</td>
</tr>
<tr>
<td align="left">《论灵魂》</td>
<td align="left">亚里士多德</td>
</tr>
<tr>
<td align="left">《修辞学》</td>
<td align="left">亚里士多德</td>
</tr>
<tr>
<td align="left">《物理学》</td>
<td align="left">亚里士多德</td>
</tr>
<tr>
<td align="left">《工具论》</td>
<td align="left">亚里士多德</td>
</tr>
<tr>
<td align="left">《形而上学》</td>
<td align="left">亚里士多德</td>
</tr>
<tr>
<td align="left">《论世界》</td>
<td align="left">笛卡尔</td>
</tr>
<tr>
<td align="left">《论人》</td>
<td align="left">笛卡尔</td>
</tr>
<tr>
<td align="left">《方法论》</td>
<td align="left">笛卡尔</td>
</tr>
<tr>
<td align="left">《几何学》</td>
<td align="left">笛卡尔</td>
</tr>
<tr>
<td align="left">《哲学原理》</td>
<td align="left">笛卡尔</td>
</tr>
<tr>
<td align="left">《乌托邦》</td>
<td align="left">托马斯·莫尔</td>
</tr>
<tr>
<td align="left">《自然哲学的数学原理》</td>
<td align="left">牛顿</td>
</tr>
<tr>
<td align="left">《拉摩的侄儿》</td>
<td align="left">狄德罗</td>
</tr>
<tr>
<td align="left">《修女》</td>
<td align="left">狄德罗</td>
</tr>
<tr>
<td align="left">《定命论者雅克和他的主人》</td>
<td align="left">狄德罗</td>
</tr>
<tr>
<td align="left">《狄德罗哲学选集》</td>
<td align="left">狄德罗</td>
</tr>
<tr>
<td align="left">《政府论》</td>
<td align="left">洛克</td>
</tr>
<tr>
<td align="left">《人生论》</td>
<td align="left">培根</td>
</tr>
<tr>
<td align="left">《新工具》</td>
<td align="left">培根</td>
</tr>
<tr>
<td align="left">《培根随笔集》</td>
<td align="left">培根</td>
</tr>
<tr>
<td align="left">《人类知识原理》</td>
<td align="left">貝克萊</td>
</tr>
<tr>
<td align="left">《西利斯》</td>
<td align="left">貝克萊</td>
</tr>
<tr>
<td align="left">《海拉斯与斐洛斯对话三篇》</td>
<td align="left">貝克萊</td>
</tr>
<tr>
<td align="left">《哈姆雷特》</td>
<td align="left">莎士比亞</td>
</tr>
<tr>
<td align="left">《罗密欧与朱丽叶》</td>
<td align="left">莎士比亞</td>
</tr>
<tr>
<td align="left">《仲夏夜之梦》</td>
<td align="left">莎士比亞</td>
</tr>
<tr>
<td align="left">《威尼斯商人》</td>
<td align="left">莎士比亞</td>
</tr>
<tr>
<td align="left">《李尔王》</td>
<td align="left">莎士比亞</td>
</tr>
<tr>
<td align="left">《麦克白》</td>
<td align="left">莎士比亞</td>
</tr>
<tr>
<td align="left">《纯粹理性批评》</td>
<td align="left">康德</td>
</tr>
<tr>
<td align="left">《实践理性批评》</td>
<td align="left">康德</td>
</tr>
<tr>
<td align="left">《判断力批判》</td>
<td align="left">康德</td>
</tr>
<tr>
<td align="left">《逻辑学讲义》</td>
<td align="left">康德</td>
</tr>
<tr>
<td align="left">《论美感和崇高感》</td>
<td align="left">康德</td>
</tr>
<tr>
<td align="left">《历史理性批判文集》</td>
<td align="left">康德</td>
</tr>
<tr>
<td align="left">《法的形而上学原理》</td>
<td align="left">康德</td>
</tr>
<tr>
<td align="left">《小逻辑》</td>
<td align="left">黑格尔</td>
</tr>
<tr>
<td align="left">《精神现象学》</td>
<td align="left">黑格尔</td>
</tr>
<tr>
<td align="left">《逻辑学》</td>
<td align="left">黑格尔</td>
</tr>
<tr>
<td align="left">《历史哲学》</td>
<td align="left">黑格尔</td>
</tr>
<tr>
<td align="left">《美学》</td>
<td align="left">黑格尔</td>
</tr>
<tr>
<td align="left">《法哲学原理》</td>
<td align="left">黑格尔</td>
</tr>
<tr>
<td align="left">《哲学史演讲录》</td>
<td align="left">黑格尔</td>
</tr>
<tr>
<td align="left">《少年威特的烦恼》</td>
<td align="left">歌德</td>
</tr>
<tr>
<td align="left">《浮士德》</td>
<td align="left">歌德</td>
</tr>
<tr>
<td align="left">《葛朗台》</td>
<td align="left">巴尔扎克</td>
</tr>
<tr>
<td align="left">《高老头》</td>
<td align="left">巴尔扎克</td>
</tr>
<tr>
<td align="left">《人间喜剧幻灭》</td>
<td align="left">巴尔扎克</td>
</tr>
<tr>
<td align="left">《 驴皮记》</td>
<td align="left">巴尔扎克</td>
</tr>
<tr>
<td align="left">《安娜·卡列尼娜》</td>
<td align="left">托尔斯泰</td>
</tr>
<tr>
<td align="left">《战争与和平》</td>
<td align="left">托尔斯泰</td>
</tr>
<tr>
<td align="left">《复活》</td>
<td align="left">托尔斯泰</td>
</tr>
<tr>
<td align="left">《伊凡·伊里奇之死》</td>
<td align="left">托尔斯泰</td>
</tr>
<tr>
<td align="left">《托尔斯泰忏悔录》</td>
<td align="left">托尔斯泰</td>
</tr>
<tr>
<td align="left">《童年》</td>
<td align="left">高尔基</td>
</tr>
<tr>
<td align="left">《在人间》</td>
<td align="left">高尔基</td>
</tr>
<tr>
<td align="left">《我的大学》</td>
<td align="left">高尔基</td>
</tr>
<tr>
<td align="left">《母亲》</td>
<td align="left">高尔基</td>
</tr>
<tr>
<td align="left">《巴黎圣母院》</td>
<td align="left">雨果</td>
</tr>
<tr>
<td align="left">《悲惨世界》</td>
<td align="left">雨果</td>
</tr>
<tr>
<td align="left">《笑面人》</td>
<td align="left">雨果</td>
</tr>
<tr>
<td align="left">《九三年》</td>
<td align="left">雨果</td>
</tr>
<tr>
<td align="left">《论人类不平等的起源和基础》</td>
<td align="left">卢梭</td>
</tr>
<tr>
<td align="left">《社会契约论》</td>
<td align="left">卢梭</td>
</tr>
<tr>
<td align="left">《致希罗多德信》</td>
<td align="left">伊壁鸠鲁</td>
</tr>
<tr>
<td align="left">《神曲》</td>
<td align="left">但丁</td>
</tr>
<tr>
<td align="left">《君主论》</td>
<td align="left">马基雅弗利</td>
</tr>
<tr>
<td align="left">《牧歌》</td>
<td align="left">维吉尔</td>
</tr>
<tr>
<td align="left">《罗马史》</td>
<td align="left">李维</td>
</tr>
<tr>
<td align="left">《达芬奇笔记》</td>
<td align="left">达芬奇</td>
</tr>
<tr>
<td align="left">《随笔集》</td>
<td align="left">蒙田</td>
</tr>
<tr>
<td align="left">《堂吉诃德》</td>
<td align="left">塞万提斯</td>
</tr>
<tr>
<td align="left">《莎士比亚全集》</td>
<td align="left">莎士比亚</td>
</tr>
<tr>
<td align="left">《关于两门新科学的对话》</td>
<td align="left">伽利略</td>
</tr>
<tr>
<td align="left">《利维坦》</td>
<td align="left">托马斯·霍布斯</td>
</tr>
<tr>
<td align="left">《国富论》</td>
<td align="left">亚当·斯密</td>
</tr>
<tr>
<td align="left">《道德情操论》</td>
<td align="left">亚当·斯密</td>
</tr>
<tr>
<td align="left">《罗马帝国的衰亡》</td>
<td align="left">爱德华·吉本</td>
</tr>
<tr>
<td align="left">《傲慢与偏见》</td>
<td align="left">奥斯汀</td>
</tr>
<tr>
<td align="left">《红与黑》</td>
<td align="left">司汤达</td>
</tr>
<tr>
<td align="left">《意志和表象的世界》</td>
<td align="left">叔本华</td>
</tr>
<tr>
<td align="left">《卡拉马佐夫兄弟》</td>
<td align="left">陀思妥耶夫斯基</td>
</tr>
<tr>
<td align="left">《包法利夫人》</td>
<td align="left">福楼拜</td>
</tr>
<tr>
<td align="left">《战争与和平》</td>
<td align="left">托尔斯泰</td>
</tr>
<tr>
<td align="left">《安娜·卡列尼娜》</td>
<td align="left">托尔斯泰</td>
</tr>
<tr>
<td align="left">《梦的解析》</td>
<td align="left">弗洛伊德</td>
</tr>
</tbody></table>
<h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献            "></a>参考文献            </h2><p>《如何阅读一本书》–莫提默</p>
]]></content>
      <categories>
        <category>阅读</category>
      </categories>
      <tags>
        <tag>book</tag>
      </tags>
  </entry>
  <entry>
    <title>100本中国元典书籍(metabook)</title>
    <url>/title/53658772/</url>
    <content><![CDATA[<p><img src="https://s1.ax1x.com/2020/06/29/NWNXDK.png" alt="metabook"></p>
<a id="more"></a>

<h1 id="100本中国元典书籍-metabook"><a href="#100本中国元典书籍-metabook" class="headerlink" title="100本中国元典书籍(metabook) "></a>100本中国元典书籍(metabook) </h1><p>任何的书籍都是建立在一定的基础之上，而有些书籍却属于开宗立派，故而它们的价值极为的重大，这些书籍我称之为元典书籍(metabook)。metabook这个单词是我造的，依据是形而上学这个单词metaphysics。metaphysics原指亚里士多德的哲学著作被放在其自然科学著作后面，有之后的意思，引申为更基本，在之上的意思，哲学就是形而上的。形而上学这个中文词汇来自于《易经》：形而上者谓之道，形而下者谓之器 —《易经・系辞》[1]。元，意味着其独一无二，不可替代。有的时候读书，常看到别人引用一段古文或是圣经词句，但是我们自己是不知道的，只有看作者如何解释，而作者的理解不一定对。所以读书先读元典书籍，再看今天的人写的书，就会感到通透彻底，读起来才能体会作者的真正意图。金克木老先生在其《书读完了》一书中提倡的正是此法：先读基本书籍，也就是元典书籍，花个三冬的时间，人文历史就基本够了。</p>
<p>写到这里，我突然想起北京大学通识教育经典名著阅读计划中将文艺复兴以降的科学经典著作称为科学元典，以和经典相区别。我这里说的元典和科学元典不同，科学元典只是为了区别科学和人文，而metabook是为了表明书的特殊地位，价值，并不分科学人文。我希望这个单词和中文词汇能得到广泛使用，进而推动百姓读书，学知识，长见识，扬文化，做真人。本文只按朝代列出了中国元典。</p>
<p><a id="download" href="https://github.com/QMHTMY/Ebooks/blob/master/%E5%85%83%E5%85%B8%E4%B9%A6%E7%B1%8D.pdf" target="_blank" rel="noopener"><i class="fa fa-download"></i><span>100本元典书籍PDF文件下载</span></a></p>
<table>
<thead>
<tr>
<th align="left">书名</th>
<th align="center">年代</th>
<th align="center">作者</th>
<th align="left">评价</th>
</tr>
</thead>
<tbody><tr>
<td align="left">《周易》</td>
<td align="center">殷商</td>
<td align="center">佚名</td>
<td align="left">中华文化之本源</td>
</tr>
<tr>
<td align="left">《道德经》</td>
<td align="center">春秋</td>
<td align="center">老子</td>
<td align="left">道学之精髓哲学之先本</td>
</tr>
<tr>
<td align="left">《论语》</td>
<td align="center">春秋</td>
<td align="center">孔子</td>
<td align="left">儒家文化之起源</td>
</tr>
<tr>
<td align="left">《左转》</td>
<td align="center">春秋</td>
<td align="center">左丘明</td>
<td align="left">中国史学叙事传统的奠基之作</td>
</tr>
<tr>
<td align="left">《诗经》</td>
<td align="center">春秋</td>
<td align="center">佚名</td>
<td align="left">中国最早的诗歌总集</td>
</tr>
<tr>
<td align="left">《尚书》</td>
<td align="center">春秋</td>
<td align="center">佚名</td>
<td align="left">中国现存最早的散文总集</td>
</tr>
<tr>
<td align="left">《孙子兵法》</td>
<td align="center">春秋</td>
<td align="center">孙武</td>
<td align="left">世界现存最早的兵家圣典</td>
</tr>
<tr>
<td align="left">《鬼谷子》</td>
<td align="center">春秋</td>
<td align="center">鬼谷子</td>
<td align="left">研究纵横捭阖之术的千古奇书</td>
</tr>
<tr>
<td align="left">《夏小正》</td>
<td align="center">春秋</td>
<td align="center">佚名</td>
<td align="left">中国现存最早的农事历书</td>
</tr>
<tr>
<td align="left">《黄帝内经》</td>
<td align="center">春秋</td>
<td align="center">佚名</td>
<td align="left">中国现存最早的医学典籍</td>
</tr>
<tr>
<td align="left">《墨子》</td>
<td align="center">战国</td>
<td align="center">墨子</td>
<td align="left">古代劳动者的哲学圣经</td>
</tr>
<tr>
<td align="left">《孟子》</td>
<td align="center">战国</td>
<td align="center">孟子</td>
<td align="left">剖析仁爱精髓的亚圣之书</td>
</tr>
<tr>
<td align="left">《庄子》</td>
<td align="center">战国</td>
<td align="center">庄子</td>
<td align="left">彰显道家浪漫主义思想的巨著</td>
</tr>
<tr>
<td align="left">《荀子》</td>
<td align="center">战国</td>
<td align="center">荀子</td>
<td align="left">以儒家为本，兼采百家之长</td>
</tr>
<tr>
<td align="left">《韩非子》</td>
<td align="center">战国</td>
<td align="center">韩非</td>
<td align="left">先秦法家学说集大成之作</td>
</tr>
<tr>
<td align="left">《吕氏春秋》</td>
<td align="center">战国</td>
<td align="center">吕不韦</td>
<td align="left">兼容并蓄的杂家经典</td>
</tr>
<tr>
<td align="left">《国语》</td>
<td align="center">战国</td>
<td align="center">佚名</td>
<td align="left">中国现存最早的国别体专著</td>
</tr>
<tr>
<td align="left">《孙膑兵法》</td>
<td align="center">战国</td>
<td align="center">孙膑</td>
<td align="left">战国兵书之杰</td>
</tr>
<tr>
<td align="left">《商君书》</td>
<td align="center">战国</td>
<td align="center">商鞅</td>
<td align="left">集中体现法家军政思想的专著</td>
</tr>
<tr>
<td align="left">《六韬》</td>
<td align="center">战国</td>
<td align="center">佚名</td>
<td align="left">开兵家权谋之先河</td>
</tr>
<tr>
<td align="left">《山海经》</td>
<td align="center">先秦</td>
<td align="center">佚名</td>
<td align="left">中国古代神话小说的本源</td>
</tr>
<tr>
<td align="left">《战国策》</td>
<td align="center">西汉</td>
<td align="center">刘向</td>
<td align="left">战国政治斗争最完整的文献记录</td>
</tr>
<tr>
<td align="left">《三略》</td>
<td align="center">西汉</td>
<td align="center">佚名</td>
<td align="left">中国第一部专述战略的兵书</td>
</tr>
<tr>
<td align="left">《九章算术》</td>
<td align="center">西汉</td>
<td align="center">佚名</td>
<td align="left">中国古代数学形成完整体系的标志</td>
</tr>
<tr>
<td align="left">《周髀算经》</td>
<td align="center">西汉</td>
<td align="center">佚名</td>
<td align="left">中国现存最早的天文算法类专著</td>
</tr>
<tr>
<td align="left">《淮南子》</td>
<td align="center">西汉</td>
<td align="center">刘安</td>
<td align="left">以道学为基，兼合百家之长</td>
</tr>
<tr>
<td align="left">《史记》</td>
<td align="center">西汉</td>
<td align="center">司马迁</td>
<td align="left">中国历史上第一部纪传体通史</td>
</tr>
<tr>
<td align="left">《楚辞》</td>
<td align="center">西汉</td>
<td align="center">刘向</td>
<td align="left">中国第一部浪漫主义诗歌总集</td>
</tr>
<tr>
<td align="left">《论衡》</td>
<td align="center">东汉</td>
<td align="center">王充</td>
<td align="left">中国历史上不朽的无神论著作</td>
</tr>
<tr>
<td align="left">《汉书》</td>
<td align="center">东汉</td>
<td align="center">班固</td>
<td align="left">中国历史上第一部纪传断代史</td>
</tr>
<tr>
<td align="left">《说文解字》</td>
<td align="center">东汉</td>
<td align="center">许慎</td>
<td align="left">中国首部以部首编排的字典</td>
</tr>
<tr>
<td align="left">《伤寒杂病论》</td>
<td align="center">东汉</td>
<td align="center">张仲景</td>
<td align="left">中医学方书鼻祖</td>
</tr>
<tr>
<td align="left">《三国志》</td>
<td align="center">西晋</td>
<td align="center">陈寿</td>
<td align="left">三国并叙的断代专著</td>
</tr>
<tr>
<td align="left">《后汉书》</td>
<td align="center">西晋</td>
<td align="center">范晔</td>
<td align="left">专注于东汉史的纪传体著作</td>
</tr>
<tr>
<td align="left">《抱朴子》</td>
<td align="center">东晋</td>
<td align="center">葛洪</td>
<td align="left">构建道教神仙理论体系的巨著</td>
</tr>
<tr>
<td align="left">《搜神记》</td>
<td align="center">东晋</td>
<td align="center">干宝</td>
<td align="left">中国笔记体志怪小说之鼻祖</td>
</tr>
<tr>
<td align="left">《华阳国志》</td>
<td align="center">东晋</td>
<td align="center">常璩</td>
<td align="left">中国现存最早的地方志专著</td>
</tr>
<tr>
<td align="left">《陶渊明集》</td>
<td align="center">东晋</td>
<td align="center">陶渊明</td>
<td align="left">开田园风光先河的诗文总集</td>
</tr>
<tr>
<td align="left">《文心雕龙》</td>
<td align="center">南朝</td>
<td align="center">刘勰</td>
<td align="left">中国古代最系统的文学理论专著</td>
</tr>
<tr>
<td align="left">《文选》</td>
<td align="center">南朝</td>
<td align="center">萧统</td>
<td align="left">中国现存最早的诗文选集</td>
</tr>
<tr>
<td align="left">《世说新语》</td>
<td align="center">南朝</td>
<td align="center">刘义庆</td>
<td align="left">南北朝志人小说代表作</td>
</tr>
<tr>
<td align="left">《洛阳伽蓝记》</td>
<td align="center">北朝</td>
<td align="center">杨炫之</td>
<td align="left">中国历史上唯一一部记述城市寺院的专著</td>
</tr>
<tr>
<td align="left">《水经注》</td>
<td align="center">北朝</td>
<td align="center">郦道元</td>
<td align="left">集六朝地志之大成</td>
</tr>
<tr>
<td align="left">《齐民要术》</td>
<td align="center">北朝</td>
<td align="center">贾思勰</td>
<td align="left">世界最早最系统的农业科学专著</td>
</tr>
<tr>
<td align="left">《史通》</td>
<td align="center">唐代</td>
<td align="center">刘知几</td>
<td align="left">中国现存最早的史学理论专著</td>
</tr>
<tr>
<td align="left">《大唐西域记》</td>
<td align="center">唐代</td>
<td align="center">玄奘</td>
<td align="left">中世纪中南亚地区最权威的史地文献</td>
</tr>
<tr>
<td align="left">《李太白集》</td>
<td align="center">唐代</td>
<td align="center">李白</td>
<td align="left">将浪漫主义推向极致的诗歌集</td>
</tr>
<tr>
<td align="left">《杜工部集》</td>
<td align="center">唐代</td>
<td align="center">杜甫</td>
<td align="left">中国古典诗歌现实主义高峰</td>
</tr>
<tr>
<td align="left">《昌黎先生集》</td>
<td align="center">唐代</td>
<td align="center">韩愈</td>
<td align="left">文起八代之衰的典范之作</td>
</tr>
<tr>
<td align="left">《河东先生集》</td>
<td align="center">唐代</td>
<td align="center">柳宗元</td>
<td align="left">寄意山水的古代散文经典</td>
</tr>
<tr>
<td align="left">《贞观政要》</td>
<td align="center">唐代</td>
<td align="center">吴兢</td>
<td align="left">反映贞观之治的政论专著</td>
</tr>
<tr>
<td align="left">《唐律疏议》</td>
<td align="center">唐代</td>
<td align="center">长孙无忌</td>
<td align="left">中国最早最完整的刑事法典</td>
</tr>
<tr>
<td align="left">《千金方》</td>
<td align="center">唐代</td>
<td align="center">孙思邈</td>
<td align="left">确立中医学分科的百代之师</td>
</tr>
<tr>
<td align="left">《开元占经》</td>
<td align="center">唐代</td>
<td align="center">瞿昙悉达</td>
<td align="left">中国古代占星术大全</td>
</tr>
<tr>
<td align="left">《茶经》</td>
<td align="center">唐代</td>
<td align="center">陆羽</td>
<td align="left">世界上第一部茶文化专著</td>
</tr>
<tr>
<td align="left">《虬髯客传》</td>
<td align="center">五代</td>
<td align="center">杜光庭</td>
<td align="left">开创古典武侠小说之先河</td>
</tr>
<tr>
<td align="left">《资治通鉴》</td>
<td align="center">北宋</td>
<td align="center">司马光</td>
<td align="left">中国历史上第一部编年体通史</td>
</tr>
<tr>
<td align="left">《欧阳文忠公集》</td>
<td align="center">北宋</td>
<td align="center">欧阳修</td>
<td align="left">北宋文坛的奠基之作</td>
</tr>
<tr>
<td align="left">《苏轼集》</td>
<td align="center">北宋</td>
<td align="center">苏轼</td>
<td align="left">豪放派诗词的巅峰之作</td>
</tr>
<tr>
<td align="left">《乐府诗集》</td>
<td align="center">北宋</td>
<td align="center">郭茂倩</td>
<td align="left">中国现存最早的最完备的乐府诗总集</td>
</tr>
<tr>
<td align="left">《乐章集》</td>
<td align="center">北宋</td>
<td align="center">柳永</td>
<td align="left">雅俗并收、尽显才情风流</td>
</tr>
<tr>
<td align="left">《太平广记》</td>
<td align="center">北宋</td>
<td align="center">李昉</td>
<td align="left">中国现存卷帙最长的古典小说集</td>
</tr>
<tr>
<td align="left">《梦溪笔谈》</td>
<td align="center">北宋</td>
<td align="center">沈括</td>
<td align="left">中国古代笔记体百科全书</td>
</tr>
<tr>
<td align="left">《漱玉词》</td>
<td align="center">南宋</td>
<td align="center">李清照</td>
<td align="left">清丽婉约、辞情相称的词中上品</td>
</tr>
<tr>
<td align="left">《稼轩长短句》</td>
<td align="center">南宋</td>
<td align="center">辛弃疾</td>
<td align="left">豪迈不失细腻，词收两宋之冠</td>
</tr>
<tr>
<td align="left">《洗冤集录》</td>
<td align="center">南宋</td>
<td align="center">宋慈</td>
<td align="left">世界上最早的法医学专著</td>
</tr>
<tr>
<td align="left">《窦娥冤》</td>
<td align="center">元代</td>
<td align="center">关汉卿</td>
<td align="left">中国古代悲剧的代表作</td>
</tr>
<tr>
<td align="left">《西厢记》</td>
<td align="center">元代</td>
<td align="center">王实甫</td>
<td align="left">中国古代戏剧的现实主义杰作</td>
</tr>
<tr>
<td align="left">《墙头马上》</td>
<td align="center">元代</td>
<td align="center">白朴</td>
<td align="left">中国古代经典爱情喜剧</td>
</tr>
<tr>
<td align="left">《汉宫秋》</td>
<td align="center">元代</td>
<td align="center">马致远</td>
<td align="left">颠覆历史的现实主义悲剧杰作</td>
</tr>
<tr>
<td align="left">《唐才子传》</td>
<td align="center">元代</td>
<td align="center">辛文房</td>
<td align="left">唐五代诗人评传汇集</td>
</tr>
<tr>
<td align="left">《三国演义》</td>
<td align="center">明初</td>
<td align="center">罗贯中</td>
<td align="left">中国章回体历史小说的开山之作</td>
</tr>
<tr>
<td align="left">《水浒传》</td>
<td align="center">明初</td>
<td align="center">施耐庵</td>
<td align="left">中国古代英雄英雄传奇小说之典范</td>
</tr>
<tr>
<td align="left">《传习录》</td>
<td align="center">明代</td>
<td align="center">王阳明</td>
<td align="left">宋明心学集大成之作</td>
</tr>
<tr>
<td align="left">《徐霞客游记》</td>
<td align="center">明代</td>
<td align="center">徐霞客</td>
<td align="left">中国最早的日记体游记专著</td>
</tr>
<tr>
<td align="left">《西游记》</td>
<td align="center">明代</td>
<td align="center">吴承恩</td>
<td align="left">色彩纷呈的浪漫主义神</td>
</tr>
<tr>
<td align="left">《牡丹亭》</td>
<td align="center">明代</td>
<td align="center">汤显祖</td>
<td align="left">中国戏曲史上浪漫主义杰作</td>
</tr>
<tr>
<td align="left">《封神演义》</td>
<td align="center">明代</td>
<td align="center">陈仲琳</td>
<td align="left">幻想奇特的神魔小说</td>
</tr>
<tr>
<td align="left">《三言》</td>
<td align="center">明代</td>
<td align="center">冯梦龙</td>
<td align="left">中国白话短篇小说的杰出代表</td>
</tr>
<tr>
<td align="left">《二拍》</td>
<td align="center">明代</td>
<td align="center">凌濛初</td>
<td align="left">中国首部文人独立创作的短篇小说集</td>
</tr>
<tr>
<td align="left">《本草纲目》</td>
<td align="center">明代</td>
<td align="center">李时珍</td>
<td align="left">东方中医药学百科巨典</td>
</tr>
<tr>
<td align="left">《农政全书》</td>
<td align="center">明代</td>
<td align="center">徐光启</td>
<td align="left">采集百家之长的农业百科全书</td>
</tr>
<tr>
<td align="left">《天工开物》</td>
<td align="center">明代</td>
<td align="center">宋应星</td>
<td align="left">世界上第一部工农业综合性著作</td>
</tr>
<tr>
<td align="left">《三十六计》</td>
<td align="center">清初</td>
<td align="center">佚名</td>
<td align="left">汇集兵家奇谋方略之杰作</td>
</tr>
<tr>
<td align="left">《明夷待访录》</td>
<td align="center">清初</td>
<td align="center">黄宗羲</td>
<td align="left">呼唤民主政体的思想启蒙专著</td>
</tr>
<tr>
<td align="left">《日知录》</td>
<td align="center">清初</td>
<td align="center">顾炎武</td>
<td align="left">中国近代思想启蒙的基石</td>
</tr>
<tr>
<td align="left">《海国图志》</td>
<td align="center">清代</td>
<td align="center">魏源</td>
<td align="left">中国近代史上第一部系统的世界地理著作</td>
</tr>
<tr>
<td align="left">《古文观止》</td>
<td align="center">清代</td>
<td align="center">吴楚才</td>
<td align="left">中国古文选本之最</td>
</tr>
<tr>
<td align="left">《纳兰词》</td>
<td align="center">清代</td>
<td align="center">纳兰性德</td>
<td align="left">哀感顽艳，颇有南唐后主遗风</td>
</tr>
<tr>
<td align="left">《长生殿》</td>
<td align="center">清代</td>
<td align="center">洪升</td>
<td align="left">震惊清初剧坛的传奇之作</td>
</tr>
<tr>
<td align="left">《聊斋志异》</td>
<td align="center">清代</td>
<td align="center">蒲松龄</td>
<td align="left">刺贪刺虐入木三分</td>
</tr>
<tr>
<td align="left">《桃花扇》</td>
<td align="center">清代</td>
<td align="center">孔尚任</td>
<td align="left">中国首部反映南明消亡的历史剧</td>
</tr>
<tr>
<td align="left">《儒林外史》</td>
<td align="center">清代</td>
<td align="center">吴敬梓</td>
<td align="left">中国古代讽刺小说中的圣品</td>
</tr>
<tr>
<td align="left">《红楼梦》</td>
<td align="center">清代</td>
<td align="center">曹雪芹</td>
<td align="left">中国古典小说史上的巅峰巨作</td>
</tr>
<tr>
<td align="left">《海上花列传》</td>
<td align="center">清代</td>
<td align="center">韩邦庆</td>
<td align="left">中国文学史上第一部方言小说</td>
</tr>
<tr>
<td align="left">《老残游记》</td>
<td align="center">清代</td>
<td align="center">刘鹗</td>
<td align="left">清末谴责小说的杰出代表</td>
</tr>
<tr>
<td align="left">《孔子改制考》</td>
<td align="center">清代</td>
<td align="center">康有为</td>
<td align="left">轰动晚晴思想界的变法理论专著</td>
</tr>
<tr>
<td align="left">《呐喊》</td>
<td align="center">现代</td>
<td align="center">鲁迅</td>
<td align="left">中国现代白话文小说的起点</td>
</tr>
<tr>
<td align="left">《朝花夕拾》</td>
<td align="center">现代</td>
<td align="center">鲁迅</td>
<td align="left">从往事中抄来的记忆</td>
</tr>
<tr>
<td align="left">《背影》</td>
<td align="center">现代</td>
<td align="center">朱自清</td>
<td align="left">天地间第一等至情文学</td>
</tr>
</tbody></table>
<h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献                           "></a>参考文献                           </h2><p>[1]《符号学导论》，黄华新。       </p>
]]></content>
      <categories>
        <category>阅读</category>
      </categories>
      <tags>
        <tag>book</tag>
      </tags>
  </entry>
  <entry>
    <title>国产统一操作系统UOS</title>
    <url>/title/7aceb1f4/</url>
    <content><![CDATA[<p><img src="https://img-blog.csdnimg.cn/20200111132834618.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaWViZXI=,size_16,color_FFFFFF,t_70" alt="uos-cover"></p>
<a id="more"></a>

<p>前段时间国产操作系统UOS(Unity Operating System)释出，最近用虚拟机试了试。总体来说，操作流畅，符合国人习惯。UOS内置中文输入法和各类便捷工具，大大方便用户工作。</p>
<p>UOS是由中兴，电子集团，深之度科技等联合开发的一款国产Linux发行版，使用过Linux很快就能上手。UOS默认是没有root权限的，要登录帐号以开启，这和Ubuntu之类默认带root功能的发行版不同。UOS主体应该就是Deepin系统，软件安装方式则延续Debian系列的apt-get install方式。</p>
<p>UOS发布的时间表(2019)：<br>10月15日：面向BIOS、CPU、整机和ODM厂商，发布龙芯、华为、飞腾、兆芯、海光五个平台的桌面和服务器UOS alpha测试版本。该版本主要功能和用户交互基本完成，存在比较明显的细节缺失和bug，但可以开展面向指定CPU型号的适配验证。<br>11月10日：发布Alpha2版本，增加对申威、海光架构版本的支持。Alpha2版本将面向安全厂商、应用厂商开发，用于进行底层安全检查；软件应用厂商可以开始基本适配测试。<br>11月30日：合并新的功能代码，并修复alpha版本发现的问题。发布beta版本，各软件厂商可以针对该版本进行正式适配。<br>12月15日：发布RC版本，代码冻结，进入正式版本发布前的bug修复阶段。<br>12月31日：如基于RC版本的修复版本通过质量测试，则发布FINAL正式版本。  </p>
<h2 id="界面和功能欣赏"><a href="#界面和功能欣赏" class="headerlink" title="界面和功能欣赏"></a>界面和功能欣赏</h2><p>安装界面有各种语言可选择，包括台湾和港澳的繁体及正体中文。  </p>
<p><img src="https://img-blog.csdnimg.cn/20200111132945302.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaWViZXI=,size_16,color_FFFFFF,t_70" alt="install"></p>
<p>安装时间不长。</p>
<p><img src="https://img-blog.csdnimg.cn/20200111133009228.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaWViZXI=,size_16,color_FFFFFF,t_70" alt="install1"></p>
<p>开机界面，似乎Deepin默认就是这个，极光挺美的。</p>
<p><img src="https://img-blog.csdnimg.cn/20200111133028590.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaWViZXI=,size_16,color_FFFFFF,t_70" alt="login"></p>
<p>登录界面的图片可设置。</p>
<p><img src="https://img-blog.csdnimg.cn/20200111133043807.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaWViZXI=,size_16,color_FFFFFF,t_70" alt="login1"></p>
<p>自带的壁纸很好，我这里选用了一张必应壁纸。</p>
<p><img src="https://img-blog.csdnimg.cn/2020011113311328.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaWViZXI=,size_16,color_FFFFFF,t_70" alt="wallpaper"></p>
<p>界面和Windows很像，符合国人的习惯。  </p>
<p><img src="https://img-blog.csdnimg.cn/20200111133133192.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaWViZXI=,size_16,color_FFFFFF,t_70" alt="menu"></p>
<p>点击上图头像右上角扩展符号可以扩展为下面的样式。</p>
<p><img src="https://img-blog.csdnimg.cn/20200111133156994.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaWViZXI=,size_16,color_FFFFFF,t_70" alt="software"></p>
<p>UOS的浏览器似乎是封装某浏览器内核制作的，默认搜索工具是360搜索。   </p>
<p><img src="https://img-blog.csdnimg.cn/20200111133212660.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaWViZXI=,size_16,color_FFFFFF,t_70" alt="explorer"></p>
<p>自带的图片管理浏览工具。</p>
<p><img src="https://img-blog.csdnimg.cn/20200111133221348.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaWViZXI=,size_16,color_FFFFFF,t_70" alt="picview"></p>
<p>自带音乐播放器。 </p>
<p><img src="https://img-blog.csdnimg.cn/20200111133243487.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaWViZXI=,size_16,color_FFFFFF,t_70" alt="music"></p>
<p>自带视频播放器。 </p>
<p><img src="https://img-blog.csdnimg.cn/20200111133254569.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaWViZXI=,size_16,color_FFFFFF,t_70" alt="softwarezh"></p>
<p>自带的应用下载市场，软件还不多，后续应该会越来越多。若是嫌界面图标遮住界面，碍眼，可右键设置为自动隐藏。</p>
<p><img src="https://img-blog.csdnimg.cn/20200111133306939.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaWViZXI=,size_16,color_FFFFFF,t_70" alt="appmarket"></p>
<p>终端使用，透明度调节没问题。  </p>
<p><img src="https://img-blog.csdnimg.cn/20200111133327263.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaWViZXI=,size_16,color_FFFFFF,t_70" alt="bash"></p>
<p>系统监视工具，这个似乎是top命令的GUI版。</p>
<p><img src="https://img-blog.csdnimg.cn/20200111133348655.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaWViZXI=,size_16,color_FFFFFF,t_70" alt="htop"></p>
<p>自带编辑器，当然也预置了Vim。</p>
<p><img src="https://img-blog.csdnimg.cn/20200111133404815.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NoaWViZXI=,size_16,color_FFFFFF,t_70" alt="editor"></p>
<h2 id="评价"><a href="#评价" class="headerlink" title="评价"></a>评价</h2><p>UOS以Deepin为核心，各大公司合力开发，支持多种国产CPU，使用流畅，软件简洁好用。总体来说，是值得广大用户使用的一款国产Linux系统。</p>
]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>OS</tag>
      </tags>
  </entry>
  <entry>
    <title>用RSS快速干净地获取各领域信息</title>
    <url>/title/9ade8626/</url>
    <content><![CDATA[<p><img src="https://s1.ax1x.com/2020/06/04/tBLh11.jpg" alt="rsslogo"></p>
<a id="more"></a>

<p>信息时代，信息更新快，碎片化。大部分人都通过各类新闻软件获取信息，比如头条，腾讯新闻，微信公众号等等。然而这些信息是别人特意挑选，甚至是算法推送的。有没有可能自己选择些新闻信息聚合在一个软件里来看呢？当然有，那就是<a href="https://baike.baidu.com/item/rss/24470" target="_blank" rel="noopener">RSS简易信息聚合</a>，可以将其理解成各信息发布渠道提供的另一种信息访问方式。</p>
<p>比如一个网站，除了可以在浏览器中输入<a href="http://xxx" target="_blank" rel="noopener">http://xxx</a> 登录查看点击网页查看，还可用RSS获取同样的内容，而且可将各网站的信息聚合在一个软件。RSS的优点，多个消息渠道聚合在一个APP里节约空间，可自动推送，不会被算法分析，没有广告，隐私程度高，不想看了可随时取消订阅。</p>
<p>有很多优秀的RSS软件，在此推荐几个，可能需要翻墙到Google play才能获得。  </p>
<table>
<thead>
<tr>
<th align="left">软件名</th>
<th align="left">支持平台</th>
<th align="left">地址</th>
</tr>
</thead>
<tbody><tr>
<td align="left">RSS reader</td>
<td align="left">Android</td>
<td align="left"><a href="https://play.google.com" target="_blank" rel="noopener">https://play.google.com</a></td>
</tr>
<tr>
<td align="left">Winds</td>
<td align="left">Win,Mac,Linux</td>
<td align="left"><a href="https://getstream.io/winds" target="_blank" rel="noopener">https://getstream.io/winds</a></td>
</tr>
<tr>
<td align="left">订阅帝</td>
<td align="left">Android</td>
<td align="left"><a href="https://www.dingyuedi.com" target="_blank" rel="noopener">https://www.dingyuedi.com</a></td>
</tr>
</tbody></table>
<p>如下是Google play上的RSS软件，太多了，都很不错，各个特色不一样，有的收费。</p>
<p><img src="https://s1.ax1x.com/2020/06/05/tDNHl8.png" alt="rss2"></p>
<p><img src="https://s1.ax1x.com/2020/06/05/tDNxkn.png" alt="rss3"></p>
<p>接下来的一个问题是，我怎么知道某新闻是否提供RSS信息发布渠道呢？</p>
<p>这个有多种解决方法。</p>
<p>第一：网站提供RSS发布渠道，那么通常在顶部菜单、右侧菜单、底部菜单等地方会有RSS图标，鼠标放RSS图标上面或者点击进去可以看到对应的RSS地址，比如本网站订阅地址<a href="https://www.shieber.cn/atom.xml，">https://www.shieber.cn/atom.xml，</a> 其他网站可能是<a href="https://xxx.xxx.xx/feed，https://xxx.xxx.xx/rss。" target="_blank" rel="noopener">https://xxx.xxx.xx/feed，https://xxx.xxx.xx/rss。</a> 总之结尾是 atom.xml、feed、rss等，可多次尝试。</p>
<p>下图左侧橙色RSS图标很显眼，鼠标放上面，最下面就是订阅地址，添加到RSS软件里，这些博客就可以看了。</p>
<p><img src="https://s1.ax1x.com/2020/06/05/tDNgyD.png" alt="rss1"></p>
<p>第二：网站不提供RSS发布渠道，此时可以利用工具自己制作该网站的RSS源并订阅。制作工具及使用方法可以搜索一下，比如<a href="http://createfeed.fivefilters.org" target="_blank" rel="noopener">Feed Creatro</a>和<a href="http://www.feed43.com" target="_blank" rel="noopener">feed43</a>，具体操作可以看<a href="https://zhuanlan.zhihu.com/p/64457116" target="_blank" rel="noopener">如何用RSS订阅？</a>。</p>
<p>第三：利用别人总结好的源，直接订阅，比如<a href="https://www.zhihu.com/question/19580096" target="_blank" rel="noopener">你必读的RSS订阅源有哪些？</a>或者一些RSS订阅源汇聚网站如<a href="https://ohmyrss.com" target="_blank" rel="noopener">己思</a>。</p>
<p>第四：利用插件获取网站的RSS地址，一个值得推荐的插件是<a href="https://docs.rsshub.app" target="_blank" rel="noopener">RSShub</a>，浏览网站时，该插件会显示RSS地址。</p>
<p>微博，公众号，简书，B站，贴吧，知乎，豆瓣，抖音，网易云音乐，Github都是可以订阅的源。要是都开App，太麻烦，都聚合到一个App，岂不美哉？</p>
<p>自己挑选的源，内容要宽泛，质量要有保证，这样接受到的讯息才能和其他新闻软件有所差别，听见不同的声音。但凡用RSS的人都会发现类似其他新闻软件里的一片光明没了，民间疾苦冒了出来；对伟光正感性地歌功颂德没了，却更多看到理性的批评和民间疾苦。</p>
<p>如下为各类订阅内容，当然者是PC端的RSS软件，手机端太小，截屏不好看。</p>
<p><img src="https://s1.ax1x.com/2020/06/05/tr8GIP.png" alt="dingye"></p>
<p>下面是操作指南。</p>
<iframe src="https://player.bilibili.com/player.html?aid=38629650&cid=70525810" width="800" height="530" frameborder="no" framespacing="0" allowfullscreen="true"></iframe>
]]></content>
      <categories>
        <category>通信</category>
      </categories>
      <tags>
        <tag>information</tag>
      </tags>
  </entry>
  <entry>
    <title>数据结构及各语言中的实现</title>
    <url>/title/fe068447/</url>
    <content><![CDATA[<p><img src="https://s1.ax1x.com/2020/05/31/t3QBYF.png" alt="data structure"></p>
<a id="more"></a>

<p><strong>数据结构各种各样，其应用领域也不尽相同，现做部分整理。</strong></p>
<h1 id="一-数据结构"><a href="#一-数据结构" class="headerlink" title="一. 数据结构"></a>一. 数据结构</h1><table>
<thead>
<tr>
<th align="left">类型</th>
<th align="left">应用领域</th>
</tr>
</thead>
<tbody><tr>
<td align="left">数组</td>
<td align="left">同种数据存放，寻址方便</td>
</tr>
<tr>
<td align="left">链表</td>
<td align="left">用在文件系统，内存管理，数据库冲突解决，set集合，git记录</td>
</tr>
<tr>
<td align="left">跳表</td>
<td align="left">由链表通过索引构建，有序，用在替代平衡树(AVL Tree)，如redis就有使用，复杂度O(logn)</td>
</tr>
<tr>
<td align="left">栈</td>
<td align="left">用在递归，逆序输出，网页网址保存，计算表达式，运算符优先级，括号检查，数制转换，函数调用</td>
</tr>
<tr>
<td align="left">队列</td>
<td align="left">用在操作系统任务安排，模拟派对，一切按序安排的任务</td>
</tr>
<tr>
<td align="left">散列</td>
<td align="left">用在MD5，SHA1等加密算法，数据校验，数据分片(分布式)，负载均衡，散列表类似数组结合链表</td>
</tr>
<tr>
<td align="left">树</td>
<td align="left">树是链表的扩展，用在数据库，文件系统，搜索引擎，编译器。二/三/四/八叉树，线段树，字典树，红黑树，B+树，Trie树</td>
</tr>
<tr>
<td align="left">堆</td>
<td align="left">等效于完全二叉树，用在操作系统分配内存，优先队列，海量数据查找，排序</td>
</tr>
<tr>
<td align="left">图</td>
<td align="left">用在知识图谱，图数据库，任务安排，最短路径，最小生成树，网络处理，计算生物学</td>
</tr>
</tbody></table>
<h1 id="二-各语言的数据类型"><a href="#二-各语言的数据类型" class="headerlink" title="二. 各语言的数据类型"></a>二. 各语言的数据类型</h1><h2 id="C-C-语言"><a href="#C-C-语言" class="headerlink" title="C/C++语言"></a>C/C++语言</h2><p><strong>基本类型</strong>:<br> 1.字符类型 char<br> 2.数值类型 short int long float double<br> 3.布尔类型 bool (C++独有)  </p>
<p><strong>构造类型</strong>:<br> 1.数组类型 array<br> 2.结构体型 struct<br> 3.共用体型 union<br> 4.枚举体型 enum  </p>
<p><strong>指针类型</strong>:<br> 1.pointer </p>
<p><strong>空类型</strong>:<br> 1.void</p>
<h2 id="Rust语言"><a href="#Rust语言" class="headerlink" title="Rust语言"></a>Rust语言</h2><p><strong>标量类型</strong>:<br> 1.数值类型 u|i(8/16/32/64/128/size)  f32(64)<br> 2.布尔类型 true false<br> 3.字符类型 char  </p>
<p><strong>复合类型</strong>:<br> 1.数组类型 tup<br> 2.元组类型 array </p>
<h2 id="Java语言"><a href="#Java语言" class="headerlink" title="Java语言"></a>Java语言</h2><p><strong>基本类型</strong>:<br> 1.字符类型 char<br> 2.布尔类型 boolean<br> 3.数值类型 byte short int long float double  </p>
<p><strong>引用类型</strong>:<br> 1.类类型   class<br> 2.接口类型 interface<br> 3.数组类型 array  </p>
<h2 id="Go语言"><a href="#Go语言" class="headerlink" title="Go语言"></a>Go语言</h2><p><strong>基本类型</strong>:<br> 1.字符及串 rune byte string<br> 2.布尔类型 true false<br> 3.数值类型 (u)int(8,16,32,64) float(32,64) complex  </p>
<p><strong>派生类型</strong>：<br>    1.指针类型 pt := &amp;v (nil)<br>    2.数组类型 nu := [4]int{0,1,2,3}<br>    3.切片类型 sl := []int{0,1,2,3,}<br>    4.映射类型 var m = make(map[string]string)<br>    4.结构类型 type Employee struct {}<br>    5.管道类型 ch := make(chan int, 2)<br>    6.接口类型 func (p *Ptr) getName() string{}<br>    8.函数类型 func sayHello(name strin){}  </p>
<h2 id="Python语言"><a href="#Python语言" class="headerlink" title="Python语言"></a>Python语言</h2><p><strong>不可变类型</strong>：<br> 1.数值类型 number<br> 2.字符串型 string<br> 3.元组类型 tuple   </p>
<p><strong>可变类型</strong>：<br> 1.列表类型 list<br> 2.字典类型 dict<br> 3.集合类型 set   </p>
<h2 id="JavaScript语言"><a href="#JavaScript语言" class="headerlink" title="JavaScript语言"></a>JavaScript语言</h2><p><strong>基本类型</strong>:<br>    1.对空类型 Null<br>    2.字符串型 String<br>    3.数值类型 Number<br>    4.大整数型 BigInt<br>    5.符号类型 Symbol<br>    6.布尔类型 boolean<br>    7.未定义型 Undefined  </p>
<p><strong>对象类型</strong>:<br>    1.对象类型 Object<br>    2.数组类型 Array<br>    3.函数类型 Function  </p>
<p><strong>网络数据传输</strong>:<br> 1.JSON</p>
]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>DataStructure</tag>
      </tags>
  </entry>
  <entry>
    <title>Python自带元素</title>
    <url>/title/80b7d3cf/</url>
    <content><![CDATA[<p><img src="https://s1.ax1x.com/2020/05/30/tMtMUf.png" alt="pythoninternal"></p>
<a id="more"></a>

<h2 id="关键字33个"><a href="#关键字33个" class="headerlink" title="关键字33个"></a>关键字33个</h2><p>查看 help(‘keywords’)</p>
<table>
<thead>
<tr>
<th align="left">关键字</th>
<th align="left">解释</th>
<th align="left">关键字</th>
<th align="left">解释</th>
<th align="left">关键字</th>
<th align="left">解释</th>
<th align="left">关键字</th>
<th align="left">解释</th>
</tr>
</thead>
<tbody><tr>
<td align="left">False</td>
<td align="left">逻辑假</td>
<td align="left">def</td>
<td align="left">函数定义</td>
<td align="left">if</td>
<td align="left">逻辑判断</td>
<td align="left">raise</td>
<td align="left">抛出错误</td>
</tr>
<tr>
<td align="left">None</td>
<td align="left">空</td>
<td align="left">del</td>
<td align="left">删除元素</td>
<td align="left">import</td>
<td align="left">模块导入</td>
<td align="left">return</td>
<td align="left">返回</td>
</tr>
<tr>
<td align="left">True</td>
<td align="left">逻辑真</td>
<td align="left">elif</td>
<td align="left">判断分支</td>
<td align="left">in</td>
<td align="left">是否存在</td>
<td align="left">try</td>
<td align="left">尝试执行</td>
</tr>
<tr>
<td align="left">and</td>
<td align="left">逻辑与</td>
<td align="left">else</td>
<td align="left">判断分支</td>
<td align="left">is</td>
<td align="left">是否相等</td>
<td align="left">while</td>
<td align="left">循环</td>
</tr>
<tr>
<td align="left">as</td>
<td align="left">重命名元素</td>
<td align="left">except</td>
<td align="left">捕获错误</td>
<td align="left">lambda</td>
<td align="left">匿名函数</td>
<td align="left">with</td>
<td align="left">安全打开文件</td>
</tr>
<tr>
<td align="left">assert</td>
<td align="left">判断以抛出错误</td>
<td align="left">finally</td>
<td align="left">最终执行</td>
<td align="left">nonlocal</td>
<td align="left">非全局</td>
<td align="left">yield</td>
<td align="left">迭代器使用</td>
</tr>
<tr>
<td align="left">break</td>
<td align="left">中断循环</td>
<td align="left">for</td>
<td align="left">循环</td>
<td align="left">not</td>
<td align="left">逻辑非</td>
<td align="left"></td>
<td align="left"></td>
</tr>
<tr>
<td align="left">class</td>
<td align="left">类申明</td>
<td align="left">from</td>
<td align="left">模块导入</td>
<td align="left">or</td>
<td align="left">逻辑或</td>
<td align="left"></td>
<td align="left"></td>
</tr>
<tr>
<td align="left">continue</td>
<td align="left">重新循环</td>
<td align="left">global</td>
<td align="left">全局</td>
<td align="left">pass</td>
<td align="left">跳过</td>
<td align="left"></td>
<td align="left"></td>
</tr>
</tbody></table>
<h2 id="内置类型"><a href="#内置类型" class="headerlink" title="内置类型"></a>内置类型</h2><table>
<thead>
<tr>
<th align="left">类型</th>
<th align="left">具体</th>
<th align="left">类型</th>
<th align="left">具体</th>
</tr>
</thead>
<tbody><tr>
<td align="left">文本</td>
<td align="left">string</td>
<td align="left">映射</td>
<td align="left">dict</td>
</tr>
<tr>
<td align="left">数字</td>
<td align="left">int,float,complex</td>
<td align="left">集合</td>
<td align="left">set,frozenset</td>
</tr>
<tr>
<td align="left">布尔</td>
<td align="left">bool</td>
<td align="left">类</td>
<td align="left">class</td>
</tr>
<tr>
<td align="left">实例</td>
<td align="left">instance</td>
<td align="left">二进制</td>
<td align="left">bytes,bytearray,memoryview</td>
</tr>
<tr>
<td align="left">序列</td>
<td align="left">list,tuple,range</td>
<td align="left">异常</td>
<td align="left">XxxError</td>
</tr>
</tbody></table>
<h2 id="内置函数69个-全由C写成"><a href="#内置函数69个-全由C写成" class="headerlink" title="内置函数69个(全由C写成)"></a>内置函数69个(<a href="https://github.com/python/cpython/blob/master/Python/bltinmodule.c" target="_blank" rel="noopener">全由C写成</a>)</h2><table>
<thead>
<tr>
<th align="left">函数</th>
<th align="left">具体</th>
<th align="left">举例</th>
</tr>
</thead>
<tbody><tr>
<td align="left">abs(x)</td>
<td align="left">返回一个(整/浮点/复)数的绝对值(模)。若x定义了__abs__()，则abs(x)将返回x.__abs__()。</td>
<td align="left">abs(-1) -&gt; 1, abs(2+1j) -&gt; 2.23606797749979</td>
</tr>
<tr>
<td align="left">all(x)</td>
<td align="left">如果x是iterable的，且所有元素为真值，则返回True。</td>
<td align="left">a = [1,0,2], all(a) -&gt; False</td>
</tr>
<tr>
<td align="left">any(x)</td>
<td align="left">如果x是iterable的，且存在元素为真值，则返回True。</td>
<td align="left">a = [0,0,1], any(a) -&gt; True</td>
</tr>
<tr>
<td align="left">ascii(x)</td>
<td align="left">返回一个对象可打印的字符串。</td>
<td align="left">a = [0,0,1], ascii(a) -&gt; ‘[0,0,1]’</td>
</tr>
<tr>
<td align="left">bin(x)</td>
<td align="left">将一个整数转变为一个前缀为‘0b’的二进制字符串。</td>
<td align="left">a = 10, bin(a) -&gt; ‘0b1010’</td>
</tr>
<tr>
<td align="left">bool(x)</td>
<td align="left">若x为(空/非空)，就返回一个布尔值，(False/True)。</td>
<td align="left">a = 0,b=10; bool(a)-&gt; False, bool(b)-&gt; True</td>
</tr>
<tr>
<td align="left">breakpoint</td>
<td align="left">此函数会在调用时将你陷入调试器中。</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">bytearray(x,coding,errs)</td>
<td align="left">由x的数值返回一个新的bytes数组，可变。</td>
<td align="left">a = [1,0], bytearray(a)-&gt; bytearray(b‘\x01\x00’)</td>
</tr>
<tr>
<td align="left">bytes(x,coding,errs)</td>
<td align="left">由x的数值返回一个新的bytes对象，不可变。</td>
<td align="left">a = [1,0], bytes(a)-&gt; b‘\x01\x00’</td>
</tr>
<tr>
<td align="left">callable(obj)</td>
<td align="left">如果参数obj是可调用的就返回True，否则返回False。</td>
<td align="left">a = lambda x: x**2, callable(a)-&gt; True</td>
</tr>
<tr>
<td align="left">chr(x)</td>
<td align="left">返回Unicode码位为整数x的字符的字符串格式。</td>
<td align="left">chr(97)-&gt; a，chr(38)-&gt;&amp;</td>
</tr>
<tr>
<td align="left">staticmethod</td>
<td align="left">把一个方法封装成静态方法@classmethod。</td>
<td align="left">在类中使用，使代码更规范。</td>
</tr>
<tr>
<td align="left">classmethod</td>
<td align="left">把一个方法封装成类方法@classmethod。</td>
<td align="left">在类中使用，使代码更规范。</td>
</tr>
<tr>
<td align="left">compile(x,flnm,mode)</td>
<td align="left">将x编译成代码或AST对象，代码对象可以被exec()或eval()执行。</td>
<td align="left">r = compile(‘3+4’,‘xx’,‘eval’), eval(r) -&gt; 7</td>
</tr>
<tr>
<td align="left">complex(real,imag)</td>
<td align="left">创建一个值为real+imag*j的复数或者转化一个字符串或数为复数。</td>
<td align="left">complex(1) -&gt; (1+0j)</td>
</tr>
<tr>
<td align="left">delattr(obj, name)</td>
<td align="left">删除obj指定的属性name。</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">dict()</td>
<td align="left">新建字典。</td>
<td align="left">a = [(‘a’,1),(‘b’,2)], dict(a) -&gt; {‘a’:1,‘b’:2}</td>
</tr>
<tr>
<td align="left">dir(obj)</td>
<td align="left">如果没有参数，则返回本地作用域中的名称列表。如果有，返回有效属性列表。</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">divmod(a,b)</td>
<td align="left">将两个（非复数）数字作为实参，并在执行整数除法时返回一对商和余数。</td>
<td align="left">divmod(3,2)-&gt; (1,1)</td>
</tr>
<tr>
<td align="left">enumerate(iter, st=0)</td>
<td align="left">返回一个枚举对象。iterable必须是一个序列，或iterator，或支持迭代的对象。</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">eval(expr, glob, loc)</td>
<td align="left">实参是字符串，及可选的globals和locals。</td>
<td align="left">x = 1, eval(‘x+1’) -&gt; 2</td>
</tr>
<tr>
<td align="left">exec(obj,glob,loc)</td>
<td align="left">动态执行字节码或字符串。</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">filter(func, iter)</td>
<td align="left">用函数func返回iterable中真值元素，构建一个新的迭代器。</td>
<td align="left">a = [1,2,3], b=filter(lambda x: x&lt;3, a), list(b)-&gt;[1,2]</td>
</tr>
<tr>
<td align="left">float(x)</td>
<td align="left">从数字或字符串x生成浮点数。</td>
<td align="left">float(‘ -2.3 ’) -&gt; -2.3</td>
</tr>
<tr>
<td align="left">format(val, format)</td>
<td align="left">将val转换为format控制的格式化表示。</td>
<td align="left">fomat(10,‘0b’) -&gt; ‘1010’</td>
</tr>
<tr>
<td align="left">frozenset(iterable)</td>
<td align="left">返回一个冻结的集合，冻结后集合不能再添加或删除任何元素。</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">getattr(obj, name)</td>
<td align="left">返回对象命名属性的值。</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">globals()</td>
<td align="left">返回表示当前全局符号表的字典。这总是当前模块的字典。</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">hasattr(obj,name)</td>
<td align="left">如果name是对象属性的名称，则返回True。</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">hash(obj)</td>
<td align="left">返回该对象的哈希值。</td>
<td align="left">a = ‘sr’, hash(a) -&gt; 1188857520429707771</td>
</tr>
<tr>
<td align="left">help(obj)</td>
<td align="left">启动内置的帮助系统，显示obj的帮助信息。</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">hex(x)</td>
<td align="left">将整数转换为以‘0x’为前缀的小写十六进制字符串。</td>
<td align="left">hex(10) -&gt;‘0xa’</td>
</tr>
<tr>
<td align="left">id(obj)</td>
<td align="left">返回对象的标识值,该值是整数，在对象生命周期中保证唯一恒定。</td>
<td align="left">a = 1, id(a) -&gt; 10914496, b = a, id(b) -&gt; 10914496</td>
</tr>
<tr>
<td align="left">input(prompt)</td>
<td align="left">该函数从输入中读取一行，将其转换为字符串(除了末尾的换行符)并返回。</td>
<td align="left">input(‘&gt;&gt;&gt;’) -&gt; &gt;&gt;&gt;</td>
</tr>
<tr>
<td align="left">int(x,base=10)</td>
<td align="left">将字符串x按base转换，base默认为10。</td>
<td align="left">int(‘11’,2) -&gt; 3</td>
</tr>
<tr>
<td align="left">isinstance(obj,type)</td>
<td align="left">判断一个对象是否是一个已知的类型，子类也算。</td>
<td align="left">isinstance(1,int) -&gt; True</td>
</tr>
<tr>
<td align="left">issubclass(c, (cp1,cp2))</td>
<td align="left">用于判断参数c是否是类型参数cp1,cp2的子类。</td>
<td align="left">isinstance(A,(B,C,E))</td>
</tr>
<tr>
<td align="left">iter(obj,sentinel)</td>
<td align="left">返回迭代对象，可使用next()获取下一个元素。</td>
<td align="left">a = (1,2,3), iter(a)</td>
</tr>
<tr>
<td align="left">len(x)</td>
<td align="left">返回对象的长度(元素个数)。</td>
<td align="left">a = (1,2,3), len(a) -&gt; 3</td>
</tr>
<tr>
<td align="left">list(iterable)</td>
<td align="left">转换可迭代对象为列表。</td>
<td align="left">a = (1,2,3), list(a) -&gt; [1,2,3]</td>
</tr>
<tr>
<td align="left">locals()</td>
<td align="left">更新并返回表示当前本地符号表的字典。</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">map(func,iterable)</td>
<td align="left">根据提供的函数对指定序列做映射并返回迭代器。</td>
<td align="left">a = [1,2], b = map(lambda x: x+1, a), list(b) -&gt; [2,3]</td>
</tr>
<tr>
<td align="left">max(iter,key,default)</td>
<td align="left">返回可迭代对象/数的最大元素。</td>
<td align="left">a = [1,3,2], max(a) -&gt; 3</td>
</tr>
<tr>
<td align="left">min(iter,key,default)</td>
<td align="left">返回可迭代对象/数的最小元素。</td>
<td align="left">a = [1,3,2], min(a) -&gt; 1</td>
</tr>
<tr>
<td align="left">memoryview</td>
<td align="left">返回由给定实参创建的内存视图对象。</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">next(iter,default)</td>
<td align="left">调用iter的__next__()方法获取下一个元素。迭代耗尽，返回default</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">object()</td>
<td align="left">创建并返回对象。</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">oct(x)</td>
<td align="left">将一个整数转变为一个前缀为‘0o’的八进制字符串。</td>
<td align="left">oct(10) -&gt; ‘0o12’</td>
</tr>
<tr>
<td align="left">open(fl)</td>
<td align="left">参数有mode，buff，encoding，errors，newline，closefd，opener</td>
<td align="left">按参数设定打开文件</td>
</tr>
<tr>
<td align="left">ord(c)</td>
<td align="left">返回字符的Unicode码点整数。</td>
<td align="left">ord(‘习’) -&gt; 20064</td>
</tr>
<tr>
<td align="left">pow(base,exp,mod)</td>
<td align="left">返回base的exp次幂；如果mod存在，则返回次幂对mod取余。</td>
<td align="left">pow(2,3)-&gt;8,pow(2,3,3)-&gt;2</td>
</tr>
<tr>
<td align="left">print(obj)</td>
<td align="left">参数有sep=‘ ’，end=‘\n’，file=sys.stdout，flush=False</td>
<td align="left">输出信息到指定位置。</td>
</tr>
<tr>
<td align="left">property(fgt,fst,fdl,doc)</td>
<td align="left">返回property属性，fgt获取属性值，fst设置属性值。fdl删除属性值,doc为文档。</td>
<td align="left">多对函数修饰@property</td>
</tr>
<tr>
<td align="left">range(start,stop,step)</td>
<td align="left">返回一个序列，从start开始到stop，以step为间隔。</td>
<td align="left">range(1,3,1) -&gt; 1,2</td>
</tr>
<tr>
<td align="left">repr(obj)</td>
<td align="left">返回包含一个对象的可打印表示形式的字符串。</td>
<td align="left">repr([1,2,3])-&gt;‘[1,2,3]’</td>
</tr>
<tr>
<td align="left">reversed(seq)</td>
<td align="left">返回一个反向的iterator。</td>
<td align="left">list(reversed([1,2,3])) -&gt; [3,2,1]</td>
</tr>
<tr>
<td align="left">round(num,ndigits)</td>
<td align="left">返回number舍入到小数点后ndigits位精度的值。若省略则返回最接近的整数。</td>
<td align="left">round(3,245,1) -&gt; 3.2</td>
</tr>
<tr>
<td align="left">set(iterable)</td>
<td align="left">返回一个新的set对象，可以选择带有从iterable获取的元素。</td>
<td align="left">set([1,2,1]) -&gt; {1,2}</td>
</tr>
<tr>
<td align="left">setattr(obj,name,val)</td>
<td align="left">设置obj的属性name=val。</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">slice(start,end,step)</td>
<td align="left">实现切片对象，主要用在切片操作函数里的参数传递。</td>
<td align="left">a = [1,2,3],b = slice(0,2), a[b] -&gt; [1,2]</td>
</tr>
<tr>
<td align="left">sorted(iter, key,reverse=False)</td>
<td align="left">对iterable对象排序，规则由key指定。</td>
<td align="left">sorted([1,3,2],reverse=True) -&gt; [3,2,1]</td>
</tr>
<tr>
<td align="left">str(obj,coding)</td>
<td align="left">转换obj为字符，coding默认为utf-8。</td>
<td align="left">str([1,2,3]) -&gt; ‘[1,2,3]’</td>
</tr>
<tr>
<td align="left">sum(iterable,start)</td>
<td align="left">从start开始自左向右对iterable的项求和并返回总计值。</td>
<td align="left">sum([1,2,3],1) -&gt; 7</td>
</tr>
<tr>
<td align="left">super(type, obj-or-type)</td>
<td align="left">调用父类(超类)的一个方法。</td>
<td align="left">super().__init__(xx)</td>
</tr>
<tr>
<td align="left">tuple(iterable)</td>
<td align="left">返回iterable的元组。</td>
<td align="left">tuple([1,2,3]) -&gt; (1,2,3)</td>
</tr>
<tr>
<td align="left">type(obj)</td>
<td align="left">返回obj类型。</td>
<td align="left">type(12)-&gt; class ‘int’</td>
</tr>
<tr>
<td align="left">vars</td>
<td align="left">返回模块、类、实例或任何具有__dict__属性的对象的__dict__ 属性。</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">zip(*iterable)</td>
<td align="left">创建或解包可迭代对象的聚合。</td>
<td align="left">list(zip([1,2],[8,3])) -&gt; [(1,8),(2,3)]</td>
</tr>
</tbody></table>
<h2 id="一些用法和实现"><a href="#一些用法和实现" class="headerlink" title="一些用法和实现"></a>一些用法和实现</h2><p><img src="https://s1.ax1x.com/2020/07/21/UoVkSH.png" alt="usage1"></p>
<p><img src="https://s1.ax1x.com/2020/07/21/UoV86s.png" alt="usage2"></p>
]]></content>
      <categories>
        <category>编程语言</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python数据结构的各种操作</title>
    <url>/title/98aa0392/</url>
    <content><![CDATA[<p><img src="https://s1.ax1x.com/2020/05/28/tZWFAA.jpg" alt="pythonic"></p>
<a id="more"></a>

<p>Python实现的数据有(字符，数字，元组)[不可变]，(列表，字典，集合)[可变]。每一种数据的操作都不同，现做一番总结。</p>
<h2 id="不可变数据"><a href="#不可变数据" class="headerlink" title="不可变数据"></a>不可变数据</h2><table>
<thead>
<tr>
<th align="left">数字操作</th>
<th align="left">解释</th>
<th align="left">举例</th>
</tr>
</thead>
<tbody><tr>
<td align="left">num.real</td>
<td align="left">返回数的实部</td>
<td align="left">(2+3j).real -&gt; 2</td>
</tr>
<tr>
<td align="left">num.imag</td>
<td align="left">返回数的虚部</td>
<td align="left">(2+3j).real -&gt; 3</td>
</tr>
<tr>
<td align="left">num.bit_length</td>
<td align="left">返回数的字节长度</td>
<td align="left">a=6; a.bit_length() -&gt; 3</td>
</tr>
<tr>
<td align="left">num.to_bytes(L,byteorder)</td>
<td align="left">返回数的字节数组</td>
<td align="left">a=6; a.to_bytes(2,‘big’) -&gt; b‘\x06\x00’</td>
</tr>
<tr>
<td align="left">int.form_bytes(bts,byteorder)</td>
<td align="left">返回由给定字节数组所表示的整数。</td>
<td align="left">int.form_bytes(b‘\x00\x10’,‘big’) -&gt; 16</td>
</tr>
<tr>
<td align="left">num.as_integer_ratio()</td>
<td align="left">返回一对整数，其比率为num</td>
<td align="left">a=6.0; a.as_integer_ratio() -&gt; (6,1)</td>
</tr>
<tr>
<td align="left">num.is_integer()</td>
<td align="left">若num能用有限位整数表示返回True</td>
<td align="left">a=6.0; a.is_integer() -&gt; True</td>
</tr>
<tr>
<td align="left">num.hex()</td>
<td align="left">以16进制返回浮点数</td>
<td align="left">a=6.0; a.hex() -&gt; ‘0x1.8000000000000p+2’</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th align="left">字符串操作</th>
<th align="left">解释</th>
<th align="left">举例(‘Ab ab’)</th>
</tr>
</thead>
<tbody><tr>
<td align="left">del sr</td>
<td align="left">删除sr</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">sr[0]</td>
<td align="left">通过下标取元素</td>
<td align="left">‘A’</td>
</tr>
<tr>
<td align="left">st[1:3]</td>
<td align="left">字符串切片</td>
<td align="left">‘b a’</td>
</tr>
<tr>
<td align="left">sr[::-1]</td>
<td align="left">字符串反转</td>
<td align="left">‘ba bA’</td>
</tr>
<tr>
<td align="left">sr.lower()</td>
<td align="left">转换为小写</td>
<td align="left">‘ab ab’</td>
</tr>
<tr>
<td align="left">sr.upper()</td>
<td align="left">转换为大写</td>
<td align="left">‘AB AB’</td>
</tr>
<tr>
<td align="left">sr.title()</td>
<td align="left">单词首字母大写</td>
<td align="left">‘Ab Ab’</td>
</tr>
<tr>
<td align="left">sr.casefold()</td>
<td align="left">转换为小写，对所有字符，包括法国字母</td>
<td align="left">‘ab ab’</td>
</tr>
<tr>
<td align="left">sr.swapcase()</td>
<td align="left">转换大写为小写，小写为大写</td>
<td align="left">‘aB AB’</td>
</tr>
<tr>
<td align="left">sr.capitalize()</td>
<td align="left">首字母大写</td>
<td align="left">‘Ab ab’</td>
</tr>
<tr>
<td align="left">sr.center(10,‘-’)</td>
<td align="left">将sr居中对齐并扩展到长为10的字符串，不够用-补齐</td>
<td align="left">‘–Ab ab—’</td>
</tr>
<tr>
<td align="left">sr.ljust(10,‘-’)</td>
<td align="left">将sr左对齐并扩展到长为n的字符串，不够用sp补齐</td>
<td align="left">‘Ab ab—–’</td>
</tr>
<tr>
<td align="left">sr.rjust(10,‘-’)</td>
<td align="left">将sr右对齐并扩展到长为n的字符串，不够用sp补齐</td>
<td align="left">‘—–Ab ab’</td>
</tr>
<tr>
<td align="left">sr.zfill(10)</td>
<td align="left">将sr右对齐并扩展到长为n的字符串，不够用0补齐</td>
<td align="left">‘00000Ab ab’</td>
</tr>
<tr>
<td align="left">sr.split(‘ ’)</td>
<td align="left">按‘ ’分隔字符串sr为列表，‘ ’默认为空格</td>
<td align="left">[‘Ab’, ‘ab’]</td>
</tr>
<tr>
<td align="left">sr.rsplit(‘a’,1)</td>
<td align="left">按sp从右到左分隔字符串sr为列表，sp默认为空格，n为分割的次数</td>
<td align="left">[‘Ab ’, ‘b’]</td>
</tr>
<tr>
<td align="left">sr.startwith(‘a’)</td>
<td align="left">判断sr是否以sp开头</td>
<td align="left">False</td>
</tr>
<tr>
<td align="left">sr.endswith(‘ab’)</td>
<td align="left">判断sr是否以sp结尾</td>
<td align="left">True</td>
</tr>
<tr>
<td align="left">sr.expandtabs(4)</td>
<td align="left">将sr中的tab键转换为空格，4为空格数</td>
<td align="left">‘A\tB’ -&gt; ‘A    B’</td>
</tr>
<tr>
<td align="left">sr.isupper()</td>
<td align="left">判断sr是否是大写</td>
<td align="left">False</td>
</tr>
<tr>
<td align="left">sr.islower()</td>
<td align="left">判断sr是否是小写</td>
<td align="left">False</td>
</tr>
<tr>
<td align="left">sr.isalpha()</td>
<td align="left">判断sr是否是字母</td>
<td align="left">False</td>
</tr>
<tr>
<td align="left">sr.isdigit()</td>
<td align="left">判断sr是否是数字</td>
<td align="left">False</td>
</tr>
<tr>
<td align="left">sr.isalnum()</td>
<td align="left">判断sr是否是字母数字</td>
<td align="left">False</td>
</tr>
<tr>
<td align="left">sr.isspace()</td>
<td align="left">判断sr是否是空格</td>
<td align="left">False</td>
</tr>
<tr>
<td align="left">sr.istitle()</td>
<td align="left">判断sr中单词首字母是否是大写</td>
<td align="left">False</td>
</tr>
<tr>
<td align="left">sr.isdecimal()</td>
<td align="left">判断sr是否是十进制数</td>
<td align="left">False</td>
</tr>
<tr>
<td align="left">sr.isnumeric()</td>
<td align="left">判断sr是否是数</td>
<td align="left">False</td>
</tr>
<tr>
<td align="left">sr.strip()</td>
<td align="left">去掉sr两侧的空字符</td>
<td align="left">‘  Ab ab ’-&gt;‘Ab ab’</td>
</tr>
<tr>
<td align="left">sr.lstrip()</td>
<td align="left">去掉sr左侧的空字符</td>
<td align="left">‘  Ab ab ’-&gt;‘Ab ab ’</td>
</tr>
<tr>
<td align="left">sr.rstrip(‘ ’)</td>
<td align="left">去掉sr右侧的空字符</td>
<td align="left">‘  Ab ab ’-&gt;‘ Ab ab’</td>
</tr>
<tr>
<td align="left">sr.encode(encoding)</td>
<td align="left">按encoding规则编码sr</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">sr.decode(encoding)</td>
<td align="left">按encoding规则解码sr</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">sr.count(‘a’)</td>
<td align="left">统计sr中a的频度</td>
<td align="left">2</td>
</tr>
<tr>
<td align="left">sr.find(‘a’,s,e)</td>
<td align="left">返回sr中从左侧开始第一个a位置，无则返回-1，可指定查找范围s和e</td>
<td align="left">3</td>
</tr>
<tr>
<td align="left">sr.rfind(‘a’)</td>
<td align="left">返回sr中从右侧开始第一个a位置，无则返回-1，可指定查找范围s和e</td>
<td align="left">3</td>
</tr>
<tr>
<td align="left">sr.index(‘a’)</td>
<td align="left">返回sr中从左侧开始第一个a位置，无则报错，可指定查找范围s和e</td>
<td align="left">3</td>
</tr>
<tr>
<td align="left">sr.rindex(‘a’)</td>
<td align="left">返回sr中从右侧开始第一个a位置，无则报错，可指定查找范围s和e</td>
<td align="left">3</td>
</tr>
<tr>
<td align="left">sr.join(‘ABC’)</td>
<td align="left">将sr作为ABC的连接符号，组成AsrBsrC这种字符串</td>
<td align="left">‘AAb abBAb abC’</td>
</tr>
<tr>
<td align="left">sr.format()</td>
<td align="left">格式化输出，替代%方法</td>
<td align="left">‘{}-{}’.format(1,2) -&gt; ‘1-2’</td>
</tr>
<tr>
<td align="left">sr.replace(‘a’,‘b’)</td>
<td align="left">将sr中的a替换成b</td>
<td align="left">‘Ab bb’</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th align="left">元组操作</th>
<th align="left">解释</th>
<th align="left">举例(1,2,3,4,1)</th>
</tr>
</thead>
<tbody><tr>
<td align="left">del tpl</td>
<td align="left">删除tp</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">tpl[0]</td>
<td align="left">索引元素</td>
<td align="left">1</td>
</tr>
<tr>
<td align="left">tpl[1:3]</td>
<td align="left">切片</td>
<td align="left">(2,3)</td>
</tr>
<tr>
<td align="left">tp1+tp2</td>
<td align="left">元组合并</td>
<td align="left">(1,2) + (2,3) -&gt; (1,2,2,3)</td>
</tr>
<tr>
<td align="left">sorted(tpl)</td>
<td align="left">按某规则排序tpl</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">tpl.count(‘1’)</td>
<td align="left">统计tpl中1的频度</td>
<td align="left">2</td>
</tr>
<tr>
<td align="left">tpl.index(‘1’)</td>
<td align="left">返回tpl中第一个x位置</td>
<td align="left">0</td>
</tr>
</tbody></table>
<h2 id="可变数据"><a href="#可变数据" class="headerlink" title="可变数据"></a>可变数据</h2><table>
<thead>
<tr>
<th align="left">列表操作</th>
<th align="left">解释</th>
<th align="left">举例[1,2,3,4,1,2,3,4]</th>
</tr>
</thead>
<tbody><tr>
<td align="left">del lst[1]</td>
<td align="left">删除列表lst中某元素</td>
<td align="left">[1,3,4,1,2,3,4]</td>
</tr>
<tr>
<td align="left">del lst</td>
<td align="left">删除列表lst</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">‘-’.join(lst)</td>
<td align="left">用-拼接lst为字符串</td>
<td align="left">‘1-3-4-1-2-3-4’</td>
</tr>
<tr>
<td align="left">lst.append(‘x’)</td>
<td align="left">向lst末尾添加元素x</td>
<td align="left">[1,3,4,1,2,3,4,‘x’]</td>
</tr>
<tr>
<td align="left">lst.extend(iter)</td>
<td align="left">将可迭代对象添加到lst</td>
<td align="left">lst.extend([10,9])-&gt;[1,3,4,1,2,3,4,10,9]</td>
</tr>
<tr>
<td align="left">lst.insert(0,‘x’)</td>
<td align="left">在lst的i位置插入x</td>
<td align="left">[‘x’,1,3,4,1,2,3,4]</td>
</tr>
<tr>
<td align="left">lst.remove(1)</td>
<td align="left">移除lst中的第一个1</td>
<td align="left">[‘x’,3,4,1,2,3,4]</td>
</tr>
<tr>
<td align="left">lst.pop(0)</td>
<td align="left">弹出lst中2位置的元素</td>
<td align="left">[3,4,1,2,3,4]</td>
</tr>
<tr>
<td align="left">lst.index(1,start,end)</td>
<td align="left">在start-end范围内查找元素，并返回位置</td>
<td align="left">2</td>
</tr>
<tr>
<td align="left">lst.count(3)</td>
<td align="left">统计lst中1的频度</td>
<td align="left">2</td>
</tr>
<tr>
<td align="left">lst.sort(key=None, reverse=False)</td>
<td align="left">对lst进行排序</td>
<td align="left">[1,2,3,3,4,4]</td>
</tr>
<tr>
<td align="left">lst.reverse()</td>
<td align="left">对lst进行逆序</td>
<td align="left">[4,4,3,3,2,1]</td>
</tr>
<tr>
<td align="left">lst.clear()</td>
<td align="left">清除lst中所有元素</td>
<td align="left">[]</td>
</tr>
<tr>
<td align="left">lst.copy()</td>
<td align="left">浅拷贝lst</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">copy.deepcopy(lst)</td>
<td align="left">深拷贝lst</td>
<td align="left"></td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th align="left">collections中的双队列</th>
<th align="left">解释</th>
<th align="left">举例deque([1,2,3,4])</th>
</tr>
</thead>
<tbody><tr>
<td align="left">copy(dq)</td>
<td align="left">浅拷贝</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">append(5)</td>
<td align="left">队列末尾添加元素5</td>
<td align="left">deque([1,2,3,4,5])</td>
</tr>
<tr>
<td align="left">appendleft(5)</td>
<td align="left">队列首部添加元素5</td>
<td align="left">deque([5,1,2,3,4,5])</td>
</tr>
<tr>
<td align="left">pop()</td>
<td align="left">弹出队列尾部数据</td>
<td align="left">deque([5,1,2,3,4])</td>
</tr>
<tr>
<td align="left">popleft()</td>
<td align="left">弹出队列首部数据</td>
<td align="left">deque([1,2,3,4])</td>
</tr>
<tr>
<td align="left">extend([7,8,9])</td>
<td align="left">添加多个元素到队列尾部</td>
<td align="left">deque([1,2,3,4,7,8,9])</td>
</tr>
<tr>
<td align="left">extendleft([0,0,7])</td>
<td align="left">添加多个元素到队列首部</td>
<td align="left">deque([0,0,7,1,2,3,4,7,8,9])</td>
</tr>
<tr>
<td align="left">rotate(-2)</td>
<td align="left">向左移动两个位置，负左，正右</td>
<td align="left">deque([7,1,2,3,4,7,8,9,0,0])</td>
</tr>
<tr>
<td align="left">remove(7)</td>
<td align="left">删除第一个7</td>
<td align="left">deque([1,2,3,4,7,8,9,0,0])</td>
</tr>
<tr>
<td align="left">reverse()</td>
<td align="left">队列倒序</td>
<td align="left">deque([0,0,9,8,7,4,3,2,1])</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th align="left">字典操作</th>
<th align="left">解释</th>
<th align="left">举例{‘x’:1,‘z’:2,‘y’:3}</th>
</tr>
</thead>
<tbody><tr>
<td align="left">dct[‘x’]</td>
<td align="left">索引元素x</td>
<td align="left">1</td>
</tr>
<tr>
<td align="left">del dct[‘x’]</td>
<td align="left">删除元素x</td>
<td align="left">{z:2,y:3}</td>
</tr>
<tr>
<td align="left">del dct</td>
<td align="left">删除字典</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">dct.pop(‘x’)</td>
<td align="left">弹出元素x</td>
<td align="left">{z:2,y:3}</td>
</tr>
<tr>
<td align="left">dct.popitem()</td>
<td align="left">弹出一个元素，一般为最后一个</td>
<td align="left">{x:1,z:2}</td>
</tr>
<tr>
<td align="left">dct.get(‘x’,‘s’)</td>
<td align="left">获取元素x，若没有则返回s</td>
<td align="left">1</td>
</tr>
<tr>
<td align="left">dct.setdefault(‘m’,4)</td>
<td align="left">获取元素m，若没有则设置m=4</td>
<td align="left">{x:1,z:2,y:3,m:4}</td>
</tr>
<tr>
<td align="left">dct.fromkeys(seq, val)</td>
<td align="left">由seq和val创建字典</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">dct.update(dct1)</td>
<td align="left">将dct1合并到dct中 dct1={‘a’:1}</td>
<td align="left">{‘x’:1,‘z’:2,‘y’:3,‘a’:1}</td>
</tr>
<tr>
<td align="left">dct.keys()</td>
<td align="left">获取dct的所有键</td>
<td align="left">dict_keys([‘x’,‘z’,‘y’])</td>
</tr>
<tr>
<td align="left">dct.values()</td>
<td align="left">获取dct的所有值</td>
<td align="left">dict_keys([1,2,3])</td>
</tr>
<tr>
<td align="left">dct.items()</td>
<td align="left">获取dct的所有键值</td>
<td align="left">dict_keys([(‘x’,1),(‘z’,2),(‘y’,3)])</td>
</tr>
<tr>
<td align="left">dct.copy()</td>
<td align="left">浅拷贝dct</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">dct.clear()</td>
<td align="left">清除dct中所有元素</td>
<td align="left">{}</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th align="left">集合操作</th>
<th align="left">解释</th>
<th align="left">举例{1,2,3}</th>
</tr>
</thead>
<tbody><tr>
<td align="left">st.issubset(t)</td>
<td align="left">判断st是否是t的子集合t={1,2}</td>
<td align="left">False</td>
</tr>
<tr>
<td align="left">st.issuperset(t)</td>
<td align="left">判断st是否是t的子集合</td>
<td align="left">True</td>
</tr>
<tr>
<td align="left">st.union(t)</td>
<td align="left">集合并操作   st or t</td>
<td align="left">{1,2,3}</td>
</tr>
<tr>
<td align="left">st.intersection(t)</td>
<td align="left">集合交操作   st &amp;  t</td>
<td align="left">{1,2}</td>
</tr>
<tr>
<td align="left">st.difference(t)</td>
<td align="left">集合差操作   st -  t</td>
<td align="left">{3}</td>
</tr>
<tr>
<td align="left">st.symmetric_difference(t)</td>
<td align="left">集合异或操作 st ^  t</td>
<td align="left">{3}</td>
</tr>
<tr>
<td align="left">st.update(t)</td>
<td align="left">合并t到st</td>
<td align="left">{1,2,3}</td>
</tr>
<tr>
<td align="left">st.intersection_update(t)</td>
<td align="left">合并st和t的交集到st</td>
<td align="left">{1,2}</td>
</tr>
<tr>
<td align="left">st.difference_update(t)</td>
<td align="left">合并st和t的差集到st</td>
<td align="left">{3}</td>
</tr>
<tr>
<td align="left">st.symmetric_difference_update(t)</td>
<td align="left">合并st和t的对称差集到st</td>
<td align="left">{}</td>
</tr>
<tr>
<td align="left">st.add(‘x’)</td>
<td align="left">向st中添加元素x</td>
<td align="left">{1,2,3,‘x’}</td>
</tr>
<tr>
<td align="left">st.copy()</td>
<td align="left">浅拷贝st</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">st.remove(‘x’)</td>
<td align="left">移除st中x元素，不存在会报错</td>
<td align="left">{1,2,3}</td>
</tr>
<tr>
<td align="left">st.discard(‘x’)</td>
<td align="left">丢弃st中x元素，不存在不报错</td>
<td align="left">{1,2,3}</td>
</tr>
<tr>
<td align="left">st.pop()</td>
<td align="left">弹出最后一个元素</td>
<td align="left">{1,2}</td>
</tr>
<tr>
<td align="left">st.clear()</td>
<td align="left">清除st中所有元素</td>
<td align="left">{}</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>编程语言</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>人有多重</title>
    <url>/title/68109d68/</url>
    <content><![CDATA[<p><img src="https://s1.ax1x.com/2020/03/31/GK2k9A.md.png" alt="humanweight"></p>
<a id="more"></a>

<h2 id="地球人的重量"><a href="#地球人的重量" class="headerlink" title="地球人的重量"></a>地球人的重量</h2><p>曾听过一个问题：要是地球上所有人同时跳起来，会不会对地球有影响？</p>
<p>最近看书，突发奇想，人类到底有多重呢？我是指地球上目前活着的所有人。计算是非常简单的，所以不妨计算一下。</p>
<p>所有人中，有儿童，成年人。不同年龄段的体重是不一样的，有的比较胖，但大部分人都算正常，所以可以取一个平均值代表每个人的体重。</p>
<p>成年人的标准体重应该是  </p>
<p>男性：（身高 － 80）×0．7（千克）</p>
<p>女性：（身高 － 70）×0．6（千克）</p>
<p>标准体重＋10％属于正常范围，超重20％属轻度肥胖，超重50％属重度肥胖，一般成人重65KG。儿童体重可估算一个均值，设为0.7倍成人体重，其实这个估算肯定不准确，但是偏差对最后结果定性分析影响不大。</p>
<p>截至2020.03.31日，全球230个国家和地区人口总数为7585204179，就是75.852亿，数据来源于联合国。而目前儿童人口数大约20亿。所以总重非常好算。</p>
<p>$$W_{human} = 20x10^{8}x0.7x65 + 55.852x10^{8}x65 (Kg) = 4.54038x10^{8}(ton)$$</p>
<p>所以地球人，活着的，大概4.54038亿吨重。然而，这个重量仍然不够直观。为此，我需要选择些参照物，将人转换为一种大家能直观感受的东西。</p>
<p>这里选择石头，因为地球上到处是石头。不同种类石头的密度是不同的，根据参考文献，大部分石头密度在3左右。这里选择大理石，密度为$3ton/m^{3}$。所以将所有人压缩为大理石密度，则体积有$1.51346*10^{8}m^{3}$，开立方得到一个边长为533米长的正方体。想象一个533米的正方体，感觉不大吧？其实，泰山露出来的部分大概1500米，就比这个正方体大，所以人类实际上不如泰山这样一座山重。而地球上何止一座泰山呢？所以地球人跳起来不会对地球有啥影响。</p>
<p>从物理角度算算，和地球对比一下，能得到更为精确的数据。</p>
<p>$$mg = G\frac{M_{e}m}{R^{2}}$$</p>
<p>G为引力常数，结合各个数据可得到地球质量$M_{e} = 6*10^{24}Kg$，人类质量占地球的比例为</p>
<p>$$r = \frac{4.54x10^{11}}{6x10^{24}} = 7.5x10^{-14}$$</p>
<p>大概是百万亿分之7.5，实在算不上什么。</p>
<p>地球要维持自转而不分裂，大概需要维持其密度为$4ton/m^{3}$，而地球平均密度为$5.52ton/m^{3}$。将人压缩成地球平均密度的话，大概就是一个$434.9m$的正方体，比上面数据更小。</p>
<p>这样说吧，把地球人口重量看作乘火车时穿过的一座山的重量大概是合理的。</p>
<h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ul>
<li><a href="https://web.phb123.com/city/renkou/rk.html" target="_blank" rel="noopener">https://web.phb123.com/city/renkou/rk.html</a></li>
<li><a href="https://www.worldometers.info/cn/" target="_blank" rel="noopener">https://www.worldometers.info/cn/</a></li>
<li>《水利水电工程施工手册》</li>
</ul>
]]></content>
      <categories>
        <category>议论</category>
      </categories>
      <tags>
        <tag>小杂感</tag>
      </tags>
  </entry>
  <entry>
    <title>为什么在股市容易亏钱</title>
    <url>/title/8736ee58/</url>
    <content><![CDATA[<p><img src="https://s1.ax1x.com/2020/03/19/8rdjTf.jpg" alt="reinvare"></p>
<a id="more"></a>

<p>炒股成了一部分人的生活，他们谋求在股市大展身手，试要大赚一笔。然而，通过非常简单的计算，你就知道在股市损失要比赚钱容易得多，概率更大。</p>
<p>让我们假设你有初始资金T，全部投入股市，且不计手续费，印花税等等，也就是说T就购买成股票资产。让我们来看看在不同的股市波动后，你的资金T的变化。</p>
<p>设跌幅为$p_1\lt 100 %$，增幅为$p_2 \ge 0$，二者均只计算绝对值。</p>
<p>你遭遇到跌幅为$p_1$的波动，现在你的资产只有$T(1-p_1) \le T$。接着你梦想着资产至少恢复到T，要是超过T就更好了。那么从$T(1-p_1)$恢复成T需要增长多少呢？假如设此时增长率为$p_2$</p>
<p>$$T(1 - p_1)(1 + p_2)=T$$ </p>
<p>此时资产刚好恢复到T，那么：</p>
<p>$$(1 - p_1)(1 + p_2)=1$$ </p>
<p>$$ (1 + p_2)=\frac{1}{1 - p_1}$$</p>
<p>$$ p_2=\frac{1}{1 - p_1} - 1$$</p>
<p>$$ p_2=\frac{p_1}{1 - p_1}$$</p>
<p>将$p_2$看成$p_1$的函数，也就是将增长率看成跌幅的函数，来考察不同的跌幅下，到底需要增长多少才能保证不亏呢？<br>求导，看看增长率随跌幅的变化率。</p>
<p>$$ p_2^{‘}=(\frac{p_1}{1 - p_1})^{‘} = \frac{p_1^{‘}(1-p_1)-(1-p_1)^{‘}p_1 }{(1-p_1)^{2}}$$<br>$$ p_2^{‘}=(\frac{p_1}{1 - p_1})^{‘} = \frac{1(1-p_1)-(0-1)p_1}{(1-p_1)^{2}}$$<br>$$ p_2^{‘}=(\frac{p_1}{1 - p_1})^{‘} = \frac{1}{(1-p_1)^{2}} \gt 0$$<br>$$ \because p_2的导数恒大于0, \therefore p_2 为增函数 $$<br>$$ p_{1_{min}} = 0, p_{1_{max}} \lt 100% $$<br>$$ p_{2_{min}} = 0, p_{2_{max}} = \infty $$</p>
<p>用程序稍微计算下，得到如下结果: [括号内第一个数为跌幅，第二个数为至少保证不亏本时的增幅，均为百分数，略去百分号%。比如(1.0,1.01)表示跌1%时，要涨1.01%才能回本。]</p>
<p>(0.0, 0.0), (1.0, 1.01), (2.0, 2.04), (3.0, 3.09), (4.0, 4.17), (5.0, 5.26), (6.0, 6.38), (7.0, 7.53), (8.0, 8.7), (9.0, 9.89)，跌幅在10%以内时，回本比较容易，可以看到差距不大。 </p>
<p>(10.0, 11.11), (11.0, 12.36), (12.0, 13.64), (13.0, 14.94), (14.0, 16.28), (15.0, 17.65), (16.0, 19.05), (17.0, 20.48), (18.0, 21.95), (19.0, 23.46)，跌幅在10%-20%时，回本开始有点儿难度了，但还算行。此时，一些股民开始割肉止损。 </p>
<p>(20.0, 25.0), (21.0, 26.58), (22.0, 28.21), (23.0, 29.87), (24.0, 31.58), (25.0, 33.33), (26.0, 35.14), (27.0, 36.99), (28.0, 38.89), (29.0, 40.85)，跌幅在20%-30%时，回本明显困难起来，但也是有可能的。此时，更多股民开始割肉止损。 </p>
<p>(30.0, 42.86), (31.0, 44.93), (32.0, 47.06), (33.0, 49.25), (34.0, 51.52), (35.0, 53.85), (36.0, 56.25), (37.0, 58.73), (38.0, 61.29), (39.0, 63.93)，跌幅在30%-40%时，回本更困难，但还是有可能。此时，大量股民割肉。  </p>
<p>(40.0, 66.67), (41.0, 69.49), (42.0, 72.41), (43.0, 75.44), (44.0, 78.57), (45.0, 81.82), (46.0, 85.19), (47.0, 88.68), (48.0, 92.31), (49.0, 96.08)，跌幅在40%-50%时，回本难度攀升，但依然有可能。此时，大量股民割肉。  </p>
<p>(50.0, 100.0), (51.0, 104.08), (52.0, 108.33), (53.0, 112.77), (54.0, 117.39), (55.0, 122.22), (56.0, 127.27), (57.0, 132.56), (58.0, 138.1), (59.0, 143.9)，跌幅在50%-60%时，回本几乎不可能，绝大部分股民亏损割肉，或是打算长期持有。</p>
<p>(60.0, 150.0), (61.0, 156.41), (62.0, 163.16), (63.0, 170.27), (64.0, 177.78), (65.0, 185.71), (66.0, 194.12), (67.0, 203.03), (68.0, 212.5), (69.0, 222.58)，跌幅在60%-70%时，回本更加不可能，少部分股民打算长期持有。 </p>
<p>(70.0, 233.33), (71.0, 244.83), (72.0, 257.14), (73.0, 270.37), (74.0, 284.62), (75.0, 300.0), (76.0, 316.67), (77.0, 334.78), (78.0, 354.55), (79.0, 376.19)，跌幅在70%-80%时，开启搅肉机模式，回本渺茫，极少部分股民打算长期持有。 </p>
<p>(80.0, 400.0), (81.0, 426.32), (82.0, 455.56), (83.0, 488.24), (84.0, 525.0), (85.0, 566.67), (86.0, 614.29), (87.0, 669.23), (88.0, 733.33), (89.0, 809.09)，跌幅在80%-90%时，要回本至少要涨400%以上才可能，人人都知道涨百分之几百是小概率事件。此时很多公司可能被退市，你的股票成为废纸。</p>
<p>(90.0, 900.0), (91.0, 1011.11), (92.0, 1150.0), (93.0, 1328.57), (94.0, 1566.67), (95.0, 1900.0), (96.0, 2400.0), (97.0, 3233.33), (98.0, 4900.0), (99.0, 9900.0)，跌幅在90%-99%时，公司估计早已破产，你的股票也已是一堆废纸。 </p>
<p>跌幅达到百分之几十，轻易就遭遇到了，但要涨幅达到百分之几百估计没几人敢这么说。这还只是回本，若你还要赚10%-20%T资产，那就更困难了。同时不要忘了，这里的计算还没统计各种手续费和税，要再考虑那些，只要大跌一次，不管你有多少，都要给你跌掉。</p>
<p>下面是维持不亏本的跌幅和涨幅函数图(跌幅范围为0%-99%)。可以看到，前段平缓，后面成了指数。</p>
<p><img src="https://s1.ax1x.com/2020/03/19/8rn03D.md.png" alt="increduvare"></p>
<p>拉近看，考察一个区域。跌幅在0%-80%时保证不亏本的增幅变化(最大增幅400%左右)。</p>
<p><img src="https://s1.ax1x.com/2020/03/19/8rakgs.png" alt="vare1"></p>
<p>跌幅在80%-90%时保证不亏本的增幅变化(仅仅10%的变化，增幅也变化400%左右)。</p>
<p><img src="https://s1.ax1x.com/2020/03/19/8ranET.png" alt="vare2"></p>
<p>跌幅在80%-98%时保证不亏本的增幅变化(指数模式，无底洞)。</p>
<p><img src="https://s1.ax1x.com/2020/03/19/8raQC4.png" alt="vare3"></p>
<p>热力学第二定律关于熵，自然事物在不断变得无规则，扩散，也就是熵增。而要逆熵则太难，人是逆熵动物，但一死就将回归自然律。股票亏损就像熵增，不断扩大，而要逆熵赚钱则有些难度，当然本领好，也能赚钱，有人亏，就有人赚。</p>
<p>金钱有度，股灾无情。</p>
]]></content>
      <categories>
        <category>投资</category>
      </categories>
      <tags>
        <tag>股市</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu20.04 LTS</title>
    <url>/title/8009ae71/</url>
    <content><![CDATA[<p><img src="https://s2.ax1x.com/2020/03/05/3TbKmD.png" alt="Focal Fossa"></p>
<a id="more"></a>

<p>近期Ubuntu20.04 LTS(Focal Fossa)冻结部分功能，特地下载试了试。  </p>
<h2 id="Ubuntu20-04发布的时间表-2020-："><a href="#Ubuntu20-04发布的时间表-2020-：" class="headerlink" title="Ubuntu20.04发布的时间表(2020)：  "></a>Ubuntu20.04发布的时间表(2020)：  </h2><p>1月09日：测试周 (可选)<br>2月27日：特性冻结，Debian导入冻结<br>3月05日：测试周 (可选)<br>3月19日：用户界面冻结<br>3月26日：文档字符串冻结<br>4月02日：测试版冻结<br>4月09日：内核冻结<br>4月16日：最终冻结，语言翻译包冻结，发布候选版<br>4月23日：发布稳定版  </p>
<p>在某个日期，Ubuntu18.04 LTS用户会收到新LTS通知，提示升级。</p>
<h2 id="支持时限："><a href="#支持时限：" class="headerlink" title="支持时限：  "></a>支持时限：  </h2><p>台式机及服务器：2020-2025年<br>企业扩展维护版：2020-2030年(收费)</p>
<h2 id="计划功能。"><a href="#计划功能。" class="headerlink" title="计划功能。  "></a>计划功能。  </h2><ul>
<li>Gnome3.36</li>
<li>游戏相关改进</li>
<li>改进的ZFS支持</li>
<li>GDM中多显示器</li>
<li>Xorg会话分数缩放</li>
<li>Linux Kernel 5.4 or higher</li>
</ul>
<p>看来就ZFS和新内核有点看头。Ubuntu以前用的是ext4系统，不知道新ZFS如何，最近Linus大佬到是对ZFS <a href="https://www.oschina.net/news/112779/linus-zfs-statements-arent-right-heres-the-straight-dope?p=2" target="_blank" rel="noopener">颇有看法</a>。</p>
<p>关于<a href="https://www.kernel.org" target="_blank" rel="noopener">内核</a>，<code>uname -a</code>显示结果:<br><code>Linux ubuntu 5.4.0-14-generic #17-Ubuntu SMP Thu Feb 6 22:47:59 UTC 2020 x86_64 x86_64 x86_64 GNU/Linux</code><br>5.4的内核比较新，微软去年贡献出的exFAT功能也已加入，所以也算得上20.04的新特性吧。</p>
<p>关于软件<br>预装的Amazon在本版本中被去掉了，LibreOffice提供了最新6.4版，我速度快多了。另外，官方正考虑预置新版PHP 7.4。<br>至于其他的都差不多，Firefox, vim等等这些和以前一样预置。</p>
<p>使用<br>虚拟机下使用也不怎么卡，Gnome优化得挺好，我这台电脑是2015年的垃圾货了，装双系统，再开虚拟机跑着还过得去。新版出来后多半会跟着升级吧，毕竟穷玩车，富玩表，屌丝玩电脑。服务器版除非买了新服务器，且够大胆，不然还是得用18.04或是16.04，我认为那是最优的，新的20.04不一定就合适。</p>
<p>安装节面：  </p>
<p><img src="https://s2.ax1x.com/2020/03/05/3Tb4AJ.png" alt="install"></p>
<p>软件中心：(微软家的Visual Studio和Skype也加入了)  </p>
<p><img src="https://s2.ax1x.com/2020/03/05/3TbbjK.png" alt="software"></p>
<p>自带软件：  </p>
<p><img src="https://s2.ax1x.com/2020/03/05/3TqPjf.png" alt="installed"></p>
<p>自带壁纸：  </p>
<p><img src="https://s2.ax1x.com/2020/03/05/3TqnCn.png" alt="wallpaper"></p>
<h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>Ubuntu总体来说比较优秀。当然，近几年它很火，许多工具甚至特地发布了Ubuntu版。用了近两年Ubuntu(Windows用得很少了)，感觉我的工作它都处理得很好，它没有而我需要的功能我就自己写些脚步来处理，惟一的遗憾是缺个像Office这样好用的软件。无论如何，初学者或者喜欢玩操作系统的人不妨试试20.04。</p>
]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>OS</tag>
      </tags>
  </entry>
  <entry>
    <title>回首猪年，展望鼠年</title>
    <url>/title/93818f3d/</url>
    <content><![CDATA[<p><img src="https://s2.ax1x.com/2020/01/24/1ZfDJI.md.png" alt="RatYear"></p>
<a id="more"></a>

<p>2019农历猪年就要过去了，在此整理这一年来的大事件。这一年，极不平静，发生好多大事。真是逢九必乱！</p>
<h2 id="大事件"><a href="#大事件" class="headerlink" title="大事件"></a>大事件</h2><h3 id="猪瘟"><a href="#猪瘟" class="headerlink" title="猪瘟"></a>猪瘟</h3><p> 年初时一部短片《啥是佩琪?》火遍网络，可没成想本年度物价因为猪而飙升，CPI连连上涨。非洲猪瘟给老百姓的基本生活带来了极大不便。</p>
<p> <img src="https://s2.ax1x.com/2020/01/24/1ZWorD.md.png" alt="zhuwen"></p>
<h3 id="贸易战"><a href="#贸易战" class="headerlink" title="贸易战"></a>贸易战</h3><p> 美国总统特朗普大笔一挥，两国贸易战开打，双方国力耗损，经济受到影响，全球经济增长预期下降。</p>
<p> <img src="https://s2.ax1x.com/2020/01/24/1ZWTqe.md.png" alt="tradewar"></p>
<h3 id="宜宾地震"><a href="#宜宾地震" class="headerlink" title="宜宾地震"></a>宜宾地震</h3><p> 宜宾，醉美之城，突然又遭遇地震袭击，给当地百姓生活带来了极大困扰，好在伤亡人数不多。</p>
<p> <img src="https://s2.ax1x.com/2020/01/24/1ZWbad.md.png" alt="zhuwen"></p>
<h3 id="香港暴乱"><a href="#香港暴乱" class="headerlink" title="香港暴乱"></a>香港暴乱</h3><p> 从7月开始，香港不断有暴乱活动，给大陆带来很大麻烦。在国际上，香港的投资及金融地位受到影响。</p>
<p> <img src="https://s2.ax1x.com/2020/01/24/1ZWOPI.md.png" alt="zhuwen"></p>
<h3 id="国庆"><a href="#国庆" class="headerlink" title="国庆"></a>国庆</h3><p> 今年是各种重大日子的周年纪念日。中美建交40周年，五四运动一百周年，建国70周年等等。</p>
<p> <img src="https://s2.ax1x.com/2020/01/24/1ZWvxf.md.png" alt="zhuwen"></p>
<h3 id="2019-nCov"><a href="#2019-nCov" class="headerlink" title="2019-nCov"></a>2019-nCov</h3><p> 本以为好好过年，结果又来病毒。这次直接对人造成伤害，给社会带来恐慌。</p>
<p> <img src="https://s2.ax1x.com/2020/01/24/1Zfpqg.md.png" alt="zhuwen"></p>
<h2 id="祝福明天"><a href="#祝福明天" class="headerlink" title="祝福明天"></a>祝福明天</h2><p>  现在是除夕夜，我在成都，在某栋楼里写下这些文字。希望病毒早日消退，早点恢复社会生产和教学活动，积极发展经济。毕竟2020是中国人追求几千年的小康关键之年，不能因为一个病毒给毁了。我们这个民族，吃了太多苦了，付出了太多代价。在14亿人的大国里，任何一个麻烦都会影响国民。中国人要强大起来，富裕起来，自信起来。祝福中国，2020，鼠年！</p>
]]></content>
      <categories>
        <category>年度报告</category>
      </categories>
      <tags>
        <tag>回忆</tag>
      </tags>
  </entry>
  <entry>
    <title>使用Asciidoc写作</title>
    <url>/title/b6700389/</url>
    <content><![CDATA[<p><img src="https://s2.ax1x.com/2020/01/15/lXKWJe.md.png" alt="asciidoc"></p>
<a id="more"></a>

<p>一直用markdown和ResTructuredText写文档，速度确实快。然而，一旦文件复杂起来后就没法儿用它们解决。今天刚好发现asciidoc，试了试，效果不错。</p>
<p>asciidoc是一种类似markdown的标记语言，且其功能要比markdown强大。利用asciidoc的增强版asciidoctor能直接输出html，epub电子书等格式等文件。</p>
<h2 id="asciidoctor支持的文档格式"><a href="#asciidoctor支持的文档格式" class="headerlink" title="asciidoctor支持的文档格式"></a>asciidoctor支持的文档格式</h2><blockquote>
<p>.html<br>.xml<br>.xhtml<br>.docbook<br>.manpage<br>.pdf 需安装<a href="https://rubygems.org/gems/asciidoctor-pdf" target="_blank" rel="noopener">asciidoctor-pdf</a><br>.epub3 需安装<a href="https://rubygems.org/gems/asciidoctor-ebub3" target="_blank" rel="noopener">asciidoctor-epub3</a><br>.latex 需安装<a href="https://rubygems.org/gems/asciidoctor-latex" target="_blank" rel="noopener">asciidoctor-latex</a><br>……</p>
</blockquote>
<h2 id="渲染方式"><a href="#渲染方式" class="headerlink" title="渲染方式"></a>渲染方式</h2><blockquote>
<p>asciidoctor -b html sample.adoc<br>asciidoctor -b xhtml sample.adoc<br>asciidoctor -b docbook sample.adoc<br>asciidoctor -b manpage sample.adoc<br>asciidoctor -b pdf sample.adoc<br>asciidoctor -b epub3 sample.adoc<br>asciidoctor -b latex sample.adoc  </p>
</blockquote>
<p>markdown的语法确实要简单些，下面是本博客的markdown原文件。</p>
<p><img src="https://s2.ax1x.com/2020/01/15/lXMUmt.md.png" alt="mk-origin"></p>
<p>如果换成asciidoctor的话该如下图所示。</p>
<p><img src="https://s2.ax1x.com/2020/01/15/lX14tf.md.png" alt="as-origin"></p>
<p>再看渲染出来的样式[第一副为markdown]，明显是asciidoctor渲染得更好，字体和颜色都比较出色。相比之下，markdown可说是一般般。所以，这篇博客怕是最后一篇用markdown写的了，以后应该会换成asciidoc格式吧。</p>
<p><img src="https://s2.ax1x.com/2020/01/15/lX3tC8.md.png" alt="as-render1"><br><img src="https://s2.ax1x.com/2020/01/15/lX3avQ.md.png" alt="as-render2"></p>
]]></content>
      <categories>
        <category>文档</category>
      </categories>
      <tags>
        <tag>Asciidoc</tag>
      </tags>
  </entry>
  <entry>
    <title>国产Linux操作系统UOS</title>
    <url>/title/df585a29/</url>
    <content><![CDATA[<p><img src="https://s2.ax1x.com/2020/01/11/l5KvqA.md.png" alt="uos"></p>
<a id="more"></a>

<p>前段时间国产操作系统UOS(Unity Operating System)释出，最近用虚拟机试了试。总体来说，操作流畅，符合国人习惯。UOS内置中文输入法和各类便捷工具，大大方便用户工作。</p>
<p>UOS是由中兴，电子集团，深之度科技等联合开发的一款国产Linux发行版，使用过Linux很快就能上手。UOS默认是没有root权限的，要登录帐号以开启，这和Ubuntu之类默认带root功能的发行版不同。UOS主体应该就是Deepin系统，软件安装方式则延续Debian系列的apt-get install方式。</p>
<p>UOS发布的时间表(2019)：<br>10月15日：面向BIOS、CPU、整机和ODM厂商，发布龙芯、华为、飞腾、兆芯、海光五个平台的桌面和服务器UOS alpha测试版本。该版本主要功能和用户交互基本完成，存在比较明显的细节缺失和bug，但可以开展面向指定CPU型号的适配验证。<br>11月10日：发布Alpha2版本，增加对申威、海光架构版本的支持。Alpha2版本将面向安全厂商、应用厂商开发，用于进行底层安全检查；软件应用厂商可以开始基本适配测试。<br>11月30日：合并新的功能代码，并修复alpha版本发现的问题。发布beta版本，各软件厂商可以针对该版本进行正式适配。<br>12月15日：发布RC版本，代码冻结，进入正式版本发布前的bug修复阶段。<br>12月31日：如基于RC版本的修复版本通过质量测试，则发布FINAL正式版本。  </p>
<h2 id="界面和功能欣赏"><a href="#界面和功能欣赏" class="headerlink" title="界面和功能欣赏"></a>界面和功能欣赏</h2><p>安装界面有各种语言可选择，包括台湾和港澳的繁体及正体中文。  </p>
<p><img src="https://s2.ax1x.com/2020/01/11/l5MIyQ.md.png" alt="uos_1"></p>
<p>安装时间不长。</p>
<p><img src="https://s2.ax1x.com/2020/01/11/l5MXWT.md.png" alt="uos_2"></p>
<p>开机界面，似乎Deepin默认就是这个，极光挺美的。</p>
<p><img src="https://s2.ax1x.com/2020/01/11/l5Q9m9.md.png" alt="uos_3"></p>
<p>登录界面的图片可设置。</p>
<p><img src="https://s2.ax1x.com/2020/01/11/l5QZlD.md.png" alt="uos_4"></p>
<p>自带的壁纸很好，我这里选用了一张必应壁纸。</p>
<p><img src="https://s2.ax1x.com/2020/01/11/l5QK0A.md.png" alt="uos_5"></p>
<p>界面和Windows很像，符合国人的习惯。  </p>
<p><img src="https://s2.ax1x.com/2020/01/11/l5KvqA.md.png" alt="uos"></p>
<p>点击上图头像右上角扩展符号可以扩展为下面的样式。</p>
<p><img src="https://s2.ax1x.com/2020/01/11/l5J4Nd.md.png" alt="uos_14"></p>
<p>UOS的浏览器似乎是封装某浏览器内核制作的，默认搜索工具是360搜索。   </p>
<p><img src="https://s2.ax1x.com/2020/01/11/l5QtXQ.md.png" alt="uos_6"></p>
<p>自带的图片管理浏览工具。</p>
<p><img src="https://s2.ax1x.com/2020/01/11/l5QBt0.md.png" alt="uos_7"></p>
<p>自带音乐播放器。 </p>
<p><img src="https://s2.ax1x.com/2020/01/11/l5JGpq.md.png" alt="uos_9"></p>
<p>自带视频播放器。 </p>
<p><img src="https://s2.ax1x.com/2020/01/11/l5JtXT.md.png" alt="uos_10"></p>
<p>自带的应用下载市场，软件还不多，后续应该会越来越多。若是嫌界面图标遮住界面，碍眼，可右键设置为自动隐藏。</p>
<p><img src="https://s2.ax1x.com/2020/01/11/l5Qy1U.md.png" alt="uos_8"></p>
<p>终端使用，透明度调节没问题。  </p>
<p><img src="https://s2.ax1x.com/2020/01/11/l5Jd74.md.png" alt="uos_11"></p>
<p>系统监视工具，这个似乎是top命令的GUI版。</p>
<p><img src="https://s2.ax1x.com/2020/01/11/l5JDhR.md.png" alt="uos_12"></p>
<p>自带编辑器，当然也预置了Vim。</p>
<p><img src="https://s2.ax1x.com/2020/01/11/l5JRBD.md.png" alt="uos_13"></p>
<h2 id="评价"><a href="#评价" class="headerlink" title="评价"></a>评价</h2><p>Deepin为核心，各大公司合力开发，支持多种国产CPU，使用流畅，软件简洁好用。总体来说，是值得广大用户使用的一款国产Linux系统，望大家支持。</p>
]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>UOS</tag>
      </tags>
  </entry>
  <entry>
    <title>翻译乃大道</title>
    <url>/title/9557f6d5/</url>
    <content><![CDATA[<p><img src="https://s2.ax1x.com/2020/01/10/lhPP6U.md.png" alt="fydd"></p>
<a id="more"></a>

<p>翻译一行，在学亦在艺，到达高深处，随时都是艺术灵魂在闪耀。然，国中饱学之士何其多，真正的翻译家又何其少。余光中老前辈在书中谈的问题和要点，实在受用，特此记录。</p>
<h2 id="中英文词性对照"><a href="#中英文词性对照" class="headerlink" title="中英文词性对照"></a>中英文词性对照</h2><p>中文词汇中没有单复数，时态，雌雄之分，这使得中文造句很随意，十分灵活。往往一词多义，一词多异。中文是动态的，展现的是一种气势和妙趣。试看《口技》一文：  </p>
<p>　京中有善口技者。<strong>会</strong>宾客大宴，于厅事之东北角，<strong>施</strong>八尺屏障，口技人<strong>坐</strong>屏障中，一桌、一椅、一扇、一抚尺而已。众宾团<strong>坐</strong>。少顷，但<strong>闻</strong>屏障中<strong>抚</strong>尺一下，满坐寂然，无敢<strong>哗</strong>者。<br>　遥<strong>闻</strong>深巷中犬<strong>吠</strong>，便有妇人<strong>惊觉</strong>欠<strong>伸</strong>，<strong>摇</strong>其夫<strong>语</strong>猥亵事。初不甚<strong>应</strong>，妇<strong>摇</strong>之不止，则二人语渐间杂，床又从中戛戛。夫<strong>呓</strong>语。既而儿<strong>醒</strong>，大<strong>啼</strong>，夫令妇儿<strong>乳</strong>，儿<strong>含</strong>乳<strong>啼</strong>，妇<strong>拍</strong>而<strong>呜</strong>之。夫起<strong>溺</strong>，妇亦<strong>抱</strong>儿起<strong>溺</strong>。床上又一大儿<strong>醒</strong>，絮絮不止。当是时，妇手<strong>拍</strong>儿声，口中呜声，儿<strong>含</strong>乳<strong>啼</strong>声，大儿初醒声，床声，夫<strong>叱</strong>大儿声，溺桶中声，一齐奏发，众妙毕备。满堂宾客，无不<strong>伸</strong>颈<strong>侧目</strong>，微<strong>笑</strong>默<strong>叹</strong>，以为妙绝也。<br>　既而夫上床<strong>寝</strong>，妇又<strong>呼</strong>大儿<strong>溺</strong>，毕，都上床寝。小儿亦渐欲睡。夫茀声起，妇<strong>拍</strong>儿亦渐拍渐止。微<strong>闻</strong>有鼠作作索索，盆器倾侧，妇梦中<strong>咳</strong>嗽之声。宾客意少舒，稍稍正<strong>坐</strong>。<br>　忽一人大<strong>呼</strong>“火起”，夫起大<strong>呼</strong>，妇亦起大<strong>呼</strong>。两儿齐<strong>哭</strong>。俄而百千人大<strong>呼</strong>，百千儿<strong>哭</strong>，百千犬<strong>吠</strong>。中间力拉崩倒之声，火爆声，呼呼风声，百千齐作；又夹百千求救声，曳屋许许声，<strong>抢</strong>夺声，<strong>泼</strong>水声。凡所应有，无所不有。虽人有百手，手有百指，不能指其一端；人有百口，口有百舌，不能名其一处也。于是宾客无不变色<strong>离</strong>席，<strong>奋</strong>袖<strong>出</strong>臂，两股战战，几欲先<strong>走</strong>。<br>　忽然<strong>抚</strong>尺一下，群<strong>响</strong>毕绝。撤屏<strong>视</strong>之，一人、一桌、一椅、一扇、一抚尺而已。  </p>
<p>此文，行文简练，用词高超。善字对应英文be good at，会字就是meet with的意思。全文动词，一个接一个：会，施，坐，闻，哗，吠，惊，摇，呓，啼，含，拍，鸣，溺，呜，呼，哭…。换成英文，一个哭字就要考虑是crying呢，还是cried？主动呢还是被动？溺字就是我们说的撒尿，英文中怕是要搞一长串文字，以表示主语去到某地上厕所云云。英文更偏于静态，所以用词十分繁复，一个动词能解决的偏要写一串名词，大词。不说success，偏写end in failure。英文喜欢化简为繁，化动为静，化具体为抽象，化直接为迂回。中文刚好相反，宜动不宜静，直接干脆，具体简单，所以中文一个字可以顶上英文一串字。英文的从句就是静态的，中文善用动词以译之。</p>
<p>中英文间这种动静差异造成诸多问题，尤其在翻译中。 “It is not the strongest of the species that survive, but the one most responsive to change.” 要是照英文原句翻译该是：不是最强壮的生物活着，而是这种生物最适应改变。这种翻译把静态词都译出来了，然而给人的感觉很模糊，不知道要说什么。严复老先生的译文是：“物竞天择，适者生存。”简短有力，两个动词涵盖了英文原文大部分意思。这两种翻译差距是很大的，不是人人都如严复一样会翻译。现在的中译本图书中类似第一种翻译的情况真不少，不知还要害多少人。我自己时时也这么干，这么理解，但我现在知道我错了。</p>
<h2 id="英译汉的毛病"><a href="#英译汉的毛病" class="headerlink" title="英译汉的毛病"></a>英译汉的毛病</h2><p><strong>1.主语和系动词该省不省</strong></p>
<center>Beneath the pines look I for the recluse.</center>
<center>His page replies: "Gathering herbs my master's away.</center>
<center>You'll find him nowhere, as close are the clouds,</center>
<center>Though he must be on the hill, I dare say."</center>
翻译成：
<center>在松树下，我问路</center>
<center>他回答：“师傅采药去了</center>
<center>你找不到他，因为靠近云</center>
<center>尽管我敢说他一定在山里。”</center>

<p>完全直译，不知道在说什么。原文是下面的诗句：  </p>
<center>《寻隐者不遇》</center>
<center>贾岛</center>
<center>松下问童子，言师采药去</center>
<center>只在此山中，云深不知处</center>

<p>直译，太多废话，静态词如他，你之类太多，交代不清。同样，西方的诗文译成中文也最好去掉多余的主语和系词，让诗有诗的意境。翻译最怕的是写了一堆，不知所云，用多余的字表达含混的思想。</p>
<p>看下面这些重复缀余<br>作为一个中国人，我们怎能不爱中国？<br>作为一个丈夫的他是失败的，但是作为一个市长的他却是很成功的。<br><em>身为中国人，怎能不爱国?</em><br><em>作丈夫他虽失败，作市长却很成功。</em>  </p>
<p><strong>人名，地名，书名，影视名，名名不白</strong><br>关于人名，翻译花样太多了。Huxley到底是赫克思里还是赫胥黎？ham，mouth，cester等结尾的地名最易译错。著名人物乱加生卒年，莎士比亚一定后面括弧（Shakespeare）。更有一堆中间名的，还有点号，如美国总统特朗普（Donald J. Trump，1946.6.14-）。名人根本不需要如此累赘。难道孔子也要写成（Confucius，551-479 B.C.）吗？一部动漫School Days不译成校园时光，校园记忆，大好时光之类，偏要译成日在校园，博人眼球。人名翻译找《英语姓名译名手册》，地名翻译找《英语外国地名译名》，这两本书上写得好好的，偏不用，一定自己造一个，显得自己高明。</p>
<p><strong>当当当敲锣打鼓</strong><br>When是个奇特的词汇，有时作为副词，有时又是连接词。When I was young, I used to get up early.当我年轻的时候，我总是起床很早。一见When，马上就当…起来了，这句翻译看起来似乎一点儿也不怪，可真是这样吗？中国人会这么说？还是：小时候，老早我就起床了。</p>
<p><strong>的的得不休</strong><br>形容词，不管后面是-ious，-tive,-able，-ul，-cal中哪种后缀，到了中文都成了…的。译文解决好“的”问题，质量好一倍，这最考验译者的基本功。An old, mad, blind, despised, and dying king中一连五个形容词，所以译文中多半是五个的：一位衰老的，疯狂的，瞎眼的，被人蔑视的，垂死的君王。意思全对，语言全错。中国人绝不会这么形容一个人。An不用翻译，An纯粹为了满足语法要求。又瞎又狂，众所鄙视，行将就木之老王。一个的都不要，之字可替代的字。所以是赤壁之战，安史之乱而非赤壁的战，安史的乱。</p>
<p>白色的鸭(白鸭)<br>深深的水(深水)<br>徐徐的滑行(徐徐滑行)  </p>
<p>这是难度很高的技巧。<br>他不愧为热情型的人。<br><em>这技巧颇难。</em><br><em>他很热情。</em>  </p>
<p>最后说说得字用法。得表示一种程度，动作的程度。唱得很大声，跳得很远，打得很重中得字都是表示前面动词的程度，换成的是错误的用法。唱的大声，唱的指某个事物，大声指声音，这么一用就成了什么东西很大声，这是错的。</p>
<p><strong>直译，死译</strong><br>Family member译成家庭成员，家庭份子，中文里不是有家人一词现成可用吗？They are my family members.是不是要译成“他们是我的家庭成员”？想象你和父母去逛街，服务员问两人是谁？你说这是我的家庭成员，这像话吗？现实中你多半说：这是我的家人，或者说我们是一家人。所以别看是They are my family members，有时就得译成：我们是一家人。如此，才是人话，才是搞翻译。其他的说法太西方化，有多少人不自觉就成了西方人了。</p>
<p><strong>是他是她就是它</strong><br>中文里原没有她这个字，这是近代造的一个字，可能因为女权吧！然而翻译里也搞起来了。This is his or her view point.译为“这是他或她的看法。”这种译法看着累。西方更有意思，由History给你造出个Herstory来。历史怎么能只是他的故事(His story)呢？我们妇女也顶半边天，也有她的故事(Her story)。至于神一定是他，祖国河流是她，而无关重要者一律用上它。关于女权我不多语，只送一句话：男女的不平等，往往很多时候就由女人们自己造成。</p>
<p><strong>如果</strong><br>一见If，马上就如果。假使，倘使，倘若，要是，果真，万一全忘了。If I were you…多译成：如果我是你。不会有什么“假若我是你，倘使是我，要是我，换作我”之类中国话。</p>
<p><strong>和</strong><br>见and就是和。中文里的而，与，及，且，又，还，尚也全忘了。In the park we danced and sang.译文多是：在公园里，我们跳舞和唱歌，而不是：在公园里又唱又跳。You and I are mature adults成了“你和我都是成年人”，而非“你我皆为明事理之人”。实际上east, south, west and north不是东，南，西和北，而是东南西北。man and wife，you and I，back and forth统统去掉和，要说是夫妻，你我，前后。   </p>
<p>一年有春，夏，秋和冬四季<br>王小姐的父亲年纪大了和经常生病<br>同事们都认为他的设计昂贵和不切实际<br><em>一年有春，夏，秋，冬四季</em><br><em>王小姐的父亲年老多病</em><br><em>同事都认为他的设计华而不实</em> </p>
<p><strong>地</strong><br>看见ly结尾，马上就“地”了。慢慢地走，悄悄地说，隆隆地滚下，不知不觉地就看完了，愤然地走开。这个“地”最好少用，ly确实是副词，然而在中文里，这些词本就是副词，不需要加“地”。慢慢走，悄悄说，隆隆滚下，不知不觉就看完了，愤然走开不是更通顺，更能表现中文的韵味和气势吗？“慢慢地”更像slowlyly这样的词，然而没有这个词。也没有什么突然地，茫然地，欣然地，漠然地，而是突然，茫然，欣然，茫然。一个然字就是副词了，地还是留着，学学李子柒用来种菜吧！</p>
<p><strong>所</strong><br>所字也出来呼风唤雨，“我所能想到的，只有这些。”此处所字多余，“我能想到的，只有这些。”不是更好吗？大量文章都成了这个样子，所以你一见所，甚觉自然。其实这种句型是英文句子直译的，然后媒体，报刊，电视都这么用。渐渐你就被西化了。目前的中国，语言大趋势上是西化，而更干脆的传统说法给忘了。到处都是“我所珍爱的是…”，“我所敬佩的是..”，“你所想的正是我所想的”。换成“我珍爱的是…”，“我敬佩的是..”，“你想的正是我想的”这样的句子不是很好吗？中文这种舍简就繁，舍平易而就艰拗的风气实在太盛了，得改改。</p>
<p><strong>句式杂揉</strong><br>很多句子，读者读起来痛苦万分。总是抓不住重心，上气不接下气。“一个矮小的笨笨的看起来有点像已经超过五十多岁而实际年龄不过四十岁的女人。”怎么样，这种句子估计读得多吧？很多书籍，微信文章都是这么写的。这种句子就是扯不清英语从句，分不清主次，结果全给混成一团，让人不好下口。这个句子就是要表示…的女人，她…。中间夹杂太多内容，最后才给你个交待。从句拆开：那看来年过五十岁的矮笨女人，实际不过四十岁。</p>
<p><strong>性度</strong><br>中国人有个性，喜欢性，所以各种性起来了。我的双手已丧失掉了它的灵活性，这件事的重要性是不可小看的，这个仪器丧失了它的灵敏度，准确度不够高，能见度低等等句子。读起来好像没什么问题，甚至官方也这么用。仔细一想又全是问题。我双手不灵，这件事很重要，仪器不灵了，不准确，看不清都是对应的说法，又省字，又好懂。中国的现代化思想，科学概念全来自西方，所以整个汉字文化西化得厉害，国人注意不到这些。然而，国人一读古文顿时精神抖擞，感觉和白话官样文章很不同，道理就在这里。</p>
<p>这本小说可读性颇高。<br>这家伙说话太带侮辱性了。<br>他在该领域很有知名度。<br>王维的作品十分中国化。<br><em>这本小说好看。</em><br><em>这家伙说话太无礼了。</em><br><em>他在该领域很有名气。</em><br><em>王维的作品很有中国味儿。</em>  </p>
<p><strong>主义</strong><br>中国最爱搞主义。什么大男子主义，女权主义，集体主义，个人主义，素食主义，肉食主义，不婚主义，消极主义，爱国主义，奉献主义。主义是一种很高层次的东西，是需要理论准备的。不吃肉你有什么理论支持？算个什么主义？你什么主义也不是。主义一词是英文ism后缀的中译法，比如资本主义(Capitalism)，社会主义(Socialism)，所以其他的东西接上个ism，摇身一变就成了某某主义。不吃肉就是吃素，这是一种生活方式，叫素食生活，肉食生活，不婚人生，消极人生。爱国是不需要主义的，人人都爱国，这是爱国情怀。要是爱国也要来个主义，那古人都不爱国吗？古人讲的是家国天下，家国情怀，没人讲什么主义。我看美国人也不紧密围绕在特总统周围，高举什么什么主义伟大旗帜，人家不是一样收拾全球？少讲主义，多干实事。凡是张嘴就来主义，多是骗子，不是骗别人就是骗自己，连自己都骗，真是够坏的了。</p>
<p><strong>们</strong><br>这个们，也太多了。先生们，女士们，人们，男人们，女人们，士兵们，罪犯们。实际上，们字多余。且中文中也有各位，众位，列位，诸位的说法。   </p>
<p>员工们都努力工作<br>女性们服装花样真多<br>医生们一致认为他已经康复<br><em>员工努力工作</em><br><em>女性服装花样真多</em><br><em>医生一致认为他已康复</em>  </p>
<p>一致一词不正说明是多人才做的决定吗？一个人如何一致认为？Ladies and Gentlemen也不是女士们，先生们而是各位女士，先生。们字太多，大可不要。</p>
<p><strong>之一</strong><br>之一也常见，尤其是one of the most +最高级一类的句子翻译为中文，清一色都是…之一。这样翻译是不算错的，但不够简练。保留之一似乎更显精确，可大家都知道的事，加上之一，反而读起来绕口，未必多精确，更可能像是裹脚布。《哈姆雷特》是莎士比亚的名剧之一。谁都知道莎士比亚牛，想来也知道他写的剧本多，出名的也多。所以，之一二字可以删去。《哈姆雷特》是莎士比亚的名剧。李白是中国最伟大的诗人之一。这句表达的意思没错，但太拗嘴。其实用xx之一不就是要表示他很厉害吗？干脆直接点儿：李白是中国极伟大的诗人。</p>
<p>稽康是竹林七贤之一。<br>李广是汉朝名将之一。<br>《红楼梦》是中国的文学名著之一。<br><em>稽康是竹林七贤。</em><br><em>李广是汉朝名将。</em><br><em>《红楼梦》是中国文学名著。</em>    </p>
<p><strong>被</strong><br>被字句，学时态必学的，所以中文里冒出一堆被。“他被警告，那女人有艾滋”，“她被他深深地喜爱着”，“菜被吃光了”，“那条狗被饿得死去活来的”。全是翻译体，完全不像中文。中文里其实有：给，遭，教，让，为，任，挨等词。“他遭人警告说，那女人有艾滋”，“他深爱着她”，“菜吃光了”，“那条狗饿得死去活来的”。只被字一拿开，句子瞬间就中国化了。什么时候用被呢？为了突出主体的遭遇。“她被人强奸了”，“他让人给砍了”，“我挨打了”。这种用法，凸显了主人公的遭遇，被等字正当其时。这时最好不用“有人强奸了她”，“有人砍了他”，“老师打了我”。这种句子，软绵绵的，明明主人公遭殃，还不干脆说出来，偏拿别人当主语，自己反倒成了配角。记得大学本科某杨姓同学回答老师问题时说“如果我把你干咯…”，虽令人大笑，倒也实在。要是他来句“如果你被我干咯…”就没那效果了。我至今还记得这句，不正说明讲人话给人印象深刻吗？所以，少说被，少些套路，直接点儿，如果我把你干了…..</p>
<p><strong>名词动词混用</strong><br>说话弯弯绕，官样文章最常见。什么“作出突出贡献”，“作了十年奋斗”，“作重大改革”，“作重要批示”。难道不就是“贡献突出”，“奋斗十年”，“大加改革”，“重要批示”吗？现在可能觉得习惯了，纠正的反而奇怪。实际就是翻译体西化中国人太严重，大家都中毒了。作出二字不就是后面所接词汇实际在做的吗？批示不就是做的事吗，哪里还要再来一个作出？中文动态词强，却偏用静态词。社会上有些人成天地高喊文化复兴，然而他自己都是一套西方化的辞令，何谈复兴呢？爱批示的人，要好好反省，实际上你的批示实在不怎么重要，反而多半是屁事。</p>
<p>其他类似的动名词乱用如：<br>成都市的交通有不少问题(存在)。<br>伴侣间难免会有摩擦(的发生)。  </p>
<p>在他的前面，存在着巨大的困难。<br>中美两国的人民间有着深厚的友谊。<br>他在民族复兴的进程中发挥着重要的作用。<br><em>他遭遇巨大困难。</em><br><em>中美两国人民友谊深厚。</em><br><em>他为民族复兴作出重要贡献。</em></p>
<p><strong>有关</strong><br>关于，有关，涉及等等一类词，看起来很有道理，其实是多余的。“你有关于他的消息吗？”，这读起来似乎很通顺。然而实际上人们多说：“你有他消息没？”，而不会一张嘴就关于，涉及。科研论文最喜欢用这类词汇，但多是废话。一件事，倘使不相关，如何会坐下来讨论？这二字，是否画蛇添足？关于，涉及这类词是英文中的about，concerning等带出来的，用多了，一见about，马上就有关。所以，中国就有这么一堆相关部门，有关部门。</p>
<p>你有(关于)老王的消息吗？<br>(关于)老王的为人，我们已讨论过了。<br>(关于)这人究竟有没有罪(的问题)，谁也说不好。 </p>
<p><strong>成功</strong><br>表示完成的虚词或副词都是多余的。爱因斯坦成功地提出相对论。难道提出不说明他成功了吗？爱因斯坦提出相对论，这么译还有人看不懂吗？他已经煮好饭了。煮好就是完成的意思，再加了字就是重复。已经和了共用于一句是有问题的，只是大家说习惯了。他已煮好饭，一样通顺。表示完成状态的词汇在英文中多是ed结尾，所谓的过去时，再加助动词可以表示什么现在完成时，过去完成时，但核心还得看动词本身。完成就是完成，不要再添东西。</p>
<p><strong>乱用成语</strong><br>成语是中华民族先民智慧的积淀，是传给后人的宝藏。然而，各种不正规的用法见诸于媒体，报端。一个普通女性死了，马上配上“香消玉陨”，女人做贼，也感叹“卿本佳人，奈何做贼”，对应现在就是“明明可以靠颜值吃法，却偏偏要做贼。”这种言语使用，把人的注意力转移到美丑上，是非则全然忘了。做贼就是不对，该批判，该反思。然而，大众却关心起其长相来了，这时罪名不重要了。洗个澡，也要说是什么出水芙蓉。这类太雅的词配上极俗的事丝毫没有表现出什么高雅，反而显得很庸俗。最后就像孔乙己般，全是知乎者也之类的词语，叫人半懂不懂。</p>
<p><strong>简单词，复杂意</strong><br>有的句子单词很简单，但连起来就不知如何译。比如To be or not to be, That’s a question.这里的be不表“是”而表“存在”。所以，句子不是“是还是不是，是个问题”而是“是生是死，是个值得考虑的问题”。这句很著名，是《哈姆雷特》中名句。Don’t cough more than you can help.看起来各个单词都认识，一翻译又出问题。难道是“不要咳得多于你能咳的”吗？可没人会这么说，实际是“能不咳，就不咳”。I say no and that’s that.糟了，这更变态，都是什么呀？怎么一堆that，还有and？有人一看and，心想和字少不了，翻译就来了：“我说不行和那个就是那个”。这是人话吗？that’s that 表示前面I say no这件事，是再次强调。所以译文应该是：“说不行，就不行”，主语可不译，句子中含有强烈的语气，主语是很明显的。这么译，不正是中国话了吗？</p>
<p>作中国人，说中国话，相当多的中国人言谈举止已经西化得严重了，除了他的躯体，剩下的全奉献给了西方。在大谈民族复兴的时候，搞翻译的，要好好学翻译，好好说话。</p>
]]></content>
      <categories>
        <category>Culture</category>
      </categories>
      <tags>
        <tag>Translation</tag>
      </tags>
  </entry>
  <entry>
    <title>神翻译</title>
    <url>/title/eb015e2b/</url>
    <content><![CDATA[<p><img src="https://s2.ax1x.com/2020/01/10/lfqrTO.md.png" alt="error1"></p>
<a id="more"></a>

<p>中国神翻译时时见诸新闻，特收集一些有趣的翻译。  </p>
<h2 id="字句翻译"><a href="#字句翻译" class="headerlink" title="字句翻译"></a>字句翻译</h2><p>1.God Use VPN. 佛跳墙。<br>2.Old dry mother. 老干妈。<br>3.We found love. 潍坊的爱。<br>4.Jack, slow fuck. 捷克斯洛伐克。<br>5.Seven up eight down.七上八下。<br>6.A time sex thing. 一次性用品。<br>7.You can kill me, but you can’t fuck me. 士可杀，不可辱。<br>8.You di da di da me, I hua la hua you.滴水之恩，当以涌泉相报。  </p>
<h2 id="人名翻译"><a href="#人名翻译" class="headerlink" title="人名翻译"></a>人名翻译</h2><table>
<thead>
<tr>
<th align="center">译名</th>
<th align="center">人物</th>
<th align="center">译名</th>
<th align="center">人物</th>
</tr>
</thead>
<tbody><tr>
<td align="center">Wayne</td>
<td align="center">魏延</td>
<td align="center">Summary</td>
<td align="center">司马懿</td>
</tr>
<tr>
<td align="center">John</td>
<td align="center">张颌</td>
<td align="center">Water</td>
<td align="center">华佗</td>
</tr>
<tr>
<td align="center">Susan</td>
<td align="center">孙尚香</td>
<td align="center">Major</td>
<td align="center">马忠</td>
</tr>
<tr>
<td align="center">Marshall</td>
<td align="center">马超</td>
<td align="center">Joey</td>
<td align="center">周瑜</td>
</tr>
<tr>
<td align="center">David</td>
<td align="center">典韦</td>
<td align="center">Rambo</td>
<td align="center">吕布</td>
</tr>
<tr>
<td align="center">Pond</td>
<td align="center">庞德</td>
<td align="center">Marcel</td>
<td align="center">马谡</td>
</tr>
<tr>
<td align="center">Josh</td>
<td align="center">贾诩</td>
<td align="center">Dunn</td>
<td align="center">邓艾</td>
</tr>
<tr>
<td align="center">Russell</td>
<td align="center">鲁肃</td>
<td align="center">Yahoo</td>
<td align="center">羊祜</td>
</tr>
<tr>
<td align="center">Charlie</td>
<td align="center">张辽</td>
<td align="center">Chauncey</td>
<td align="center">陈式</td>
</tr>
<tr>
<td align="center">Cunning</td>
<td align="center">甘宁</td>
<td align="center">Faye</td>
<td align="center">费祎</td>
</tr>
<tr>
<td align="center">Pavon</td>
<td align="center">潘风</td>
<td align="center">Hansen</td>
<td align="center">华雄</td>
</tr>
<tr>
<td align="center">Raymond</td>
<td align="center">吕蒙</td>
<td align="center">Luke</td>
<td align="center">陆抗</td>
</tr>
<tr>
<td align="center">Rachel</td>
<td align="center">文丑</td>
<td align="center">Joy</td>
<td align="center">大乔</td>
</tr>
<tr>
<td align="center">Gay</td>
<td align="center">关羽</td>
<td align="center">Joy.II</td>
<td align="center">小乔</td>
</tr>
<tr>
<td align="center">Jeff</td>
<td align="center">张飞</td>
<td align="center">Sheldon</td>
<td align="center">夏侯惇</td>
</tr>
<tr>
<td align="center">Chocolate</td>
<td align="center">诸葛亮</td>
<td align="center"></td>
<td align="center"></td>
</tr>
</tbody></table>
<p>不定期更新…..</p>
]]></content>
      <categories>
        <category>Culture</category>
      </categories>
      <tags>
        <tag>Translation</tag>
      </tags>
  </entry>
  <entry>
    <title>桃花源记 【晋】陶渊明・九译</title>
    <url>/title/27ef22b9/</url>
    <content><![CDATA[<p><img src="https://s2.ax1x.com/2020/01/09/lRbTJA.md.png" alt="thyj">            </p>
<a id="more"></a>

<p>　 最近看余光中书籍，书中提到各家(大方之家)对《桃花源记》翻译错漏百出，遂收集九位方家译文以供赏析。九位大家，有中国人，也有外国人，各家翻译风格不同，给人的感觉也殊为各异，细细品读，发觉文字间各有乾坤。有翻译对原文字句断地非常好，一一对应，也有随性发挥者。除此之外，时态翻译也是一个重点。中国人读桃花源记会觉得是什么时候的事呢？是过去抑或现在？仔细斟酌，就可知有的译文时态不合适。桃花源记是我最喜欢的一篇古文，时光荏苒，白驹过隙，还记得此中词句，不时吟咏，确也生出一番别样的感受。  </p>
<h2 id="译本一-许景城"><a href="#译本一-许景城" class="headerlink" title="译本一 [许景城]"></a>译本一 [许景城]</h2><p><strong><center>An Idyllic Land of Peach-Blossom Spring<br>Tao Yuanming from Jin Dynasty</center></strong></p>
<p>　 晋太元中，武陵人捕鱼为业，缘溪行，忘路之远近。忽逢桃花林，夹岸数百步，中无杂树，芳草鲜美，落英缤纷；渔人甚异之。复前行，欲穷其林。<br>　 Amid the Taiyuan era of Eastern Jin Dynasty, there was a fisherman, a native of Wuling. He rowed his boat along a brook, not mindful of how far he had toured, when suddenly he came across a blossoming peach grove flanking the banks continuously for hundreds of footsteps. The peach grove with no other sundry trees permeated with sweet fragrance, fresh green grass, and falling and fallen blossoms. Amazed by what he saw, the fisherman rowed further, with a desire to explore how far it extended.  </p>
<p>　 林尽水源，便得一山。山有小口，仿佛若有光，便舍船，从口入。初极狭，才通人；复行数十步，豁然开朗。土地平旷，屋舍俨然。有良田、美池、桑、竹之属，阡陌交通，鸡犬相闻。其中往来种作，男女衣着，悉如外人；黄发垂髫，并佁然自乐。<br>　 When the grove faded away at the end of the brook, he found himself in front of a mountain with a small opening through which a light loomed. He thus left his boat and walked into the opening which at first was found to be so narrow that only one could pass through it. After walking forward for a few footsteps, he discovered that it led to an open air where flat and wide was the land with well-arranged houses, rich fields, beautiful ponds, mulberries, bamboos and the like. He saw the paths intersecting the fields in all directions, and heard cocks crowing and dogs barking. Here, men and women passing back and forth or working in the fields, were dressed like people outside. The grizzled-haired elders and the children with uncoiled hairs looked happy and self-contentede.  </p>
<p>　 见渔人，乃大惊，问所从来；具答之。便要还家，设酒、杀鸡、作食。村中闻有此人，咸来问讯。自云：先世避秦时乱，率妻子邑人来此绝境，不复出焉；遂与外人间隔。问今是何世？乃不知有汉，无论魏、晋！此人一一为具言所闻，皆叹惋。余人各复延至其家，皆出酒食，停数日，辞去。此中人语云：”不足为外人道。”<br>　 People were so astonished to see this outsider, and asked him where he came from. After the fisherman answered all the questions, he was invited to their homes where they served wine and killed chicken to offer a feast. When the news of the fisherman’ visit spread out to other villagers, they all came to greet him. Then, they told the outsider that their ancestors, fleeing from disorders and chaos during the Qin Period, had come with their wives and children to this idyllic land, and had never gone out since, leaving themselves secluded from outsiders. When they asked what dynasty it was at present, they had no idea there had been dynasties such as Han, Wei and Jin. The outsider related all he knew in detail, event by event, and they heaved frequent sighs and sorrows. The villages by turns invited him to their houses where he was entertained with wine and food. He stayed for a few days. When he decided to leave, people of this place reminded him, “It’s better not to reveal this place to others.”  </p>
<p>　 既出，得其船，便扶向路，处处志之。及郡下，诣太守，说如此。太守即遣人随其往，寻向所志，遂迷不复得路。<br>　 After he came out and got his boat, he retraced and marked the route via which he had come. When he reached the town, he visited the prefect, and narrated the whole story to him who immediately sent his pawns to go with the fisherman to look for that place. They followed the marks but got lost and never found the way.  </p>
<p>　 南阳刘子骥，高尚士也，闻之，欣然规往，未果，寻病终。后遂无问津者。<br>　 At this news, Liu Ziji from Nanyang, a gentleman, gleefully decided to seek for that place, but he ailed and died before he could fulfill his plan. From then on, no one else ever quested for that land.  </p>
<p>Notes:<br>　　[1] Tao Yuanming (365- 427AD), from Eastern Jin Dynasty, was a famous Chinese pastoral poet.<br>　　[2] This prose was written by Tao Yuanming in the second year (421 AD) during the era of Yongchu in Eastern Jin Dynasty(永初二年). The poet described an idyllic place like Shangri-La in pursuit of a peaceful and self-sufficient society without classes, and exploitation, which was in sharp contrast with his contemporary society.<br>　　[3] The Taiyuan Era started from 376AD to 396 AD.<br>　　[4] Qin Period extended from 221BC to 208BC.<br>　　[5] Han Dynasty reigned from 206 BC to 220AD.　<br>　　[6] Wei Dynasty reigned from 220AD to 265AD.<br>　　改译于英国班戈梅奈观海楼 2016-2-28   </p>
<h2 id="译本二-A-R-Davis"><a href="#译本二-A-R-Davis" class="headerlink" title="译本二 [A. R. Davis]"></a>译本二 [A. R. Davis]</h2><p><strong><center>Peach-Blossom Source</center></strong></p>
<p>　 晋太元中，武陵人捕鱼为业，缘溪行，忘路之远近。忽逢桃花林，夹岸数百步，中无杂树，芳草鲜美，落英缤纷；渔人甚异之。复前行，欲穷其林。<br>　 During the Taiyuan period (376–396) of Jin a man of Wuling, who made his living as a fisherman, ascended a stream, forgetful of the distance he traveled. Suddenly he came upon a grove of peach trees in blossom. They lined the banks for several hundred paces: among them were no other kinds of tree. The fragrant herbage was fresh and beautiful; fallen blossom lay in profusion. The fisherman, in extreme wonder, again went forward, wishing to go to the end of the grove.</p>
<p>　 林尽水源，便得一山。山有小口，仿佛若有光，便舍船，从口入。初极狭，才通人；复行数十步，豁然开朗。土地平旷，屋舍俨然。有良田、美池、桑、竹之属，阡陌交通，鸡犬相闻。其中往来种作，男女衣着，悉如外人；黄发垂髫，并佁然自乐。<br>　 The grove ended at the stream’s source, and there he found a hill. In the hill was a small opening from which a light seemed to come. So he left his boat and went in through the opening. At first it was very narrow, barely allowing a man to pass, but as he went on for some tens of paces, it came out into the open air, upon lands level and wide with houses of a stately appearance. There fine fields and beautiful pools, clumps of mulberries and bamboos. The field dykes intersected; cocks crowed and dogs barked to each other. The clothes of the men and women who came and went, planted and worked among them were entirely like those of people outside. The white-haired and the children with their hair in tufts happily enjoyed themselves.</p>
<p>　 见渔人，乃大惊，问所从来；具答之。便要还家，设酒、杀鸡、作食。村中闻有此人，咸来问讯。自云：先世避秦时乱，率妻子邑人来此绝境，不复出焉；遂与外人间隔。问今是何世？乃不知有汉，无论魏、晋！此人一一为具言所闻，皆叹惋。余人各复延至其家，皆出酒食，停数日，辞去。此中人语云：”不足为外人道。”<br>　 When they saw the fisherman, they were greatly surprised and asked from what place he came. When he had answered all their questions, they invited him to come back to their home, where they set out wine, killed a chicken and made a meal. When the villagers heard of this man, they all came to pay their respects. They told him that their ancestors, fleeing from the troubles during the Qin period (221BC–208BC), had brought their wives and children and neighbours to this inaccessible spot and had not gone out again. Thus they became cut off from people outside. They asked what dynasty it was now: they did not know that there had been Han (206 BC–220AD), nor of courts Wei (220–265AD) or Jin. The fisherman told them all he knew, item by item, and at everything they sighed with grief. The others in turn also invited him to their homes, and all set out wine and food. He stayed for several days and then took leave of them. The people of this place said to him: “You should not speak of this to those outside.”</p>
<p>　 既出，得其船，便扶向路，处处志之。及郡下，诣太守，说如此。太守即遣人随其往，寻向所志，遂迷不复得路。<br>　 When he had gone out, he found his boat and followed the route by which he had come: everywhere he noted the way. When he reached the commandery, he called on the prefect and told him this story. The prefect immediately sent a man to go with him and seek out the places he had previously noted, but they went astray and could not find the way again.</p>
<p>　 南阳刘子骥，高尚士也，闻之，欣然规往，未果，寻病终。后遂无问津者。<br>　 Liu Ziji of Nanyang, who was a scholar of lofty ideals, heard of it and joyfully planned to go. Soon after, before he had carried out his plan, he fell ill and died. Afterwards there was no one who “sought the ford”.</p>
<h2 id="译本三-Rick-Davis-amp-David-Steelman"><a href="#译本三-Rick-Davis-amp-David-Steelman" class="headerlink" title="译本三 [Rick Davis &amp; David Steelman]"></a>译本三 [Rick Davis &amp; David Steelman]</h2><p><strong><center>Peach Blossom Shangri-la<br>        Tao YuanMing[1]</center></strong></p>
<p>　 晋太元中，武陵人捕鱼为业，缘溪行，忘路之远近。忽逢桃花林，夹岸数百步，中无杂树，芳草鲜美，落英缤纷；渔人甚异之。复前行，欲穷其林。<br>　 During the Taiyuan era [2] of the Jin Dynasty [3] there was a man of Wuling [4] who made his living as a fisherman. Once while following a stream he forgot how far he had gone. He suddenly came to a grove of blossoming peach trees. It lined both banks for several hundred paces and included not a single other kind of tree. Petals of the dazzling and fragrant blossoms were falling everywhere in profusion. Thinking this place highly unusual, the fisherman advanced once again in wanting to see how far it went.</p>
<p>　 林尽水源，便得一山。山有小口，仿佛若有光，便舍船，从口入。初极狭，才通人；复行数十步，豁然开朗。土地平旷，屋舍俨然。有良田、美池、桑、竹之属，阡陌交通，鸡犬相闻。其中往来种作，男女衣着，悉如外人；黄发垂髫，并佁然自乐。<br>　 The peach trees stopped at the stream’s source, where the fisherman came to a mountain with a small opening through which it seemed he could see light. Leaving his boat, he entered the opening. At first it was so narrow that he could barely pass, but after advancing a short distance it suddenly opened up to reveal a broad, flat area with imposing houses, good fields, beautiful ponds, mulberry trees, bamboo, and the like. The fisherman saw paths extending among the fields in all directions, and could hear the sounds of chickens and dogs. Men and women working in the fields all wore clothing that looked like that of foreign lands. The elderly and children all seemed to be happy and enjoying themselves.</p>
<p>　 见渔人，乃大惊，问所从来；具答之。便要还家，设酒、杀鸡、作食。村中闻有此人，咸来问讯。自云：先世避秦时乱，率妻子邑人来此绝境，不复出焉；遂与外人间隔。问今是何世？乃不知有汉，无论魏、晋！此人一一为具言所闻，皆叹惋。余人各复延至其家，皆出酒食，停数日，辞去。此中人语云：”不足为外人道。”<br>　 The people were amazed to see the fisherman, and they asked him from where he had come. He told them in detail, then the people invited him to their home, set out wine, butchered a chicken [5], and prepared a meal. Other villagers heard about the fisherman, and they all came to ask him questions. Then the villagers told him, “To avoid the chaos of war during the Qin Dynasty [6], our ancestors brought their families and villagers to this isolated place and never left it, so we’ve had no contact with the outside world.” They asked the fisherman what the present reign was. They were not even aware of the Han Dynasty [7], let alone the Wei [8] and Jin. The fisherman told them everything he knew in great detail, and the villagers were amazed and heaved sighs. Then other villagers also invited the fisherman to their homes, where they gave him food and drink. After several days there, the fisherman bid farewell, at which time some villagers told him, “It’s not worth telling people on the outside about us.” [9]</p>
<p>　 既出，得其船，便扶向路，处处志之。及郡下，诣太守，说如此。太守即遣人随其往，寻向所志，遂迷不复得路。<br>　 The fisherman exited through the opening, found his boat, and retraced his route while leaving markers to find this place again. Upon his arrival at the prefecture town he went to the prefect and told him what had happened. The prefect immediately sent a person to follow the fisherman and look for the trail markers, but they got lost and never found the way.</p>
<p>　 南阳刘子骥，高尚士也，闻之，欣然规往，未果，寻病终。后遂无问津者。<br>　 Liu Ziji [10] of Nanyang [11] was a person of noble character. When he heard this story he was happy and planned to visit the Shangri-la, but he died of illness before he could accomplish it. After that no one else ever looked for the place.</p>
<p>Translator’s Notes:<br>　　[1] Chinese nature poet, c. 365-427. This prose story is one of the poet’s most well-known works.<br>　　[2] 376-396.<br>　　[3] 265-420 (actually two sequential dynasties, the “Western” and the “Eastern”).<br>　　[4] A place in present-day Hunan Province.<br>　　[5] “…set out wine, butchered a chicken”: A stock phrase meaning to entertain a guest lavishly.<br>　　[6] 221-206 B.C.<br>　　[7] 206 B.C. to A.D. 220.<br>　　[8] A.D. 220-265.<br>　　[9] The villagers would just as soon keep their existence secret.<br>　　[10] A retired scholar of the Jin Dynasty.<br>　　[11] A place in present-day Henan Province.<br>　　This translation is based on the SiKuQuanShu text with editorial emendations and punctuation by the translators. It was done by Rick Davis (Japan) with help from David Steelman (Taiwan).</p>
<h2 id="译本四-James-Robert-Hightower"><a href="#译本四-James-Robert-Hightower" class="headerlink" title="译本四 [James Robert Hightower]"></a>译本四 [James Robert Hightower]</h2><p><strong><center>The Peach Blossom Spring</center></strong></p>
<p>　 晋太元中，武陵人捕鱼为业，缘溪行，忘路之远近。忽逢桃花林，夹岸数百步，中无杂树，芳草鲜美，落英缤纷；渔人甚异之。复前行，欲穷其林。<br>　 During the Tai-yuan period of the China dynasty a fisherman of Wu-ling once rowed upstream, unmindful of the distance he had gone, when he suddenly came to a grove of peach trees in bloom. For several hundred paces on both banks of the stream there was no other kind of tree. The wild flowers growing under them were fresh and lovely, and fallen petals covered the ground—it made a great impression on the fisher-man. He went on for away with the idea of finding out how far the grove extended.</p>
<p>　 林尽水源，便得一山。山有小口，仿佛若有光，便舍船，从口入。初极狭，才通人；复行数十步，豁然开朗。土地平旷，屋舍俨然。有良田、美池、桑、竹之属，阡陌交通，鸡犬相闻。其中往来种作，男女衣着，悉如外人；黄发垂髫，并佁然自乐。<br>　 It came to an end at the foot of a mountain whence issued the spring that supplied the streams. There was a small opening in the mountain and it seemed as though light was coming through it. The fisherman left his boat and entered the cave, which at first was extremely narrow, barely admitting his body, after a few dozen steps it suddenly opened out onto a broad and level plain where well-built houses were surrounded by rich fields and pretty ponds. Mulberry, bamboo and other trees and plants grew there, and criss-cross paths skirted the fields. The sounds of cocks crowing and dogs barking could be heard from one courtyard to the next. Men and women were coming and going about their work in the fields. The clothes they wore were like those of ordinary people. Old men and boys were carefree and happy.</p>
<p>　 见渔人，乃大惊，问所从来；具答之。便要还家，设酒、杀鸡、作食。村中闻有此人，咸来问讯。自云：先世避秦时乱，率妻子邑人来此绝境，不复出焉；遂与外人间隔。问今是何世？乃不知有汉，无论魏、晋！此人一一为具言所闻，皆叹惋。余人各复延至其家，皆出酒食，停数日，辞去。此中人语云：”不足为外人道。”<br>　 When they caught sight of the fisherman, they asked in surprise how he had got there. The fisherman told the whole story, and was invited to go to their house, Where he was served wine while they killed a chicken for a feast. When the other villagers heard about the fisherman’s arrival, they all came to pay him a visit. They told him that their ancestors had fled the disorders of Ch’in times and, having taken refugee here with wives and children and neighbours, had never ventured out again consequently they had lost all contact with the out-side world. They asked what the present ruling dynasty was, for they had never heard of the Han, Let alone the Wei and the Jin. They sighed unhappily as the fisherman enumerated the dynasties one by one and recounted the vicissitudes of each.</p>
<p>　 既出，得其船，便扶向路，处处志之。及郡下，诣太守，说如此。太守即遣人随其往，寻向所志，遂迷不复得路。<br>　 The visitors all asked him to come to their houses in turn, and at every house he had wine and food. He stayed several days. As he was about to go away, the people said, “There’s’ no need to mention our existence to outsiders.” After the fisherman had gone out and recovered his boat, he carefully marked the route. On reaching the city, he reported what he had found to the magistrate, who at once sent a man to follow him back to the place. They proceed according to the marks he had made, but went astray and were unable to find the cave again.</p>
<p>　 南阳刘子骥，高尚士也，闻之，欣然规往，未果，寻病终。后遂无问津者。<br>　 A high-minded gentleman of Nan-yang named LiuTzu-chi heard the story and happily made preparations to go there, but before he could leave he fell sick and died. Since then there has been no one interested in trying to find such a place.</p>
<h2 id="译本五-Lin-Yutang-林语堂"><a href="#译本五-Lin-Yutang-林语堂" class="headerlink" title="译本五 [Lin Yutang 林语堂]"></a>译本五 [Lin Yutang 林语堂]</h2><p><strong><center>The Peach Colony</center></strong></p>
<p>　 晋太元中，武陵人捕鱼为业，缘溪行，忘路之远近。忽逢桃花林，夹岸数百步，中无杂树，芳草鲜美，落英缤纷；渔人甚异之。复前行，欲穷其林。林尽水源，便得一山。山有小口，仿佛若有光，便舍船，从口入。初极狭，才通人；复行数十步，豁然开朗。土地平旷，屋舍俨然。有良田美池，桑竹之属，阡陌交通，鸡犬相闻。其中往来种作，男女衣着，悉如外人；黄发垂髫，并怡然自乐。<br>　 During the reign of Taiyuan of Chin, there was a fisherman of Wuling. One day he was walking along a bank. After having gone a certain distance, he suddenly came upon a peach grove which extended along the bank for about a hundred yards. He noticed with surprise that the grove had a magic effect, so singularly free from the usual mingling of brushwood, while the beautifully grassy ground was covered with its rose petals. He went further to explore, and when he came to the end of the grove, he saw a spring which came from a cave in the hill, Having noticed that there seemed to be a weak light in the cave, he tied up his boat and decided to go in and explore. At first the opening was very narrow, barely wide enough for one person to go in. After a dozen steps, it opened into a flood of light. He saw before his eyes a wide, level valley, with houses and fields and farms. There were bamboos and mulberries; farmers were working and dogs and chickens were running about. The dresses of the men and women were like those of the outside world, and the old men and children appeared very happy and contented. </p>
<p>　 见渔人，乃大惊，问所从来；具答之。便要还家，设酒、杀鸡、作食。村中闻有此人，咸来问讯。自云：先世避秦时乱，率妻子邑人来此绝境，不复出焉；遂与外人间隔。问今是何世？乃不知有汉，无论魏、晋！此人一一为具言所闻，皆叹惋。余人各复延至其家，皆出酒食，停数日，辞去。此中人语云：“不足为外人道。”<br>　 They were greatly astonished to see the fisherman and asked him where he had come from. The fisherman told them and was invited to their homes, where wine was served and chicken was killed for dinner to entertain him. The villagers hearing of his coming all came to see him and to talk. They said that their ancestors had come here as refugees to escape from the tyranny of Tsin Shih-huang (builder of Great Wall) some six hundred years ago, and they had never left it. They were thus completely cut off from the world, and asked what was the ruling dynasty now. They had not even heard of the Han Dynasty (two centuries before to two centuries after Christ), not to speak of the Wei (third century A.D.) and the Chin (third and fourth centuries). The fisherman told them, which they heard with great amazement. Many of the other villagers then began to invite him to their homes by turn and feed him dinner and wine.After a few days, he took leave of them and left. The villagers begged him not to tell the people outside about their colony.</p>
<p>　 既出，得其船，便扶向路，处处志之。及郡下，诣太守，说如此。太守即遣人随其往，寻向所志，遂迷不复得路。南阳刘子骥，高尚士也，闻之，欣然规往，未果，寻病终。后遂无问津者。<br>　 The man found his boat and came back, marking with signs the route he had followed. He went to the magistrate’s office and told the magistrate about it. The latter sent someone to go with him and find the place. They looked for the signs but got lost and could never find it again. Liu Tsechi of Nanyang was a great idealist. He heard of this story, and planned to go and find it, but was taken ill and died before he could fulfill his wish. Since then, no one has gone in search of this place.</p>
<h2 id="译本六-Roland-C-Fang-方重"><a href="#译本六-Roland-C-Fang-方重" class="headerlink" title="译本六[Roland C. Fang 方重]"></a>译本六[Roland C. Fang 方重]</h2><p><strong><center>Peach-Blossom Springs</center></strong></p>
<p>　 晋太元中，武陵人捕鱼为业，缘溪行，忘路之远近。忽逢桃花林，夹岸数百步，中无杂树，芳草鲜美，落英缤纷；渔人甚异之。复前行，欲穷其林。林尽水源，便得一山。山有小口，仿佛若有光，便舍船，从口入。初极狭，才通人；复行数十步，豁然开朗。土地平旷，屋舍俨然。有良田美池，桑竹之属，阡陌交通，鸡犬相闻。其中往来种作，男女衣着，悉如外人；黄发垂髫，并怡然自乐。<br>　 During the reign of Emperor Shao-Wu of Eastern Tsin there was once a native of Wuling, who lived on fishing. One day he rowed up a stream, and soon forgot how far he had gone. All of a sudden he came upon a peach grove. For hundreds of paces along both banks of the stream, the peach-trees were in full bloom. No other trees were to be seen in the whole grove. The soft grass looked fresh and beautiful. Here and there falling blossoms were dancing gracefully in a thousand hues. The fisherman was beside himself with amazement. He went on further in order to reach the uppermost limits of the grove. As the peaches came to an end, the headsprings of the stream was found to issue from the side of a mountain. A narrow cave-like opening showed him some light that seemed to emerge from within. Leaving his boat he ventured in. At first it was just wide enough to admit one person. But after a few dozen paces an extensive view suddenly appeared before him. He saw the level plain stretch out far and wide, and the houses and homesteads all neatly arranged. Rich rice-fields, picturesque ponds, and mulberry and bamboo groves were everywhere. The foot-paths crossed and re-crossed one another. As the cocks crowed, the dogs barked in return. All the inhabitants busied themselves with farm work in the same manner as the people outside, so did their men and women attire themselves. The yellow-tressed old folk and the youngsters with flowing hair were all living in self-contentment. </p>
<p>　 见渔人，乃大惊，问所从来；具答之。便要还家，设酒、杀鸡、作食。村中闻有此人，咸来问讯。自云：先世避秦时乱，率妻子邑人来此绝境，不复出焉；遂与外人间隔。问今是何世？乃不知有汉，无论魏、晋！此人一一为具言所闻，皆叹惋。余人各复延至其家，皆出酒食，停数日，辞去。此中人语云：“不足为外人道。”<br>　 Seeing the fisherman they were so eager to find out from whence he came. He made his answers accordingly and was invited to their homes to be entertained with chicken and wine. Others in the village, on hearing of the arrival of a stranger, also flocked round to make inquiries. Of their own accord they told him of the forefathers who had, during the troublous times of the Chins, sought refuge in this place of absolute seclusion together with their families and neighbours. After having settled down here they never thought of going out again. They had been so cut off from the rest of the world that a knowledge of the times would be a revelation to them. They had not heard of the Han Dynasty, not to say the Wei and the Tsin. The fisherman informed them all about these changes, and they could not help being deeply affected. Then more of them asked him to dine by turns. It was not until several days later that he begged to take leave. He was bidden, however, to keep to himself all the things talked about among them, for, they said, such matters would not be worth imparting to the outside world. </p>
<p>　 既出，得其船，便扶向路，处处志之。及郡下，诣太守，说如此。太守即遣人随其往，寻向所志，遂迷不复得路。南阳刘子骥，高尚士也，闻之，欣然规往，未果，寻病终。后遂无问津者。<br>　 Our fisherman came out, found his boat again, and took care to leave marks all along his way home. As soon as he was back to the city he told his adventure to the magistrate, who sent men to go with him. They tried to trace the marks he had left, but failed, and lost their way thither. A good scholar of Nanyang, on learning of it, was anxious to re-discover the place. Nor did he succeed, and died soon of illness. Ever since then, few have attempted the passage again</p>
<h2 id="译本七-罗经国"><a href="#译本七-罗经国" class="headerlink" title="译本七[罗经国]"></a>译本七[罗经国]</h2><p><strong><center>A Tale of the Fountain of the Peach Blossom Spring</center></strong></p>
<p>　 晋太元中，武陵人捕鱼为业，缘溪行，忘路之远近。忽逢桃花林，夹岸数百步，中无杂树，芳草鲜美，落英缤纷；渔人甚异之。复前行，欲穷其林。<br>　 In the year of Taiyuan (2) of the Jin Dynasty, there lived a man in Wuling Prefecture (3) who earned his living by fishing. One day, he rowed his boat along a stream, unaware of how far he had gone when all of a sudden, he found himself in the midst of a wood full of peach blossoms. The wood extended several hundred footsteps along both banks of the stream. There were no trees of other kinds. The fragrant grass was fresh and beautiful and peach petals fell in riotous profusion. The fisherman was so curious that he rowed on, in hopes of discovering where the trees ended.</p>
<p>　 林尽水源，便得一山。山有小口，仿佛若有光，便舍船，从口入。初极狭，才通人；复行数十步，豁然开朗。土地平旷，屋舍俨然。有良田、美池、桑、竹之属，阡陌交通，鸡犬相闻。其中往来种作，男女衣着，悉如外人；黄发垂髫，并佁然自乐。<br>　 At the end of the wood was the fountainhead of the stream. The fisherman beheld a hill, with a small opening from which issued a glimmer of light. He stepped ashore to explore the crevice. His first steps took him into a passage that accommodated only the width of one person. After he progressed about scores of paces, it suddenly widened into an open field. The land was flat and spacious. There were houses arranged in good order with fertile fields, beautiful ponds, bamboo groves, mulberry trees and paths crisscrossing the fields in all directions. The crowing of cocks and the barking of dogs were within hearing of each other. In the fields the villagers were busy with farm work. Men and women were dressed like people outside. They all, old and young, appeared happy.</p>
<p>　 见渔人，乃大惊，问所从来；具答之。便要还家，设酒、杀鸡、作食。村中闻有此人，咸来问讯。自云：先世避秦时乱，率妻子邑人来此绝境，不复出焉；遂与外人间隔。问今是何世？乃不知有汉，无论魏、晋！此人一一为具言所闻，皆叹惋。余人各复延至其家，皆出酒食，停数日，辞去。此中人语云：”不足为外人道。”<br>　 They were surprised at seeing the fisherman, who, being asked where he came from, answered their every question. Then they invited him to visit their homes, killed chickens, and served wine to entertain him. As the words of his arrival spread, the entire village turned out to greet him. They told him that their ancestors had come to this isolated haven, bringing their families and the village people, to escape from the turmoil during the Qin Dynasty and that from then onwards, they had been cut off from the outside world. They were curious to know what dynasty it was now. They did not know the Han Dynasty, not to mention the Wei and the Jin dynasties. The fisherman told them all the things they wanted to know. They sighed. The villagers offered him one hospitality after another. They entertained him with wine and delicious food. After several days, the fisherman took his leave. The village people entreated him not to let others know of their existence.</p>
<p>　 既出，得其船，便扶向路，处处志之。及郡下，诣太守，说如此。太守即遣人随其往，寻向所志，遂迷不复得路。<br>　 Once out, the fisherman found his boat and rowed homeward, leaving marks all the way. When he came back to the prefecture, he reported his adventure to the prefect, who immediately sent people to look for the place, with the fisherman as a guide. However, the marks he had left could no longer be found. They got lost and could not find the way.</p>
<p>　 南阳刘子骥，高尚士也，闻之，欣然规往，未果，寻病终。后遂无问津者。<br>　 Liu Ziji of Nanyang Prefecture (4), a learned scholar of high repute, was excited when hearing the fisherman’s story. He devised a plan to find the village, but it was not carried out. Liu died soon afterwards, and after his death, no one else made any attempt to find it.</p>
<p>Notes:<br>　 [1] This piece of writing is regarded as one of the earliest pieces about Utopianism in Chinese Literature.<br>　 [2] Taiyuan was the title of the reign of Emperor Xiaowu of the Eastern Jin Dynasty.<br>　 [3] Wuling Prefecture is today’s Changde City, Hunan Province.<br>　 [4] Nanyang is today’s Nanyang City, Henan Province.   </p>
<h2 id="译本八-孙大雨"><a href="#译本八-孙大雨" class="headerlink" title="译本八 [孙大雨]"></a>译本八 [孙大雨]</h2><p><strong><center>The Peach Blossom Visionary Land</center></strong></p>
<p>　 晋太元中，武陵人捕鱼为业，缘溪行，忘路之远近。忽逢桃花林，夹岸数百步，中无杂树，芳草鲜美，落英缤纷；渔人甚异之。复前行，欲穷其林。<br>　 During the Tai-yuan years of the dynasty Jin, a fisherman from the county of Wuling strolled on the bank of a stream, forgetting the distance of his track, into a grove of blossoming peach trees all at once. For several hundred steps along the bank side, there were no other trees; the sward was freshly green and fallen petals of the peach blooms were scattered on the grass verdure. The fisherman, surprised by the sight, walked on to see where the grove would end. It ended at the source of the stream, where there was a mountain. An aperture opened on the mount, from which light seemed to be emitted.</p>
<p>　 林尽水源，便得一山。山有小口，仿佛若有光，便舍船，从口入。初极狭，才通人；复行数十步，豁然开朗。土地平旷，屋舍俨然。有良田、美池、桑、竹之属，阡陌交通，鸡犬相闻。其中往来种作，男女衣着，悉如外人；黄发垂髫，并佁然自乐。见渔人，乃大惊，问所从来；具答之。便要还家，设酒、杀鸡、作食。村中闻有此人，咸来问讯。自云：先世避秦时乱，率妻子邑人来此绝境，不复出焉；遂与外人间隔。问今是何世？乃不知有汉，无论魏、晋！此人一一为具言所闻，皆叹惋。余人各复延至其家，皆出酒食，停数日，辞去。此中人语云：”不足为外人道。”<br>　 The man abandoned his boat and entered the opening. It was narrow at first, just enough to pass through. After several tens of steps, the way led to vast spaciousness. The land was level and expanded, houses were spread out in good order; goodly farms, fair ponds and mulberry and bamboo thickets were to be seen everywhere. The ways and cross roads were stretched out far and wide. Cocks’ crew and dogs’ barking were heard here and there. The men and women coming and going in their tilling and handicraft work were dressed all like people outside. The aged with hair of light beige and children with cut hair fringing their foreheads all looked gay and contented. Seeing the fisherman, people were greatly surprised, asking him whence he came from and being replied to. They then invited him to their homes, offering wine and killing chickens for entertainment. When it was generally known in the village that there was this man, more people came to see and ask questions of him. They all said that their forefathers, fleeing from turmoils during the Qin Dynasty, led their families and villagers hither to this isolated district to stay, and so being separated from the outside world. They asked what time it was then, knowing not there was any dynasty Han, to say nothing of those of Wei and Jin. The man answered them all in details, whereon they heaved sighs and exclamations. All the others also invited him severally to their homes for hospitality. After many a day, he made his departure. They told him not to publicize his sojourn there.</p>
<p>　 既出，得其船，便扶向路，处处志之。及郡下，诣太守，说如此。太守即遣人随其往，寻向所志，遂迷不复得路。<br>　 When out, he sought out his boat and noted closely the way leading to the aperture of the mount. After his return to the chief town of the county, he went to the alderman and made a report of his outlandish excursion. The county official dispatched a man to follow him whereto he would lead. But he could not find the spots he had noted on his way back and so lost the whereabouts of the grove of blossoming peach trees.</p>
<p>　 南阳刘子骥，高尚士也，闻之，欣然规往，未果，寻病终。后遂无问津者。<br>　 Liu Ziji of Nanyang, a scholar of high repute, hearing of the story sought to find out the place. He fell sick and died, before his attempted trial. Thereafter, no one ever ventured the visionary deed. </p>
<h2 id="译本九-谢百魁"><a href="#译本九-谢百魁" class="headerlink" title="译本九 [谢百魁]"></a>译本九 [谢百魁]</h2><p><strong><center>The Peach Blossom Source<br>Tao Yuanming</center></strong></p>
<p>　 晋太元中，武陵人捕鱼为业，缘溪行，忘路之远近。忽逢桃花林，夹岸数百步，中无杂树，芳草鲜美，落英缤纷；渔人甚异之。复前行，欲穷其林。林尽水源，便得一山。山有小口，仿佛若有光，便舍船，从口入。<br>　 One day in the Taiyuan period of the Jin Dynasty, a native of Wuling Prefecture, being a fisherman by trade, was boating in a stream. Oblivious of the distance that he had covered, he came upon a peach grove, which lined the banks of the stream for several hundred paces. The grove was unmixed with any other trees and was carpeted with fragrant and tender grass, while the newly opened blossom was a riot of pink. The fisherman much wondered and proceeded further, hoping to reach the end of the grove, which turned out to be the head of the stream. There he was confronted with a crag, which had a small orifice looking as if it were lit by a dim light. Then he abandoned the boat and entered the opening.</p>
<p>　 初极狭，才通人；复行数十步，豁然开朗。土地平旷，屋舍俨然。有良田、美池、桑、竹之属，阡陌交通，鸡犬相闻。其中往来种作，男女衣着，悉如外人；黄发垂髫，并佁然自乐。<br>　 At first the cave was very narrow, only passable for one person. After a further walk of several dozen paces, a broad view burst upon his sight. He saw an even and wide tract of land, on which some houses were arranged in good order, with fertile lands, beautiful ponds, mulberry trees and bamboos all around them. The fields were crisscrossed with ridged paths. The cocks and dogs heard and echoed each other. The clothes worn by the men and women tilling the land were identical with those of the outsiders. The aged and the adolescent all enjoyed themselves in blissful ease.</p>
<p>　 见渔人，乃大惊，问所从来；具答之。便要还家，设酒、杀鸡、作食。村中闻有此人，咸来问讯。自云：先世避秦时乱，率妻子邑人来此绝境，不复出焉；遂与外人间隔。问今是何世？乃不知有汉，无论魏、晋！此人一一为具言所闻，皆叹惋。余人各复延至其家，皆出酒食，停数日，辞去。此中人语云：”不足为外人道。”<br>　 At sight of the fisherman, they were dumbfounded. Then they asked whence he came, and he answered their questions one by one. He was soon invited to their homes, treated to a dinner with wine and chicken. Hearing of the stranger, the villagers all came to see him and made him inquiries. By their own account their ancestors, in order to escape from the tumults of war during the Qin Dynasty, led their wives, children and townsmen to this secluded place, and never went out again. Thus they were isolated from the outside world. Their inquiries about the present times showed that they had no idea of the Han, let alone the Wei and Jin dynasties. The fisherman told them everything he knew, and they were all surprised and regretted their ignorance. The remaining folks also invited him to their homes, entertaining him with wine and food. The fisherman, having stayed for several days, bade them farewell. The people said to him, “There is no need to tell the outside world about us.”</p>
<p>　 既出，得其船，便扶向路，处处志之。及郡下，诣太守，说如此。太守即遣人随其往，寻向所志，遂迷不复得路。<br>　 Having left the cave, the fisherman found his boat and rowed along the former route, making marks all the way. Upon his return in the prefecture he visited the prefect and gave him a detailed account. The latter immediately sent some people as his escort, tracing the marks in search of the place. But they went astray and lost their way.</p>
<p>　 南阳刘子骥，高尚士也，闻之，欣然规往，未果，寻病终。后遂无问津者。<br>　 Liu Ziji of Nanyang, a high-minded recluse, having been informed of it, set out gladly for this unknown village, but to no purpose. Later he died of illness. Afterwards, no one went to search for it again.   </p>
]]></content>
      <categories>
        <category>Culture</category>
      </categories>
      <tags>
        <tag>Translation</tag>
      </tags>
  </entry>
  <entry>
    <title>西方著名哲学家年表</title>
    <url>/title/ee0b9f9e/</url>
    <content><![CDATA[<p><img src="https://s2.ax1x.com/2020/01/08/lg2Pnx.md.png" alt="Philospher">  </p>
<a id="more"></a>

<p>最近在看哲学书籍，发现对西方先贤了解不多，故特意整理下各哲学家的年表。</p>
<h2 id="古希腊时期：公元前七世纪——公元前二世纪"><a href="#古希腊时期：公元前七世纪——公元前二世纪" class="headerlink" title="古希腊时期：公元前七世纪——公元前二世纪"></a>古希腊时期：公元前七世纪——公元前二世纪</h2><p><img src="https://s2.ax1x.com/2020/01/08/lgfDVP.md.png" alt="guxila"></p>
<p><strong>泰勒斯</strong>(Thales，约前624-约前547，古希腊第一个哲学家，米利都学派创始人)<br><strong>阿那克西曼德</strong>(Anaximandros，约前610-前546，古希腊米利都学派唯物主义哲学家)<br><strong>阿那克西美尼</strong>(Anaximenes，约前588-约前525，古希腊米利都学派唯物主义哲学家)<br><strong>毕达哥拉斯</strong>(Pythagoras，约前580-约前500，古希腊数学家，唯心主义哲学家)<br><strong>色诺芬尼</strong>(Xenophanes，约前565-约前473，古希腊哲学家，埃利亚学派第一个代表人物)<br><strong>赫拉克利特</strong>(Herakleitos，约前540-约前480与470之间，古希腊唯物主义哲学家，爱非斯学派创始人)<br><strong>克拉底鲁</strong>(Kratylos，前五世纪，古希腊爱非斯学派哲学家，赫拉克利特的学生)<br><strong>巴门尼德</strong>(Parmenides，约前六世纪末-约前五世纪中叶之后，古希腊埃利亚学派唯心主义哲学家)<br><strong>留基波</strong>(Leukippos，约前500-约前440，古希腊唯物主义哲学家，原子说奠基人之一)<br><strong>阿那克萨戈拉</strong>(Anaxagoras，约前500-约前428，古希腊唯物主义哲学家)<br><strong>芝诺(埃利亚的)</strong>(Zenon Eleates，约前490-约前436，古希腊唯心主义哲学家，巴门尼德的学生)<br><strong>恩培多克勒</strong>(Empedokles，约前490-约前430，古希腊唯物主义哲学家，修辞学创始人)<br><strong>高尔吉亚</strong>(Gorgias，约前483-约前375，古希腊智者派哲学家)<br><strong>普罗泰哥拉</strong>(Protagoras，前481-约前411，古希腊智者派哲学家)<br><strong>苏格拉底</strong>(Sokrates，前469-前399，古希腊唯心主义哲学家)<br><strong>德谟克利特</strong>(Demokritos，约前460-前370，古希腊唯物主义哲学家，与留基波并称原子说创始人)<br><strong>安提西尼</strong>(Antisthenes，约前435-约前370，古希腊哲学家，犬儒学派创始人)<br><strong>亚里斯提卜</strong>(Aristippos，约前435-前360？古希腊哲学家，昔勒尼学派创始人，苏格拉底的弟子)<br><strong>柏拉图</strong>(Plato，前427-前347，古希腊客观唯心主义哲学家，学园派创始人，苏格拉底的学生，亚里士多德的老师)<br><strong>第欧根尼(锡诺帕的)  *<em>(Diogenes o Sinopeus，约前404-约前323，古希腊犬儒学派哲学家)<br>*</em>亚里士多德</strong>(Aristotles，前384-前322，古希腊哲学家、科学家，柏拉图的学生，亚历山大大帝的老师，逍遥学派创始人)<br><strong>皮浪</strong>(Pyrrhon，约前365-约前275，古希腊哲学家，怀疑论者)<br><strong>伊壁鸠鲁</strong>(Epikouros，前341-前270，古希腊唯物主义哲学家)<br><strong>芝诺(季蒂昂的)</strong>(Zenon Kitieus,约前336-约前264,古希腊斯多葛学派创始人)  </p>
<h2 id="罗马时期：公元前二世纪——公元五世纪"><a href="#罗马时期：公元前二世纪——公元五世纪" class="headerlink" title="罗马时期：公元前二世纪——公元五世纪"></a>罗马时期：公元前二世纪——公元五世纪</h2><p><img src="https://s2.ax1x.com/2020/01/08/lgffrn.md.png" alt="guluoma"></p>
<p><strong>西塞罗</strong>(Marcus Tullius Cicero，前106-前43，古罗马政治家、雄辩家、哲学家，在哲学上，是折衷主义的代表)<br><strong>卢克莱修</strong>(Titus Lucretius Carus，约前99-约前55，古罗马诗人、唯物主义哲学家)<br><strong>安德罗尼柯</strong>(Andronicus Rhodius，约前一世纪，古希腊逍遥派哲学家，因编纂亚里士多德著作而著称)<br><strong>埃奈西德穆</strong>(Aenesidemus，公元前一世纪，古希腊哲学家，怀疑论者，皮浪的思想继承者)<br><strong>斐洛</strong>(Philo Judaeus，约前30-约后45，古犹太神秘主义哲学家)<br><strong>塞涅卡</strong>(Lucius Annaeus Seneca，约前4-后65，古罗马哲学家、戏剧家，新斯多葛主义的主要代表之一)<br><strong>爱比克泰德</strong>(Epiktetos，约66-？古罗马斯多葛派哲学家)<br><strong>琉善</strong>(Loukianos，约125-约192，一译卢奇安，古希腊散文作家、唯物主义哲学家、无神论者)<br><strong>马可·奥勒留</strong>(Marcus Aurelius Antoninus，121-180，古罗马皇帝[161-180]，新斯多葛派哲学家)<br><strong>塞克斯都·恩披里柯</strong>(Sextus Empiricus，约二世纪中叶，古罗马哲学家，怀疑论者)<br><strong>德尔图良</strong>(Tertullianus，150-160年之间-约222，基督教教父之一)<br><strong>奥利金</strong>(Origenes，约185-约254，基督教神学家，教父哲学的主要代表之一)<br><strong>第欧根尼·拉尔修</strong>(Diogenes Laërtius,约200-约250,古希腊哲学史料《名哲言行录》的编纂者)<br><strong>普罗提诺</strong>(Plotinos，约204-约270，古罗马时期希腊的唯心主义哲学家，新柏拉图主义的最重要代表)<br><strong>波菲利</strong>(Porphyrios，233或234-约305，古罗马时期生于希腊的唯心主义哲学家，新柏拉图主义者，普罗提诺的门徒)<br><strong>奥古斯丁</strong>(Aurelius Augustinus，354-430，罗马帝国基督教思想家，教父哲学的主要代表)<br><strong>希帕蒂亚</strong>(Hypatia，约370-约415，罗马帝国女数学家、天文学家，新柏拉图主义哲学家)<br><strong>波伊提乌</strong>(Anicius Manlius Severinus Boethius，约480-524或525，古罗马晚期唯心主义哲学家)  </p>
<h2 id="中世纪时期：公元五世纪——-十四世纪末"><a href="#中世纪时期：公元五世纪——-十四世纪末" class="headerlink" title="中世纪时期：公元五世纪—— 十四世纪末"></a>中世纪时期：公元五世纪—— 十四世纪末</h2><p><img src="https://s2.ax1x.com/2020/01/08/lgfIaV.md.png" alt="zsj"></p>
<p><strong>埃里金纳</strong>(Johannes Scotus Erigena，约810-877，欧洲中世纪前期经院哲学家)<br><strong>安瑟伦</strong>(Anselmus，1033-1109，欧洲中世纪基督教思想家，实在论主要代表，有“最后一个教父和第一个经院哲学家”之称)<br><strong>洛色林</strong>(Roscellinus，约1050-约1112，中世纪法兰西经院哲学家，唯名论者)<br><strong>香浦</strong>(Guillaume de Champeaux，约1070-1121，中世纪法兰西经院哲学家，实在论者)<br><strong>阿伯拉尔</strong>(Petrus Abailardus，1079-1142，中世纪法兰西经院哲学家，“概念论”者)<br><strong>大阿尔伯特</strong>(Albertus Magnus，1193或1206或1207-1280，中世纪德意志经院哲学家、神学家，天主教多明我会僧侣)<br><strong>罗吉尔·培根</strong>(Roger Bacon，约1214-约1292，英国思想家，实验科学的先驱者)<br><strong>托马斯·阿奎那</strong>(Thomas Aquinas，1226-1274，中世纪神学家和经院哲学家，天主教多明我会会士)<br><strong>西格尔</strong>(Sigerus de Brantia，约1240-1281至1284，尼德兰哲学家，阿威罗伊主义者)<br><strong>爱克哈特</strong>(Meister Johannes Eckhart，约1260-1327，中世纪德意志神学家和神秘主义哲学家)<br><strong>邓斯·司各脱</strong>(Johannes Duns Scotus，约1265-1308，中世纪苏格兰经院哲学家，唯名论者)<br><strong>奥卡姆</strong>(William of Occam[或Ockham]，约1300-约1350，中世纪苏国经院哲学家，执著名的“奥康剃刀”，唯名论者)<br><strong>胡斯</strong>(Jan Hus，约1369-1415，捷克爱国者和宗教改革家)  </p>
<h2 id="文艺复兴时期：十五世纪初——-十六世纪末"><a href="#文艺复兴时期：十五世纪初——-十六世纪末" class="headerlink" title="文艺复兴时期：十五世纪初—— 十六世纪末"></a>文艺复兴时期：十五世纪初—— 十六世纪末</h2><p><img src="https://s2.ax1x.com/2020/01/08/lgfqxJ.md.png" alt="wyfx"></p>
<p><strong>但丁</strong>(Dante Alighièri，1265-1321，意大利诗人，恩格斯称他“是中世纪的最后一位诗人，同时又是新时代的最初一位诗人)<br><strong>彼特拉克</strong>(Francesco Petrarch，1304-1374，意大利诗人，欧洲文艺复兴时期人文主义先驱之一)<br><strong>薄伽丘</strong>(Geovanni Boccàccio，1313-1375，文艺复兴时期意大利作家，人文主义的主要代表之一)<br><strong>保尔</strong>(John Ball，？-1381，英国民间传教士，瓦特.泰勒起义的领导者之一)<br><strong>威克里夫</strong>(John Wycliffe，约1320-1384，英国人，欧洲宗教改革运动的先行者)<br><strong>尼古拉(库萨的)</strong>(Nicolaus Cusanus，1401-1464，文艺复兴时期德意志哲学家，枢机主教，泛神论者)<br><strong>达·芬奇</strong>(Leonardo da vinci，1452-1519，文艺复兴时期意大利艺术家、自然科学家、工程师、哲学家)<br><strong>彭波那齐</strong>(Pietro Pomponazzi，1462-1524或1525，文艺复兴时期意大利哲学家，人文主义的主要代表之一)<br><strong>伊拉斯谟</strong>(Desiderius Erasmus，约1469-1536，文艺复兴时期尼德兰人文主义者，原名盖哈尔脱·盖哈尔兹(Gerhard Gerhards)  ，生于荷兰鹿特丹)<br><strong>莫尔</strong>(Thomas More，1478-1535，文艺复兴时期英国空想共产主义者)<br><strong>马丁· 路德</strong>(Martin Luther，1483-1546，十六世纪德国宗教改革运动的发起者，基督教(新教)  路德宗的创始人)<br><strong>闵采尔</strong>(Thomas Münzer，约1490-1525，1524-1525年德国农民战争的领袖，德意志农民和城市平民的宗教改革家)<br><strong>加尔文</strong>(Jean Calvin，1509-1564，法国人，欧洲宗教改革家，基督教加尔文宗的创始者)<br><strong>特勒肖</strong>(Bernardino Telesio，1509-1588，文艺复兴时期意大利哲学家)<br><strong>蒙田</strong>(Michel Eyquem de Montaigne，1533-1592，一译蒙台涅，文艺复兴时期法兰西思想家和散文作家)<br><strong>沙朗</strong>(Pierre Charron，1541-1603，文艺复兴时期法兰西哲学家)<br><strong>布鲁诺</strong>(Giordano Bruno，1548-1600，文艺复兴时期意大利哲学家)<br><strong>康帕内拉</strong>(Tommaso Campanella，1568-1639，文艺复兴时期意大利空想共产主义者)<br><strong>伯麦</strong>(Jakob Böhme，1575-1624，文艺复兴时期德意志神秘主义哲学家)<br><strong>格劳修斯</strong>(Hugo Grotius，1583-1645，荷兰资产阶级法学家，自然法学派早期理论家，对法学、神学、历史、文学及自然科学均有研究，以国际法研究著称)<br><strong>瓦尼尼</strong>(Lucilio Vanini，1584-1619，文艺复兴时期意大利哲学家)  </p>
<h2 id="近代哲学时期：十七世纪初——-十九世纪三十年代"><a href="#近代哲学时期：十七世纪初——-十九世纪三十年代" class="headerlink" title="近代哲学时期：十七世纪初—— 十九世纪三十年代"></a>近代哲学时期：十七世纪初—— 十九世纪三十年代</h2><p><img src="https://s2.ax1x.com/2020/01/08/lghCGD.md.png" alt="lmzy"></p>
<p><strong>弗兰西斯·培根</strong>(Francis Bacon，1561-1626，“英国唯物主义和整个现代实验科学的真正始祖”[马克思])<br><strong>霍布斯</strong>(Thomas Hobbes，1588-1679，英国机械唯物主义哲学家，《利维坦》作者)<br><strong>伽桑狄</strong>(Pierre Gassendi，1592-1655，一译伽森狄，法国唯物主义哲学家、物理学家、天文学家)<br><strong>笛卡尔</strong>(René Descartes，1596-1650，法国哲学家、物理学家、数学家、生理学家，解析几何的创始人，唯理论者)<br><strong>勒卢阿</strong>(Hendrik van Roy，法文名Henri Le Roy，拉丁名Henricus Regius，1598-1679，荷兰医生，哲学家，早期机械唯物主义代表人物)<br><strong>温斯坦莱</strong>(Gerrard Winstanley，约1609-约1652，英国资产阶级革命时期掘土派运动领袖，空想共产主义者)<br><strong>李尔本</strong>(John Lilburne，约1614-1657，英国资产阶级革命时期小资产阶级民主主义者，平均派领袖)<br><strong>海林克斯</strong>(Arnold Geulincx，1625-1669，荷兰笛卡尔派唯心主义哲学家，他和马勒伯朗士并称为偶因论者)<br><strong>斯宾诺莎</strong>(Baruch [后改名为Benedictus] Spinoza，1632-1677，荷兰唯物主义哲学家，泛神论者)<br><strong>洛克</strong>(John Locke，1632-1704，英国唯物主义哲学家，提出著名的白板说，经验论者)<br><strong>马勒伯朗士</strong>(Nicolas Malebranche，1638-1715，法国唯心主义哲学家)<br><strong>莱布尼茨</strong>(Gottfried Wilhelm Leibniz，1646-1716，德国自然科学家、数学家、唯心主义哲学家)<br><strong>培尔</strong>(Pierre Bayle，1647-1706，法国启蒙思想家、唯物主义哲学家)<br><strong>考尔德</strong>(William Coward，1656-1725，英国自然神论者)<br><strong>梅叶</strong>(Jean Meslier，1664-1729，法国唯物主义者，无神论者，空想共产主义者)<br><strong>维科</strong>(Giovanni Battista Vico，1668-1744，意大利唯心主义哲学家)<br><strong>托兰德</strong>(John Toland，1670-1722，英国唯物主义哲学家)<br><strong>舍夫茨别利</strong>(Anthony Ashley Cooper Shaftesbury，1671-1713，英国自然神论者)<br><strong>柯林斯</strong>(Anthony Collins，1676-1729，英国自然神论者)<br><strong>博林布罗克</strong>(Henry St. John Bolingbroke，1678-1751，英国自然神论者)<br><strong>沃尔弗</strong>(Christian Wolff，1679-1754，德国唯心主义哲学家)<br><strong>贝克莱</strong>(George Berkeley，1685-1753，英国唯心主义哲学家)<br><strong>孟德斯鸠</strong>(Charles Louis de Secondat Montesquieu，1689-1755，法国启蒙思想家、法学家)<br><strong>伏尔泰</strong>(Voltaire，1694-1778，法国启蒙思想家、作家、哲学家。原名弗朗梭阿.马利.阿鲁埃(François Marie Arouet)  )<br><strong>摩莱里</strong>(Morelly，笔名，本名不详，十八世纪中叶法国空想共产主义者)<br><strong>哈特莱</strong>(David Hartley，1705-1757，英国唯物主义哲学家，心理联想说创始人之一，自然神论者)<br><strong>马布利</strong>(Gabriel Bonnot de Mably，1709-1785，法国空想共产主义者，孔狄亚克之兄)<br><strong>拉美特利</strong>(Julien Offroy de La Mettrie，1709-1751，法国启蒙思想家，唯物主义哲学家)<br><strong>李德</strong>(Thomas Reid，1710-1796，英国哲学家，苏格兰学派即常识学派的创始人)<br><strong>罗蒙诺索夫</strong>(Миxaил Вacильевич Ломoносοв1711-1765，俄国学者，诗人，俄国唯物主义哲学和自然科学的奠基者)<br><strong>休谟</strong>(David Hume，1711-1776，英国唯心主义哲学家、不可知论者，历史学家、经济学家)<br><strong>卢梭</strong>(Jean Jacques Rousseau，1712-1778，法国启蒙思想家、哲学家、教育学家、文学家)<br><strong>狄德罗</strong>(Denis Diderot，1713-1784，法国启蒙思想家，唯物主义哲学家，无神论者，文学家，《百科全书》主编)<br><strong>鲍姆加登</strong>(Alexander Gottlieb Baumgarten，1714-1762，德国哲学家，沃尔弗哲学体系的拥护者)<br><strong>爱尔维修</strong>(Claude Adrien Helvétius，1715-1771，法国启蒙思想家，唯物主义哲学家)<br><strong>孔狄亚克</strong>(Etienne Bonnot de Condillac，1715-1780，法国启蒙思想家，感觉论者，马布利之弟)<br><strong>达兰贝尔</strong>(Jean Le Rond d’ Alembert，1717-1783，一译达朗伯，法国数学家、启蒙思想家、哲学家，《百科全书》副主编)<br><strong>霍尔巴赫</strong>(Paul Heinrich Dietrich d’ Holbach，1723-1789，法国启蒙思想家、唯物主义哲学家、无神论者)<br><strong>康德</strong>(Immanuel Kant，1724-1804，德国古典唯心主义的创始人)<br><strong>莱辛</strong>(Gotthold Ephraim Lessing，1729-1781，德国启蒙运动时期思想家、文艺理论家、剧作家)<br><strong>多德维尔</strong>(Henry Dodwell，？-1784，英国自然神论者)<br><strong>罗比耐</strong>(Jean Baptiste René Robinet，1735-1820，法国哲学家)<br><strong>孔多塞</strong>(Jean Antoine Condorcet，1743-1794，法国资产阶级革命时期资产阶级理论家)<br><strong>雅科比</strong>(Friedrich Heinrich Jacobi，1743-1819，德国唯心主义哲学家)<br><strong>赫尔德</strong>(Johann Gottfried von Herder，1744-1803，德国文艺理论家、哲学家，狂飙运动(十八世纪七十到八十年代德国资产阶级文学运动)  理论指导者)  </p>
<h2 id="现代哲学时期：十九世纪三十年代——-今"><a href="#现代哲学时期：十九世纪三十年代——-今" class="headerlink" title="现代哲学时期：十九世纪三十年代—— 今"></a>现代哲学时期：十九世纪三十年代—— 今</h2><p><img src="https://s2.ax1x.com/2020/01/08/lghAsA.md.png" alt="mks"></p>
<p><strong>边沁</strong>(Jeremy Bentham，1748-1832，英国伦理学家、法学家，资产阶级功利主义的主要代表)<br><strong>歌德</strong>(Johann Wolfgang von Goethe，1749-1832，德国诗人、剧作家、思想家)<br><strong>葛德文</strong>(William Godwin，1756-1836，英国作家、社会思想家，牧师出身，后拥护无神论和启蒙思想)<br><strong>卡巴尼斯</strong>(Pierre Jean Georges Cabanis，1757-1808，法国革命时期资产阶级理论家、生理学家，庸俗唯物主义前驱者)<br><strong>沃尔涅</strong>(Constantin François Volney，1757-1820，法国资产阶级革命时期资产阶级思想家)<br><strong>巴贝夫</strong>(Gracchus Babeuf，原名François Noël Babeuf，1760-1797，法国革命家，空想共产主义者)<br><strong>圣西门</strong>(Claude Henri de Saint-Simon，1760-1825，法国空想社会主义者)<br><strong>邦纳罗蒂</strong>(Filippo Michele Buonarrotti，1761-1837，法国空想共产主义者。意大利人，参加1789革命，获共和国公民称号)<br><strong>费希特</strong>(Johann Gottlieb Fichte，1762-1814，德国古典唯心主义哲学家)<br><strong>黑格尔</strong>(Georg Wilhelm Friedrich Hegel，1770-1831，德国古典唯心主义的集大成者)<br><strong>欧文</strong>(Robert Owen，1771-1858，英国空想社会主义者)<br><strong>傅立叶</strong>(Charles Fourier，1772-1837，法国空想社会主义者)<br><strong>谢林</strong>(Friedrich Wilhelm Joseph von Schelling，1775-1854，德国唯心主义哲学家)<br><strong>波尔察诺</strong>(Bernhard Bolzano，1781-1848，捷克数学家、哲学家、逻辑学家)<br><strong>卡贝</strong>(Etienne Cabet，1788-1856，法国空想共产主义者)<br><strong>叔本华</strong>(Arthur Schopenhauer，1788-1860，德国唯心主义哲学家，唯意志论者)<br><strong>库辛</strong>(Victor Cousin，1792-1867，法国唯心主义哲学家，自称其哲学体系为折衷主义)<br><strong>海涅</strong>(Heinrich Heine，1797-1856，德国诗人、政论家、思想家)<br><strong>孔德</strong>(Auguste Comte，1798-1857，法国实证主义哲学家)<br><strong>德萨米</strong>(Théodore Dézamy，1803-1850，法国空想共产主义者)<br><strong>费尔巴哈</strong>(Ludwig Andreas Feuerbach，1804-1872，德国唯物主义哲学家)<br><strong>布朗基</strong>(Louis Auguste Blanqui，1805-1881，法国革命家，空想共产主义者)<br><strong>施蒂纳</strong>(Max Stirner，1806-1856，卡斯巴·施米特(Kaspar Schmidt)  的笔名，德国唯心主义哲学家，青年黑格尔派代表之一，唯我论者，无政府主义的前驱者)<br><strong>穆勒</strong>(John Stuart Mill，1806-1873，英国唯心主义哲学家、经济学家、逻辑学家，詹姆斯.穆勒之子)<br><strong>魏特林</strong>(Wilhelm Weitling，1808-1871，德国早期工人运动活动家，空想共产主义者)<br><strong>施特劳斯</strong>(David Friedrich Strauss，1808-1874，德国唯心主义哲学家，青年黑格尔派代表之一，以对基督教的批判而著名)<br><strong>蒲鲁东</strong>(Pierre Joseph Proudhon，1809-1865，法国小资产阶级经济学家和社会学家，无政府主义创始人之一)<br><strong>鲍威尔</strong>(Bruno Bauer，1809-1882，德国唯心主义哲学家，青年黑格尔派的主要代表)<br><strong>别林斯基</strong>(Виссарион Григорьевич Белинский，1811-1848，俄国革命民主主义者，文艺批判家、哲学家)<br><strong>路易·勃朗</strong>(Jean Josehp Charles Louis Blanc，1811-1882，法国小资产阶级社会主义者，历史学家)<br><strong>赫尔岑</strong>(Александр Иванович Герцен，1812-1870，俄国革命民主主义者，唯物主义哲学家、作家)<br><strong>克尔恺郭尔</strong>(Sören Kierkegaard，1813-1855，丹麦唯心主义哲学家，其思想成为现代资产阶级哲学存在主义理论根据之一)<br><strong>巴枯宁</strong>(Михаил Александрович Бакунин，1814-1876，俄国无政府主义者)<br><strong>洛采</strong>(Rudolf Hermann Lotze，1817-1881，德国唯心主义哲学家，自称其哲学为“目的论的唯心主义”)<br><strong>格律恩</strong>(Karl Grün，1817-1887，德国小资产阶级社会主义者)<br><strong>福格特</strong>(Karl Vogt，1817-1895，德国博物学家，庸俗唯物主义者，自称其哲学为“生理学人本主义”)<br><strong>马克思</strong>(Karl Marx，1818.5.5-1883.3.14，马克思主义创始人，全世界无产阶级的伟大导师和领袖)<br><strong>恩格斯</strong>(Friedrich Engels，1820.11.28-1895.8.5，马克思主义创始人之一，全世界无产阶级的伟大导师和领袖，马克思战友)<br><strong>斯宾塞</strong>(Herbert Spencer，1820-1903，英国社会学家、不可知论者、唯心主义哲学家)<br><strong>摩莱萧特</strong>(Jacob Moleschott，1822-1893，荷兰生理学家、哲学家，庸俗唯物主义的代表之一)<br><strong>毕希纳</strong>(Ludwig Büchner，1824-1899，德国医生，庸俗唯物主义代表之一)<br><strong>拉萨尔</strong>(Ferdinand Lassalle，1825-1864，德国工人运动中机会主义派别的首领)<br><strong>赫胥黎</strong>(Thomas Henry Huxley，1825-1895，英国博物学家)<br><strong>宇伯威格</strong>(Friedrich Überweg，1826-1871，德国哲学家，以著有《哲学史概论》一书而出名)<br><strong>朗格</strong>(Friedrich Albert Lange，1828-1875，德国唯心主义哲学家，早期的新康德主义者)<br><strong>约瑟夫·狄慈根</strong>(Joseph Dietzgen，1828-1888，德国社会主义著作家和哲学家，制革工人)<br><strong>车尔尼雪夫斯基</strong>(Николай Гаврилович Чернышевский，1828-1889，俄国革命民主主义者，唯物主义哲学家、文学批判家、作家)<br><strong>泰纳</strong>(Hippolyte Adolphe Taine，1828-1893，一译丹纳，法国文艺理论家、史学家、孔德实证论哲学的继承人之一)<br><strong>冯特</strong>(Wilhelm Wundt，1832-1920，德国心理学家、哲学家，构造心理学派创始人之一)<br><strong>狄尔泰</strong>(Wilhelm Dilthey，1833-1911，德国唯心主义哲学家，最初属于新康德主义，后转向生命哲学)<br><strong>杜林</strong>(Karl Eugen Dühring，1833-1921，德国哲学家、庸俗经济学家)<br><strong>哈里斯</strong>(William Torrey Harris，1835-1909，美国教育家、唯心主义哲学家，黑格尔哲学在美国最早的传播者)<br><strong>格林</strong>(Thomas Hill Green，1836-1882，英国唯心主义哲学家)<br><strong>舒佩</strong>(Wilhelm Schuppe，1836-1913，德国唯心主义哲学家，内在论的创始人)<br><strong>马赫</strong>(Ernst Mach，1838-1916，奥地利物理学家、唯心主义哲学家，经验批判主义的创始人之一)<br><strong>皮尔斯</strong>(Charles Sanders Peirce，1839-1914，美国唯心主义哲学家，实用主义创始人)<br><strong>李普曼</strong>(Otto Liebmann，1840-1912，德国唯心主义哲学家，早期的新康德主义者，最早提出“回到康德那里去”口号)<br><strong>倍倍尔</strong>(August Bebel，1840-1913，德国社会民主党和第二国际的创始者和领导者之一，车工出身，第一国际成员)<br><strong>詹姆斯</strong>(William James，1842-1910，美国唯心主义哲学家、心理学家，实用主义者，机能心理学创始人)<br><strong>拉法格</strong>(Paul Lafargue，1842-1911，法国工人运动活动家，马/恩的学生，1868年同马克思次女Laura Marx(1845-1911)  结婚)<br><strong>柯亨</strong>(Hermann Cohen，1842-1918，德国唯心主义哲学家，新康德主义马堡学派的创始人)<br><strong>哈特曼</strong>(Eduart Hartmann，1842-1906，德国唯心主义哲学家)<br><strong>阿芬那留斯</strong>(Richard Avenarius，1843-1896，德国主观唯心主义哲学家，经验批判主义的创始人之一)<br><strong>尼采</strong>(Friedrich Nietzsche，1844-1900，德国唯心主义哲学家，唯意志论者)<br><strong>梅林</strong>(Franz Mehring，1846-1919，德国社会民主党左翼领袖之一，政论家、历史学家)<br><strong>布拉德莱</strong>(Francis Herbert Bradley，1846-1924，英国唯心主义哲学家，新黑格尔主义者)<br><strong>倭铿</strong>(Rudolf Eucken，1846-1926，德国唯心主义哲学家)<br><strong>文德尔班</strong>(Wilhelm Windelband，1848-1915，德国唯心主义哲学家，新康德主义弗赖堡学派的创始人)<br><strong>毛特纳</strong>(Fritz Mauthner，1849-1923，德国唯心主义哲学家，语言哲学的代表，出生于波希米亚)<br><strong>伯恩施坦</strong>(Eduart Bernstein，1850-1932，德国社会民主党和第二国际右派首领，修正主义的代表人物)<br><strong>舒贝特-索尔登</strong>(Richard Schubert-Soldern，1852-1935，德国唯心主义哲学家，内在论的代表之一)<br><strong>迈农</strong>(Alexius Meinong，1853-1920，奥地利唯心主义哲学家)<br><strong>考茨基</strong>(Karl Kautsky，1854-1938，德国社会民主党和第二国际修正主义的首领之一)<br><strong>普列汉诺夫</strong>(Георгий Валентинович Плеханов，1856-1918，俄国最早的马克思主义传播者，后成为修正主义者，孟什维克首领之一)<br><strong>毕尔生</strong>(Karl Pearson，1857-1936，英国唯心主义哲学家、数学家，优生学的提倡者之一)<br><strong>亚力山大</strong>(Samuel Alexander，1859-1938，英国唯心主义哲学家，新实在论者)<br><strong>胡塞尔</strong>(Edmund Husserl，1859-1938，德国唯心主义哲学家，现代现象学的创始人)<br><strong>柏格森</strong>(Henri Bergson，1859-1941，法国唯心主义哲学家，生命哲学和现代非理性主义的主要代表)<br><strong>杜威</strong>(John Dewey，1859-1952，美国唯心主义哲学家、社会学家、教育学家，实用主义者)<br><strong>怀特海</strong>(Alfred North Whitehead，1861-1947，英国唯心主义哲学家、数学家)<br><strong>彼得楚尔特</strong>(Josef Petzoldt，1862-1929，德国唯心主义哲学家，经验批判主义者)<br><strong>欧根·狄慈根</strong>(Eugen Dietzgen，1862-1930，约瑟夫.狄慈根之子，父死后，利用其父哲学中某些混乱，歪曲辩证唯物主义，“滚入反动哲学”)<br><strong>李凯尔特</strong>(Heinrich Rickert，1863-1936，德国唯心主义哲学家，新康德主义弗赖堡学派的主要代表之一)<br><strong>席勒</strong>(Ferdinand Canning Scott Schiller，1864-1937，英国哲学家，实用主义者，把自己的实用主义哲学称为“人本主义”)<br><strong>柯罗齐</strong>(Benedetto Croce，1866-1952，一译克罗齐，意大利唯心主义哲学家、史学家，新黑格尔主义者)<br><strong>杜里舒</strong>(Hans Driesch，1867-1941，德国唯心主义哲学家、生物学家，新活力论者)<br><strong>列宁</strong>(Владимир Ильич Ленин Ульянов，1870.4.22-1924.1.21，马克思和恩格斯事业和学说的继承者，全世界无产阶级的伟大导师和领袖)<br><strong>罗素</strong>(Bertrand Russell，1872-1970，英国唯心主义哲学家、数学家、逻辑学家)<br><strong>波格丹诺夫</strong>(Александр Александрович Богданов，1873-1928，俄国唯心主义哲学家)<br><strong>穆尔</strong>(George Edward Moore，1873-1958，英国唯心主义哲学家，新实在论主要代表之一)<br><strong>秦梯利</strong>(Giovanni Gentile，1875-1944，意大利唯心主义哲学家，新黑格尔主义者)<br><strong>斯大林</strong>(Иосиф Виссарионович Сталин Джугашвили，1879.12.21-1953.3.5，伟大的马克思列宁主义者)<br><strong>施本格勒</strong>(Oswald Spengler，1880-1936，德国唯心主义哲学家、史学家)<br><strong>德波林</strong>(Абрам Моиесевич Деборин，1881-1963，苏联哲学家，十月革命前曾参加孟什维克，1929年后任苏联科学院院士，三十年代哲学观点受到批判)<br><strong>施利克</strong>(Moritz Schlick，1882-1936，唯心主义哲学家，生于德国，曾在奥地利维也纳大学任教，维也纳学派领导者，逻辑实证论创始人之一)<br><strong>马利丹</strong>(Jacques Maritain，1882-1973，法国神学家、唯心主义哲学家，新托马斯主义的主要代表)<br><strong>雅斯贝斯</strong>(Karl Jaspers，1883-1969，德国存在主义哲学家)<br><strong>维特根斯坦</strong>(Ludwig Wittgenstein，1889-1951，奥地利唯心主义哲学家、逻辑学家。1838年希特勒吞并奥地利后，入英国籍，剑桥大学任教)<br><strong>海德格尔</strong>(Martin Heidegger，1889-1976，德国存在主义哲学家，希特勒统治时期曾任大学校长、教授等职，拥护纳粹主义)<br><strong>毛泽东[1]</strong>(1893.12.26-1976.9.9，伟大的马克思列宁主义者，中国共产党、中国各族人民的伟大领袖和导师)<br><strong>梅洛·庞蒂</strong>(Merleau Ponty，1908-1961，法国存在主义哲学家)<br><strong>加缪</strong>(Albert Camus，1913-1960，法国存在主义者)  </p>
<p>[1]毛泽东的思想是从西方学习来的，所以被人归入到了西方哲学家之类。所以不要抵制西方思想，毕竟马克思就是西方思想。</p>
]]></content>
      <categories>
        <category>Culture</category>
      </categories>
      <tags>
        <tag>Philosphy</tag>
      </tags>
  </entry>
  <entry>
    <title>基础镜像生成</title>
    <url>/title/dfcbc9a/</url>
    <content><![CDATA[<p><img src="https://s2.ax1x.com/2020/01/03/lUvgvn.jpg" alt="baseimage"></p>
<a id="more"></a>

<p>最近在折腾华为云系统openEuler OS(欧拉系统)，其中涉及到基于ISO制作基础镜像环节。</p>
<h2 id="微服务"><a href="#微服务" class="headerlink" title="微服务"></a>微服务</h2><p>传统的应用服务包括：开发，调试，部署，运维。每个流程都很费时费力。尤其是开发和部署环境不一致带来的问题让广大开发者和运维人员头痛不已。为解决这种繁琐的流程，微服务应运而生。微服务，顾名思义，就是将原来的服务模式改小，更应该说是改方便。微服务的目标是一个次只做一件事，有点儿Unix哲学的味道。</p>
<h2 id="基础镜像"><a href="#基础镜像" class="headerlink" title="基础镜像"></a>基础镜像</h2><p>在Linux的世界里，大家共用一套硬件管理方案：bootfs。而不同的发行版可以提供不同的文件管理系统rootfs。故而，对不同的发行版来说，需要准备不同的rootfs。拿到一个安装好的系统或是ISO文件，我们可以考虑基于此生成rootfs打包成tar.zx文件并导入为docker基础镜像。</p>
<h2 id="应用镜像"><a href="#应用镜像" class="headerlink" title="应用镜像"></a>应用镜像</h2><p>就是说，将某一应用和其基础镜像及其环境打包成一体，部署和开发可以做到一样的环境，这样就不用考虑不同系统环境的不同，大大的提高了开发效率，节省了成本。这种打包文件就称为镜像，它包括底层的硬件层和文件系统，最上面的才是应用层。基于一个基础镜像，在上面安装各种服务，最后作为应用镜像提供服务，可大规模部署。</p>
<h2 id="基础镜像生成大体流程"><a href="#基础镜像生成大体流程" class="headerlink" title="基础镜像生成大体流程"></a>基础镜像生成大体流程</h2><p>基础镜像十分重要，而它的制作流程大体如下。<br>1.利用debootstrap(debian系列)或febootstrap(Centos系列)生成rootfs非常方便。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">debootstrap --arch i386 ....</span><br><span class="line">febootstrap -i bash -i vim -i yum centos centosImage file:///mnt/iso/</span><br></pre></td></tr></table></figure>
<p>2.利用shell文件，仿照LFS(Linux From Scratch)制作rootfs 再利用dockerfile生成基础镜像。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#genImage.sh </span><br><span class="line">#基于openEuler os制作rootfs，并打包成tar.xz文件</span><br><span class="line">machine=$(uname -m)</span><br><span class="line">if [ -z $RPM_ROOT ]; then</span><br><span class="line">	rm -rf $machine</span><br><span class="line">	echo &quot;please set RPM_ROOT&quot;</span><br><span class="line">	exit</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">if [ &quot;x$RPM_ROOT&quot; != &quot;x$(pwd)/rootfs&quot; ]; then</span><br><span class="line">	echo &quot;should set RPM_ROOT to $(pwd)/rootfs&quot;</span><br><span class="line">	exit</span><br><span class="line">fi</span><br><span class="line">if [ -z &quot;$OS_VERSION&quot; ]; then</span><br><span class="line">	echo &quot;should set OS_VERSION&quot;</span><br><span class="line">	exit</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">if [ -z $ISO_PATH ];then</span><br><span class="line">	echo &quot;please set ISO_PATH as iso mountpoint&quot;</span><br><span class="line">	exit</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">if [ &quot;x$USER&quot; != &quot;xroot&quot; ]; then</span><br><span class="line">	echo &quot;please run as root&quot;</span><br><span class="line">	exit</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">if [ -e $RPM_ROOT ];then</span><br><span class="line">	echo &quot;rootfs exist, remove it&quot;</span><br><span class="line">	rm -rf $RPM_ROOT</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">mkdir -p $&#123;RPM_ROOT&#125;</span><br><span class="line"></span><br><span class="line"># init rpmdb</span><br><span class="line">rpm --root $&#123;RPM_ROOT&#125; --initdb</span><br><span class="line"></span><br><span class="line"># init yum repo</span><br><span class="line">mkdir -p $&#123;RPM_ROOT&#125;/etc/yum.repos.d</span><br><span class="line">euleros_repo=$&#123;RPM_ROOT&#125;/etc/yum.repos.d/euleros.repo</span><br><span class="line">echo &quot;[base]&quot; &gt; $&#123;euleros_repo&#125;</span><br><span class="line">echo name=openEulerOS-1.0 base &gt;&gt; $&#123;euleros_repo&#125;</span><br><span class="line">echo baseurl=file://$&#123;ISO_PATH&#125; &gt;&gt; $&#123;euleros_repo&#125;</span><br><span class="line">echo &quot;enabled=1&quot; &gt;&gt; $&#123;euleros_repo&#125;</span><br><span class="line"></span><br><span class="line"># install rpm key</span><br><span class="line">rpm --root $&#123;RPM_ROOT&#125; --import $ISO_PATH/RPM-GPG-KEY-openEuler</span><br><span class="line"></span><br><span class="line"># install package</span><br><span class="line">echo &quot;install package..&quot;</span><br><span class="line">yum -y --installroot=$&#123;RPM_ROOT&#125; install yum</span><br><span class="line">yum -y --installroot=$&#123;RPM_ROOT&#125; clean all</span><br><span class="line"></span><br><span class="line">cp ./clean_in_chroot.sh  $&#123;RPM_ROOT&#125;</span><br><span class="line"># clean up</span><br><span class="line">chroot $RPM_ROOT /clean_in_chroot.sh</span><br><span class="line">rm  $&#123;RPM_ROOT&#125;/clean_in_chroot.sh</span><br><span class="line"></span><br><span class="line">echo &quot;generate packages&quot;</span><br><span class="line">rm -rf $machine</span><br><span class="line">mkdir $machine</span><br><span class="line">echo &quot;generate $machine/openEulerOS-$OS_VERSION-$&#123;machine&#125;.tar.xz&quot;</span><br><span class="line">tar -C $RPM_ROOT -cJf  $machine/openEulerOS-$OS_VERSION-$&#123;machine&#125;.tar.xz .</span><br><span class="line"></span><br><span class="line">echo &quot;enerate $machine/openEulerOS-$OS_VERSION-$&#123;machine&#125;-tar-xz.sha256&quot;</span><br><span class="line">sha256sum $machine/openEulerOS-$OS_VERSION-$&#123;machine&#125;.tar.xz  &gt; $machine/openEulerOS-$OS_VERSION-$&#123;machine&#125;-tar-xz.sha256</span><br></pre></td></tr></table></figure>

<p>基于tar.xz生成base image</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Dockerfile</span><br><span class="line"># Build the base image: ARM64(鲲鹏) Cloud image</span><br><span class="line"># This is a docker file, use the Huawei openEuler OS</span><br><span class="line"># Version: 1.0</span><br><span class="line"># Author: Shieber</span><br><span class="line"># Date: 2020.01.03</span><br><span class="line"></span><br><span class="line">FROM scratch</span><br><span class="line">MAINTAINER Shieber &lt;Shieber@aliyun.com&gt;</span><br><span class="line"></span><br><span class="line">ADD openEuler-1.0-x86_64.tar.xz /</span><br><span class="line">LABEL name=&quot;openEuler Base Image&quot; \</span><br><span class="line">	vendor=&quot;Hua Wei&quot; \</span><br><span class="line">	license=&quot;GPLv2&quot; \</span><br><span class="line">	build-date=&quot;20200103&quot;</span><br><span class="line">ADD openEuler.repo /etc/yum.repos.d/</span><br><span class="line"></span><br><span class="line">RUN [&apos;yum&apos;,&apos;makecache&apos;]</span><br><span class="line">RUN [&apos;yum&apos;,&apos;update&apos;] \</span><br><span class="line">&amp;&amp;  [&apos;yum&apos;,&apos;install&apos;,&apos;-y&apos;,&apos;vim&apos;] \</span><br><span class="line">&amp;&amp;  [&apos;yum&apos;,&apos;install&apos;,&apos;-y&apos;,&apos;bash&apos;] \</span><br><span class="line">&amp;&amp;  [&apos;yum&apos;,&apos;install&apos;,&apos;-y&apos;,&apos;openssh-server&apos;] \</span><br><span class="line">&amp;&amp;  [&apos;yum&apos;,&apos;clean&apos;] #&amp;&amp;是为了生成为一次并精简镜像</span><br><span class="line"></span><br><span class="line">CMD [&apos;/bin/bash&apos;]</span><br></pre></td></tr></table></figure>

<p>命令行生成image</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ sudo docker image build -t openEuler-1.0-demo .</span><br></pre></td></tr></table></figure>

<p>运行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ sudo docker container run --rm -it openEuler-demo /bin/bash</span><br></pre></td></tr></table></figure>

<p>上面只是大体流程，实际上华为的欧拉系统只能在其ARM64架构的鲲鹏服务器上运行，所以实际安装还要复杂。上面提供的流程应对x86_64架构下的各种Linux发行版应该都没有问题。</p>
]]></content>
      <categories>
        <category>微服务</category>
      </categories>
      <tags>
        <tag>Image</tag>
      </tags>
  </entry>
  <entry>
    <title>2019个人年度报告</title>
    <url>/title/9d08ff81/</url>
    <content><![CDATA[<p><img src="https://s2.ax1x.com/2019/12/06/QJY6W8.md.png" alt="2019report"></p>
<a id="more"></a>

<h2 id="年度日历"><a href="#年度日历" class="headerlink" title="年度日历"></a>年度日历</h2><p><strong>02.02</strong><br>  参加学校团年宴，抽奖中了一个小米耳机，学校发了300元奖励及新年大礼包，感觉学校对学生还算好吧。当时获奖感言我说的是：学校知道对学生好，那么我们学生也知道什么时候该对学校好，这是一个良性互动，感谢学习的领导亲自来看学生。  </p>
<p>  <img src="https://s2.ax1x.com/2019/12/29/lKnIvq.md.png" alt="nyear"> </p>
<p><strong>02.28</strong><br>  帮徐俊下载LED方面论文。<br><strong>03.30</strong><br>  老杜邀请逛公园，巧遇原学生会干部(丁肇鹏)和专业老学姐(胡冰花)。  </p>
<p>  <img src="https://s2.ax1x.com/2019/12/29/lKKekF.png" alt="duwan"></p>
<p><strong>04.21</strong><br>  食堂饭太难吃了，数千字长文给学校食堂反馈意见。  </p>
<p>  <img src="https://s2.ax1x.com/2019/12/29/lKKKp9.md.png" alt="canteen"></p>
<p><strong>04.23</strong><br>  同冠军通话2h28m，聊了什么，忘了，不过确实说了好久，毕业了就各奔前程了，能聚在一起的机会就少了。<br><strong>05.08</strong><br>  参加RISC-V路演成都宣讲会，了解物联网领域RISC-V架构芯片发展情况。在美国科技封锁情况下，RISC-V可能是未来中国自主芯片设计研发的原型，未来整个产业可能是数万亿人民币的市场。现在刚起步，国内专家和政府部门正大力推动。</p>
<p>  <img src="https://s2.ax1x.com/2019/12/29/lK3VJS.md.png" alt="risc-v"></p>
<p><strong>05.11</strong><br>  买点儿中药，自己熬，调节身体。这药吃了饿得快，刚吃早饭，9点半肚子就开始叫了。   </p>
<p>  <img src="https://s2.ax1x.com/2019/12/29/lKMUET.md.png" alt="medicine"></p>
<p><strong>06.05</strong><br>  白锦瑞及其母亲到成都，请我吃法。<br><strong>06.21</strong><br>  作主题演讲：大数据时代技术演讲及未来社会发展。我大概讲的内容：关于操作系统，在美国科技封锁的情况下，国内开始了自主造操作系统的热潮。华为的鸿蒙是物联网操作系统，被逼转换为移动加物联网系统。6G是去年两会就提出了，目前5G在布局，但6G肯定开始研发了。我认为新语言主要应对物联网，对硬件操作的封装不能使用传统的语言，估计会有新语言发明出来。摩尔定律到头，CPU无法再快了，只有新的技术原理才能解决，我认为量子计算是一个方向，但目前不看好。一亿人口城市群这个概念应该是由我最先提出的，看下图中地球上亮的地方，就是一个个城市聚合体，目前长三角(上海，南京，杭州，苏州)等市慢慢地已经构成地球上最大的城市群，所以一亿人口不是不可能(五千万是最可能的)，中国的城市化必然铸造几个超级大城市。上亿人口围绕若干城市集成群，实行政策互通，交通医疗同步，开展工商业，发展教育医疗文娱产业，逐步提升中国的城镇率。</p>
<p>  <img src="https://s2.ax1x.com/2019/12/29/lKMd5F.md.png" alt="6g"></p>
<p>  <img src="https://s2.ax1x.com/2019/12/29/lKMhPe.md.png" alt="100m"></p>
<p><strong>07.10</strong><br>  北京市内游玩(北大，国图，天安门，天坛)。北京，还算好吧，交通太挤，地铁晚高峰我差点没下来，本来打算下去，结果给外面的人给挤回去了。北京大学校内环境超级好，简直就是动物园，地上有鸟，鸭子，水里有鱼，好大学确实不一样。     </p>
<p>  <img src="https://s2.ax1x.com/2019/12/29/lKMIxA.md.png" alt="beijing1"></p>
<p>  <img src="https://s2.ax1x.com/2019/12/29/lKQ9rq.md.png" alt="beijing2"></p>
<p>  <img src="https://s2.ax1x.com/2019/12/29/lKQiZV.md.png" alt="beijing3"></p>
<p>  <img src="https://s2.ax1x.com/2019/12/29/lKQNQA.md.png" alt="beijing4"></p>
<p><strong>07.11</strong><br>  参观天津中电集团和海河。<br><strong>07.19</strong><br>  帮马文杰调试Python代码。<br><strong>09.01</strong><br>  强仔过来专门请吃法，下午陪同何英强和方齐圣游览电科，许久不见，甚是想念。<br><strong>09.17</strong><br>  参加中航工业在学校的招聘宣讲会，看表演。  </p>
<p>  <img src="https://s2.ax1x.com/2019/12/29/lK1W5T.md.png" alt="zh"></p>
<p><strong>09.21</strong><br>  受邀前往雅安夹金山干部学院参加活动发言并前往红军村参观学习。当年毛和朱长征翻越的第一座大雪山就在此，感觉环境确实艰苦，全是高山，交通不便。</p>
<p>  <img src="https://s2.ax1x.com/2019/12/29/lKQaLt.md.png" alt="jiajingshan"></p>
<p><strong>09.26</strong><br>  学校设立新部门，5位院士和一位将军兼院士出席，可能一辈子也不太可能遇到这么多院士了。  </p>
<p>  <img src="https://s2.ax1x.com/2019/12/29/lKQIFU.md.png" alt="new"></p>
<p><strong>09.29</strong><br>  学校校庆晚会，也庆祝共和国70周年。  </p>
<p>  <img src="https://s2.ax1x.com/2019/12/29/lKQbl9.md.png" alt="anniversary"></p>
<p><strong>10.01</strong><br>  国庆节，学校大装扮，感觉像过年。  </p>
<p>  <img src="https://s2.ax1x.com/2019/12/29/lKlek8.md.png" alt="nationalday"></p>
<p><strong>10.27</strong><br>  自己学着拆卸，给电脑除尘。风扇太脏，找师傅要30块，还不如自己来。拆很容易，但装回去就可能出错，要保管好螺丝及其顺序。  </p>
<p>  <img src="https://s2.ax1x.com/2019/12/29/lKQzFO.md.png" alt="pc"></p>
<p><strong>12.06</strong><br>  参与Science杂志年度科学事件评选，我选择了黑洞首次发现的那张图片，这应该是本年度最具代表性的科技话题了吧。因为一张黑洞图片，视觉中国还被有关部门约谈了。  </p>
<p>  <img src="https://s2.ax1x.com/2019/12/29/lK1ZuR.md.jpg" alt="darkhole"></p>
<p><strong>12.23</strong><br>  参加华为黑客马拉松大赛，争取正月里到深圳决赛。</p>
<p>  <img src="https://s2.ax1x.com/2019/12/29/lKJKLd.md.jpg" alt="huawei"></p>
<h2 id="年度感受"><a href="#年度感受" class="headerlink" title="年度感受"></a>年度感受</h2><p>又是一年年终，时间好快呀！翻看<a href="http://www.shieber.cn/title/4aea7fd9/">2018年终总结</a>，感觉时间就像飞一样地快。客观地说，人会随着自身年龄的增长而觉时间的飞逝。小时候的一年很长，现在的一年尤其地短，未来估计会感觉到更短。以前读到光阴似箭，日月如梭这句话毫无感觉，现在想想古人诚不欺负我。这一年，我不算努力，但也并未过于偷懒。学到些东西，看了些东西，总的来说，有所成长吧！</p>
<p>这一年更加感觉说话要小心注意，人小的时候，就是相互咒骂都没关系，年龄一大，人就更难交流了，说重了伤人，说轻了没意，我想最好还是不说，闭嘴。还是那个感觉：默默做事容易，说话做人难呐！这个时代，真话是入不得耳的，大部分人听不进去真话，实际上他们除了捧场话之外全听不进去。书本上教学生老实做人，不讲谎话，然而，我发现人不讲点谎话根本不可能。唯一能做到的是：不主动讲谎话，若是被人引起，说两句也没关系。当下，讲废话和捧场话最令人喜欢，讲实话真话最招人反感。</p>
<p>大部分人在其生命历程中总是需要围着什么东西转的(工作，家长，老师，老板，领导…)，他们是受到支配的一群人，所以最好的方式就是去领导他们而不是讲道理给他们听。因为他们的境界低，不会主动总结吸收，所以讲了真话给其听，他们反而听不懂，也不乐意。遇到这些不愿听真话的人，无聊的人，境界低的人，与之谈话最好的回应方式就是”哦，嗯”之类的词语，再不能多了！</p>
<h2 id="2020年度愿景"><a href="#2020年度愿景" class="headerlink" title="2020年度愿景"></a>2020年度愿景</h2><p>不立flag，就写几个小愿望吧。</p>
<p>1.学会摄影技术，有钱就购买专业点的相机。<br>平时研究网站，PS和前端技术，发现图片不够漂亮。然而网上找到的图片，不是分辨率不行，就是有版权，视觉中国闹的版权问题怕是以后还会有。细细想来，不如自己拍，自己PS，搞设计怎么能不学拍照呢？先买个便宜的学习，然后再买高档的相机。</p>
<p>2.学习视频制作，有了创意也可以用视频表现出来。<br>视频不论给别人看还是自己作记录或纪念都是很好的，前段时间我提出了构建个人数据中心的概念，其中就强调视频的重要性，所以这个必学。或许，未来社会，作视频就和今天的会PPT一样，成为一种社会基本技能。</p>
<p>3.争取到南京和杭州去玩一趟。<br>北上广深已经集齐，杭州，南京，武汉，厦门，青岛等等也得去看看，这个国家太大，要多走走。俗话说，读万卷书，行万里路。书我读了上百本了，要是一页算一卷的话，怎么着也有数万卷了，但路走得还不够。年轻时就多利用学校的资源出去看看，毕竟又不掏钱，何乐而不为呢？</p>
<h2 id="年度音乐"><a href="#年度音乐" class="headerlink" title="年度音乐"></a>年度音乐</h2><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=330 height=86 src="//music.163.com/outchain/player?type=2&id=497463404&auto=1&height=66"></iframe>

<p><strong>2019年度音乐10首</strong> <a href="http://music.163.com/#/m/playlist?id=3097742844" target="_blank" rel="noopener">网易云歌单</a></p>
<table>
<thead>
<tr>
<th align="left">曲目</th>
<th align="left">歌手</th>
</tr>
</thead>
<tbody><tr>
<td align="left">芒种</td>
<td align="left">赵方靖</td>
</tr>
<tr>
<td align="left">FlY-飞</td>
<td align="left">ANU</td>
</tr>
<tr>
<td align="left">左手指月</td>
<td align="left">萨顶顶</td>
</tr>
<tr>
<td align="left">莫守成规</td>
<td align="left">王爽冰</td>
</tr>
<tr>
<td align="left">Grace(惊鸿)</td>
<td align="left">Jannik</td>
</tr>
<tr>
<td align="left">我和我的祖国</td>
<td align="left">王菲</td>
</tr>
<tr>
<td align="left">大田後生仔(女生版)</td>
<td align="left">王玉萌</td>
</tr>
<tr>
<td align="left">浙江(Original Mix)</td>
<td align="left">Keridy</td>
</tr>
<tr>
<td align="left">China</td>
<td align="left">习谱予</td>
</tr>
<tr>
<td align="left">May the 4th</td>
<td align="left">Bee Hunter</td>
</tr>
</tbody></table>
<h2 id="年度观影"><a href="#年度观影" class="headerlink" title="年度观影   "></a>年度观影   </h2><table>
<thead>
<tr>
<th align="center">序号</th>
<th align="left">名称</th>
<th align="center">序号</th>
<th align="left">名称</th>
</tr>
</thead>
<tbody><tr>
<td align="center">0</td>
<td align="left">《刮痧》</td>
<td align="center">15</td>
<td align="left">《哪吒之魔童降世》</td>
</tr>
<tr>
<td align="center">1</td>
<td align="left">《战狼》</td>
<td align="center">16</td>
<td align="left">《潜伏》</td>
</tr>
<tr>
<td align="center">2</td>
<td align="left">《鬼干部》</td>
<td align="center">17</td>
<td align="left">《庆余年》</td>
</tr>
<tr>
<td align="center">3</td>
<td align="left">《驴得水》</td>
<td align="center">18</td>
<td align="left">《鹿鼎记》</td>
</tr>
<tr>
<td align="center">4</td>
<td align="left">《美丽人生》</td>
<td align="center">19</td>
<td align="left">《盗墓笔记》</td>
</tr>
<tr>
<td align="center">5</td>
<td align="left">《流浪地球》</td>
<td align="center">20</td>
<td align="left">《飞虎神鹰》</td>
</tr>
<tr>
<td align="center">6</td>
<td align="left">《美丽心理》</td>
<td align="center">21</td>
<td align="left">《津门飞鹰》</td>
</tr>
<tr>
<td align="center">7</td>
<td align="left">《中国机长》</td>
<td align="center">22</td>
<td align="left">《猎鹰1949》</td>
</tr>
<tr>
<td align="center">8</td>
<td align="left">《摩登时代》</td>
<td align="center">23</td>
<td align="left">《孤岛飞鹰》</td>
</tr>
<tr>
<td align="center">9</td>
<td align="left">《勇敢的心》</td>
<td align="center">24</td>
<td align="left">《三国演义》</td>
</tr>
<tr>
<td align="center">10</td>
<td align="left">《美国往事》</td>
<td align="center">25</td>
<td align="left">《官场现形记》</td>
</tr>
<tr>
<td align="center">11</td>
<td align="left">《007幽灵党》</td>
<td align="center">26</td>
<td align="left">《人民的名义》</td>
</tr>
<tr>
<td align="center">12</td>
<td align="left">《西红市首富》</td>
<td align="center">27</td>
<td align="left">《大明王朝1566》</td>
</tr>
<tr>
<td align="center">13</td>
<td align="left">《天气之子》</td>
<td align="center">28</td>
<td align="left">《大秦帝国之裂变》</td>
</tr>
<tr>
<td align="center">14</td>
<td align="left">《辛德勒的名单》</td>
<td align="center">29</td>
<td align="left">《大秦帝国之纵横》</td>
</tr>
</tbody></table>
<h2 id="年度视频"><a href="#年度视频" class="headerlink" title="年度视频"></a>年度视频</h2><p>展现中国山水文化，一个法国人让我认识到了自己祖国的伟大。</p>
<div style="position: relative; padding: 30% 45%;">
<iframe style="position: absolute; width: 100%; height: 100%; left: 0; top: 0;" src="//player.bilibili.com/player.html?aid=73222505&bvid=BV1eE411y7Db&cid=125239420&page=1&as_wide=1&high_quality=1&danmaku=0" scrolling="no" frameborder="no" allowfullscreen="true"> </iframe>
</div>

<h2 id="年度图片"><a href="#年度图片" class="headerlink" title="年度图片"></a>年度图片</h2><p><img src="https://s2.ax1x.com/2019/12/06/QJYbSU.md.png" alt="best"></p>
<h2 id="年度书籍"><a href="#年度书籍" class="headerlink" title="年度书籍"></a>年度书籍</h2><p>《少年维特的烦恼.亲和力》–歌德</p>
<p>大哲学家，大文豪歌德的作品，学到很多做人的道理，对爱情的理解又上了一个台阶。拿破仑读过，黑格尔，尼采等都读过这书。感觉歌德的文字很有特点，讲道理很明白，都是大智慧。亲和力一书中对化学作用力和人情作用力的对照，写出了人间的种种道理，批判了世人的愚昧，今天一样不过时，我反而觉得这书就像在写今天的世界。这本书，经历不够的人读不懂，或者读起来觉得不好。</p>
<p><img src="https://s2.ax1x.com/2019/12/21/QvX8uF.jpg" alt="weite"></p>
<p><strong>阅读书籍136本</strong>   </p>
<table>
<thead>
<tr>
<th align="left">书名</th>
<th align="left">作者</th>
</tr>
</thead>
<tbody><tr>
<td align="left">《三体》</td>
<td align="left">刘慈欣</td>
</tr>
<tr>
<td align="left">《钱商》</td>
<td align="left">阿瑟・黑利 (李克强荐)</td>
</tr>
<tr>
<td align="left">《道德经》</td>
<td align="left">老子</td>
</tr>
<tr>
<td align="left">《商君书》</td>
<td align="left">商鞅</td>
</tr>
<tr>
<td align="left">《潜规则》</td>
<td align="left">吴思</td>
</tr>
<tr>
<td align="left">《性之变》</td>
<td align="left">潘绥铭</td>
</tr>
<tr>
<td align="left">《金瓶梅》</td>
<td align="left">王汝梅</td>
</tr>
<tr>
<td align="left">《梦的解析》</td>
<td align="left">弗洛伊德</td>
</tr>
<tr>
<td align="left">《谈谈方法》</td>
<td align="left">勒内・笛卡尔</td>
</tr>
<tr>
<td align="left">《娱乐至死》</td>
<td align="left">尼尔・波兹曼</td>
</tr>
<tr>
<td align="left">《百年孤独》136</td>
<td align="left">加西亚・马尔克斯</td>
</tr>
<tr>
<td align="left">《汪曾祺谈吃》</td>
<td align="left">汪曾祺</td>
</tr>
<tr>
<td align="left">《人生的智慧》</td>
<td align="left">阿瑟・叔本华</td>
</tr>
<tr>
<td align="left">《人性的弱点》</td>
<td align="left">戴尔・卡耐基</td>
</tr>
<tr>
<td align="left">《社会契约论》</td>
<td align="left">让・雅克・卢梭</td>
</tr>
<tr>
<td align="left">《贫穷的本质》</td>
<td align="left">班纳吉(2019诺贝尔经济学奖)</td>
</tr>
<tr>
<td align="left">《相对论的意义》1</td>
<td align="left">爱因斯坦</td>
</tr>
<tr>
<td align="left">《天堂蒜薹之歌》</td>
<td align="left">莫言(2012诺贝尔文学奖)</td>
</tr>
<tr>
<td align="left">《痛苦的中国人》</td>
<td align="left">汉德克(2019诺贝尔文学奖)</td>
</tr>
<tr>
<td align="left">《女生呵护指南》</td>
<td align="left">六层楼</td>
</tr>
<tr>
<td align="left">《布雷顿森林货币战》</td>
<td align="left">本・斯泰尔</td>
</tr>
<tr>
<td align="left">《历史决定论的贫困》</td>
<td align="left">卡尔・波普尔</td>
</tr>
<tr>
<td align="left">《特朗普成功创业101》</td>
<td align="left">迈克尔・戈登</td>
</tr>
<tr>
<td align="left">《写给女人的幸福箴言》</td>
<td align="left">戴尔・卡耐基</td>
</tr>
<tr>
<td align="left">《少年维特的烦恼.亲和力》</td>
<td align="left">歌德</td>
</tr>
<tr>
<td align="left">略…</td>
<td align="left">略…</td>
</tr>
<tr>
<td align="left">《论人类不平等的起源和基础》</td>
<td align="left">让・雅克・卢梭</td>
</tr>
</tbody></table>
<h2 id="年度厨艺-学会菜品"><a href="#年度厨艺-学会菜品" class="headerlink" title="年度厨艺(学会菜品)"></a>年度厨艺(学会菜品)</h2><table>
<thead>
<tr>
<th align="left">菜名</th>
<th align="left">译名</th>
</tr>
</thead>
<tbody><tr>
<td align="left">麻婆豆腐</td>
<td align="left">Mapo Tofu</td>
</tr>
<tr>
<td align="left">小炒木耳</td>
<td align="left">Fried Fungus</td>
</tr>
<tr>
<td align="left">家常豆腐</td>
<td align="left">Homestyle Tofu</td>
</tr>
<tr>
<td align="left">溜炒腰花</td>
<td align="left">Stir-fried Pig Kidneys</td>
</tr>
<tr>
<td align="left">椒香花鲢</td>
<td align="left">Bighead carp with Szechuan Pepper</td>
</tr>
<tr>
<td align="left">酸菜豆腐鱼</td>
<td align="left">Fish with Szechuan Sauerkraut and Tofu</td>
</tr>
</tbody></table>
<h2 id="年度消费"><a href="#年度消费" class="headerlink" title="年度消费"></a>年度消费</h2><p><strong>支付宝全年消费</strong></p>
<p><img src="https://s2.ax1x.com/2019/12/30/lQrjW4.md.png" alt="alipay"></p>
<p><strong>微信全年消费</strong></p>
<p><img src="https://s2.ax1x.com/2019/12/30/lQsiTK.md.png" alt="wechat"></p>
<p><strong>京东全年消费</strong></p>
<p><img src="https://s2.ax1x.com/2019/12/30/lQskFO.md.png" alt="jdpay"></p>
<p><strong>三家合计消费</strong></p>
<p><img src="https://s2.ax1x.com/2019/12/30/lQsEfe.md.png" alt="total"></p>
<h2 id="年度技能树"><a href="#年度技能树" class="headerlink" title="年度技能树"></a>年度技能树</h2><p><img src="https://s2.ax1x.com/2019/12/06/QJJKEt.png" alt="skills">  </p>
<h2 id="工作时间统计"><a href="#工作时间统计" class="headerlink" title="工作时间统计"></a>工作时间统计</h2><table>
<thead>
<tr>
<th align="left">条目</th>
<th align="left">内容</th>
</tr>
</thead>
<tbody><tr>
<td align="left">全年工时</td>
<td align="left">4244.95h(h/小时,m/分钟)</td>
</tr>
<tr>
<td align="left">一季度</td>
<td align="left">974.3h (10h49m/每天)</td>
</tr>
<tr>
<td align="left">二季度</td>
<td align="left">917.7h (10h5m/每天)</td>
</tr>
<tr>
<td align="left">三季度</td>
<td align="left">1064.95h (11h34m/每天)</td>
</tr>
<tr>
<td align="left">四季度</td>
<td align="left">1288.0h (14h0m/每天)</td>
</tr>
</tbody></table>
<p><img src="https://s2.ax1x.com/2019/12/31/l3zFBQ.md.png" alt="time"></p>
<h2 id="其他统计数据"><a href="#其他统计数据" class="headerlink" title="其他统计数据"></a>其他统计数据</h2><table>
<thead>
<tr>
<th align="left">条目</th>
<th align="left">内容</th>
</tr>
</thead>
<tbody><tr>
<td align="left">生病次数</td>
<td align="left">1 (冠周炎)</td>
</tr>
<tr>
<td align="left">通宵次数</td>
<td align="left">6</td>
</tr>
<tr>
<td align="left">熬夜次数</td>
<td align="left">31</td>
</tr>
<tr>
<td align="left">新加好友</td>
<td align="left">28 (女:5，男:23)</td>
</tr>
<tr>
<td align="left">自由指数</td>
<td align="left">9.5</td>
</tr>
<tr>
<td align="left">健康指数</td>
<td align="left">8.5</td>
</tr>
<tr>
<td align="left">性福指数</td>
<td align="left">0.0</td>
</tr>
<tr>
<td align="left">幸福指数</td>
<td align="left">8.5</td>
</tr>
<tr>
<td align="left">休息天数</td>
<td align="left">13</td>
</tr>
<tr>
<td align="left">全年晴天</td>
<td align="left">138.5天</td>
</tr>
<tr>
<td align="left">全年阴天</td>
<td align="left">194.0天</td>
</tr>
<tr>
<td align="left">全年雨天</td>
<td align="left">32.5天</td>
</tr>
<tr>
<td align="left">阴晴雨比</td>
<td align="left">6.0:4.3:1.0</td>
</tr>
<tr>
<td align="left">天气统计</td>
<td align="left">地点：清水河</td>
</tr>
<tr>
<td align="left">天气统计</td>
<td align="left">时段：1.1~12.31</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>年度报告</category>
      </categories>
  </entry>
  <entry>
    <title>2019年度新闻</title>
    <url>/title/c739c660/</url>
    <content><![CDATA[<p><img src="https://s2.ax1x.com/2019/12/31/l3IZMq.md.png" alt="2019"></p>
<a id="more"></a>


<h2 id="年度关键字词"><a href="#年度关键字词" class="headerlink" title="年度关键字词"></a>年度关键字词</h2><p>(0) 猪<br>(1) 难<br>(2) 稳<br>(3) 贸易摩擦<br>(4) 我和我的祖国  </p>
<h2 id="十大新词语"><a href="#十大新词语" class="headerlink" title="十大新词语"></a>十大新词语</h2><p>(0) 6G<br>(1) 996<br>(2) 5G元年<br>(3) 夸夸群<br>(4) 灵魂砍价<br>(5) 止暴治乱<br>(6) 极限施压<br>(7) 基层减负年<br>(8) 冰墩墩/雪容融<br>(9) 乡字号/土字号  </p>
<h2 id="十大年度流行语"><a href="#十大年度流行语" class="headerlink" title="十大年度流行语"></a>十大年度流行语</h2><p>(0) 硬核<br>(1) 我太南了<br>(2) 垃圾分类<br>(3) 学习强国<br>(4) 金色十年<br>(5) 先行示范区<br>(6) 最美奋斗者<br>(7) 基层减负年<br>(8) 中美贸易磋商<br>(9) 我和我的祖国  </p>
<h2 id="十大年度网络流行语"><a href="#十大年度网络流行语" class="headerlink" title="十大年度网络流行语"></a>十大年度网络流行语</h2><p>(0) 996<br>(1) 硬核<br>(2) 柠檬精<br>(3) 断舍离<br>(4) 不忘初心<br>(5) 是个狼人<br>(6) 鱼女无瓜<br>(7) 14亿护旗手<br>(8) 道路千万条，安全第一条<br>(9) 我不要你觉得，我要我觉得</p>
<h2 id="年度新闻"><a href="#年度新闻" class="headerlink" title="年度新闻"></a>年度新闻</h2><p><strong>2019.01.01</strong><br>    (1) 中美建交40周年。<br>    (2) 元旦节，世界各地花样迎新年。<br><strong>2019.01.02</strong><br>    (1) 《告台湾同胞书》发表四十周年纪念会在人民大会堂举行，习发表讲话。<br><strong>2019.01.03</strong><br>    (1) 22:22分，玉兔二号着陆月球背面并发回首张照片。<br><strong>2019.01.05</strong><br>    (1) TIOBE显示，Python时隔八年再度成为年度编程语言。<br><strong>2019.01.06</strong><br>    (1) Linus通过邮件宣布，Linux内核开发进入5.0阶段。<br><strong>2019.01.08</strong><br>    (1) 国家科学技术奖励大会在京召开，最高奖励调整为800万元。<br><strong>2019.01.15</strong><br>    (1) 中国嫦娥四号发回照片，显示在月球上的播种已生根发芽。<br>    (2) 发现DNA双螺旋结构的沃森由于发表种族歧视言论被冷泉港实验室取消一切荣誉头衔。<br><strong>2019.01.17</strong><br>    (1) 华为面临外部困境，任正非罕见回应外界质疑，阐述华为理念。<br><strong>2019.01.18</strong><br>    (1) 《啥是佩琪》霸屏网络。<br>    (2) 十余款违法应用披露：消消乐涉恶意扣费，QQ音乐，网易新闻等过度搜集用户隐私。<br><strong>2019.01.20</strong><br>    (1) 拼多多后台现重大Bug，被薅羊毛上千万。<br><strong>2019.01.21</strong><br>    (1) 国家统计局公布2018年GDP：90.0309万亿元，增速为6.6%。<br>    (2) 基因编辑婴儿事件当事人贺建奎被解除劳动合同，终止一切教学科研活动。<br>    (3) 国家统计局公布人口数据：2018年末全国人口13.9538亿，全年新增530万人。<br><strong>2019.01.22</strong><br>    (1) 马云入选全球“十大思想者”，外媒称其改变了社会。<br>    (2) 加拿大《环球邮报》报道，美国准备正式引渡孟晚舟到美国受审。<br><strong>2019.01.23</strong><br>    (1) 《百度搜索引擎已死》一文揭露百度搜索将用户导向自家百家号内容。<br><strong>2019.01.24</strong><br>    (1) 华为公布5G基站核心芯片，5G时代基本开启。<br><strong>2019.02.05</strong><br>    (1) 农历己亥猪年正月初一，各地喜迎新年。<br><strong>2019.02.07</strong><br>    (1) 国产科幻电影《流浪地球》热映，中国科幻展现东方人的别样宇宙观。<br><strong>2019.02.12</strong><br>    (1) 北大，北电发声：调查翟天临学术造假。<br><strong>2019.02.18</strong><br>    (1) 上海虹桥火车站启动5G网络。<br><strong>2019.03.04</strong><br>    (1) 全国两会如期召开。<br><strong>2019.03.07</strong><br>    (1) 华为起诉美国政府禁购令违反美国宪法。<br><strong>2019.03.10</strong><br>    (1) 埃塞俄比亚航空公司波音737客机坠毁，157人全部遇难，含8名中国人。<br><strong>2019.03.13</strong><br>    (1) 腾讯QQ正式推出注销功能。<br><strong>2019.03.15</strong><br>    (1) 3.15晚会曝光各种黑心厂和公司，各地工商加紧查办。<br><strong>2019.03.21</strong><br>    (1) 韩国”胜利门”性丑闻震动青瓦台，检方彻查。<br>    (2) 日本公布2020奥运会火炬样品，使用的铝材来自2011年311大地震废弃物。<br><strong>2019.03.25</strong><br>    (1) 剑桥大学承认中国高考成绩，全省前0.1%的人方有资格报名。<br><strong>2019.03.26</strong><br>    (1) 华为发布新产品P30系列，拍照功能比肩专业摄像机。<br><strong>2019.03.31</strong><br>    (1) 教育部批准35所高校本科开设AI专业。<br><strong>2019.04.01</strong><br>    (1) 10点41分，日本官房长官菅义伟公布新年号：令和。<br><strong>2019.04.02</strong><br>    (1) 四川凉山地区因雷击木引发山火，30名消防人员因抢险死亡。<br><strong>2019.04.08</strong><br>    (1) 996工作制，加班要命，引发广泛热议。<br><strong>2019.04.10</strong><br>    (1) 首张黑洞照片公布，引发全球热议。<br><strong>2019.04.11</strong><br>    (1) 维基解密创始人阿桑奇被英国警方从厄瓜多尔驻伦敦大使馆逮捕。<br><strong>2019.04.12</strong><br>    (1) 视觉中国给黑洞，国旗等图片加上版权，被有关部门约谈。<br><strong>2019.04.13</strong><br>    (1) 某女硕士购买奔驰车却被4S店欺负，投诉无门，车盖上哭诉。<br><strong>2019.04.15</strong><br>    (1) 巴黎圣母院发生火灾，塔尖被烧毁，部分珍贵文物遭到损毁。<br><strong>2019.04.16</strong><br>    (1) 大数据：2018年中国人均阅读量4.67，深苏京沪等城市排在前列。<br><strong>2019.04.17</strong><br>    (1) 亚马逊决定部分电商业务退出中国，干不过阿里，京东，拼夕夕。<br><strong>2019.04.19</strong><br>    (1) 国家图书馆保存2000亿条微博，网友调侃：后人不懂我的梗咋办？<br><strong>2019.04.23</strong><br>    (1) 海军成立70周年，在青岛附近海域举行海上阅兵，习出席。<br><strong>2019.04.30</strong><br>    (1) 日本明仁天皇参加”退位礼正殿之仪”正式退位，平成时代结束，令和到来。<br><strong>2019.05.04</strong><br>    (1) 伟大的”五四运动”100周年纪念日。<br><strong>2019.05.06</strong><br>    (1) 俄罗斯一飞机发生故障，导致41人死亡。<br>    (2) 美总统特朗普发推威胁给中国商品加税，国内股指大跌6%。<br><strong>2019.05.11</strong><br>    (1) 女子网购18件衣服，五一节试穿后却要求全退，遭到网友人肉搜索。<br><strong>2019.05.13</strong><br>    (1) 广东查处32名高考移民，已取消报名资格。<br><strong>2019.05.15</strong><br>    (1) 华为及国内部分高校被美国列入商务部工业和安全局的实体名单。<br><strong>2019.05.20</strong><br>    (1) 比尔.盖茨通过公众号继续分享其夏季书单。<br><strong>2019.05.21</strong><br>    (1) 国内三大航空公司就波音737MAX长时间停飞及订单无法按期交付提出赔偿。<br>    (2) 华为创始人任正非再次接受央视专访，回应美国封杀并谈及基础教育对民族的重要性。<br><strong>2019.05.23</strong><br>    (1) 中国时速600千米高速磁悬浮实验样车在青岛下线。<br><strong>2019.05.24</strong><br>    (1) 夸克理论提出者默里·盖尔曼去世，享年89岁。<br>    (2) 英国首相特蕾莎·梅宣布辞职，一度哽咽：“我已尽力”。<br>    (3) Nature：全球禁止氟利昂多年后，中国东部仍在大量排放，尤其是山东和河北。<br>    (4) 国家卫健委发布《卫生健康事业发展统计报告》显示：中国人均寿命达77岁。<br><strong>2019.05.25</strong><br>    (1) 四川卧龙熊猫保护基地发现首例纯白色野生大熊猫。<br>    (2) 世卫组织(WHO)将中医疗法纳入其新版《国际疾病分类》。<br>    (3) 第一财经“城市魅力排行榜”发布，成都杭州等城市成为新一线城市。<br><strong>2019.05.29</strong><br>    (1) IEEE禁止华为专家参与期刊审稿。<br>    (2) 爱因斯坦广义相对论被证实100周年纪念日。<br><strong>2019.06.01</strong><br>    (1) 国务院办公室发布《关于中美经贸磋商的中方立场》。<br><strong>2019.06.06</strong><br>    (1) 工信部给四家通信运营商(移动，联通，电信，广电）发布5G牌照。<br><strong>2019.06.07</strong><br>    (1) 2019年全国高考今拉开帷幕。<br><strong>2019.06.17</strong><br>    (1) 宜宾长宁发生里氏6.0级地震，预警系统实现提前61秒向成都预警。<br><strong>2019.06.20</strong><br>    (1) 习访问朝鲜，时隔14周年后再次有中方领导人访朝。<br><strong>2019.06.24</strong><br>    (1) 点读机女孩高君雨成绩568分，超广东一本线163分。<br><strong>2019.06.25</strong><br>    (1) 章莹颖被杀害案宣判：被告谋杀罪成立。<br><strong>2019.06.27</strong><br>    (1) 美国2城市禁用面部识别软件。<br>    (2) 贵州茅台股票破千，27年来A股再次进入千元股时代。<br><strong>2019.06.29</strong><br>    (1) 腾讯成立开源管理办公室。<br>    (2) 中国航天按部就班，确定于2022年建立大型太空站。<br><strong>2019.06.30</strong><br>    (1) 化学元素周期表诞生150周年纪念日，周期表内元素仍未圆满。<br><strong>2019.07.03</strong><br>    (1) 百度老板李彦宏遭某男子泼水。<br><strong>2019.07.12</strong><br>    (1) 山东大学学伴项目’留学生三女配一男’招致强烈批评。<br><strong>2019.07.16</strong><br>    (1) 计算机科学之父阿兰·图灵确定登上英国50英镑新钞。<br><strong>2019.07.17</strong><br>    (1) 艾隆·马斯克创立的脑机接口公司Neuralink发布首款脑后插管技术。<br><strong>2019.07.20</strong><br>    (1) 美国阿波罗登月工程50周年纪念日。<br>    (2) 著名香港艺人任达华先生在广东中山参加活动时遭行刺。<br><strong>2019.07.21</strong><br>    (1) 香港暴徒游行示威活动中冲撞中联办，污损国徽。<br><strong>2019.07.23</strong><br>    (1) 华为对优秀青年实行年薪制，某中科院青年获200万年薪。<br>    (2) 英国保守党党首选举结束：鲍里斯·约翰逊将接任首相一职。<br>    (3) 中共讣告：前国务院总理李鹏于2019.07.22日逝世，享年91岁。<br><strong>2019.07.24</strong><br>    (1) 刘强东案件相关文档曝光，非强奸。<br><strong>2019.07.28</strong><br>    (1) 受中美两国关系影响，新闻联播近期内容突换风格，频爆’喷饭，跑火车’等词。<br><strong>2019.07.31</strong><br>    (1) 47个城市赴台个人自由行暂停实施。<br><strong>2019.08.04</strong><br>    (1) 美国发生两起枪击案，造成严重伤亡。<br><strong>2019.08.06</strong><br>    (1) 受美股下跌影响，沪深两市开盘跌1.8%，八月以来沪深两市累计下跌5%以上。<br><strong>2019.08.09</strong><br>    (1) 华为2019开发者大会召开，鸿蒙操作系统释出，并计划开源。<br><strong>2019.08.10</strong><br>    (1) 台风利奇马登录沿海地区，给浙江等省份带来严重人员财产损失。<br><strong>2019.08.15</strong><br>    (1) 香港示威游行活动引发暴力事件，港人李嘉诚等呼吁理性表达，爱香港，拒绝暴力。<br><strong>2019.08.18</strong><br>    (1) 中共中央支持深圳建立社会主义先行示范区。<br><strong>2019.08.26</strong><br>    (1) Linux内核发布28周年，总内核树260万行代码；Linux已统治全部Top500超级计算机，绝大部分云计算并衍生出安卓。<br><strong>2019.08.29</strong><br>    (1) 微软向Linux内核提供exFAT支持。<br><strong>2019.08.30</strong><br>    (1) 温州乐清”滴滴顺丰车杀人”司机被执行死刑，立即执行。<br><strong>2019.08.31</strong><br>    (1) AI换脸软件ZAO一夜爆火，个人隐私引发舆论。<br>    (2) 华为设立新网站，开源鸿蒙系统和方舟编译器等重要工具，软件。<br><strong>2019.09.03</strong><br>    (1) 谷歌释出Android10正式版操作系统。<br>    (2) 部分学校在课堂推行人脸识别，引发争议。<br><strong>2019.09.05</strong><br>    (1) 2022年卡塔尔世界杯会徽发布。<br><strong>2019.09.08</strong><br>    (1) 中国男篮对局失利，错失奥运入场券。<br>    (2) 清华大学教授，密码学家王小云(女)获未来科学大奖，奖金100万美元。<br><strong>2019.09.10</strong> (教师节)<br>    (1) 谷歌开发者大会今在上海召开。<br>    (2) 马云遵循2018年9月10日的决定如期卸任，挥泪现场，告别阿里。<br><strong>2019.09.11</strong><br>    (1) 苹果发布iPhone11等新产品，价格全面下调。<br>    (2) 联通和电信确认双方共建共享5G网络基础设施。<br><strong>2019.09.17</strong><br>    (1) 2022冬奥会和残奥会吉祥物发布。<br>    (2) 国家邮政总局：中国快递包裹总量已超美，日，欧总和。<br><strong>2019.09.18</strong><br>    (1) 华为全连接大会今在上海召开，发布多款产品，助力中国智造。<br><strong>2019.09.23</strong><br>    (1) 阿里巴巴蚂蚁森林获联合国“地球卫士奖”。<br><strong>2019.09.24</strong><br>    (1) 中国贵州FAST天眼向全球开发。<br><strong>2019.09.25</strong><br>    (1) 北京大兴国际机场投入使用，习出席并致辞。<br><strong>2019.09.28</strong><br>    (1) 中国女排取得十连胜，提取锁定冠军献礼国庆。<br><strong>2019.09.29</strong><br>    (1) 共和国勋章和国家荣誉称号奖章颁奖大会在京举行，袁隆平和屠呦呦等获奖。<br><strong>2019.10.01</strong><br>    (1) 共和国年届古稀，今举行盛大阅兵，群众游行及烟花晚会。<br>    (2) 阿里巴巴集团蚂蚁金服自研的OceanBase数据库登顶世界第一。<br><strong>2019.10.04</strong><br>    (1) 为应对香港乱局，港府宣布实施《禁止蒙面规例》。<br><strong>2019.10.06</strong><br>    (1) 美休斯顿火箭俱乐部总经理公开发表涉港不当言论，中国篮协暂停与之交流合作。<br><strong>2019.10.07</strong><br>    (1) 年度诺奖陆续公布，2019诺贝尔生理学或医学奖颁给细胞缺氧适应性机制研究。<br><strong>2019.10.08</strong><br>    (1) 美商务部将包括旷视科技在内的28家中国科技公司或组织加入实体清单。<br><strong>2019.10.10</strong><br>    (1) 江苏无锡312国道K135处跨桥侧翻，多辆车被碾压，造成3死2伤。<br><strong>2019.10.14</strong><br>    (1) 云贵川部分地区微信和QQ遭封号，涉国家严厉打击电信诈骗案。<br><strong>2019.10.15</strong><br>    (1) 统计局公布，9月CPI猛增为3%，猪价上涨成重要推手。<br><strong>2019.10.18</strong><br>    (1) 军运会今在武汉开幕。<br>    (2) 人造肉饼今天首次上市，价格是猪肉六倍。<br><strong>2019.10.22</strong><br>    (1) 2024年巴黎奥运会和残奥会会徽发布。<br>    (2) 袁隆平主导的第三代杂交水稻首次专家测产，亩产突破1046.3公斤。<br><strong>2019.10.23</strong><br>    (1) 华为发布Mate30 5G双模全网通智能手机和折叠屏智能手机。<br>    (2) 谷歌量子验证登顶Nature150周年纪念刊，谷歌CEO发文祝贺。<br>    (3) UNIX系统诞生50周年，催生C语言和互联网，并衍生出Linux系统，苹果系统和安卓系统。<br><strong>2019.10.24</strong><br>    (1) 程序员开发者节日，讯飞召开1024开发者大会。<br>    (2) 中共中央政治局集中讨论学习区块链技术，布局区块链技术。<br><strong>2019.10.25</strong><br>    (1) 英国一货车内发现39具尸体，警方称不能证明都是中国公民。<br><strong>2019.10.30</strong><br>    (1) 华为HR胡玲实名内网反映公司问题。<br><strong>2019.10.31</strong><br>    (1) 移动联通电信和铁塔四家运营商牵头，中国正式开启5G商用。<br><strong>2019.11.01</strong><br>    (1) 十九届四中全会公报刊发，要求全面实现国家治理体系现代化。<br><strong>2019.11.03</strong><br>    (1) 桂林航空某女乘客被爆进入飞机驾驶室，机长终身禁飞。<br><strong>2019.11.04</strong><br>    (1) 旅行者2号发回飞出太阳系穿越星际空间的首批数据。<br>    (2) 顶级期刊自然(Nature 1869~2019)创刊150年，官网发文回忆历史。<br><strong>2019.11.05</strong><br>    (1) 第二届国际进口博览会开幕，习致辞。<br><strong>2019.11.07</strong><br>    (1) 中国成立6G技术研发推进工作组和总体专家组，正式开启6G研究。<br><strong>2019.11.09</strong><br>    (1) 王思聪被限制高消费，王家奉行的远政治，亲政府似乎不奏效。<br><strong>2019.11.11</strong><br>    (1) 双十一天猫全天交易额达2684亿，消费额各省排名：广东、浙江、江苏、上海、山东、北京、四川、河南、福建、湖北。<br><strong>2019.11.13</strong><br>    (1) 北京确诊两例鼠疫。<br>    (2) 香港教育局宣布全港停课。<br><strong>2019.11.17</strong><br>    (1) 45岁林志玲与日本男星AKIRA(黑泽良平)在台南举行婚礼。<br><strong>2019.11.20</strong><br>    (1) 香港理工大学闹剧结束，校园满目疮痍。<br>    (2) 湖南未成年少女被强奸，6人被批捕，含公职人员。<br><strong>2019.11.21</strong><br>    (1) 某医生万米高空为乘客吸出800毫升尿液。<br>    (2) 国务院办公厅公布2020年节假日安排：春节7天，国庆中秋共8天。<br><strong>2019.11.22</strong><br>    (1) 王思聪名下房产，汽车，存款被查封。<br><strong>2019.11.25</strong><br>    (1) 就近期公司暴力裁员事件，网易做出道歉声明。<br>    (2) 全球IPv4地址分配完毕，IPv6即将投入大规模使用。<br><strong>2019.11.27</strong><br>    (1) 微软推出玻璃硬盘，理论上可保存千年。<br>    (2) 浙江卫视录制节目过程中，某明星猝死，年仅35岁，引发一轮声讨。<br><strong>2019.12.01</strong><br>    (1) 华为孟晚舟被加拿大政府拘押一年。<br>    (2) 广州突发地陷，3人失联，前有苏州桥塌，后有羊城地陷。<br><strong>2019.12.02</strong><br>    (1) 联合国气候大会召开。<br>    (2) 华为就被羁押251天释放的前员工维权事件作出回应：支持当事人运用法律。<br><strong>2019.12.03</strong><br>    (1) 贺建奎“基因编辑婴儿”论文曝光。<br><strong>2019.12.05</strong><br>    (1) 条形码发明人乔治·劳雷尔去世，享年94岁。<br><strong>2019.12.06</strong><br>    (1) 上海财经大学会计学院某研究生公开发文举报学院副教授对其进行性骚扰。<br><strong>2019.12.10</strong><br>    (1) 世界反兴奋剂执委会宣布俄罗斯被禁止参加国际赛事四年，普京强硬回应。<br><strong>2019.12.14</strong><br>    (1) 中兴，深度(deepin)联合推出的国产操作系统UOS(统一操作系统)释出，<br><strong>2019.12.16</strong><br>    (1) Nature杂志公布年度照片：黑洞发现。<br><strong>2019.12.17</strong><br>    (1) 国产航母山东舰交付使用，习出席交接入列仪式。<br><strong>2019.12.18</strong><br>    (1) 关于李子柒视频是否文化输出，国内开启大讨论。<br><strong>2019.12.19</strong><br>    (1) 网络热播剧《庆余年》无广告版(盗版)全集泄出。<br><strong>2019.12.20</strong><br>    (1) 澳门回归20周年纪念日，习出席。<br><strong>2019.12.21</strong><br>    (1) 北大苏剑：“中国人口从去年开始就在负增长，劳动力2022年后每年减少1000万”。<br><strong>2019.12.23</strong><br>    (1) 俄罗斯在测试中成功断开同国际互联网的连接。<br><strong>2019.12.25</strong><br>    (1) 民航总医院急诊科副主任医师在就诊过程中遭病患家属伤害，今晨逝世。<br><strong>2019.12.27</strong><br>    (1) 长征五号火箭“胖五”发射成功。<br><strong>2019.12.30</strong><br>    (1) 基因编辑婴儿事件主导者贺建奎被判刑三年，罚款三百万元。<br><strong>2019.12.31</strong><br>    (1) 习发表新年贺词：不负韶华，共同迎接2020！</p>
<p><a id="download" href="https://gitee.com/QMHTMY/share/blob/master/2019events.pdf" target="_blank" rel="noopener"><i class="fa fa-download"></i><span>下载年度报告</span></a></p>
]]></content>
      <categories>
        <category>年度新闻</category>
      </categories>
  </entry>
  <entry>
    <title>每日PS技巧15：图片移植拼接</title>
    <url>/title/cbd7f6be/</url>
    <content><![CDATA[<p><img src="https://s2.ax1x.com/2019/12/30/lMaD10.md.png" alt="PS15_1"></p>
<a id="more"></a>

<p>将人物身体部位结合到水果上可以给植物赋予生命力，创造出各种好玩儿有趣的图片效果。本次学习制作封面图的方法，一旦学会，以后就能随意组合。</p>
<h2 id="今日技巧-图片移植拼接"><a href="#今日技巧-图片移植拼接" class="headerlink" title="今日技巧 [图片移植拼接]"></a>今日技巧 [图片移植拼接]</h2><p>主要步骤：  </p>
<p>1) 打开两幅图片素材<br>2) 调整大小，使得图位置合适<br>3) 利用工具提取嘴唇或其他部位<br>4) 调整提取部位的色相，使相宜<br>5) 保存图片并输出</p>
<p>首先导入两幅图片素材，调整人体嘴唇到合适位置。</p>
<p><img src="https://s2.ax1x.com/2019/12/30/lMdeg0.md.png" alt="PS15_2"></p>
<p><img src="https://s2.ax1x.com/2019/12/30/lMdtv6.md.png" alt="PS15_3"></p>
<p>利用工具(锁套，钢笔等)建立选区，这里我用的钢笔，主要我的这个PS是精简版，锁套不能用。</p>
<p><img src="https://s2.ax1x.com/2019/12/30/lMdsPA.md.png" alt="PS15_4"></p>
<p>建立选区后复制到新图层，这样得到一个干净的嘴唇。上面的图层我打开了调整图层，所以显得更亮，其实应该最后一步处理的。我先关闭，看看原图的色彩。</p>
<p><img src="https://s2.ax1x.com/2019/12/30/lMwhy6.md.png" alt="PS15_5"></p>
<p>现在再创建口腔内部的选区，并Ctrl+Shift+I反向(相当于选择嘴唇)，Ctrl+U打开色相调节器。</p>
<p><img src="https://s2.ax1x.com/2019/12/30/lMwj6P.md.png" alt="PS15_6"></p>
<p>下面是调节好的图片，大概颜色就这样。</p>
<p><img src="https://s2.ax1x.com/2019/12/30/lMdcxP.md.png" alt="PS15_7"></p>
<p>此时合并背景图层和嘴唇图层(Ctrl+E)为一个图层，复制该合成图层，在复制的图层上选择滤镜&gt;其他&gt;高反差保留，半径为3左右，模式设置为柔光。创建色阶，色相饱和图，色彩平衡调整图层，对图像进行调节。下图是调节过的图，明显好看多了。</p>
<p><img src="https://s2.ax1x.com/2019/12/30/lM0rct.md.png" alt="PS15_8"></p>
<p>最后附上原图和效果图，原图：2019.12.30 Bing搜索图片。</p>
<p><img src="https://s2.ax1x.com/2019/12/30/lMBPHO.md.png" alt="PS15_9"></p>
<p><img src="https://s2.ax1x.com/2019/12/30/lM0cB8.md.png" alt="PS15_10"></p>
<p><img src="https://s2.ax1x.com/2019/12/30/lMaD10.md.png" alt="PS15_11"></p>
<p>苹果，梨等等水果都可以使用，各种组合，变化多端。</p>
]]></content>
      <categories>
        <category>设计</category>
      </categories>
      <tags>
        <tag>PS</tag>
      </tags>
  </entry>
  <entry>
    <title>《庆余年》</title>
    <url>/title/2622ee51/</url>
    <content><![CDATA[<p><img src="https://s2.ax1x.com/2019/12/28/lmaX7R.md.jpg" alt="cover"></p>
<a id="more"></a>

<p>《庆余年》这部剧可能是2019年我看的最后一部剧，写的所谓的点评(吐槽)吧！先抛观点：这部剧可以，演员阵容强大，演技好，陈道明出场自带帝王气，达康书记再次扮演狠角色，总体来看，故事好，演员好，剪辑也好，特此推荐给读者。</p>
<h2 id="穿越还是科幻？"><a href="#穿越还是科幻？" class="headerlink" title="穿越还是科幻？"></a>穿越还是科幻？</h2><p>目前，广电总局对穿越剧亮红灯，所以剧情开始是现代，然后全是回忆，或说讲述了一段故事，中间加了点现代的理念进去，但除了第一个镜头和最后的word文字镜头外，中间没有任何现代镜头。所以，很难说他是穿越剧还是古装剧，好在过审了。</p>
<h2 id="故事矛盾"><a href="#故事矛盾" class="headerlink" title="故事矛盾"></a>故事矛盾</h2><p>故事从腾梓荆刺杀范闲开始，以二人前往京都为铺垫，腾梓荆被程巨树杀死后众人的冷漠为高潮，展开了一个宏大的场面。<br>核心矛盾(此矛盾乃推动事物发展的矛盾，马克思基本矛盾观)是“护卫是人，不是下人，人人平等”，范闲到监察院查看母亲叶轻眉留下的立院宗旨更强化这一矛盾。接着，范大人这位拥有人人平等思想的社会好青年将这一理念作为个人奋斗目标，不断同各路人马斗争，进而不断推动故事往纵深发展。</p>
<h2 id="主人公"><a href="#主人公" class="headerlink" title="主人公"></a>主人公</h2><p>本剧主人公并非一位而是大众主角，各位配角都表现得挺好，许多人出场挺晚，但人物形象仍然很丰富，比如达康书记演狠角色就很出彩，五竹叔牛逼，机器人，战斗力暴表。出场最多的男主角自是范闲，二号是王启年，爱钱，大忽悠。主人公范闲为义以身范险，老伙计王启年为财倚身范闲。女主该是林婉儿(鸡腿姑娘，其实这是鸭腿)，其母亲(长公主，脸白得奇怪)出场也不少，还有司理理也是，海棠圣女最后出场，我弟的义母和海棠就很像，感觉就是其本人年轻时候。估计这几位年轻一辈的女的都喜欢范大人，看后面剧情发展吧。</p>
<p><img src="https://s2.ax1x.com/2019/12/30/lMrkpd.md.png" alt="qyn10"></p>
<h2 id="经典场面"><a href="#经典场面" class="headerlink" title="经典场面"></a>经典场面</h2><p>剧中有很多经典场面，最开始范大人轻声细语叫下人走，然而下人齐跪，生怕范闲不要他们。范闲不得不大声呵斥，只有拿出对待奴才的态度下人们才懂了。给下人讲什么人人平等他们是不懂的。被骂后，奴才一句”这就舒服多了，刚才大人说的什么人人平等我听不懂”更突出矛盾，封建社会的人是不平等的，给其尊严反而不要。我想起鲁迅一句话：有的人，对其好了，他觉你是坏人；对其不好，得其反到觉得你是好人。所以，不要对人太好，有的人就是贱呀！被男人欺负了还舍不得分手的女人是不是这种？斯德哥尔摩症患者是不是这种？</p>
<p>圣女海棠和范闲谈论朋友，个人孤独的场景也很经典。</p>
<p><img src="https://s2.ax1x.com/2019/12/28/lmBhKU.md.png" alt="qyn1"></p>
<p>我们生活在尘世，但又有几个知心朋友呢？遇到困难和苦恼有人倾诉吗？我们内心的孤独和痛苦能否有人帮助排解？我们自己又有真心去对待或者说发展一个朋友吗？我看很多人没有真心朋友，反倒有了一堆酒肉朋友，一堆臭味相投的狐朋狗友。读者不妨自我心中盘算一番，你倒霉了，真有谁会帮助你吗？有能为你考虑的朋友吗？我认为朋友不在多，而在精，一个良友胜过千个普通人。找朋友，我从不找和我有太多相同志趣者，因为拥有相同的志趣就会引发争执，甚至仇恨。找一个不如我的人作朋友，我看其缺点以反省自身；找一个比我强的人，我学其优点和精神。实际上，我认识的朋友都和我喜好不同，他们擅长篮球，我擅长电脑；他们喜欢金融，我喜欢文字。聚在一起，一个人讲一点儿，互相补充知识。当然，这种模式，要双方愿意了解新知识，大度，开放，不拒绝自己不了解的东西。</p>
<p>评价王启年的场面也很有深意。</p>
<p><img src="https://s2.ax1x.com/2019/12/28/lmrZSx.md.png" alt="qyn2"></p>
<p><img src="https://s2.ax1x.com/2019/12/28/lmr1kd.md.png" alt="qyn3"></p>
<p>活得真实，就是自然。缺点暴露无遗，优点也一览无余。这才是做人嘛，何必活得那么累呢？带上面具固然维持暂得的安稳和体面，但是被揭开时，怕是要暴露最大的丑陋。怕老婆，爱女儿，最是自然，尤其四川耙耳朵。要杜绝的是不怕老婆，不爱女儿，成天在外鬼混，这就不好了。</p>
<p><img src="https://s2.ax1x.com/2019/12/28/lmsVEQ.md.png" alt="qyn4"></p>
<p><img src="https://s2.ax1x.com/2019/12/28/lmsY59.md.png" alt="qyn5"></p>
<p>背诗(不对，作诗)场面我猜到了，预感到会用现代人总结的几千年中华民族的诗歌去虐庄墨韩。背诗百余首，演员下了苦功夫的，看了花絮，范闲拍戏时真背下来的，比小仙肉们只会张嘴强何止百倍？</p>
<h2 id="搞笑场面"><a href="#搞笑场面" class="headerlink" title="搞笑场面"></a>搞笑场面</h2><p>王启年吃马粪的场面，司理理被脱光包扎伤口的场面，还有很多吧！外交谈判成了吵架！</p>
<p><img src="https://s2.ax1x.com/2019/12/28/lm6elq.md.png" alt="qyn6"></p>
<p><img src="https://s2.ax1x.com/2019/12/28/lm68h9.md.png" alt="qyn7"></p>
<p><img src="https://s2.ax1x.com/2019/12/28/lm6Y11.md.png" alt="qyn8"></p>
<h2 id="其他废话"><a href="#其他废话" class="headerlink" title="其他废话"></a>其他废话</h2><p>电视剧情可以，然而VVIP不行，腾讯等平台吃相难看，逼着正版用户去看盗版。最后说一句，范闲母亲叶轻眉和沈重妹妹(钟情言冰云)应该是同一个演员，各位可细细辨别。听说本剧一共三季，陈道明(陛下)已在催拍第二季，所以2020年下半年可能会看到第二季，期待吧！</p>
]]></content>
  </entry>
  <entry>
    <title>Pythonic的代码写法</title>
    <url>/title/5aa457d2/</url>
    <content><![CDATA[<p><img src="https://s2.ax1x.com/2019/12/23/lpZk36.md.png" alt="pythonic"></p>
<a id="more"></a>

<p>很多时候我们写的代码根本就不是代码，而是垃圾，尤其翻看自己以前写的东西，感觉就是一推垃圾，恨不得一删了之。每一门编程语言都有自己最为合适的写法，Python也不例外。</p>
<p><strong>变量交换</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">在C语言中是</span><br><span class="line">int tmp;</span><br><span class="line">tmp = a;</span><br><span class="line">a   = b;</span><br><span class="line">b   = tmp;</span><br><span class="line"></span><br><span class="line">python中不需要tmp，而是一步到位</span><br><span class="line">a, b = b, a </span><br><span class="line">这里最难理解的是，b赋值给a了，为何a又能复制给b？实际上，=号右边的b,a被提取出来了，应该在CPU寄存器中。</span><br></pre></td></tr></table></figure>

<p><strong>比较元素并赋值</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a , b, c = 1, 2, 0 #令c等于a,b中更大的那个</span><br><span class="line">第一种写法</span><br><span class="line">if a &gt; b:</span><br><span class="line">    c = a</span><br><span class="line">else:</span><br><span class="line">    c = b</span><br><span class="line"></span><br><span class="line">第二种写法</span><br><span class="line">c = a if a &gt; b else b</span><br><span class="line"></span><br><span class="line">第三种写法</span><br><span class="line">c = [b, a][a &gt; b]  #利用a &gt; b返回的True(1)或False(0)作下标提取[b, a]列表里的值</span><br><span class="line"></span><br><span class="line">第四种写法</span><br><span class="line">c = (a &gt; b and [a] or [b])[0]</span><br><span class="line">c = a &gt; b and a or b #精简版 and与or间无括号区分时，优先级: and&gt; not &gt; or</span><br><span class="line"></span><br><span class="line">Python的and or 是返回符合条件对应的值本身，而不只是True或False</span><br><span class="line">例如:</span><br><span class="line">2 and 3 -&gt; 3，2为真，则返回后一个的值3</span><br><span class="line">2 and False -&gt; False，2为真，则返回后一个的值False</span><br><span class="line">0 and False -&gt; 0，0为假，则返回前一个的值0</span><br><span class="line">2 or 3 -&gt; 2, 2为真，则返回前一个的值2</span><br><span class="line">0 or 3 -&gt; 3, 0为假，则返回后一个的值3</span><br><span class="line">2 &lt; 3 and 3 &lt; 1 -&gt; 3 &lt; 4 -&gt; False，2&lt;3为真，此时返回后一个值3&lt;1，再判断为False</span><br><span class="line"></span><br><span class="line">0和False，1和True是不同的，只是if把它当作条件判断时，采取一样的操作，但其本质各自不同，只有not才是真正返回布尔值。</span><br></pre></td></tr></table></figure>

<p><strong>循环区间元素</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">python2中</span><br><span class="line">for i in range(1,100000,2):</span><br><span class="line">	print(i) #先由range生成列表，占用内存500000个内存位置，浪费空间</span><br><span class="line"></span><br><span class="line">for i in xrange(1,100000,2):</span><br><span class="line">	print(i) #返回一个生成器，每次调用时才输出一个数，实际就是利用一个函数，占用单位内存</span><br><span class="line"></span><br><span class="line">python3的range就是python2中的xrange实现，可直接用，换句话说该用python3。</span><br></pre></td></tr></table></figure>

<p><strong>索引</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">lst = [1,4,10,100,23]</span><br><span class="line">for i in range(len(lst)):</span><br><span class="line">	print(i,&apos;--&gt;&apos;,lst[i])   #调用len函数，又索引lst</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; for i,val in enumerate(lst):</span><br><span class="line">....    print(i,&apos;--&gt;&apos;,val)  #一次把元素的序号也给输出了，省得再写变量。</span><br><span class="line">....</span><br><span class="line">0, 1</span><br><span class="line">1, 4</span><br><span class="line">2, 10</span><br><span class="line">3, 100</span><br><span class="line">4, 23</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; for i,val in enumerate(lst,1):</span><br><span class="line">....  	print(i,&apos;--&gt;&apos;,val)    从1开始计数</span><br><span class="line">....  	</span><br><span class="line">1, 1</span><br><span class="line">2, 4</span><br><span class="line">3, 10</span><br><span class="line">4, 100</span><br><span class="line">5, 23</span><br></pre></td></tr></table></figure>

<p><strong>字符串拼接</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">string = &apos;I&apos;+&apos;Love&apos;+&apos;You&apos; 用加法，产生内存浪费</span><br><span class="line"></span><br><span class="line">string = &apos;&apos;.join([&apos;I&apos;,&apos;Love&apos;,&apos;You&apos;]) 用join直接生成字符串</span><br></pre></td></tr></table></figure>

<p><strong>字符串翻转</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; a = &apos;I love you&apos;</span><br><span class="line">低效率写法</span><br><span class="line">for i in range(len(a)):</span><br><span class="line">	reverse_a += a[len(a) -1 -i]</span><br><span class="line">&gt;&gt;&gt; reverse_a</span><br><span class="line">&apos;uoy evol i&apos;</span><br><span class="line"></span><br><span class="line">正确写法</span><br><span class="line">&gt;&gt;&gt; reverse_a = a[::-1]</span><br><span class="line">&gt;&gt;&gt; reverse_a</span><br><span class="line">&apos;uoy evol i&apos;</span><br></pre></td></tr></table></figure>

<p><strong>字符格式化输出</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; print(&quot;My name is %s&quot;%&apos;shieber&apos;) #老式用法</span><br><span class="line">My name is shieber</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; print(&quot;My name is &#123;&#125;&quot;.format(&apos;shieber&apos;)) #format格式化输出</span><br><span class="line">My name is shieber</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; print(&quot;My name is &#123;0&#125;&quot;.format(&apos;shieber&apos;)) #指定位置</span><br><span class="line">My name is shieber</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; print(&quot;My name is &#123;0&#125; and his name is &#123;1&#125;&quot;.format(&apos;shieber&apos;,&apos;tim&apos;)) #多个位置</span><br><span class="line">My name is shieber and his name is tim</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; print(&quot;My name is &#123;0&#125; and his name is &#123;0&#125;.&#123;1&#125;&quot;.format(&apos;shieber&apos;,&apos;tim&apos;)) #位置重复出现</span><br><span class="line">My name is shieber and his name is shieber.tim</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; print(&quot;网站名: &#123;name&#125;, 网址: &#123;url&#125;&quot;.format(name=&quot;Shieber&quot;,url=&quot;www.shieber.cn&quot;)) #指定键名</span><br><span class="line">网站名: Shieber, 网址: www.shieber.cn</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; site = &#123;&quot;name&quot;:&quot;Shieber&quot;,&apos;url&apos;:&quot;www.shieber.cn&quot;&#125;   </span><br><span class="line">&gt;&gt;&gt; print(&quot;网站名: &#123;name&#125;,网址: &#123;url&#125;&quot;.format(**site))  #使用字典</span><br><span class="line">网站名: Shieber, 网址: www.shieber.cn</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; site = [&quot;Shieber&quot;,&quot;www.shieber.cn&quot;] </span><br><span class="line">&gt;&gt;&gt; print(&quot;网站名:&#123;0[0]&#125;,网址:&#123;0[1]&#125;&quot;.format(site)) #使用列表</span><br><span class="line">网站名: Shieber, 网址: www.shieber.cn</span><br><span class="line"></span><br><span class="line">涉及字符输出的还可以用f&apos;&#123;name&#125;&apos;，就是字符串前加一个f或F</span><br><span class="line">&gt;&gt;&gt; site = [&quot;Shieber&quot;,&quot;www.shieber.cn&quot;] </span><br><span class="line">&gt;&gt;&gt; print(f&quot;网站名:&#123;site[0]&#125;,网址:&#123;site[1]&#125;&quot;) #使用列表</span><br><span class="line">网站名: Shieber, 网址: www.shieber.cn</span><br><span class="line">&gt;&gt;&gt; </span><br><span class="line">&gt;&gt;&gt; print(F&quot;网站名:&#123;site[0]&#125;,网址:&#123;site[1]&#125;&quot;) </span><br><span class="line">网站名: Shieber, 网址: www.shieber.cn</span><br><span class="line">&gt;&gt;&gt; </span><br><span class="line">&gt;&gt;&gt; string = F&quot;网站名:&#123;site[0]&#125;,网址:&#123;site[1]&#125;&quot;</span><br><span class="line">&gt;&gt;&gt; print(string) </span><br><span class="line">网站名: Shieber, 网址: www.shieber.cn</span><br><span class="line"></span><br><span class="line">数字处理，格式挺多</span><br><span class="line">&gt;&gt;&gt; print(&quot;&#123;:.2f&#125;&quot;.format(3.141592653))</span><br><span class="line">3.14</span><br><span class="line">&gt;&gt;&gt; print(&quot;&#123;:+.2f&#125;&quot;.format(3.141592653))</span><br><span class="line">+3.14</span><br><span class="line">&gt;&gt;&gt; print(&quot;&#123;:.0f&#125;&quot;.format(2.718281823)) #自然数e</span><br><span class="line">3</span><br><span class="line">&gt;&gt;&gt; print(&quot;&#123;:0&gt;2d&#125;&quot;.format(3))) #用0补齐两位</span><br><span class="line">03</span><br><span class="line">&gt;&gt;&gt; print(&quot;&#123;:&gt;2d&#125;&quot;.format(3))) #右对齐两位</span><br><span class="line"> 3</span><br><span class="line">&gt;&gt;&gt; print(&quot;&#123;:a&lt;4d&#125;&quot;.format(3)) #用a补齐四位</span><br><span class="line">3aaa</span><br><span class="line">&gt;&gt;&gt; print(&quot;&#123;:&lt;4d&#125;&quot;.format(3)) #左对齐四位</span><br><span class="line">3</span><br><span class="line">&gt;&gt;&gt; print(&quot;&#123;:^8d&#125;&quot;.format(3)) #中间对齐8位</span><br><span class="line">   3</span><br><span class="line">&gt;&gt;&gt; print(&quot;&#123;:,&#125;&quot;.format(1000000)) </span><br><span class="line">1,000,000</span><br><span class="line">&gt;&gt;&gt; print(&quot;&#123;:.2%&#125;&quot;.format(0.18)) </span><br><span class="line">18%</span><br><span class="line">&gt;&gt;&gt; print(&quot;&#123;:.2e&#125;&quot;.format(1000000000)) #科学计数，两位小数</span><br><span class="line">1.00e+9</span><br><span class="line">&gt;&gt;&gt; print(&quot;&#123;:b&#125;&quot;.format(10)) #二进制 (b)inary</span><br><span class="line">1010</span><br><span class="line">&gt;&gt;&gt; print(&quot;&#123;:o&#125;&quot;.format(10)) #八进制 (o)ctal</span><br><span class="line">12</span><br><span class="line">&gt;&gt;&gt; print(&quot;&#123;:x&#125;&quot;.format(10)) #十六进制 (h)exadecimal</span><br><span class="line">a</span><br><span class="line">&gt;&gt;&gt; print(&quot;&#123;:#x&#125;&quot;.format(10)) #十六进制 加0x前缀</span><br><span class="line">0xa</span><br><span class="line">&gt;&gt;&gt; print(&quot;&#123;:#X&#125;&quot;.format(10)) #十六进制 加0X前缀，大写</span><br><span class="line">0XA</span><br></pre></td></tr></table></figure>

<p><strong>上下文管理</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">低效率的写法</span><br><span class="line">fobj = open(&apos;xxx.txt&apos;)</span><br><span class="line">try:</span><br><span class="line">	data = fobj.read()</span><br><span class="line">finaly:</span><br><span class="line">	fobj.close()</span><br><span class="line"></span><br><span class="line">合适的写法</span><br><span class="line">with open(&apos;xxx.txt&apos;) as fobj:</span><br><span class="line">	data = fobj.read()  #用with会自动关闭文件，代码量更少</span><br></pre></td></tr></table></figure>

<p><strong>列表操作</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">lst = [&apos;a&apos;,&apos;b&apos;,&apos;c&apos;,&apos;d&apos;]</span><br><span class="line">lst.pop()</span><br><span class="line">lst.pop(0)</span><br><span class="line">lst.insert(0,&apos;k&apos;)</span><br><span class="line">lst.append(&apos;g&apos;)</span><br><span class="line">大量的元素移动，效率低</span><br><span class="line"></span><br><span class="line">from collections import deque</span><br><span class="line">lst = deque([&apos;a&apos;,&apos;b&apos;,&apos;c&apos;,&apos;d&apos;])</span><br><span class="line">lst.popleft()</span><br><span class="line">lst.appendleft(&apos;k&apos;)</span><br><span class="line">lst.append(&apos;g&apos;)</span><br><span class="line">用队列处理，两头都可兼顾</span><br></pre></td></tr></table></figure>

<p><strong>词频统计</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; lst = [&apos;a&apos;,&apos;b&apos;,&apos;c&apos;,&apos;d&apos;,&apos;a&apos;,&apos;a&apos;,&apos;a&apos;,&apos;c&apos;,&apos;1&apos;,&apos;e&apos;,&apos;d&apos;,&apos;b&apos;]</span><br><span class="line">用自定义函数，代码太多</span><br><span class="line">def counterFre(wdlst):</span><br><span class="line">	wfd = &#123;&#125;</span><br><span class="line">	for wd in wdlst:</span><br><span class="line">		if wd in wfd:</span><br><span class="line">			wfd[wd]  += 1</span><br><span class="line">		else:</span><br><span class="line">			wfd[wd] = 1</span><br><span class="line">	return wfd</span><br><span class="line">&gt;&gt;&gt; wfd = counterFre(lst)</span><br><span class="line">&#123;&apos;a&apos;:4,&apos;b&apos;:2,&apos;c&apos;:2,&apos;d&apos;:2,&apos;e&apos;:1,&apos;1&apos;:1&#125;</span><br><span class="line"></span><br><span class="line">而用Counter一步到位</span><br><span class="line">&gt;&gt;&gt; from collections import Counter</span><br><span class="line">&gt;&gt;&gt; wfd = Counter(lst)</span><br><span class="line">&gt;&gt;&gt; wfd </span><br><span class="line">&#123;&apos;a&apos;:4,&apos;b&apos;:2,&apos;c&apos;:2,&apos;d&apos;:2,&apos;e&apos;:1,&apos;1&apos;:1&#125;</span><br></pre></td></tr></table></figure>

<p><strong>多个赋值</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt; a = 1</span><br><span class="line">&gt;&gt; b = 2</span><br><span class="line">&gt;&gt; c = 3</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; a,b,c = [1,2,3] #解包列表，一步到位</span><br><span class="line">&gt;&gt;&gt; a,b,c = (1,2,3) #解包元组，一步到位</span><br><span class="line">&gt;&gt;&gt; a,b,c = &#123;1,2,3&#125; #解包集合，一步到位</span><br><span class="line">&gt;&gt;&gt; a,b,c = &#123;&apos;a&apos;:1,&apos;b&apos;:2,&apos;c&apos;:3&#125;.values()  #解包集合，一步到位，若不加.values()则会将键解包给a,b,c</span><br></pre></td></tr></table></figure>

<p><strong>使用*和**构造参数为元组和字典</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def fun1(*args):</span><br><span class="line">	for arg in args:</span><br><span class="line">		print(&apos;argument: &apos;,arg)</span><br><span class="line">fun1(&apos;i&apos;,&apos;love&apos;,&apos;You&apos;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def fun2(*args, **kwargs):</span><br><span class="line">	for k,v in kwargs.items():</span><br><span class="line">		print(k,v)</span><br><span class="line">&gt;&gt;&gt; fun2(a=2,b=3,c=5)</span><br><span class="line">a 2</span><br><span class="line">b 3</span><br><span class="line">c 5</span><br></pre></td></tr></table></figure>

<p><strong>zip打包可迭代元素为元组</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; a = [1,2,3]</span><br><span class="line">&gt;&gt;&gt; b = [4,5,6]</span><br><span class="line"></span><br><span class="line">tupled = zip(a,b) #返回可迭代对象</span><br><span class="line">&gt;&gt;&gt; list(tupled)</span><br><span class="line">[(1,4),(2,5),(3,6)]</span><br><span class="line"></span><br><span class="line">l = [1,2,3,4,5,6,7,8,9,10]</span><br><span class="line">tupled = zip(l[:-1],l[1:])</span><br><span class="line">&gt;&gt;&gt; list(tupled)</span><br><span class="line">[(1,2),(2,3),(3,4),(4,5),(5,6),(6,7),(7,8),(8,9),(9,10)]</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; name = [&apos;shieber&apos;,&apos;kew&apos;,&apos;koi&apos;]</span><br><span class="line">&gt;&gt;&gt; for e in zip(*name):  </span><br><span class="line">...	print(e)</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">(&apos;s&apos;,&apos;k&apos;,&apos;k&apos;)</span><br><span class="line">(&apos;h&apos;,&apos;e&apos;,&apos;o&apos;)</span><br><span class="line">(&apos;i&apos;,&apos;w&apos;,&apos;i&apos;)</span><br><span class="line"></span><br><span class="line">#此处zip(*name)将name解包成&apos;shieber&apos;,&apos;kew&apos;,&apos;koi&apos;三个参数，相当于zip(&apos;shieber&apos;,&apos;kew&apos;,&apos;koi&apos;)，  </span><br><span class="line">#每个字符串又是可迭代对象，每个字符就是迭代出来的东西。迭代次数为最短字符串长度。所以是三次，且为字符组合成元组。</span><br></pre></td></tr></table></figure>

<p><strong>解构赋值</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a,*mid,b = [1,2,3,4,5]</span><br><span class="line">&gt;&gt;&gt; a</span><br><span class="line">1</span><br><span class="line">&gt;&gt;&gt; b</span><br><span class="line">5</span><br><span class="line">&gt;&gt;&gt; mid </span><br><span class="line">[2,3,4]</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; man = [[&apos;Shieber&apos;,(18,18,180)],[&apos;Kew&apos;,(19,19,190)]]</span><br><span class="line">&gt;&gt;&gt; for name, (f,s,t) in man:</span><br><span class="line">	    print(name, f,s,t) </span><br><span class="line">...</span><br><span class="line">&apos;Shieber&apos;, 18, 18, 180   </span><br><span class="line">&apos;Kew&apos;, 19, 19, 190   </span><br><span class="line">&gt;&gt;&gt; </span><br><span class="line">其实name, (f,s,t)就是对man内部列表元素的映射，模式一样的，所以解析出来了</span><br><span class="line">为了更好的符合内部列表的模式，还可以加上[]，如下</span><br><span class="line">&gt;&gt;&gt; for [name, (f,s,t)] in man:</span><br><span class="line">	    print(name, f,s,t) </span><br><span class="line">...</span><br><span class="line">&apos;Shieber&apos;, 18, 18, 180   </span><br><span class="line">&apos;Kew&apos;, 19, 19, 190   </span><br><span class="line">&gt;&gt;&gt; </span><br><span class="line">[name, (f,s,t)]模式和man内部列表模式一样。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">women = &#123; &apos;name&apos;: &apos;yu&apos;, &apos;age&apos;:24,&apos;height&apos;:172 &#125;</span><br><span class="line">for k,v in women.items():</span><br><span class="line">	print(k,&apos;--&gt;&apos;,v)</span><br></pre></td></tr></table></figure>

<p><strong>推导</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">列表推导</span><br><span class="line">even = [i for i in range(1,100) if i % 2 == 0] #1-100内的偶数和奇数</span><br><span class="line">odd  = [i for i in range(1,100) if i % 2 == 1]</span><br><span class="line"></span><br><span class="line">愚蠢写法</span><br><span class="line">even, odd  = [], []</span><br><span class="line">for i in range(1,100):</span><br><span class="line">	if i % 2 == 0:</span><br><span class="line">		even.append(i)</span><br><span class="line">	else:</span><br><span class="line">		odd.append(i)</span><br><span class="line"></span><br><span class="line">even = [i for i in range(1,100) if i % 2 == 0] 列表推导 占用很多内存空间</span><br><span class="line">even = (i for i in range(1,100) if i % 2 == 0) 元组推导 只占一个内存空间</span><br><span class="line"></span><br><span class="line">元组推导 </span><br><span class="line">&gt;&gt;&gt;temp = (x**2 for x in range(10) if x % 2 == 0)</span><br><span class="line">&gt;&gt;&gt;tuple(temp)</span><br><span class="line">(0, 4, 16, 36, 64)</span><br><span class="line"></span><br><span class="line">集合推导 </span><br><span class="line">&gt;&gt;&gt;&#123;x**2 for x in range(10) if x % 2 == 0&#125;</span><br><span class="line">&#123;0, 64, 4, 36, 16&#125;</span><br><span class="line"></span><br><span class="line">字典推导 </span><br><span class="line">&gt;&gt;&gt;&#123;&apos;s&apos; + str(x): x**2 for x in range(10) if x % 2 == 0&#125;</span><br><span class="line">&#123;&apos;s0&apos;:0, &apos;s2&apos;:4, &apos;s4&apos;:16, &apos;s6&apos;:36, &apos;s8&apos;: 64&#125;</span><br></pre></td></tr></table></figure>

<p><strong>三目运算</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; a = 1</span><br><span class="line">&gt;&gt;&gt; res = &apos;Good&apos; if 1 == a else &apos;Bad&apos;</span><br><span class="line">&gt;&gt;&gt; res</span><br><span class="line">&apos;Good&apos;</span><br><span class="line"></span><br><span class="line">它等于</span><br><span class="line">if 1 == a:</span><br><span class="line">	res = &apos;Good&apos;</span><br><span class="line">else:</span><br><span class="line">	res = &apos;Bad&apos;</span><br></pre></td></tr></table></figure>

<p><strong>生成器</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def fib(max):</span><br><span class="line">	#菲波那契数列，列表</span><br><span class="line">	n, a, b = 0, 0, 1</span><br><span class="line">	fibonacci = []</span><br><span class="line">	while n &lt; max:</span><br><span class="line">		fibonacci.append(b)</span><br><span class="line">		a, b = b, a+b</span><br><span class="line">		n += 1</span><br><span class="line"></span><br><span class="line">def fib(max):</span><br><span class="line">	#菲波那契数列，生成器</span><br><span class="line">	n, a, b = 0, 0, 1</span><br><span class="line">	while n &lt; max:</span><br><span class="line">		yield b</span><br><span class="line">		a, b = b, a+b</span><br><span class="line">		n += 1</span><br><span class="line"></span><br><span class="line">当然，还可以对该函数优化，减少一个变量n</span><br><span class="line">def fib(max):</span><br><span class="line">	a, b = 0, 1</span><br><span class="line">	while 0 &lt; max:</span><br><span class="line">		yield b</span><br><span class="line">		a, b = b, a+b</span><br><span class="line">		max -= 1</span><br><span class="line">&gt;&gt;&gt; t = fib(3)</span><br><span class="line">&gt;&gt;&gt; next(t) #使用next()函数查看下一个</span><br><span class="line">1</span><br><span class="line">&gt;&gt;&gt; next(t) </span><br><span class="line">1</span><br><span class="line">&gt;&gt;&gt; next(t) </span><br><span class="line">3</span><br></pre></td></tr></table></figure>

<p><strong>逻辑等</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">if 0 == a:</span><br><span class="line">	do1()</span><br><span class="line">else:</span><br><span class="line">	do2()</span><br><span class="line"></span><br><span class="line">不要写成</span><br><span class="line">if a == 0:</span><br><span class="line">	do1()</span><br><span class="line">else:</span><br><span class="line">	do2()</span><br><span class="line">因为你手抖写成a=0了，do2()总是运行，代码没错，而逻辑错了，写成0=a时立刻会报错</span><br><span class="line">此写法源于c中推荐的写法，当然也有人有不同意见。</span><br></pre></td></tr></table></figure>

<p><strong>判断元素是否为空</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a = []</span><br><span class="line">第一种</span><br><span class="line">if a:</span><br><span class="line">    do1()</span><br><span class="line">else:</span><br><span class="line">    do2()</span><br><span class="line"></span><br><span class="line">第二种</span><br><span class="line">if 0 == len(a):</span><br><span class="line">    do2()</span><br><span class="line">else:</span><br><span class="line">    do1()  #注意do1()和do2()顺序不一样</span><br><span class="line"></span><br><span class="line">第三种</span><br><span class="line">if 0 == a.__len__(): #使用魔法函数</span><br><span class="line">    do2()</span><br><span class="line">else:</span><br><span class="line">    do1()</span><br></pre></td></tr></table></figure>

<p><strong>简单的数学运算和比较</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a = a + 2 </span><br><span class="line">a += 2 #此写法简洁一些</span><br><span class="line"></span><br><span class="line">同理还有</span><br><span class="line">a -= 2 等于 a = a - 2</span><br><span class="line">a *= 2 等于 a = a * 2</span><br><span class="line">a /= 2 等于 a = a / 2</span><br><span class="line">a %= 2 等于 a = a % 2</span><br><span class="line">a &lt;&lt;= 2 等于 a = a &lt;&lt; 2 移位操作，相当于乘以4</span><br><span class="line">a &gt;&gt;= 2 等于 a = a &gt;&gt; 2 移位操作，相当于除以4</span><br><span class="line"></span><br><span class="line">1&lt; a and a &lt; 10 比较(C语言中的写法)</span><br><span class="line">1 &lt; a &lt; 10 此法甚妙</span><br></pre></td></tr></table></figure>

<p><strong>移位运算符</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">凡是除以和乘以2的倍数的，都用移位运算</span><br><span class="line">b = a / 2 可以写成 a &gt;&gt; 1</span><br><span class="line">b = a / 4 可以写成 a &gt;&gt; 2</span><br><span class="line">b = a / 8 可以写成 a &gt;&gt; 3</span><br><span class="line">b = a * 2 可以写成 a &lt;&lt; 1</span><br><span class="line">b = a * 4 可以写成 a &lt;&lt; 2</span><br><span class="line">b = a * 8 可以写成 a &lt;&lt; 3</span><br><span class="line"></span><br><span class="line">当然，也可保留乘除法，方便理解。但高效代码就须用移位，移位利用 cpu寄存器直接操作。</span><br><span class="line">/和*运算大概要4单位cpu时间(大概2纳秒，各cpu不同)，而&gt;&gt;和&lt;&lt;只要1单位时间(0.5纳秒)，</span><br><span class="line">想想你有1万亿次运算(很多数学运算都超过1万亿次，尤其科研项目跑几个月的)，</span><br><span class="line">那么用/和*会消耗2000秒(33.33分钟)，而移位消耗(8分钟)。看起来不大，</span><br><span class="line">但是如果是科研项目，要跑很多遍那种，那么最后*/写法就会多跑上月的时间，</span><br><span class="line">想想吧，几个月时间，孩子都该出生了。</span><br></pre></td></tr></table></figure>

<p><strong>lambda函数</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def f(x):</span><br><span class="line">	return x**2 + 3</span><br><span class="line">&gt;&gt;&gt; list(map(f, [1,2,3,4,5,6,7,8]))</span><br><span class="line">[1,4,9,16,25,36,49,64]</span><br><span class="line"></span><br><span class="line">正确写法，一行搞定</span><br><span class="line">&gt;&gt;&gt; list(map(lambda x: x**2 + 3, [1,2,3,4,5,6,7,8]))</span><br><span class="line">[1,4,9,16,25,36,49,64]</span><br></pre></td></tr></table></figure>

<p><strong>filter,map,reduce, apply函数的使用</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">filter 过滤掉不符合要求的元素 filter(function, sequence)</span><br><span class="line">&gt;&gt;&gt; L = [1,2,3,4,5,6,7,8]</span><br><span class="line">&gt;&gt;&gt; list(filter(lambda x: x%2==0, L)) #x就指代L中的每一个元素</span><br><span class="line">[2,4,6,8]</span><br><span class="line"></span><br><span class="line">map 对若干个序列进行联合操作  map(function, sequence(s))</span><br><span class="line">&gt;&gt;&gt; L1 = [1,2,3,4,5]</span><br><span class="line">&gt;&gt;&gt; L2 = [2,3,4,5,6]</span><br><span class="line">&gt;&gt;&gt; list(map(lambda x,y: (x+y),L1,L2)) #x来自于L1,y来自于L2 长度不一时，参照最短执行</span><br><span class="line">[3,5,7,9,11]</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; L = [1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1] 求L中最长1子串长度，此处最长为1,1,1，长度3</span><br><span class="line">&gt;&gt;&gt; max(map(lambda x: len(x), bytearray(L).split(b&apos;\x00&apos;)))</span><br><span class="line">3</span><br><span class="line"></span><br><span class="line">reduce 对序列进行压缩，归并为一个值 reduce(function, sequence)</span><br><span class="line">&gt;&gt;&gt; from functools import reduce</span><br><span class="line">&gt;&gt;&gt; L = [1,2,3,4,5]</span><br><span class="line">&gt;&gt;&gt; list(reduce(lambda x,y: x+y, L)) #x和y都来自于L，但按照顺序依次取出，类似x = x+y，y再从L取</span><br><span class="line">[15]</span><br><span class="line"></span><br><span class="line">apply是pandas中内置函数，对DataFrame和Series数据进行处理 apply(function, axis)</span><br><span class="line">&gt;&gt;&gt; import numpy as np</span><br><span class="line">&gt;&gt;&gt; import pandas as pd</span><br><span class="line">&gt;&gt;&gt; a = np.random.randint(low=1,high=5,size=(3,3))</span><br><span class="line">&gt;&gt;&gt; data = pd.DataFrame(a)</span><br><span class="line">&gt;&gt;&gt; data.apply(lambda x: x*10)</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">	0  1  2</span><br><span class="line">0  40  40 30</span><br><span class="line">1  10  30 20</span><br><span class="line">2  10  40 30</span><br></pre></td></tr></table></figure>

<p><strong>装饰器</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">装饰器就是对函数封装一次，把非核心函数和处理包装到某个核心函数上，实现业务代码干净</span><br><span class="line">def fun(x):</span><br><span class="line">	if not x.isdigit():</span><br><span class="line">		print(&quot;Error, invalid number type.&quot;)</span><br><span class="line">        return None</span><br><span class="line">	c = (x-1)**2  + (x-2)**2 #离点(1,2)的距离的平方</span><br><span class="line">	return c #此函数核心是计算，但是却有判断是否为数字的代码，可拆分</span><br><span class="line"></span><br><span class="line">下面写个装饰器，把判断是否为数字的代码分割出来</span><br><span class="line">def dec(fun):</span><br><span class="line">	def decorator(*args, **kwargs):</span><br><span class="line">		if not args.isdigit():</span><br><span class="line">			print(&quot;Error, invalid number type.&quot;)</span><br><span class="line">            return None</span><br><span class="line">		return fun(*args, **kwargs)</span><br><span class="line">	return decorator</span><br><span class="line"></span><br><span class="line">@dec</span><br><span class="line">def fun(x):</span><br><span class="line">	c = (x-1)**2  + (x-2)**2 </span><br><span class="line">	retrun c</span><br><span class="line">这种写法分离了判断函数，fun里面只作一件事，计算并输出。</span><br><span class="line"></span><br><span class="line">                                               @dec</span><br><span class="line">def fun(x):                                    def fun(x):</span><br><span class="line">	if not x.isdigit():                            c = (x-1)**2  + (x-2)**2</span><br><span class="line">		print(&quot;Error, invalid number type.&quot;)       return c</span><br><span class="line">        return None                              </span><br><span class="line">	c = (x-1)**2  + (x-2)**2                       </span><br><span class="line">	return c</span><br><span class="line">左边原函数                                     右边修饰函数，功能一样</span><br></pre></td></tr></table></figure>

<p><strong>函数返回多个值</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def fun(x):</span><br><span class="line">	a = x**2</span><br><span class="line">	b = a + x**3</span><br><span class="line">	c = b + x**4</span><br><span class="line">	return a, b, c</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; a,b,c = fun(10)</span><br><span class="line">&gt;&gt;&gt; a,b,c</span><br><span class="line">(100,1100,11100)</span><br></pre></td></tr></table></figure>

<p><strong>求和 最大 最小 乘积和</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">L = [1,2,3,4,5]</span><br><span class="line">&gt;&gt;&gt; sum(L)</span><br><span class="line">15</span><br><span class="line">&gt;&gt;&gt; min(L)</span><br><span class="line">1</span><br><span class="line">&gt;&gt;&gt; max(L)</span><br><span class="line">5</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; from operator import mul</span><br><span class="line">&gt;&gt;&gt; from functools import reduce</span><br><span class="line">&gt;&gt;&gt; reduce(mul, L)</span><br><span class="line">120 #5的阶乘</span><br><span class="line"></span><br><span class="line">或者不用mul，而用lambda</span><br><span class="line">&gt;&gt;&gt; reduce(lambda x, y: x*y, L)</span><br><span class="line">120</span><br></pre></td></tr></table></figure>

<p><strong>找出列表中最多的元素</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">num = [1,2,3,2,1,2,3,4,5,6,2,1,1,100,1,2,1,3,1]</span><br><span class="line">&gt;&gt;&gt; print(max(set(num), key=num.count)) 按频率找最大</span><br><span class="line">1</span><br></pre></td></tr></table></figure>

<p><strong>减少使用None</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a = &apos;&apos;</span><br><span class="line">if a is None:</span><br><span class="line">	do1()</span><br><span class="line">else:</span><br><span class="line">	do2()</span><br><span class="line"></span><br><span class="line">if a == None:</span><br><span class="line">	do1()</span><br><span class="line">else:</span><br><span class="line">	do2()</span><br><span class="line"></span><br><span class="line">python中凡是没有值或者0都是False</span><br><span class="line">if !a: </span><br><span class="line">	do1()</span><br><span class="line">else:</span><br><span class="line">	do2()</span><br></pre></td></tr></table></figure>

<p><strong>字典默认值</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">d = &#123;&apos;a&apos;:2,&apos;b&apos;10,&apos;c&apos;:3&#125;</span><br><span class="line">&gt;&gt;&gt; d.get(&apos;a&apos;)  </span><br><span class="line">2</span><br><span class="line">&gt;&gt;&gt; d.get(&apos;e&apos;,1) 此处默认值为1，若d中无&apos;e&apos;，则输出默认值</span><br><span class="line">1</span><br><span class="line">&gt;&gt;&gt; d.setdefault(&apos;e&apos;,2) 此处默认值设置为2，若d中无&apos;e&apos;，则设置&apos;e&apos;:2</span><br><span class="line">2</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>编程语言</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>深度学习主流框架介绍</title>
    <url>/title/714c49b4/</url>
    <content><![CDATA[<p><img src="https://s2.ax1x.com/2019/12/23/lpZ48x.md.jpg" alt="dl"></p>
<a id="more"></a>

<p>16年韩国李世石和AlphaGo人机大战后，人工智能(AI)一下火了起来，大量的学生和研究人员扑了上去，机器学习，深度学习成了通用词汇流入民间，人工智能这几年也确实造出些新鲜有用的玩意儿。在AI大火的背后是深度学习框架的加持，下面对几个主流学习框架作粗浅介绍。</p>
<p><strong>TensorFlow</strong></p>
<p><img src="https://s2.ax1x.com/2019/12/23/lSajNq.jpg" alt="tf"></p>
<p>TF是Google官方主推的深度学习框架，可视化，部署方便，尤其在工业界得到广泛使用，是目前使用人数最多的深度学习框架，文档丰富。当然，TF自身也有缺点，太偏底层，中间转换步骤多，要先定义流图再开始计算。TF更新后对以往代码不兼容，使得很多人一更新TF就得重构代码，令人头疼。</p>
<p><strong>Pytorch</strong>  </p>
<p><img src="https://s2.ax1x.com/2019/12/23/lSdS3T.md.jpg" alt="pytorch"></p>
<p>这是Facebook官方开发的深度学习框架，目前在学术界使用十分火爆，代码很pythonic，方便上手。但是pytorch没有TF的tensorboard，可视化不够好，据说最近引入了tensorboard的显示。工业界目前使用率还不高，但发展势头良好，可能未来会在工业界有更多应用。</p>
<p><strong>CNTK</strong>       </p>
<p><img src="https://s2.ax1x.com/2019/12/23/lSd9vF.jpg" alt="cntk"></p>
<p>Microsoft官方开发，主要在语音处理上做得优秀。</p>
<p><strong>Theano</strong>     </p>
<p><img src="https://s2.ax1x.com/2019/12/23/lSdngO.md.png" alt="Theano"></p>
<p>人工智能三巨头约书亚.本吉奥主导开发，主要用于学术研究，2007年诞生，到2017年停止更新，刚好10年，然而正是它推动TF等框架的开发和发展，值得大家缅怀。</p>
<p><strong>Caffe/Caffe2</strong>      </p>
<p><img src="https://s2.ax1x.com/2019/12/23/lSdlbd.jpg" alt="caffe"></p>
<p>伯克利大学某小组开发，由C++写成，提供Python和Matlab接口，可以在CPU和GPU上跑，然而实现中每一层都要完成前向后向传播的代码，复杂。Caffe2是原作者新创立的框架，吸收Caffe优点，可以在PC和移动端训练部署使用。</p>
<p><strong>MXNet</strong>      </p>
<p><img src="https://s2.ax1x.com/2019/12/23/lSdfr4.png" alt="mxnet"></p>
<p>上海交大陈天奇和李沐牵头开发，MXNet后被AWS选择为云计算官方学习平台，再后成为Apache基金会孵化项目。</p>
<p><strong>Keras</strong>      </p>
<p><img src="https://s2.ax1x.com/2019/12/23/lSd6P0.md.png" alt="keras"></p>
<p>一个高级API调用平台，后端可以调用TF，Theano，CNTK作为后端，上手快，但是学习瓶颈很快就到了，学不到更深入的东西。</p>
<p><img src="https://s2.ax1x.com/2019/12/23/lSwELQ.md.png" alt="vs"></p>
<p>目前的大趋势是TF和Pytorch正面比拼，一个工业界，一个学术界，两者的使用人数都多。未来就看这两家谁发展得更好了，毕竟背后是Google和Facebook这两个巨擘在支持。初学的话，先用keras连连手，接着可以选用这两者的任意一个来学习。</p>
<p>同样一个功能，我们可以对比其实现的代码量，如下。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#1.TensorFlow</span><br><span class="line">import tensorflow as tf</span><br><span class="line">import numpy as np</span><br><span class="line"></span><br><span class="line">def func1(x, w):</span><br><span class="line">	return tf.matmul(x, w)</span><br><span class="line"></span><br><span class="line">def func2(x, w):</span><br><span class="line">	return tf.matmul(x, w)</span><br><span class="line"></span><br><span class="line">M, N, K = 4, 5, 6</span><br><span class="line">X  = tf.placeholder(tf.float32, shape=(M, N))</span><br><span class="line">Z  = tf.placeholder(tf.float32, shape=None)</span><br><span class="line">W1 = tf.placeholder(tf.float32, shape=(N,K))</span><br><span class="line">W2 = tf.placeholder(tf.float32, shape=(N,K))</span><br><span class="line">y  = tf.cond(tf.less(Z,1), func1, func2)</span><br><span class="line"></span><br><span class="line">with tf.Session() as s:</span><br><span class="line">	val = &#123;</span><br><span class="line">		X: np.random.randn(M, N),</span><br><span class="line">		Z: 10,</span><br><span class="line">		W1: np.random.randn(N,K),</span><br><span class="line">		W1: np.random.randn(N,K)</span><br><span class="line">	&#125;</span><br><span class="line">	y_val = s.run(y, feed_dict=val)</span><br><span class="line">	</span><br><span class="line">#2.Pytorch</span><br><span class="line">import torch as t</span><br><span class="line">from torch.autograd imort Variable</span><br><span class="line"></span><br><span class="line">M, N, K = 4, 5, 6</span><br><span class="line">X = Variable(t.randn(M, N))</span><br><span class="line">W1 = Variable(t.randn(N, K))</span><br><span class="line">W2 = Variable(t.randn(N, K))</span><br><span class="line"></span><br><span class="line">Z = 10</span><br><span class="line"></span><br><span class="line">if 1 &lt; Z:</span><br><span class="line">	y = X.mm(W1)</span><br><span class="line">else:</span><br><span class="line">	y = X.mm(W2)</span><br></pre></td></tr></table></figure>

<p>当然，框架只是工具，重要的是我们的想法，算法，代码，Talk is cheap, show me the code!</p>
]]></content>
      <categories>
        <category>AI</category>
      </categories>
      <tags>
        <tag>DL</tag>
      </tags>
  </entry>
  <entry>
    <title>每日PS技巧14：去除图片水印并美化图片</title>
    <url>/title/e2d5c0dc/</url>
    <content><![CDATA[<p><img src="https://s2.ax1x.com/2019/12/22/QxTJC8.md.jpg" alt="PS14_1"></p>
<a id="more"></a>

<p>有的图片，被打上各种水印，尤其嵌套水印，这家加一个水印，那家再来一个，看着确实厌烦，所以很多时候我们需要去除掉这些水印。常规方法去水印有4种方法，分别对应半透明和不透明的情况。然而我们大多数时候是拿到不透明的水印，这时候只有好好利用橡皮图章和修复工具一点点修复。</p>
<h2 id="今日技巧-去除图像水印并美化"><a href="#今日技巧-去除图像水印并美化" class="headerlink" title="今日技巧 [去除图像水印并美化]"></a>今日技巧 [去除图像水印并美化]</h2><p>主要步骤：  </p>
<p>1) 打开图像素材<br>2) 图章修复部分区域<br>3) 利用修复工具修复细节<br>4) 开调整图层，加饱和度，调色阶和色彩平衡。<br>5) 图片锐化，蓝色通道高反差保留，输出图片。  </p>
<p>首先导入图片素材，可以看到右下角水印，还是多个，十分不好看。</p>
<p><img src="https://s2.ax1x.com/2019/12/22/Qx7RW8.md.jpg" alt="PS14_2"></p>
<p>最简单的方法，直接截掉水印部分，如下图。</p>
<p><img src="https://s2.ax1x.com/2019/12/22/Qx72Jf.md.jpg" alt="PS14_9"></p>
<p>但是，这样图片就不完整了，少了一块，看着不舒服，估计也没有哪位女生喜欢自己被截掉一部分吧! 所以得保留图片，要完整去除水印。打开图章工具，利用完整皮肤部分盖印到水印部分，细节部分用修复工具慢慢修复。</p>
<p><img src="https://s2.ax1x.com/2019/12/22/Qx7BsH.md.jpg" alt="PS14_9"></p>
<p>注意，人的皮肤有纹理的，比如这位女生手臂上有的地方更白一些，有的偏黄一点，要保留好颜色细节，不可都弄成白色的，那样会不协调。手指部分结合处有暗调，也要保留，不然五指成合并态，没有细节信息。</p>
<p><img src="https://s2.ax1x.com/2019/12/22/Qx7dzD.md.jpg" alt="PS14_9"></p>
<p>最后恢复过来，就是这样，当然，皮肤有些问题，需要调整。</p>
<p><img src="https://s2.ax1x.com/2019/12/22/Qx7YIx.md.jpg" alt="PS14_8"></p>
<p>打开滤镜，打开磨皮插件界面，调节平滑度，使得皮肤更自然。</p>
<p><img src="https://s2.ax1x.com/2019/12/22/Qx7Pxg.md.jpg" alt="PS14_5"></p>
<p><img src="https://s2.ax1x.com/2019/12/22/QxT68U.md.jpg" alt="PS14_4"></p>
<p>最后打开色阶，色彩平衡，色相饱和度三个调整图层，分别调节。这是处理人像必备流程，听说国际顶级摄影师拍摄的高质量图片本身已经很好了，他们最后做的流程就是打开这几个调整图层，细微调整，让人物更饱满，健康，接着就可以输出图像了。</p>
<p>如果要做点梦幻的感觉，就选择通道&gt;蓝色通道(红绿蓝三色通道，只有蓝色有梦幻感觉，红色是血腥，绿色是怪物)，复制蓝色通道。</p>
<p><img src="https://s2.ax1x.com/2019/12/22/Qx7Jd1.md.jpg" alt="PS14_7"></p>
<p>滤镜&gt;其他&gt;高反差保留&gt;半径4&gt;确定。这就是人物细节，为了锐化图片，让人物更凸显。</p>
<p><img src="https://s2.ax1x.com/2019/12/22/Qx7FMQ.md.jpg" alt="PS14_6"></p>
<p>回到图层界面，设置图层模式，柔光模式。</p>
<p><img src="https://s2.ax1x.com/2019/12/22/QxLocT.md.jpg" alt="PS14_7"></p>
<p>最后附上原图和效果图，原图：2016.4.22 某学校微博公开图片。</p>
<p><img src="https://s2.ax1x.com/2019/12/22/QxTr5V.md.jpg" alt="PS14_10"></p>
<p><img src="https://s2.ax1x.com/2019/12/22/QxTNvQ.md.jpg" alt="PS14_11"></p>
<p><img src="https://s2.ax1x.com/2019/12/22/QxTJC8.md.jpg" alt="PS14_12"></p>
<p>对人物图像，尤其女生，越年轻就越要少用特效和滤镜，因为年轻女生本身就有优势，皮肤好，越多特效就越损害人物形象，特效多了，看着怪怪的，不自然。越漂亮的女性就越要少用滤镜，本身就好看的，你一插手，就全毁了。我看很多女生自己就特别爱开什么滤镜，简直夸张，滤镜越多就越显得她们不自信，真是悲哀。美是这个时代的追求，但是有个度，千万别过头！</p>
]]></content>
      <categories>
        <category>设计</category>
      </categories>
      <tags>
        <tag>PS</tag>
      </tags>
  </entry>
  <entry>
    <title>换个搜索引擎吧！</title>
    <url>/title/f6f1ade3/</url>
    <content><![CDATA[<p><img src="https://s2.ax1x.com/2019/12/21/Qvt1UO.md.png" alt="bingcover"> </p>
<a id="more"></a>

<p>随着社会发展，科技爆发，个人对信息获取的需求逐渐多了起来。自然地，各种信息就泛滥成灾了。当前时代已不再是过去那种确少信息资料的时代，今天信息实在太多，我们不再是找不到信息，而是如何找到有价值的信息。</p>
<p>说起信息获取，我们普遍依赖搜索引擎。搜索引擎是一个工具，当用户在搜索框中输入检索内容，引擎开动，从数据库或互联网上抓取各种相关的信息，整理好后返回给用户。忽略技术细节，搜索引擎就是输入个文本，点击搜索，得到结果。我们使用的百度，谷歌等都是搜索引擎。</p>
<p>然而，不同的引擎返回的结果却是很不同的，有的引擎返回的结果充满了广告和无关内容，甚至淫秽内容。所以一款干净，高效的引擎才能迎应用户的需要。就拿百度来说吧，作为中国最大的搜索平台，百度的搜索结果并不那么令人满意，尤其前几年魏则西事件，引发公众强烈谴责。我个人使用的引擎主要是Bing，就是封面图片上的搜索引擎，该引擎由美国微软公司开发，分为国内和国际版，可自由切换。搜索的内容广告少，往往一搜就能找到自己想要的内容。</p>
<p>本文打算对比各种搜索引擎的搜索结果，进而作为用户选择搜索引擎的参考信息。我与任何一家公司无利益纠葛，不是打广告，纯粹从个人使用上讨论，主要还是方便用户，节约时间，让我们轻松面对生活和工作。</p>
<p>本文主要介绍八款搜索引擎，以下是其对应的登录界面。</p>
<p>这是百度的搜索界面，想必中国人已经很熟悉。</p>
<p><img src="https://s2.ax1x.com/2019/12/21/QvyeuF.md.png" alt="baiduf"></p>
<p>这是微软Bing(必应)搜索界面，可能很多人还不知道，它每天0点自动换封面图片，让你每天都有好心情，我每天都使用它，早上打开电脑第一件事就是看图。</p>
<p><img src="https://s2.ax1x.com/2019/12/21/Qvt1UO.md.png" alt="bing"> </p>
<p>这是Magi(Peak Labs出品)搜索界面，2019新产品。它利用人工智能抽取实体，每时每刻都在学习新闻，并整理关系，你看下面图中显示Magi正在学习…</p>
<p><img src="https://s1.ax1x.com/2020/07/03/NO8U41.md.png" alt="Magi"></p>
<p>这是俄罗斯的Yandex，类似国内的百度。</p>
<p><img src="https://s2.ax1x.com/2019/12/21/Qvy8gK.md.png" alt="yandexf"></p>
<p>这是秘迹搜索，它集合了好几个搜索引擎的搜索结果，且该引擎不收集你输入的搜索信息。</p>
<p><img src="https://s2.ax1x.com/2019/12/21/QvyBCt.md.png" alt="mijif"></p>
<p>这是多吉搜索，它也集合了好几个搜索引擎的搜索结果，该引擎也不收集你输入的搜索信息。</p>
<p><img src="https://s2.ax1x.com/2019/12/21/Qvyrgf.md.png" alt="dogef"></p>
<p>这是搜狗搜索，搜狗输入法那个搜狗，可能它在输入法上出名些。</p>
<p><img src="https://s2.ax1x.com/2019/12/21/Qvysv8.md.png" alt="sougouf"></p>
<p>这是360搜索，360公司开发的，就是开发手机360管家那个公司。</p>
<p><img src="https://s2.ax1x.com/2019/12/21/QvyREj.md.png" alt="360f"></p>
<p>除了提到不收集搜索信息的两款引擎，其他的都会收集并保存你搜索过的信息，比如你在搜索框输入一个字，马上下面出现一堆内容，就是别人搜过的高频内容。这种信息收集看个人是否在意，我认为一般没什么问题。还有谷歌的浏览器和引擎我没列出，因为国内使用不方便，要么没法儿用。但搜索引擎最厉害的还是它，全球占有近7成以上，要是中国开放，估计得9成以上，百度也就没它啥事儿了。说个真事，百度公司很多程序员也用谷歌浏览器，反而自家的不用，甚至开发百度浏览器的程序员也用谷歌！</p>
<p>下面使用相同的信息进行搜索，看看它们各自返回的广告和信息准确度吧，只展示前面几条搜索结果，因为大部分人就看前几条结果，前面几条的返回内容影响着大部分用户的页面点击行为。</p>
<p><img src="https://s2.ax1x.com/2019/12/21/Qv2JJA.md.png" alt="baidu"></p>
<p>很明显，百度直接返回什么医生在线网，这就是百度的竞价排名策略下的搜索结果，这些医院到百度交钱，可能你点一次百度收300块钱，所以它把这些交钱网站放在你搜索的首页实现盈利(百度的做法是合法的，可能不合道德标准，比如为了钱什么的)。实际上，你去看绿色的字，发现全是广告，没有有价值的东西。</p>
<p><img src="https://s2.ax1x.com/2019/12/21/Qv2tzt.md.png" alt="bing"></p>
<p>再看Bing的结果，返回的内容就要好些了，第一条是知乎上的讨论，可以查到有用的信息，说不定还有用户分享自己的经历，你点进去看看结合自己的情况可能会知道怎么回事，第二条也是广告。</p>
<p><img src="https://s1.ax1x.com/2020/07/03/NOGpb4.md.png" alt="Magi"></p>
<p>Magi的结果，返回抽取的实体信息，解释了心脏病的很多信息。给出了新闻来源，并用蓝色线标明。</p>
<p><img src="https://s2.ax1x.com/2019/12/21/Qv2dL8.md.png" alt="yandex"></p>
<p>Yandex直接返回治疗手册，还有下面是什么鬼，怎么是女人呢？难道心痛和女人有关？</p>
<p><img src="https://s2.ax1x.com/2019/12/21/Qv20eS.md.png" alt="miji"></p>
<p>密迹返回了知乎和百科定义，也有百度经验。你看百度自己不返回自家的百度经验，反而别人会返回它的百度经验，这更说明百度首页广告多的事实，先放赚钱的，后放其他。百科是一种类似词典词条一样的东西，就是为了说明什么是什么？所以百度有自家的百度百科，搜狗也有搜狗百科，360有360百科，所以不要以为百科就都是百度家的内容。</p>
<p><img src="https://s2.ax1x.com/2019/12/21/Qv24wF.md.png" alt="doge"></p>
<p>多吉也是返回的知乎讨论，一条百度经验和可能的广告，不要看什么人民网就以为是权威网站，可能它就是故意取的这个名，要自己多判断。</p>
<p><img src="https://s2.ax1x.com/2019/12/21/QvRufs.md.png" alt="sougo"></p>
<p>搜狗返回百科知识和广告，百科还是有用的，可以看看具体定义，至于广告嘛，和百度有的一拼。</p>
<p><img src="https://s2.ax1x.com/2019/12/21/QvRl60.md.png" alt="360"></p>
<p>360全是广告，什么医院和医生啦，一堆。</p>
<p>下面再搜索竞价排名，看看结果吧。</p>
<p><img src="https://s2.ax1x.com/2019/12/21/QvRrnK.md.png" alt="baiduweb"></p>
<p>百度干脆，第一条就是入口，意思你要投放广告，搞竞价排名直接找它。所以百度，客观的说，上面广告多，当然，广告质量好不好消费者自己判断，不要被骗就是了，因为百度也不知道它是不是诈骗网站。</p>
<p><img src="https://s2.ax1x.com/2019/12/21/QvRs0O.md.png" alt="bingweb"></p>
<p>Bing返回竞价排名各种百科定义，还有知乎上的讨论。</p>
<p><img src="https://s1.ax1x.com/2020/07/03/NOJKyT.md.png" alt="Magi"></p>
<p>Magi的结果，还是实体信息，解释了其定义等信息。下面还给出了百度竞价排名。</p>
<p><img src="https://s2.ax1x.com/2019/12/21/QvRW9A.md.png" alt="yandexweb"></p>
<p>Yandex返回定义和百度的丑闻，当然，下面也有一条竞价排名的广告入口。然后，又是女人，卧操，这玩意儿干啥都不忘女人呢？</p>
<p><img src="https://s2.ax1x.com/2019/12/21/QvR4jP.md.png" alt="mijiweb"></p>
<p>密迹也是各种百科定义，以及最后一条对百度赚钱手段的揭示。</p>
<p><img src="https://s2.ax1x.com/2019/12/21/QvRInf.md.png" alt="dogeweb"></p>
<p>多吉还是百科定义和知乎讨论。</p>
<p><img src="https://s2.ax1x.com/2019/12/21/QvRvj0.md.png" alt="sougoweb"></p>
<p>搜狗第一条也是广告入口，意思打广告也可以找他，看来搜狗和百度学了，也搞这么一套，当然，这是合法的，只是广告内容如何，实在不知。</p>
<p><img src="https://s2.ax1x.com/2019/12/21/QvRzuV.md.png" alt="360web"></p>
<p>360给百科定义和分析文章。</p>
<p>要用什么搜索引擎，自己选吧，就这么几款。我选的Bing，一是图好看，二是结果也还可以，广告没那么多，关键还有国内和国际版，搜索结果又多了一些。Magi我也在用，主要是它的结果很干净，帮助你厘清思路。如何设置呢？我们可能使用着各种浏览器，比如谷歌Chrome，火狐，QQ，欧朋，UC，猎豹，2345，IE，Edge等等这些浏览器。你可以在里面自己设置搜索引擎，一般都内置有好几个，没有也可以自己添加，只要打开浏览器进设置里设置对应的搜索引擎就好了。个人推荐，中国人，用火狐浏览器加Bing搜索引擎。我自己就用的这个，因为可以自定义软件行为，信息不容易泄漏，火狐隐私安全及保护做的很好的。火狐的开发组织Mozilla历史悠久，其源头诞生于互联网创世纪，互联网诞生的第一个浏览器Mosaic是其直系祖先，而后是Navigator，要不是比尔.盖茨耍手段击败Navigator，估计今天谷歌也成长不起来。Mozilla和苹果等目前还是WWW万维网标准制定组成员，它们在定义互联网的规则。对于普通用户，你干脆的，卸载手机和电脑上的各种奇葩浏览器，下载安装火狐并设置引擎为Bing。这么用的，安全，高效，插件多，多活几年它不香吗？相当多的黑客，程序员都用火狐，我们普通人为何不跟上呢？</p>
<p>当然最隐私的是洋葱(Tor)浏览器，访问暗网必备。</p>
<p><img src="https://s2.ax1x.com/2019/12/21/QvsZTA.md.png" alt="darkweb"> </p>
<p>Tor是美国政府和国家科学基金会支持开发的，Tor搜索的内容通过技术手段查不出来，所以上面干坏事的多，什么枪支，色情，毒品多半通过它交易。暗网并不可怕，可怕的是你的好奇心和邪恶的想法，上面主要还是看钱，主要卖东西，只是非法买卖而已。美国支持开发的目的是为了支持集权国家的活动家，同时他们的特工搜集全球信息，追捕逃犯，打击犯罪。滑稽的是，这反而促进了犯罪，因为查不出来谁干的，所以走私军火，雇佣杀人上面也有。干坏事的黑客们在上面卖公民隐私(比如身份证信息，学籍，银行卡，各种账户和密码)，真是暴利。2018年华住酒店2.4亿开房数据在暗网公开售卖，6月10亿圆通快递信息公开售卖，6月A站900万用户数据公开售卖，8月顺丰3亿交易信息公开售卖，10月国泰航空940万用户信息泄漏，12月12306个人火车购票账户信息和密码也公开在上面售卖(410多万人的)，这只是公开的，还有很多没被发现的，各种公司泄漏的，太多了。12306泄漏纯属个人用户不用官方软件反而去用什么抢票插件，软件，然后输入身份证号，密码，这些软件安全做得不好被黑客攻击提取到了。所以老老实实用12306官方软件，密码适时更改。一般人你搜是搜不到暗网入口的，我估计很多人听都没听说过，还以为世界如此美好，不知道还有黑暗面，知道了也好，多个心眼儿。下图中，各种信息都在交易，什么网贷，汽车信息，邮件信息，某某女孩信息等等，全是钱的味道。这玩意儿，少碰为好，遵守法律，走人间正道。本文写这个就是给普通用户提升安全意识，不要乱用软件，干正事就用官方软件。别去抢什么票，你不知道你在这里抢，别人也在那里抢，别人在抢你的信息。就说这么多吧，懂的自然就懂了。</p>
<p><img src="https://s2.ax1x.com/2019/12/21/QvsBXF.md.jpg" alt="darkweb"> </p>
]]></content>
      <categories>
        <category>浏览器</category>
      </categories>
      <tags>
        <tag>tools</tag>
      </tags>
  </entry>
  <entry>
    <title>每日PS技巧13：保护图像以拉伸</title>
    <url>/title/7d335d56/</url>
    <content><![CDATA[<p><img src="https://s2.ax1x.com/2019/12/16/Q5Jhq0.png" alt="PS13_1"></p>
<a id="more"></a>

<p>昨天的图片感觉窄了一点儿，今天试图将其拉伸。然而，图中人物在拉伸过程中也会变宽，把妹妹变宽了就不好看来。所以，这次尝试建立保护选区，使得拉伸过程中，人物区域不变化。</p>
<h2 id="今日技巧-保护图像以拉伸"><a href="#今日技巧-保护图像以拉伸" class="headerlink" title="今日技巧 [保护图像以拉伸]"></a>今日技巧 [保护图像以拉伸]</h2><p>主要步骤：  </p>
<p>1) 打开图像素材<br>2) 利用矩形选区建立人物选区，并存储选区<br>3) 使用只能图像变换，选择刚保存的选区<br>4) 拉伸图像，此时保护选区中人物不变形</p>
<p>首先导入图片素材，利用左边矩形选区工具建立选区。</p>
<p><img src="https://s2.ax1x.com/2019/12/16/Q5JOMR.md.png" alt="PS13_2"></p>
<p>在选择里，存储选区，名字可随便设置，比如save</p>
<p><img src="https://s2.ax1x.com/2019/12/16/Q5JzdK.md.png" alt="PS13_3"></p>
<p>接着，在图像&gt;画布大小里，设置宽度增加100，可随意指定，接着在编辑里选择内容识别缩放。</p>
<p><img src="https://s2.ax1x.com/2019/12/16/Q5Y1Qs.md.png" alt="PS13_4"></p>
<p>在上面的保护选框中选择刚保存的选区save</p>
<p><img src="https://s2.ax1x.com/2019/12/16/Q5YAsI.md.png" alt="PS13_5"></p>
<p>也可以调整到中间。</p>
<p><img src="https://s2.ax1x.com/2019/12/16/Q5YBl9.md.png" alt="PS13_6"></p>
<p>然后，拉伸，可以看到人物没变形。</p>
<p><img src="https://s2.ax1x.com/2019/12/16/Q5Yx6s.md.png" alt="PS13_7"></p>
<p>最后附上原图和效果图，原图：2018.6.21 10:48:20 Baidu图片。</p>
<p><img src="https://s2.ax1x.com/2019/12/16/Q5tltO.png" alt="PS13_8"></p>
<p><img src="https://s2.ax1x.com/2019/12/16/Q5Jhq0.png" alt="PS13_9"></p>
<p>可以看到，石头和海面都拉伸，人物保留得很好。</p>
]]></content>
      <categories>
        <category>设计</category>
      </categories>
      <tags>
        <tag>PS</tag>
      </tags>
  </entry>
  <entry>
    <title>每日PS技巧12：图像去模糊</title>
    <url>/title/f3df35e2/</url>
    <content><![CDATA[<p><img src="https://s2.ax1x.com/2019/12/16/Q5e7PP.png" alt="PS12_1"></p>
<a id="more"></a>

<p>有的时候，图片没对好焦，拍的照片有些模糊，实际上利用PS可以恢复到一定程度。</p>
<h2 id="今日技巧-图像去模糊"><a href="#今日技巧-图像去模糊" class="headerlink" title="今日技巧 [图像去模糊]"></a>今日技巧 [图像去模糊]</h2><p>主要步骤：  </p>
<p>1) 打开图像素材<br>2) 利用Ctrl+Shif+U去色<br>3) 在去色图层上施加滤镜&gt;其他&gt;高反差保留(半径在2~5，要自行调节)<br>4) 保存发布</p>
<p>首先导入图片素材，下面是未调整的原图。</p>
<p><img src="https://s2.ax1x.com/2019/12/16/Q5eOKg.md.png" alt="PS12_2"></p>
<p>首先去色 Ctrl+Shif+U，去色的目的是为了得到灰调图(没有色彩信息，只有结构信息，我们利用结构信息以去模糊)</p>
<p><img src="https://s2.ax1x.com/2019/12/16/Q5mAr4.md.png" alt="PS12_3"></p>
<p>接着，施加高反差保留的滤镜(高反差，意味着图像结构信息很鲜明，反差大，得以保留)</p>
<p><img src="https://s2.ax1x.com/2019/12/16/Q5mKG6.md.png" alt="PS12_4"></p>
<p>接下来，将该灰调图层的模式设置为叠加（将高反差结构信息和原彩色图叠加，去除模糊）</p>
<p><img src="https://s2.ax1x.com/2019/12/16/Q5mTeJ.md.png" alt="PS12_5"></p>
<p>最后附上原图和效果图，原图：2018.6.21 10:48:20 Baidu图片。两图对比看，还是能看出差别。</p>
<p><img src="https://s2.ax1x.com/2019/12/16/Q5na79.png" alt="PS12_7"></p>
<p><img src="https://s2.ax1x.com/2019/12/16/Q5e7PP.png" alt="PS12_8"></p>
]]></content>
      <categories>
        <category>设计</category>
      </categories>
      <tags>
        <tag>PS</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker安装与使用</title>
    <url>/title/2e9dcbbc/</url>
    <content><![CDATA[<p><img src="https://s2.ax1x.com/2019/12/11/QsBuLD.png" alt="docker"></p>
<a id="more"></a>


<p><strong>docker基本概念</strong><br>docker是一种类似虚拟机的东西，但是占用不高，启动快。<br>镜像(image)就是docker中的模版，容器依赖于它而生成。<br>仓库，是远程存放镜像的地方，可以联网获取各种image。<br>容器是docker的实质，docker是linux下容器技术的封装。<br>可以把容器看成一个进程，运行后可以删除，要再运行就用Image再生成。  </p>
<p>docker大概工作流程:<br>1.获取image或自己创建image<br>2.利用image生成容器服务  </p>
<p>docker核心概念<br>1.Userspace (隔离进程，网络等)<br>2.Cgroup (隔离硬件资源)<br>3.UFS (统一文件系统挂载点)</p>
<p><strong>docker在Ubuntu下的安装</strong><br>1.卸载老版本并更新软件包信息(如果有的话)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo apt-get remove --purge docker docker-engine docker.io containerd runc</span><br><span class="line">sudo apt-get update</span><br></pre></td></tr></table></figure>

<p>2.安装repository</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo apt-get install apt-transport-https ca-certificates curl gnupg-agent software-properties-common</span><br></pre></td></tr></table></figure>

<p>3.添加docker官方GPG Key</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -</span><br></pre></td></tr></table></figure>

<p>4.验证你有该key，输出是pub rsa等若干行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo apt-key fingerprint  0EBFCD88</span><br></pre></td></tr></table></figure>

<p>5.添加软件仓库</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo add-apt-repository &quot;deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable&quot;</span><br></pre></td></tr></table></figure>

<p>6.更新包信息</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo apt-get update</span><br></pre></td></tr></table></figure>

<p>7.安装docker组件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo apt-get install docker-ce docker-ce-cli containerd.io</span><br></pre></td></tr></table></figure>

<p>8.测试安装是否成功</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo docker version</span><br></pre></td></tr></table></figure>

<p>9.更换image下载源</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo vi /etc/default/docker </span><br><span class="line">添加如下一行</span><br><span class="line">DOCKER_OPTS=&quot;--registry-mirror=https://registry.docker-cn.com&quot;</span><br><span class="line">sudo service docker restart</span><br></pre></td></tr></table></figure>

<p><strong>docker的image操作</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo service docker start                      #运行</span><br><span class="line">sudo service docker stop                       #停止</span><br><span class="line">sudo docker image ls                           #列出image</span><br><span class="line">sudo docker image rm imageName                 #删除image</span><br><span class="line">sudo docker image pull library/hello-world     #从远程仓库下载hello-world镜像</span><br><span class="line">sudo docker container ls                       #查看运行的容器</span><br><span class="line">sudo docker container ls --all                 #查看所有的容器</span><br><span class="line">sudo docker container run hello-world          #运行image</span><br><span class="line">sudo docker container run -it hello-world bash #运行image并指定shell</span><br><span class="line">sudo docker container kill containerID         #终止容器</span><br><span class="line">sudo docker container rm   containerID         #删除容器</span><br><span class="line">sudo docker search python                      #搜索python相关image</span><br><span class="line"></span><br><span class="line">sudo docker run -d --rm --name xxxx_service --env MYSQL_ROOT_PASSWORD=xxxx \</span><br><span class="line">--env MYSQL_DATABASE=xxxx_service mysql:8.0.18</span><br><span class="line">#运行一个基于mysql 8.0.18的服务 -d指定后台服务，--rm指定服务运行完毕自动删除容器文件</span><br></pre></td></tr></table></figure>

<p><strong>docker容器制作</strong><br>1.下载服务(随意指定)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/acount/xxx.git</span><br></pre></td></tr></table></figure>
<p>2.编写.dockerignore</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.git</span><br><span class="line">node_modules</span><br><span class="line">npm-debug.log</span><br></pre></td></tr></table></figure>
<p>3.编写dockerfile</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">FROM node:12.13.1 #使用node</span><br><span class="line">COPY . /app       #将当前目录下所有文件打包进image的/app目录</span><br><span class="line">WORKDIR /app      #指定工作路径</span><br><span class="line">RUN npm install --registry=https://registry.np.taobao.org  #安装依赖项</span><br><span class="line">EXPOSE 3000       #指定端口</span><br></pre></td></tr></table></figure>
<p>4.创建image</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo docker iamge build -t xxx-demo . #这个小点.指代dockerfile所在目录</span><br></pre></td></tr></table></figure>
<p>5.运行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo docker container run -p 8000:3000 -it xxx-demo /bin/bash</span><br></pre></td></tr></table></figure>

<p><strong>docker搭建hexo博客</strong><br>1.编写对应的dockerfile(也可以从仓库下载image)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">FROM node:latest AS build-env</span><br><span class="line">RUN mkdir -p /home/username/env/hexo-blog #要是已经创建就可以省去</span><br><span class="line">WORKDIR /home/username/env/hexo-blog</span><br><span class="line">COPY . .  #复制当前目录文件到hexo-blog</span><br><span class="line">RUN npm --registry=https://registry.np.taobao.org install hexo-cli -g &amp;&amp; npm install</span><br><span class="line">RUN hexo clean &amp;&amp; hexo hexo g</span><br><span class="line"></span><br><span class="line">FROM nginx:lates</span><br><span class="line">ENV TZ=Asia/Shanghai</span><br><span class="line">RUN ln -snf /usr/share/zoneinfo/$TZ /etc/localtime &amp;&amp; echo $TZ &gt; /etc/timezone</span><br><span class="line">WORKDIR /usr/share/nginx/html</span><br><span class="line">COPY --from=build-env /home/username/env/hexo-blog/public /user/share/nginx/html</span><br><span class="line">EXPOSE 80</span><br></pre></td></tr></table></figure>
<p>2.运行hexo</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo docker build -t hexo_nginx:latest .</span><br><span class="line">sudo run -p 80:80 -d hexo_nginx:latest</span><br></pre></td></tr></table></figure>

<p><strong>docker的image发布</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo docker login</span><br><span class="line">sudo docker tag [imageName] [username]/[repository]:[tag] #为image打标签和版本</span><br><span class="line">sudo docker image push [username]/[repository]:[tag]      #发布</span><br></pre></td></tr></table></figure>

<p><strong>docker拷贝并部署到其他机器</strong>  </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">打包文件</span><br><span class="line">sudo docker svae -o markdown:hexo1.2 ./my-hexo1.2.tar </span><br><span class="line">新电脑解包文件，安装号docker后就可以运行</span><br><span class="line">sudo docker load &lt; my-hexo1.2.tar</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>微服务</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>每日PS技巧11：曲线</title>
    <url>/title/b00ea4f1/</url>
    <content><![CDATA[<p><img src="https://s2.ax1x.com/2019/12/10/QB5J1J.md.png" alt="PS11_1"> </p>
<a id="more"></a>

<p>今天学习滤镜中的径向模糊。</p>
<h2 id="今日技巧-径向模糊"><a href="#今日技巧-径向模糊" class="headerlink" title="今日技巧 [径向模糊]"></a>今日技巧 [径向模糊]</h2><p>主要步骤：  </p>
<p>1) 打开图像素材<br>2) 添加色彩平衡调整图层<br>3) 添加曲线调整图层<br>4) 保存发布</p>
<p>首先导入图片素材，下面是原图。</p>
<p><img src="https://s2.ax1x.com/2019/12/10/QBIp34.md.png" alt="PS11_2">  </p>
<p>发现左下角有文字，复制背景图层，然后在上面用图章盖印掉。</p>
<p><img src="https://s2.ax1x.com/2019/12/10/QBIiuR.md.png" alt="PS11_3"> </p>
<p>添加色彩平衡调整图层，使得图层显示淡淡的蓝色。调整图层的意思是，不用修改原图，直接把效果叠加上原图。</p>
<p><img src="https://s2.ax1x.com/2019/12/10/QBIZ4O.md.png" alt="PS11_4"> </p>
<p>添加曲线调整图层，该工具可以调整整个图片的亮度，实际就是一个函数$$y = kx$$，通过如图的调节变为了$$y=ax^2$$的类型，使得图片整体的色彩分布更有特色，有突出，而不是线性的模式。</p>
<p><img src="https://s2.ax1x.com/2019/12/10/QBIlDI.md.png" alt="PS11_5"> </p>
<p>最后附上原图和效果图，原图：2018.6.19 Baidu图片。</p>
<p><img src="https://s2.ax1x.com/2019/12/10/QBIGUf.md.png" alt="PS11_7"> </p>
<p><img src="https://s2.ax1x.com/2019/12/10/QB5J1J.md.png" alt="PS11_8"> </p>
]]></content>
      <categories>
        <category>设计</category>
      </categories>
      <tags>
        <tag>PS</tag>
      </tags>
  </entry>
  <entry>
    <title>每日PS技巧10：径向模糊做车灯</title>
    <url>/title/910f1429/</url>
    <content><![CDATA[<p><img src="https://s2.ax1x.com/2019/12/09/QwlJDe.md.png" alt="PS10_1"> </p>
<a id="more"></a>

<p>今天学习滤镜中的径向模糊。</p>
<h2 id="今日技巧-径向模糊"><a href="#今日技巧-径向模糊" class="headerlink" title="今日技巧 [径向模糊]"></a>今日技巧 [径向模糊]</h2><p>主要步骤：  </p>
<p>1) 打开图像素材<br>2) 加入黑色图层和空白图层<br>3) 在白色图层上用画笔画圆，且模式为溶解<br>4) 对白色图层施加滤镜里的径向模糊<br>5) 重复滤镜动作得到灯光效果<br>6) 移动位置，复制一份，得到两个灯光<br>7) 车身和环境调色<br>8) 保存发布</p>
<p>首先导入图片素材，下面是原图。</p>
<p><img src="https://s2.ax1x.com/2019/12/09/QwlwCt.md.png" alt="PS10_2"></p>
<p>新建图层，填充为黑色，再在黑色图层上创建空白图层，使用半径为45的画笔，硬度为0%，在中间画一个点，并调整该图层模式为溶解.再在空白图层和黑色图层间创建空白图层，合并两个空白图层(这一步是为了使模式变为正常）。如下图：</p>
<p><img src="https://s2.ax1x.com/2019/12/09/QwlyDg.md.png" alt="PS10_3"></p>
<p>使用滤镜中的径向模糊，调整为缩放模式，最大点数。</p>
<p><img src="https://s2.ax1x.com/2019/12/09/Qwl7b4.md.png" alt="PS10_4"></p>
<p>初步效果如下：</p>
<p><img src="https://s2.ax1x.com/2019/12/09/Qwlj8x.md.png" alt="PS10_5"></p>
<p>然后，重复执行Ctrl+Alt+F，也就是多次重复刚刚的滤镜动作，可以得到下图的灯光样式。如果不行，试试复制图层。</p>
<p><img src="https://s2.ax1x.com/2019/12/09/Qw1prD.md.png" alt="PS10_6"></p>
<p>此时可以打开车身图层，看看效果。</p>
<p><img src="https://s2.ax1x.com/2019/12/09/Qw1API.md.png" alt="PS10_7"></p>
<p>效果一般般吧，但车身色彩不行，我们添加色相饱和度和色彩平衡图层，调节车身和环境颜色。</p>
<p><img src="https://s2.ax1x.com/2019/12/09/Qw1uqg.md.png" alt="PS10_8"></p>
<p>最后，加上灯光。可以看到，调整后的环境还是被灯光给破坏了，颜色明显淡了，这时对比的结果。</p>
<p><img src="https://s2.ax1x.com/2019/12/09/Qw1MZQ.md.png" alt="PS10_9"></p>
<p>最后附上原图和效果图，原图：2018.6.18 Baidu图片。<br><img src="https://s2.ax1x.com/2019/12/09/Qw1ULF.md.png" alt="PS10_XI"></p>
<p><img src="https://s2.ax1x.com/2019/12/09/Qw18Gq.md.png" alt="PS10_X"></p>
<p><img src="https://s2.ax1x.com/2019/12/09/QwlJDe.md.png" alt="PS10_XII"> </p>
<p>调过色的图果然要好一点儿，灯光亮瞎狗眼，哈哈，今天就这样吧！</p>
]]></content>
      <categories>
        <category>设计</category>
      </categories>
      <tags>
        <tag>PS</tag>
      </tags>
  </entry>
  <entry>
    <title>每日PS技巧9：照片换色</title>
    <url>/title/51ed8652/</url>
    <content><![CDATA[<p><img src="https://s2.ax1x.com/2019/12/08/QaPYnS.md.png" alt="PS9_1"> </p>
<a id="more"></a>

<p>今天学习图像颜色替换，把封面中的花色调出来。</p>
<h2 id="今日技巧-图像换色"><a href="#今日技巧-图像换色" class="headerlink" title="今日技巧 [图像换色]"></a>今日技巧 [图像换色]</h2><p>主要步骤：  </p>
<p>1) 打开图像可选颜色<br>2) 调节参数并保存</p>
<p>首先导入图片素材，我们首先试试色相饱和度能不能行。</p>
<p><img src="https://s2.ax1x.com/2019/12/08/QaiCDS.md.png" alt="PS9_2"></p>
<p>花是黄色，所以选择对黄色色相进行调节，下图显示，结果不好，而且人脸变色严重，值发绿。</p>
<p><img src="https://s2.ax1x.com/2019/12/08/QaiFEQ.md.png" alt="PS9_3"></p>
<p>所以，可以试试可选颜色以调整颜色的值。</p>
<p><img src="https://s2.ax1x.com/2019/12/08/Qaieg0.md.png" alt="PS9_4"></p>
<p>因为要改变黄色为粉红色，而黄色和红色挨着，所以一并调节黄色和红色的值，同时减少青色的值，具体值自己一试就知道了，按效果来调节。</p>
<p><img src="https://s2.ax1x.com/2019/12/08/Qaitv6.md.png" alt="PS9_5"></p>
<p>然后我们发现人脸也变色了，变得特别红，所以需要恢复原图人脸的颜色，同时保留花儿变化后的颜色。可以使用蒙版对人脸进行恢复。如下图，恢复的人脸和没恢复的，差别明显。</p>
<p><img src="https://s2.ax1x.com/2019/12/08/QaiRr8.md.png" alt="PS9_6"></p>
<p>把人脸调节完，基本就可以了，当然，大体可以，细节还不行，学习就到这一步，细节微调属于其他技巧。</p>
<p><img src="https://s2.ax1x.com/2019/12/08/QaF9R1.md.png" alt="PS9_7"></p>
<p>下面附上原图和效果图，原图来源：2019.12.07 毕业班级照片校色图。</p>
<p><img src="https://s2.ax1x.com/2019/12/07/QtYtQU.md.png" alt="PS9_8"> </p>
<p><img src="https://s2.ax1x.com/2019/12/08/QaPYnS.md.png" alt="PS9_9"> </p>
<p>当然，还可以调成其他颜色，下面的背景也换了。</p>
<p><img src="https://s2.ax1x.com/2019/11/12/M3JoEn.md.png" alt="biye1"></p>
<p><img src="https://s2.ax1x.com/2019/11/12/M3Jju4.md.png" alt="biye2"></p>
]]></content>
      <categories>
        <category>设计</category>
      </categories>
      <tags>
        <tag>PS</tag>
      </tags>
  </entry>
  <entry>
    <title>每日PS技巧8：照片调色</title>
    <url>/title/84b0c2df/</url>
    <content><![CDATA[<p><img src="https://s2.ax1x.com/2019/12/07/QtYtQU.md.png" alt="PS8_1"> </p>
<a id="more"></a>

<p>今天学习图像调节技术，拿着一张图片，如何判断其质量呢？我们可以通过色阶，饱和度，对比度来看看。</p>
<h2 id="今日技巧-图像调色"><a href="#今日技巧-图像调色" class="headerlink" title="今日技巧 [图像调色]"></a>今日技巧 [图像调色]</h2><p>主要步骤：  </p>
<p>1) 调节图像色阶<br>2) 调节图像饱和度<br>3) 调节图像色彩平衡<br>4) 调节图像对比度</p>
<p>首先导入图片素材，通过右下角工具栏选择创建色阶调整图层。然后，可以看到这幅图各个段的颜色都有，还算均匀，可以不用调，但其他图片可就说不准了。</p>
<p><img src="https://s2.ax1x.com/2019/12/07/Qttup6.md.png" alt="PS8_2"></p>
<p>接着创建饱和度调整图层，追加30左右的饱和度，这时，人脸就温和多了，环境也更鲜艳了。拿到人像，一定追加饱和度，尤其是女性图片，追加过后，女性会显出一种饱满，健康的色彩，要漂亮得多。很多女生拍了照，也不会调整，最后对照片还是不满意。</p>
<p><img src="https://s2.ax1x.com/2019/12/07/QttQXD.md.png" alt="PS8_3"> </p>
<p>接着创建色彩平衡度调整图层，选择对阴影部分调节，青色加一点，绿色加一点，蓝色加一点。这是对环境进行处理，让冷色调更冷，暖色调更暖。可以和上面对照看，应该很明显了。</p>
<p><img src="https://s2.ax1x.com/2019/12/07/Qtt87d.md.png" alt="PS8_4"></p>
<p>接着作锐化，让物体轮廓更清晰。先复制原图层一份，在复制图层上，通过滤镜&gt;其他&gt;高反差保留，设置半径为1。如果仔细看，灰色图层上有人物轮廓。</p>
<p><img src="https://s2.ax1x.com/2019/12/07/QttXjO.md.png" alt="PS8_5"> </p>
<p>然后设置这个灰色图层模式为柔光，得到下面的最终图像。</p>
<p><img src="https://s2.ax1x.com/2019/12/07/QtNbZQ.md.png" alt="PS8_6"></p>
<p>当然，你说，看起来好像也没啥变化呀？对比看，才行。附上原图和效果图，自己用肉眼看看，就知道差距了。</p>
<p>原图来源：2018.06.19 10:07:49，毕业班级照片。</p>
<p><img src="https://s2.ax1x.com/2019/12/07/QtNjGq.md.png" alt="PS8_7"></p>
<p><img src="https://s2.ax1x.com/2019/12/07/QtYtQU.md.png" alt="PS8_8"> </p>
<p>这能叫没区别吗？你可以把这一套操作保留成动作，然后批量对图片施加该动作，就能批量修图啦！毕业一年多了，现在我才翻出老照片，就处理了这一张，其他得等有时间再说吧。</p>
]]></content>
      <categories>
        <category>设计</category>
      </categories>
      <tags>
        <tag>PS</tag>
      </tags>
  </entry>
  <entry>
    <title>携号转网的套路</title>
    <url>/title/652f364c/</url>
    <content><![CDATA[<p><img src="https://s2.ax1x.com/2019/12/07/QtmWZT.md.png" alt="xz"> </p>
<a id="more"></a>

<p>携号转网，也称作号码携带、移机不改号，也就是说一家电信运营商的用户，无需改变自己的手机号码，就能转而成为另一家电信运营商的用户，并享受其提供的各种服务。2019年8月5日，携号转网进入落地阶段。11月10日，三大运营商携号转网服务正式进入试运行阶段。11月11日，工信部印发《携号转网服务管理规定》，规定自2019年12月1日起施行。</p>
<p>各大运营商为拦截用户，防止客户流失使出了各种花招，我本人今天就遇到了。鄙人自2012年1月12日开了尾号为3030的手机号，到今天(2010-12-07)已经2886天了，这近三千天，没有享受到什么优惠，真的。近8年时间内，送过我几次流量，就几百兆，目前48元每月，就5G流量，还是去年才办的，超了就限速。这么多年就没有其他任何服务或者优惠是我享受过的，除此之外，10085经常打电话推销各种服务，让人生烦。</p>
<p>要办理携号转网需要查询自己是否有资格，发送CXXZ#姓名#身份证号到10086。要办理携号转网就不能欠费，不能绑定各种莫名其妙的服务。然而，我就是发现自己突然被绑定了莫名其妙的服务，而且该服务不要钱，但2020年12月31日才过期。这个服务在上个月4号，自动办理，没发短信给我，我只是恰好上网查询才知道有这么个东西，见下图第二行，也请自己查查是不是也享受了这神秘的高级免费服务，或者其他更高级的服务。</p>
<p><img src="https://s2.ax1x.com/2019/12/07/QtefCd.md.png" alt="xiehao1"></p>
<p>所以，我今早老老实实地打电话叫客服给取消了。客服反复说，这是不要钱的。我当然知道不要钱，但是这个破服务也阻止了携号转网的办理，不要钱的就是最贵的，把上面的图和下面的图对照看，就知道这么个把戏了。</p>
<p><img src="https://s2.ax1x.com/2019/12/07/Qtm3PH.md.png" alt="xiehao2"> </p>
<p>我哪里那么幸运，过去几年，优惠什么的都没享受，这65分钟通话就那么好心，自己找上来了？我不信我运气这么好。打了电话，本就是取消个服务，然而移动的短信回馈过来说是什么投诉，我就没投诉任何人和服务，就是要取消掉不要钱的服务。可见，这个服务就是为了拦截用户携号转网，故意增加的，而且提前一个月就给你开好了，所以取消服务成了投诉，然后还要什么专员来处理。写这个博客也花了一段时间了，到现在，该服务还未取消，你说怪不怪。</p>
<p><img src="https://s2.ax1x.com/2019/12/07/QtmJxI.md.jpg" alt="xiehao3"> </p>
<p>下个月12号就八年了，就这待遇，真心寒。看来真是老用户该死，新用户万岁。要转的，就大胆转吧！</p>
]]></content>
      <categories>
        <category>中国移动</category>
      </categories>
      <tags>
        <tag>Service</tag>
      </tags>
  </entry>
  <entry>
    <title>利用Scrapy爬取Bing壁纸</title>
    <url>/title/67e0d7bf/</url>
    <content><![CDATA[<p><img src="https://s2.ax1x.com/2019/12/06/QJmRsK.md.png" alt="bing_1"></p>
<a id="more"></a>

<p>今天学习一下利用scrapy爬取bing的壁纸，bing的壁纸确实好看，我认为这是微软最值得赞赏的地方，反而他的windows我还不那么喜欢。</p>
<p>首先打开某程序员做的bing壁纸保存网站<a href="https://bing.ioliu.cn/" target="_blank" rel="noopener">Bing</a>，可以看到和封面一样多的图片，从图中可以看到有标题，日期，等。</p>
<p>现在设定我们需要的数据段：</p>
<table>
<thead>
<tr>
<th align="center">序号</th>
<th align="center">数据名</th>
</tr>
</thead>
<tbody><tr>
<td align="center">0</td>
<td align="center">图片url</td>
</tr>
<tr>
<td align="center">1</td>
<td align="center">下一页url</td>
</tr>
<tr>
<td align="center">2</td>
<td align="center">图片日期</td>
</tr>
</tbody></table>
<p>我觉得标题太长，就用日期作标题吧。接着使用web开发者工具，调出控制台查看原代码。</p>
<p>1.首先定位图片位置，将鼠标放在第一副图上，可以看到其中文标题，接着在查看器中搜索这个标题，找到源码出处。如下图。可以看到图片包裹在div class=”item”的div class=”description”中。</p>
<p><img src="https://s2.ax1x.com/2019/12/06/QJnnY9.md.png" alt="bing_2"> </p>
<p>所有图片则属于不同的item。</p>
<p><img src="https://s2.ax1x.com/2019/12/06/QJnGwD.md.png" alt="bing_4"></p>
<p>同时可以看到，图片img链接在div class=”card progressive”中，且src属性中保存着图片实际地址。</p>
<p><img src="https://s2.ax1x.com/2019/12/06/QJnly6.md.png" alt="bing_3"></p>
<p>接着拉到底部，可以看到有114页图片，下一页的链接就在div class=”page”中。</p>
<p><img src="https://s2.ax1x.com/2019/12/06/QJnUfA.md.png" alt="bing_5"> </p>
<p>最后鼠标放到图片上，查看日期，比如2019-12-06，接着搜索该日期位置，发现在div class=”calendar”中，如此所有数据查找完毕。</p>
<p><img src="https://s2.ax1x.com/2019/12/06/QJnrm8.md.png" alt="bing_6"></p>
<p>好，所有数据得到了，现在利用scrapy创建项目，编写对应的spider和pipeline，最后设置好图片保存位置就可以爬取图片了。</p>
<p>scrapy startproject bing<br>scrapy genspider picture bing.ioliu.cn<br>mv picture.py bing/bing/spiders/<br>接着查看项目结构如下<br>$ tree bing/  </p>
<p><img src="https://s2.ax1x.com/2019/12/06/QJK4dU.md.png" alt="bing_7"> </p>
<p>现在在item.py中定义需要获取的信息字段</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class ImageItem(scrapy.Item):</span><br><span class="line">    titles = scrapy.Field()</span><br><span class="line">    images = scrapy.Field()</span><br><span class="line">    image_urls = scrapy.Field()</span><br></pre></td></tr></table></figure>

<p>然后到picture中实现爬取逻辑，上面的分析都给出了url地址，所以代码很简单。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line">import sys</span><br><span class="line">import scrapy</span><br><span class="line">from bing.items import ImageItem</span><br><span class="line"></span><br><span class="line">class WallpaperSpiderSpider(scrapy.Spider):</span><br><span class="line">    name = &apos;wallpaper&apos;</span><br><span class="line">    allowed_domains = [&apos;bing.ioliu.cn&apos;]</span><br><span class="line">    start_urls = [&apos;https://bing.ioliu.cn&apos;]</span><br><span class="line"></span><br><span class="line">    i = 0</span><br><span class="line">    item = ImageItem()</span><br><span class="line">    def parse(self, response):</span><br><span class="line">        #第一步：获取图片标题(这里是指日期)和图片url</span><br><span class="line">        sel = response.xpath(&apos;//div[@class=&quot;description&quot;]&apos;)</span><br><span class="line">        ttls= sel.xpath(&apos;.//p[@class=&quot;calendar&quot;]/em/text()&apos;).extract()</span><br><span class="line">        self.item[&apos;titles&apos;] = ttls</span><br><span class="line"></span><br><span class="line">        lks = response.xpath(&apos;//div[@class=&quot;item&quot;]/div/img/@src&apos;).extract()</span><br><span class="line">        self.item[&apos;image_urls&apos;] = lks</span><br><span class="line">        yield self.item</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        self.i += 1</span><br><span class="line">        if self.i &gt; 114: #114页，到了就停止下载，不然会反复下载最后一页图片。</span><br><span class="line">            sys.exit(0)</span><br><span class="line"></span><br><span class="line">        #step 2: 提取下一页url</span><br><span class="line">        href = response.xpath(&apos;//div[@class=&quot;page&quot;]/a[2]/@href&apos;).extract_first()</span><br><span class="line">        next_url = response.urljoin(href)</span><br><span class="line">        if next_url:</span><br><span class="line">            yield scrapy.Request(next_url, callback=self.parse)</span><br></pre></td></tr></table></figure>
<p>接着就是到pipelines.py中修改，实现自定义图片标题。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from os.path import basename</span><br><span class="line">from scrapy.http import Request </span><br><span class="line">from scrapy.pipelines.images import ImagesPipeline</span><br><span class="line"></span><br><span class="line">class RenameImagesPipeline(ImagesPipeline):</span><br><span class="line">    def get_media_requests(self, item, info):</span><br><span class="line">        for img_url in item[&apos;image_urls&apos;]:</span><br><span class="line">            img_type = basename(img_url).split(&apos;.&apos;)[1]  #jpeg, png</span><br><span class="line">            img_idex = item[&apos;image_urls&apos;].index(img_url)</span><br><span class="line">            img_name = item[&apos;titles&apos;][img_idex]         #2019-12-06</span><br><span class="line"></span><br><span class="line">			#下面代码实现的图片名称是BingWallpaper-2019-12-06.jpe这种格式。</span><br><span class="line">            img_name = &apos;&apos;.join([&apos;BingWallpaper-&apos;,img_name,&apos;.&apos;,img_type])</span><br><span class="line">            yield Request(img_url, meta=&#123;&apos;img_name&apos;: img_name&#125;)</span><br><span class="line"></span><br><span class="line">    def file_path(self, request, response=None, info=None):</span><br><span class="line">        return request.meta[&apos;img_name&apos;]</span><br></pre></td></tr></table></figure>

<p>然后将RenameImagesPipeline注册到setting中，并设置好图片保存地址</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ITEM_PIPELINES = &#123;</span><br><span class="line">    &apos;bing.pipelines.RenameImagesPipeline&apos;: 300,</span><br><span class="line">&#125;</span><br><span class="line">IMAGES_STORE=&apos;/home/username/bingpic/&apos; #自己设置就好</span><br><span class="line">IMAGES_MIN_WIDTH=110                   #最小图片尺寸，过小就不下载。</span><br><span class="line">IMAGES_MIN_HEIGHT=110</span><br></pre></td></tr></table></figure>
<p>现在回到主bing/目录下，使用scrapy crawl wallpaer就可以了。然后到你的图片保留目录下就可以看到下载的图片了。<br>我的下载了1000多张，时间越晚，图片越多。Have fun!</p>
<p><img src="https://s2.ax1x.com/2019/12/06/QJlHzj.md.png" alt="bing_8"></p>
]]></content>
      <categories>
        <category>爬虫</category>
      </categories>
      <tags>
        <tag>IT</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>每日PS技巧7：替换背景</title>
    <url>/title/ca0a4a5b/</url>
    <content><![CDATA[<p><img src="https://s2.ax1x.com/2019/12/06/QJAcFI.md.png" alt="PS7_1"></p>
<a id="more"></a>

<p>今天学习替换背景图层，就是给原图换个环境，实现空间大挪移。</p>
<h2 id="今日技巧-背景替换"><a href="#今日技巧-背景替换" class="headerlink" title="今日技巧 [背景替换]"></a>今日技巧 [背景替换]</h2><p>主要步骤：  </p>
<p>1) 调整图片大小<br>2) 利用选区工具选择要替换的部分<br>3) 抠除选中部分背景，删除<br>4) 加入新背景图，调整大小以适应<br>5) 修复图中干扰背景<br>6) 合并保存  </p>
<p>首先导入图片素材，选择剪裁工具，调整图片宽度，去掉水印什么的。接着用自由选择工具选中要删除的背景，如下图蚂蚁线所标识的。</p>
<p><img src="https://s2.ax1x.com/2019/12/06/QJATTs.md.png" alt="PS7_2"></p>
<p>按删除键，去掉选区内容，得到去背景的初步素材。</p>
<p><img src="https://s2.ax1x.com/2019/12/06/QJEGjS.md.png" alt="PS7_3"></p>
<p>此时，发现某老师的腿还漏在里面，所有要先摸出这些干扰背景。使用图章，或者图像修复工具都可以把腿融合到背景，但是，跑道的线不能去掉，不但不能去掉，还得恢复出来。这时可以利用滤镜&gt;消失点工具，建立工作区，使用Alt键，选中一段干净的跑道线，软后覆盖掉腿部分，这样跑道就恢复了。</p>
<p><img src="https://s2.ax1x.com/2019/12/06/QJEOUA.md.png" alt="PS7_4"> </p>
<p>这时，加入新的背景图层，积极调整以适应原图，合并图层就是最终结果了。</p>
<p><img src="https://s2.ax1x.com/2019/12/06/QJVCDg.md.png" alt="PS7_5"></p>
<p>当然，这时还可以再虚化跑道边缘，给跑道撒上沙子什么的，这样就能得到更好的效果。不过，这个教程目的已经达到了，就到这儿吧。</p>
<p>最后再附上原图和效果图。</p>
<p>原图来源：2016年04月21日，学院公布图。  </p>
<p><img src="https://s2.ax1x.com/2019/12/06/QJVHzV.png" alt="PS7_7"></p>
<p>原图来源：2019年12月06日，百度图片。<br><img src="https://s2.ax1x.com/2019/12/06/QJZFsO.md.png" alt="PS7_8"> </p>
<p><img src="https://s2.ax1x.com/2019/12/06/QJZEee.md.png" alt="PS7_9"></p>
]]></content>
      <categories>
        <category>设计</category>
      </categories>
      <tags>
        <tag>PS</tag>
      </tags>
  </entry>
  <entry>
    <title>个人数据中心和视频床</title>
    <url>/title/b3eac57b/</url>
    <content><![CDATA[<p><img src="https://s2.ax1x.com/2019/12/06/QGolrQ.md.png" alt="pdata"></p>
<a id="more"></a>

<p>最近写了些文章，你可以看到，我的文章都是一样的模式：开局(封面)一张图，内容不靠编，哈，哈！图片我托管到免费的图床上了，视频是直接用B站的外链。目前使用没什么问题，而且我一分钱没花，用起来确实爽。</p>
<p>现在考虑一个情况，那就是那天图床没了，B站视频没了怎么办？你说，怎么可能呢？B站视频一直都在。是吗？美国封锁华为的时候不也就突然就来了吗？内涵段子关停是什么时候，360云盘关停又是什么时候？谁知道哪天B站就倒闭了，图床也没了。美国的封锁给我触动还是比较大的，现在我作什么都要备份，而且备份好几份。系统文件备了四份，代码备了三份，主要怕哪天github也用不了了。当然，老婆也要多备…，呃，这个就算了，没有老婆就老实找。</p>
<p>所以，我们来思考一个问题：针对视频能做出视频床吗？或者有公司在做吗？搜索很久，没发现有，都说这个技术难度太大。当然，视频床不同于图床。图床就是几张图，加速访问就好。可是视频就不行了，视频是一段，很长，量大，太占用带宽。</p>
<p>然而，随着5G的到来，全球普通用户使用高效的云服务是必然趋势，未来我们身上的智能硬件也可能用云管理，智能汽车，智能家具，智能工厂，智慧政府，智能医疗。所以，为什么视频就不能做呢？主要还是技术和利益吧。利益不够大，所以做不起来。我倒是希望5G时代有人能把视频床做起来，服务大众，造福人类吧。技术不就是为人服务的吗?</p>
<p>当然，反对方提出的问题肯定有很多。比如：带宽，存储仓库如何建设，如何避免冗余，使用费用，加速模式如何实现等等问题。然而，我记得阿里云王坚做云服务的时候，大家说他是骗子，把他骂哭了，只有马云支持他，说是给他100亿由他搞，不设KPI，遂今天阿里巴巴云服务如此成功，双十一能卖那么多东西。所以，为什么视频床就做不起来？腾讯，爱奇艺，优酷都能存储大量视频，为何私人就不能？我们人看问题往往是用过去的技术以延伸到未来，所以时代技术必然限制我们的思考能力，进而反对多于支持。</p>
<p>考虑到时代发展到今天这一步，我今天提出新的网络建设概念：个人数据中心。我们有人类基因组大数据中心，有动植物库，有身份证管理中心，有银行结算中心。为何地球百姓就不能有自己唯一的数据中心呢？就像身份证每人一张，未来物联网时代，每个人拥有一个数据中心，这个中心可以交给相应的企业管理。这样我们就又能创立出巨无霸公司了。给数据中心设立权限和信用荣誉机制，个人必须维护自己的数据中心，利用区块链把个人信用和他的消费及行为数据链接起来，这样就不能作假，一旦作假，个人信用丢失，银行，政府可以制裁他，直到他弥补错误。同时，结合个人数据中心，推出新的消费服务，大量可以线上处理的订单，流程，签约都利用个人数据中心实现自动化。</p>
<p>4G时代短视频爆发，人性进一步发扬，但视频保留在大企业手中。5G时代说不得就要干掉这种模式，就像二维码干掉现金一样。未来的大企业可能就是为用户服务，成为服务视频，图像，文档的管理和维护公司。今天的百度云，坚果云未来未必不会进化为个人数据中心的建设者。个人数据中心需要保存每一个入网用户生产或合法购买的视频，图像，学习工作简历，生活材料(生活缴费，医疗教育费用凭证等等)。反正就是一个人一生的方方面面能数据化的内容都保留，人过世后，数据中心将存有对其的评价，他的遗嘱，他的资产和信用，著作，专利等等。</p>
<p>我现在开个脑洞吧，为个人数据中心设立些指标，以后再摸索。</p>
<table>
<thead>
<tr>
<th align="left">指标</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">访问</td>
<td align="left">人人间的数据访问开放权限，可修正</td>
</tr>
<tr>
<td align="left">消费</td>
<td align="left">通过该机制实现个人消费结算，可修正</td>
</tr>
<tr>
<td align="left">展示</td>
<td align="left">个人社交，产品，作品等展示，可修正</td>
</tr>
<tr>
<td align="left">信用</td>
<td align="left">分数制，根据消费和行为的区块链大数据计算得出，可修正</td>
</tr>
<tr>
<td align="left">安全</td>
<td align="left">整个数据中心的外层和内层各设置安全管理服务，防黑客</td>
</tr>
<tr>
<td align="left">综评</td>
<td align="left">统计个人生活维度内的得分，最后给出综合评分，可修正</td>
</tr>
</tbody></table>
<p>今天的人看自己微博有几个赞，未来我们完全可以让他们更加在意自己的数据中心得分。数据中心可以展示他们自己的作品，视频，文字，图像，一样可以实现社交，颠覆微信的社交模式。同时，利用信用机制结合消费权限，实现数据中心的结算功能。同样的，教育，医疗，家庭消费都可以搬上去。</p>
<p>是吧，这要看人类怎么走，我心中的未来世界的一部分就是这样了，你认为呢？</p>
]]></content>
      <categories>
        <category>云服务</category>
      </categories>
      <tags>
        <tag>video</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows下优秀软件和工具推荐</title>
    <url>/title/12c389c6/</url>
    <content><![CDATA[<p><img src="https://s2.ax1x.com/2019/12/05/QGGjzQ.md.png" alt="win_soft"></p>
<a id="more"></a>

<p>你会用windows系统吗？大部分人看到这么个问题可能会大笑：我怎么不会？你不看我每天用它完成了多少工作。然而，大部分人只是会点鼠标而已，至于系统优化，系统架构大部分人，不，是绝大部分人都不懂，所以他们的电脑都是垃圾，界面其丑无比，桌面文件图标一堆，什么xx工作报告.txt，123.txt，20xx文档.docx一堆，我大学本科辅导员就是这么干的，我甚至当面说过他，也不知他改了没？混乱的桌面，过不了一周他们自己也晕了，而且使用Windows自带的工具效率实在太低了。还有，不注意网络使用，黑客们经常扫描到弱鸡电脑，直接攻破并利用。至于什么360流氓就不用说了。</p>
<p>视频：当你想卸载360的时候(弹幕可关闭)。</p>
<iframe src="https://player.bilibili.com/player.html?aid=76592877&cid=131013977&page=1" width="270" height="250" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"></iframe>

<p>下面介绍些Windows下的好用软件，提升大家的效率。当然，我本身不怎么用windows了，除了用PS之外，我很少用Windows。大部分时候，我还是使用Linux系统，尤其是编程，黑客技术只能在Linux下操作才方便。下面的软件分普通用户和高级用户，各位按需下载使用就好，这些软件基本没有广告，不是流氓软件，很多我以前使用过，真能帮助你高效学习，工作，生活。普通用户指：安装完软件就能用，高级用户指安装完还要学习很多操作，较为困难，有些的困难指数和学习编程一样的难。</p>
<h2 id="软件列表"><a href="#软件列表" class="headerlink" title="软件列表"></a>软件列表</h2><table>
<thead>
<tr>
<th align="center">适合用户</th>
<th align="left">名称</th>
</tr>
</thead>
<tbody><tr>
<td align="center">普通用户</td>
<td align="left">firefox(浏览器)</td>
</tr>
<tr>
<td align="center">普通用户</td>
<td align="left">chrome(浏览器)</td>
</tr>
<tr>
<td align="center">普通用户</td>
<td align="left">everything(文件搜索)</td>
</tr>
<tr>
<td align="center">普通用户</td>
<td align="left">notepad++(代码编写)</td>
</tr>
<tr>
<td align="center">普通用户</td>
<td align="left">fences(桌面管理)</td>
</tr>
<tr>
<td align="center">普通用户</td>
<td align="left">f.fux(只能屏保)</td>
</tr>
<tr>
<td align="center">普通用户</td>
<td align="left">Evernote(笔记速记)</td>
</tr>
<tr>
<td align="center">普通用户</td>
<td align="left">CCleaner(软件卸载)</td>
</tr>
<tr>
<td align="center">普通用户</td>
<td align="left">LICEcap(快速截图)</td>
</tr>
<tr>
<td align="center">普通用户</td>
<td align="left">IDM(文件下载)</td>
</tr>
<tr>
<td align="center">普通用户</td>
<td align="left">7-zip(解压软件)</td>
</tr>
<tr>
<td align="center">普通用户</td>
<td align="left">unlocker(解锁资源)</td>
</tr>
<tr>
<td align="center">普通用户</td>
<td align="left">seer(预览文件)</td>
</tr>
<tr>
<td align="center">普通用户</td>
<td align="left">Xmind(思维导图)</td>
</tr>
<tr>
<td align="center">高级用户</td>
<td align="left">cetex(pdf文档制作)</td>
</tr>
<tr>
<td align="center">高级用户</td>
<td align="left">Listary(文件搜索)</td>
</tr>
<tr>
<td align="center">高级用户</td>
<td align="left">pycharm(软件开发)</td>
</tr>
<tr>
<td align="center">高级用户</td>
<td align="left">anaconda(科学计算)</td>
</tr>
<tr>
<td align="center">高级用户</td>
<td align="left">LastPass(密码管理)</td>
</tr>
<tr>
<td align="center">高级用户</td>
<td align="left">CPU-Z(系统资源查看)</td>
</tr>
<tr>
<td align="center">高级用户</td>
<td align="left">PS CC(图像处理)</td>
</tr>
<tr>
<td align="center">高级用户</td>
<td align="left">字由(字体管理)</td>
</tr>
<tr>
<td align="center">高级用户</td>
<td align="left">Steam(游戏平台)</td>
</tr>
<tr>
<td align="center">高级用户</td>
<td align="left">cmder(模仿Linux命令行)</td>
</tr>
<tr>
<td align="center">高级用户</td>
<td align="left">Typora(Markdown文档)</td>
</tr>
<tr>
<td align="center">高级用户</td>
<td align="left">FFmpeg(音视频转换)</td>
</tr>
<tr>
<td align="center">高级用户</td>
<td align="left">Calibre(电子书处理)</td>
</tr>
<tr>
<td align="center">高级用户</td>
<td align="left">Sumatra(PDF阅读)</td>
</tr>
<tr>
<td align="center">高级用户</td>
<td align="left">TeamViewer(远程控制)</td>
</tr>
<tr>
<td align="center">高级用户</td>
<td align="left">rufus(系统启动盘制作)</td>
</tr>
<tr>
<td align="center">高级用户</td>
<td align="left">AOMEI分区助手(系统分区和迁移)</td>
</tr>
</tbody></table>
<h2 id="详细介绍-点击可进入官网下载"><a href="#详细介绍-点击可进入官网下载" class="headerlink" title="详细介绍(点击可进入官网下载)"></a>详细介绍(点击可进入官网下载)</h2><p><a href="https://www.firefox.com.cn" target="_blank" rel="noopener">firefox</a> 是一款优秀的浏览器，互联网诞生过程中，firefox的母公司制定了许多网络的协议和标准，帮助了互联网的发展。Firefox不搜集用户信息，防止恶意网站攻击。其他什么百度，360，猎豹等国内浏览器都是要搜集你信息，比较垃圾和流氓，大家可以卸载了。你问我用什么浏览器，我就用这款，主要是程序员和很多黑客用它，而且也好用。还有，最好把windows自带的Edge浏览器卸载掉，如何卸载可以百度或邮件我<a href="mailto:Shieber@aliyun.com" target="_blank" rel="noopener">Shieber@aliyun.com</a>，我发软件给你。Edge的作用还是有的，就是用来下载其他更优秀的浏览器，然后它的使命就完了。还有不要用百度一下，用<a href="https://cn.bing.com/" target="_blank" rel="noopener">Bing</a>搜索就好了，百度全是广告和百家号内容，搜不到自己要的东西，而必应(Bing)就几乎没有广告，而且搜索出来的东西多半就是你要的。</p>
<p><a href="https://www.google.cn/chrome/index.html" target="_blank" rel="noopener">chrome</a> 谷歌的浏览器，效果好，和firefox有的一拼，但最近加入搜集用户信息功能，招致很多用户批评，然而它依然很强大，全球占有率第一。国内大部分浏览器都是借用的chrome或IE浏览器的引擎，然后包装个界面，就号称自主研发，实则是个流氓。强烈建议用户卸载所有国产浏览器，使用这两款中的任意一款。</p>
<p><a href="https://www.voidtools.com/zh-cn" target="_blank" rel="noopener">everything</a> 找不到文件？那就用这个搜索，只要输入名字，就给你找出文件在电脑的哪个地方，全盘搜索。  </p>
<p><a href="http://www.listary.com" target="_blank" rel="noopener">Listary</a> 上面的everything很优秀，这个功能比它还多，包括网络搜索功能，可以打开浏览器搜索，操作比较多，跟着教程学习一下就好，其实二者选一就可。</p>
<p><a href="https://notepad-plus-plus.org" target="_blank" rel="noopener">notepad++</a> 想写文档，写代码，又不想装复杂的开发环境，那用notepad++就对了，它可以打开所有编程语言类文件。  </p>
<p><a href="https://www.stardock.com" target="_blank" rel="noopener">fences</a> 桌面图标太乱？用这个软件，把图标收集起来，方便管理和桌面优化。  </p>
<p><a href="https://evernote.com" target="_blank" rel="noopener">Evernote</a> 有好点子，有学习笔记要作？用Evernote，快速作笔记，支持手写，一键保存，云同步。  </p>
<p><a href="https://www.piriform.com/ccleaner/download/standard" target="_blank" rel="noopener">CCleaner</a> 软件卸载有残留怎么办，用CCleaner，它能把软件彻底卸载干净，减少空间占用。请试试用来卸载你电脑上的流氓软件吧。</p>
<p><a href="https://www.cockos.com/licecap/" target="_blank" rel="noopener">LICEcap</a> 想把屏幕操作录制为gif动图就用它，方便快捷。  </p>
<p><a href="https://www.internetdownloadmanager.com" target="_blank" rel="noopener">IDM</a> 还在用迅雷下载文件？试试这个吧，这个更快，更好用。  </p>
<p><a href="http://7-zip.org/download.html" target="_blank" rel="noopener">7-zip</a> 把电脑里的什么2345，winrar解压软件全卸载掉吧，尤其2345还有广告，7-zip很小一个软件，支持解压几乎大部分你能用到的压缩文件，我在windows下也用这个。  </p>
<p><a href="https://unlocker.en.softonic.com" target="_blank" rel="noopener">unlocker</a> 删除文件时显示，文件已在资源管理器中打开，无法删除。这时unlocker就能解决这个问题，一键解除锁定状态，删除文件。</p>
<p><a href="www.1218.io">seer</a> 不想打开文件，又想看看里面是什么，用这个软件可以预览。</p>
<p><a href="http://stereopsis.com/flux" target="_blank" rel="noopener">f.fux</a> 让电脑随着太阳的位置自动调节屏幕色温，保护眼界，我以前也用这个。</p>
<p><a href="http://www.ctex.org/HomePage" target="_blank" rel="noopener">cetex</a> 想直接写PDF文件，用Latex系列软件均可，但是windows下用cetex入手就可。我本科毕业论文就是cetex用的，编出的公式和图片很精美，这是学习的回报。word写的文档太丑，不能自定义。该软件学习尤其困难，应该是本软件推荐列表最难的一个，我用了几年只能是勉强会用了，但是功能强大。博士发表论文几乎都是用tex写的，本科时的老师张传瑜写论文就被这个cetex的语法难倒，还专门请我去给他处理，当然，最后肯定是弄好啦。</p>
<p><a href="https://www.jetbrains.com/pycharm" target="_blank" rel="noopener">pycharm</a> 学习编程，Python，这是个利器，就是应对软件开发的，当然，普通用户就别试了，你没有软件开发的概念，给你一把杀龙刀，你也不会用。</p>
<p><a href="https://www.anaconda.com" target="_blank" rel="noopener">anaconda</a> 想做数据科学家，作计算任务，使用这款封装好python科学计算库的套件，开发提速。</p>
<p><a href="https://lastpass.com" target="_blank" rel="noopener">LastPass</a> QQ,微信，淘宝，支付宝，各种软件密码太多记不过来怎么办，用密码管理软件啊。</p>
<p><a href="https://www.52pojie.cn/thread-1047008-1-1.html" target="_blank" rel="noopener">PS CC</a> 学PS，艺术加工图片，请用PS CC，最新是2019版。</p>
<p><a href="http://www.hellofont.cn/" target="_blank" rel="noopener">字由</a> PS，AI，InDesign中想试试各种字体？用字由免费使用各种字体，不用自己在系统安装那么多字体了。</p>
<p><a href="http://store.steampowered.com/" target="_blank" rel="noopener">Steam</a> 玩游戏的都懂，就不说了。</p>
<p><a href="http://cmder.net" target="_blank" rel="noopener">cmder</a> 这个给Linux下习惯终端操作的程序员，运维等人员，cmder在Windows下实现和Linux下一样的终端，干掉Powershell。</p>
<p><a href="|https://www.typora.io">Typora</a> 发布博客，写文档，尤其是想写Markdown格式文档，请用这个，支持输入Latex数学公式，功能可以。</p>
<p><a href="http://www.xmind.net/" target="_blank" rel="noopener">Xmind</a> 看别人作的笔记和思维导图如此清晰，我们自己也可以制作自己的思维导图，把学习吃透，问题剖析透彻，就用Xmind作导图，支持导出PDF格式文件。</p>
<p><a href="https://ffmpeg.org/" target="_blank" rel="noopener">FFmpeg</a> 转换各种音视频，提取音频，分割合并视频，建议用户卸载格式工厂。</p>
<p><a href="http://calibre-ebook.com/" target="_blank" rel="noopener">Calibre</a> 电子书处理，可转换为TXT，PDF，MOBI，AZW3或是EPUB格式。</p>
<p>[Sumatra](PDF <a href="http://www.sumatrapdfreader.org" target="_blank" rel="noopener">http://www.sumatrapdfreader.org</a> ) 如果不需要编辑PDF文档，只是看看PDF，就用这个吧。占用就几十兆，而Adobe的Acrobat要占用几个G，这差距太大，还有什么福昕阅读器也没什么用，卸载就好。Sumatra还支持打开EPUB，MOBI，CHM，DjVu等格式文档，真是万金油，比Adobe产品方便多了。</p>
<p><a href="http://www.teamviewer.com/" target="_blank" rel="noopener">TeamViewer</a> 要远程控制电脑，用这个就可以。前端时间在内江试着控制成都的电脑，远程做了些运算并从网上爬取文件转换为PDF发到了我手机上，当时我在高速上，车速100，就用手机操作，全程网络没断，确实很方便。</p>
<p><a href="http://www.cpuid.com/softwares/cpu-z.html" target="_blank" rel="noopener">CPU-Z</a> 系统使用了多少CPU资源？用这个可以查看系统CPU等资源使用情况。</p>
<p><a href="http://www.disktool.cn/" target="_blank" rel="noopener">AOMEI分区助手</a> 想换固态硬盘，可是原有系统怎么办？用这个可以把原系统迁移到新硬盘上，不用重装系统。</p>
<p><a href="http://rufus.akeo.ie" target="_blank" rel="noopener">rufus</a> 想装系统？不管Windows还是Linux系统，rufus都搞得定。</p>
<p>还有很多优秀软件，此次给出的软件对于普通用户基本够了，实际很多人到死都用不到这么多软件，看个人爱好和需求吧。一些高端一点的软件，使用可能较为困难，多适应。Office我就不列了，大家都有，电脑上也少不了，当然，也可能是WPS，反正都可以，支持国产也很好。最后，希望大家高效使用电脑，别去装垃圾流氓软件，尤其安全软件，只要默认使用windows自带的defender就好，其实很多安全软件就是最不安全的，它权限高，所以无限搜集你信息，谁知道你的裸照是不是传到别人数据库咯？</p>
]]></content>
      <categories>
        <category>Windows</category>
      </categories>
      <tags>
        <tag>tools</tag>
      </tags>
  </entry>
  <entry>
    <title>每日PS技巧6：制作证件照片</title>
    <url>/title/25cc4f62/</url>
    <content><![CDATA[<p><img src="https://s2.ax1x.com/2019/12/05/Q3yYNj.md.png" alt="PS6_1"></p>
<a id="more"></a>

<p>今天学习图层的新用法–证件照的制作。有时去外面花钱拍的不好，就需要自己来，而且也省了费用。证件照有很多种，一寸的，二寸的，毕业照，驾照等等，其中一寸最常用，具体尺寸如下：</p>
<table>
<thead>
<tr>
<th align="center">类型</th>
<th align="center">尺寸(mm)</th>
</tr>
</thead>
<tbody><tr>
<td align="center">小一寸</td>
<td align="center">22x32</td>
</tr>
<tr>
<td align="center">大一寸</td>
<td align="center">33x48</td>
</tr>
<tr>
<td align="center">毕业照</td>
<td align="center">33x32</td>
</tr>
<tr>
<td align="center">一寸</td>
<td align="center">25x35</td>
</tr>
<tr>
<td align="center">二寸</td>
<td align="center">35x49</td>
</tr>
<tr>
<td align="center">三寸</td>
<td align="center">35x52</td>
</tr>
<tr>
<td align="center">驾照</td>
<td align="center">21x26</td>
</tr>
<tr>
<td align="center">车照</td>
<td align="center">60x91</td>
</tr>
</tbody></table>
<h2 id="今日技巧-一寸证件照制作"><a href="#今日技巧-一寸证件照制作" class="headerlink" title="今日技巧 [一寸证件照制作]"></a>今日技巧 [一寸证件照制作]</h2><p>主要步骤：  </p>
<p>1) 拍摄正面照<br>2) 用PS裁切为宽25mm，高35mm<br>3) 抠除各种背景，杂色<br>4) 调整图像边缘，优化<br>5) 预留白边，方便裁切<br>6) 定义寸照为图案，保存<br>7) 新建标准画布，填充多张寸照  </p>
<p>首先导入图片素材，选择剪裁工具，调整宽为25mm，高为35mm，分辨率一定要300，默认的72在屏幕上能看，但是打印出来就不能看，掉色严重，具体原理在第一篇教程里就讲了。然后就是抠除背景，用魔棒或是钢笔工具都可以，也可以用蒙版把不要涂抹掉，方法其实挺多的。结果如下图：</p>
<p><img src="https://s2.ax1x.com/2019/12/05/Q36oQ0.md.png" alt="PS6_2"></p>
<p>接着，可以修饰边角什么的，用选择&gt;修改&gt;羽化半径。半径自行摸索设置，本次抠图我没用羽化。然后是添加背景色，提前设置好前景色，点击前景色框框，打开的界面最下面输入蓝色的色值329dcb，红色的RGB则可以使用255,1,1。然后用魔棒或是什么工具，选中选区，Alt+Backspace填充前景色，结果如下：</p>
<p><img src="https://s2.ax1x.com/2019/12/05/Q3ga8A.md.png" alt="PS6_3">  </p>
<p>此时，为图像增加白边，白边主要为了剪裁用。图像&gt;画布大小，勾选”相对”，然后自行添加2mm的高和宽。这样图层的白边就有了。</p>
<p><img src="https://s2.ax1x.com/2019/12/05/Q32ZsP.md.png" alt="PS6_4">  </p>
<p>接着保存该图像为图案，方便一会儿填充。编辑&gt;定义图案，自己设置个名字，比如:Trump。接下来，新建图层，宽度设置为4倍(25mm+2mm)，高度设置为2倍(35mm+2mm)。这样就是横4张，竖2张的画布大小。利用快捷键Shift + F5填充画布，选择图案，再选中我们刚定义好的Trump图案，这样就做好了。</p>
<p><img src="https://s2.ax1x.com/2019/12/05/Q3RlTO.md.png" alt="PS6_5"></p>
<p>当然，你要红色，修改一下就好了，如下图：</p>
<p><img src="https://s2.ax1x.com/2019/12/05/Q3Rc1s.md.png" alt="PS6_6"></p>
<p>最后再附上原图和效果图，原图来源：2019年12月05日Baidu图片。  </p>
<p><img src="https://s2.ax1x.com/2019/12/05/Q3RxAO.png" alt="PS6_7">  </p>
<p><img src="https://s2.ax1x.com/2019/12/05/Q3WQvn.md.png" alt="PS6_8">  </p>
<p><img src="https://s2.ax1x.com/2019/12/05/Q3Wd29.md.png" alt="PS6_9"></p>
<p>人物简介：Donald J. Trump，米国大统领；年领：72；年薪：1美元；爱好：发推特；口号：Make America Great Again。</p>
]]></content>
      <categories>
        <category>设计</category>
      </categories>
      <tags>
        <tag>PS</tag>
      </tags>
  </entry>
  <entry>
    <title>Scrapy爬虫框架</title>
    <url>/title/dec09abb/</url>
    <content><![CDATA[<p><img src="https://s2.ax1x.com/2019/12/04/Q1J1AO.md.png" alt="scrapy1"></p>
<a id="more"></a>

<p>前段时间做了好几个爬虫，主要是为自己提供的一些小服务(图片下载，学校讲座信息，新闻获取等)。然而，最近打算大规模获取数据进行其他任务时发现原有的爬虫框架速度不行。经过搜索，发现Scrapy框架能实现大规模爬取，且还可分布式部署，遂入手。</p>
<p>Python自带的网络库也可以做爬虫，比如requests库就做的还不错，结合BeautifulSoup能实现很多简单的爬取功能。但是，速度和量是它们无法绕过的坎儿。</p>
<h2 id="Scrapy架构"><a href="#Scrapy架构" class="headerlink" title="Scrapy架构"></a>Scrapy架构</h2><p>Scrapy把网络爬取功能分拆，各个功能模块不干扰，底层由引擎驱动各个模块，一个中央调度器(Scheduler)管理任务分配。大体框架图如图：</p>
<p><img src="https://s2.ax1x.com/2019/12/04/QlqC6g.md.png" alt="scrapy2"></p>
<table>
<thead>
<tr>
<th align="left">模块</th>
<th align="left">功能</th>
</tr>
</thead>
<tbody><tr>
<td align="left">Engine</td>
<td align="left">驱动所有模块工作</td>
</tr>
<tr>
<td align="left">Scheduler</td>
<td align="left">获取Request并分配任务给Downloader</td>
</tr>
<tr>
<td align="left">Downloader</td>
<td align="left">专注于下载网页Html并返回给Spider</td>
</tr>
<tr>
<td align="left">Spiders</td>
<td align="left">爬虫核心，提取数据和链接返回给Pipeline和Scheduler</td>
</tr>
<tr>
<td align="left">Item Pipeline</td>
<td align="left">专注于下载并存储从Spider传过来的数据(图,文档，音视频等)</td>
</tr>
</tbody></table>
<p>一次爬取任务大概流程  </p>
<p>1) 引擎开动，激活四大组件和中间件(Middlewares)<br>2) Spider发现start_urls，提交给Scheduler要求(Requests)下载<br>3) Scheduler将url入队，分配给Downloader<br>4) 老实人Downloader从url下载文档并返回(Response)给Spider<br>5) Spider分析文档(Html)，提取需要下载的文档链接和其他需要爬取页的url<br>6) Spider将需要下载的文档链接给Pipeline，并将其他要爬的url交给Scheduler<br>7) Pipeline拿到链接，开始下载资源并存储到配置好的路径中(到数据库或文件)<br>8) Scheduler拿到需要爬取的url，继续入队，分配给Downloader<br>9) 上面的流程实现了闭环，从步骤3到8已经逻辑自恰，可以一直运行下去<br>10) 中间件在爬取过程中提供各种服务(错误处理，用户自定义服务)</p>
<p>代码组织过程：<br>a. 使用scrapy startproject jditem 创立项目主目录<br>b. 进入jditem/jditem/spider/中建立文件jd_spider.py<br>c. 主体结构如下所示，使用tree获取<br>d. 要下载什么信息在item中注册，在spider.py中实现业务逻辑<br>e. 在pipelines.py实现自定义的下载逻辑<br>f. 在settings中开启管道服务并配置好User-Agent<br>g. 用户主要关注item, spider，settings和pipelines的代码实现  </p>
<p>shieber@Kew:scrapy$ tree jditem/<br>jditem/<br>├── item.csv<br>├── jditem<br>│   ├── <strong>init</strong>.py<br>│   ├── items.py<br>│   ├── middlewares.py<br>│   ├── pipelines.py<br>│   ├── <strong>pycache</strong><br>│   │   ├── <strong>init</strong>.cpython-36.pyc<br>│   │   ├── items.cpython-36.pyc<br>│   │   ├── pipelines.cpython-36.pyc<br>│   │   └── settings.cpython-36.pyc<br>│   ├── settings.py<br>│   └── spiders<br>│       ├── <strong>init</strong>.py<br>│       ├── jd_spider.py<br>│       └── <strong>pycache</strong><br>│           ├── <strong>init</strong>.cpython-36.pyc<br>│           └── jd_spider.cpython-36.pyc<br>└── scrapy.cfg  </p>
<p>如果要实现自定义功能，就需要学习pipeline，spider等的源码。要实现分布式需要用scrapy-redis，应对动态网站要学校js执行，利用splash处理就可。</p>
]]></content>
      <categories>
        <category>爬虫</category>
      </categories>
      <tags>
        <tag>IT</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>每日PS技巧5：移动图层加混合模式</title>
    <url>/title/682c12c4/</url>
    <content><![CDATA[<p><img src="https://s2.ax1x.com/2019/12/04/QlJ4w8.md.png" alt="PS5_1"></p>
<a id="more"></a>

<p>昨天讲了图层模式，今天结合图层复移动再讲一下图层混合模式。</p>
<h2 id="今日技巧-图层移动和混合模式"><a href="#今日技巧-图层移动和混合模式" class="headerlink" title="今日技巧 [图层移动和混合模式]"></a>今日技巧 [图层移动和混合模式]</h2><p>首先打开两幅素材图片，然后在一幅图中，按住Ctrl+Alt，此时移动鼠标，会发现鼠标变成三角形状了，只要拖动它到另一副图的标题上，就会自动切换进去，这时释放鼠标，我们就将一幅图复制移动到另一幅图中了。</p>
<p><img src="https://s2.ax1x.com/2019/12/04/QlYufH.md.png" alt="PS5_2">  </p>
<p>这样当前窗口就有了两个图层，可自行调整图层大小和位置，如下图。</p>
<p><img src="https://s2.ax1x.com/2019/12/04/QlYJ78.md.png" alt="PS5_3">  </p>
<p>此时，新的图层在原来图层上方，而且遮住了原图层，要实现混合，可以利用图层混合模式，看上图右侧，选择变亮模式。该模式将比较两个图层的亮度，让亮的显示出来。这样，原本上方的较暗的图层就让位给下方的亮图层了，实现了图层混合，如下图。</p>
<p><img src="https://s2.ax1x.com/2019/12/04/QlYf39.md.png" alt="PS5_4">  </p>
<p>然而我们发现，原图层，左边是黑色的，这下左下角有部分黑色图层，很不协调。为了盖住这部分黑色的图层，可以复制出一份卫星图层，将复制的图层放大并移动，使得其中一部分背景图层恰好遮住黑色图层。调节模式为变亮，这样背景就干掉了，就得到了封面图片的效果。</p>
<p>最后再附上原图和效果图。</p>
<p>原图来源：2019年12月04日Baidu图片。  </p>
<p><img src="https://s2.ax1x.com/2019/12/04/QltKET.md.png" alt="PS5_5">  </p>
<p>原图来源：2019年07月11日Bing壁纸国内版。  </p>
<p><img src="https://s2.ax1x.com/2019/12/04/QltGvR.md.png" alt="PS5_6">  </p>
<p><img src="https://s2.ax1x.com/2019/12/04/QlJ4w8.md.png" alt="PS5_7">  </p>
]]></content>
      <categories>
        <category>设计</category>
      </categories>
      <tags>
        <tag>PS</tag>
      </tags>
  </entry>
  <entry>
    <title>PS快捷键和小技巧</title>
    <url>/title/34806234/</url>
    <content><![CDATA[<p><img src="https://s2.ax1x.com/2019/12/04/QlJUQ1.md.png" alt="PS_5"></p>
<a id="more"></a>

<p>今天总结一些PS开发中可以用到的快捷键和指令，其中Alt,Ctrl,Shift等都是键盘上的按键，注意是Windows系统下的快捷键，Mac OS X系统似乎要把Ctrl键替换成Cmd键。逗号”,”表示或的意思，加号”+”表示和的意思，逗号和加号是不需要按住的。</p>
<table>
<thead>
<tr>
<th align="left">快捷操作技巧(57个)</th>
<th align="left">作用</th>
</tr>
</thead>
<tbody><tr>
<td align="left">F</td>
<td align="left">切换背景模式</td>
</tr>
<tr>
<td align="left">X</td>
<td align="left">切换前后景颜色</td>
</tr>
<tr>
<td align="left">D</td>
<td align="left">恢复前后景颜色默认值</td>
</tr>
<tr>
<td align="left">H + 移动鼠标</td>
<td align="left">查看整体图样</td>
</tr>
<tr>
<td align="left">[,]</td>
<td align="left">增缩笔刷大小</td>
</tr>
<tr>
<td align="left">{,}</td>
<td align="left">增缩笔刷硬度</td>
</tr>
<tr>
<td align="left">&lt;,&gt;,^,v</td>
<td align="left">上下左右微移图层(方向键)</td>
</tr>
<tr>
<td align="left">TAB</td>
<td align="left">隐藏和显示所有工具和面板</td>
</tr>
<tr>
<td align="left">Alt + 拖动图层</td>
<td align="left">复制当前图层</td>
</tr>
<tr>
<td align="left">Alt + Click图层蒙板</td>
<td align="left">开关图层蒙板</td>
</tr>
<tr>
<td align="left">Alt + Click图层中线</td>
<td align="left">开启剪贴蒙板</td>
</tr>
<tr>
<td align="left">Alt + L + M + T</td>
<td align="left">开启图层蒙板(白色)</td>
</tr>
<tr>
<td align="left">Alt + L + M + H</td>
<td align="left">开启图层蒙板(黑色)</td>
</tr>
<tr>
<td align="left">Alt + Backspace</td>
<td align="left">用前景色填充图层</td>
</tr>
<tr>
<td align="left">Ctrl+ Backspace</td>
<td align="left">用背景色填充图层</td>
</tr>
<tr>
<td align="left">Alt + (F,E,I,L,Y,S,T,D,V,W,H)</td>
<td align="left">打开各种菜单栏</td>
</tr>
<tr>
<td align="left">Ctrl + Alt + G</td>
<td align="left">开启剪贴蒙板</td>
</tr>
<tr>
<td align="left">Ctrl + 0</td>
<td align="left">调整以适应屏幕(0是零)</td>
</tr>
<tr>
<td align="left">Ctrl + O</td>
<td align="left">打开文件(O是字母)</td>
</tr>
<tr>
<td align="left">Ctrl + Z</td>
<td align="left">撤销上一次动作</td>
</tr>
<tr>
<td align="left">Ctrl + A</td>
<td align="left">全选</td>
</tr>
<tr>
<td align="left">Ctrl + F</td>
<td align="left">重复上一次滤镜动作</td>
</tr>
<tr>
<td align="left">Ctrl + G</td>
<td align="left">将选中的图层分组</td>
</tr>
<tr>
<td align="left">Ctrl + H</td>
<td align="left">显示附加</td>
</tr>
<tr>
<td align="left">Ctrl + K</td>
<td align="left">打开首选项</td>
</tr>
<tr>
<td align="left">Ctrl + N</td>
<td align="left">新建图层</td>
</tr>
<tr>
<td align="left">Ctrl + B</td>
<td align="left">打开色彩平衡</td>
</tr>
<tr>
<td align="left">Ctrl + L</td>
<td align="left">打开图层色阶</td>
</tr>
<tr>
<td align="left">Ctrl + M</td>
<td align="left">打开图层曲线</td>
</tr>
<tr>
<td align="left">Ctrl + U</td>
<td align="left">打开图层色相</td>
</tr>
<tr>
<td align="left">Ctrl + D</td>
<td align="left">取消选区</td>
</tr>
<tr>
<td align="left">Ctrl + C</td>
<td align="left">复制当前图层到剪贴板</td>
</tr>
<tr>
<td align="left">Ctrl + J</td>
<td align="left">拷贝当前图层(图层选中模式)</td>
</tr>
<tr>
<td align="left">Ctrl + J</td>
<td align="left">转换选区为图层(选区模式)</td>
</tr>
<tr>
<td align="left">Ctrl + V</td>
<td align="left">粘贴到当前图层</td>
</tr>
<tr>
<td align="left">Ctrl + E</td>
<td align="left">合并选中图层</td>
</tr>
<tr>
<td align="left">Ctrl + [</td>
<td align="left">下移当前图层</td>
</tr>
<tr>
<td align="left">Ctrl + ]</td>
<td align="left">上移当前图层</td>
</tr>
<tr>
<td align="left">Ctrl + I(选中蒙板)</td>
<td align="left">翻转图层蒙板显示模式</td>
</tr>
<tr>
<td align="left">Ctrl + I(选中选区)</td>
<td align="left">去掉背景颜色</td>
</tr>
<tr>
<td align="left">Ctrl + I(选中图层)</td>
<td align="left">图层反向</td>
</tr>
<tr>
<td align="left">Ctrl + Shift + I</td>
<td align="left">反向选中选区</td>
</tr>
<tr>
<td align="left">Ctrl + Shift + [</td>
<td align="left">移动图层到最底层</td>
</tr>
<tr>
<td align="left">Ctrl + Shift + ]</td>
<td align="left">移动图层到最顶层</td>
</tr>
<tr>
<td align="left">Ctrl + Shift + E</td>
<td align="left">合并所有图层</td>
</tr>
<tr>
<td align="left">Ctrl + Shift + T</td>
<td align="left">开启变形工具</td>
</tr>
<tr>
<td align="left">Ctrl + Shift + N</td>
<td align="left">创建50%灰度的图层</td>
</tr>
<tr>
<td align="left">Ctrl + Shift + Alt + T</td>
<td align="left">重复上一次变形</td>
</tr>
<tr>
<td align="left">Ctrl + Shift + &lt;,&gt;,^,v</td>
<td align="left">上下左右移动图层/缩放文字</td>
</tr>
<tr>
<td align="left">Ctrl + 左右移动鼠标</td>
<td align="left">移动当前图层</td>
</tr>
<tr>
<td align="left">Ctrl + Space + 左右移动</td>
<td align="left">快速缩放图层</td>
</tr>
<tr>
<td align="left">Shift + F5</td>
<td align="left">快速填充选区</td>
</tr>
<tr>
<td align="left">Shift + Click图层关闭键</td>
<td align="left">关闭所有图层</td>
</tr>
<tr>
<td align="left">选中图层&gt;右键&gt;颜色</td>
<td align="left">用颜色标注图层</td>
</tr>
<tr>
<td align="left">新建调整图层</td>
<td align="left">改变背景颜色</td>
</tr>
<tr>
<td align="left">油漆桶 + Shift + 点背景</td>
<td align="left">改变背景颜色</td>
</tr>
<tr>
<td align="left">双击背景图层</td>
<td align="left">解锁背景图层锁定状态</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>设计</category>
      </categories>
      <tags>
        <tag>PS</tag>
      </tags>
  </entry>
  <entry>
    <title>每日PS技巧4：图层蒙板</title>
    <url>/title/1c50c8f3/</url>
    <content><![CDATA[<p><img src="https://s2.ax1x.com/2019/12/03/QMFiDK.md.png" alt="PS4_1"> </p>
<a id="more"></a>

<p>昨天是图层样式，今天我们来学习图层蒙板。蒙板就是在一个图层上给它套上一个魔法属性，蒙板相当于一层遮盖，盖住下一层的内容。可以把图层看作沙画作画时撒的沙，手指在沙上画，下面的亮就出来了。同样，用画笔在蒙板上画，下层的图就浮现了。蒙板实现了图层元素的结合，这是PS中的基础，很多大神P的神图，搞笑图就是利用图层蒙板结合其他技术实现超逆天的效果。</p>
<h2 id="今日技巧-图层蒙板"><a href="#今日技巧-图层蒙板" class="headerlink" title="今日技巧 [图层蒙板]"></a>今日技巧 [图层蒙板]</h2><p>首先分别在PS里打开两幅素材，拷贝一份到另一副图里，这样两幅图就在一个操作界面了，图层顺序可以调整一下，看自己。接着选中上面的一副图，点击右下角的图层蒙板选项，这时该图层右边出现一个白框，这就是蒙板，类似沙画中撒的沙，只是这沙是白的。</p>
<p>接着，选择画笔工具，调节画笔样式和大小。如下图左上角，自行选择样式并调节大小，蒙板在右下角，第一个图层右边的白框：</p>
<p><img src="https://s2.ax1x.com/2019/12/03/QMkrOP.md.png" alt="PS4_2">  </p>
<p>然后在左下角调节前景色和背景色(就是一黑一白两个框框，点击那个交叉的箭头就能调换前景和背景色)。使得前景色为黑色，背景色为白色。既然沙子(蒙板)是白的，那么用黑的就能消除掉蒙板，画笔就是利用前景的黑色对蒙板进行擦除工作。此时在需要擦除的地方按住鼠标左键，随意移动就能看到效果了。</p>
<p>那么，擦除错了怎么办呢？想想沙画，画错了再撒点儿沙子(白色)上去就好了，而用画笔就是把前景色换成白色，然后涂抹，你发现消失的又回来了。比如下面恢复一点儿原图的内容：</p>
<p><img src="https://s2.ax1x.com/2019/12/03/QMANn0.md.png" alt="PS4_3">  </p>
<p>注意看上面两幅图最左下角黑白框对掉了，在前面的是前景色，只要对掉两个颜色就能实现擦除和恢复图层内容。现在双击右侧的蒙板，就能打开蒙板，看看我们擦除的内容，黑色是擦掉的。白色是沙子，就对应留在上层的图像。</p>
<p><img src="https://s2.ax1x.com/2019/12/03/QMAXE8.md.png" alt="PS4_4">  </p>
<p>可以看到，黑色部分还有没擦干净的，但是原图看不出来了，有强迫症的同学可以把它擦干净。为何计算机把白色当沙子层，黑色当空白层呢？如果是现实中的沙画，白色发光的是沙子被擦除掉后的结果，黑色是撒上的遮盖物。然而计算机里用的是通道的概念，表示颜色是用RGB，而要擦除一个图层的内容只要使得它的RGB变为0就好了，这样下一层的内容就透过来了。在计算机里面，RGB为0就是黑色，所以黑色代表擦除。记住计算机是发光，自然界是反射光，这层逻辑是反的，那么沙画的流程在PS软件上也要反过来。相反，白色恰好是颜色最多的情况，物理上白色由其他颜色合成，所以白色代表保留所有颜色细节，对应到图层上保留所有颜色就是保持不变，所以白色部分的企鹅保持不变。</p>
<p>当然，这个作品做得不好，主要是为了学技术，不是学艺术，要美化的话，还要加其他内容，然而那就不是一个基础教程的目的了，而且一下子学多了，脑子反而乱。</p>
<p>最后再附上原图和效果图，接下来你是不是就可以用两个人的图片PS出一幅她们的合照了呢？试试吧！</p>
<p>原图来源：2019年10月13日Bing壁纸国内版。<br><img src="https://s2.ax1x.com/2019/12/03/QMVYwV.md.jpg" alt="PS4_5">  </p>
<p>原图来源：2019年11月18日Bing壁纸国内版。<br><img src="https://s2.ax1x.com/2019/12/03/QMVaYF.md.jpg" alt="PS4_6">  </p>
<p><img src="https://s2.ax1x.com/2019/12/03/QMFiDK.md.png" alt="PS4_7"> </p>
<p>另外，第一幅原图怪怪的，企鹅会出现在有山的地方，水中还有雾气，又有冰？可见，第一副图也可能是PS的，至于谁做的，我就不知道了。</p>
]]></content>
      <categories>
        <category>设计</category>
      </categories>
      <tags>
        <tag>PS</tag>
      </tags>
  </entry>
  <entry>
    <title>每日PS技巧3：图层样式</title>
    <url>/title/e8aff90b/</url>
    <content><![CDATA[<p><img src="https://s2.ax1x.com/2019/12/02/Quwn0K.md.jpg" alt="PS3_1"> </p>
<a id="more"></a>

<p>昨天是旋转，今天学习将图层叠加和变亮模式。</p>
<h2 id="今日技巧-图层变亮叠加"><a href="#今日技巧-图层变亮叠加" class="headerlink" title="今日技巧 [图层变亮叠加]"></a>今日技巧 [图层变亮叠加]</h2><p>今天给一幅中秋月圆夜的图片加上标题，要求标题文字和图片的月亮结合，使得文字发月光。标题来自于高中课本里面的一首诗《春江花月夜》。</p>
<p>《春江花月夜》是唐代诗人张若虚的诗作。此诗沿用陈隋乐府旧题，运用富有生活气息的清丽之笔，以月为主体，以江为场景，描绘了一幅幽美邈远、惝恍迷离的春江月夜图，抒写了游子思妇真挚动人的离情别绪以及富有哲理意味的人生感慨，表现了一种迥绝的宇宙意识，创造了一个深沉、寥廓、宁静的境界。全诗共三十六句，每四句一换韵，通篇融诗情、画意、哲理为一体，意境空明，想象奇特，语言自然隽永，韵律宛转悠扬，洗净了六朝宫体的浓脂腻粉，具有极高的审美价值，素有“孤篇盖全唐”之誉。</p>
<p>话说我现在还记得几句“春江潮水连海平，海上明月共潮生。滟滟随波千万里，何处春江无月明！”；“江畔何人初见月？江月何年初照人？人生代代无穷已，江月年年望相似。”</p>
<p>打开原始图片(随便一幅图都可以，太阳也行，只要有个亮的，或是图案)。利用文字工具书写任意文字，字体为华文楷体，字号220，并移动到适当位置。如下图：</p>
<p><img src="https://s2.ax1x.com/2019/12/02/Quw59J.md.png" alt="PS3_2">  </p>
<p>接着复制背景图层和文字图层，如果在设计过程中图层干扰到查看就点击图层前的眼睛，暂时关闭图层。此时文字图层在复制的背景图层上，接着用移动工具移动复制的背景图层，使得月亮刚好在第一个字“春”下面。</p>
<p><img src="https://s2.ax1x.com/2019/12/02/Qu0r5D.md.png" alt="PS3_3">  </p>
<p>接着将文字图层拉到复制的背景图层下面，按住Alt键并将鼠标移动到两个图层中间，此时出现一个向下箭头，点击。得到的结果如下图(注意看右下角图层的位置关系，关闭了背景图层，防止干扰)：</p>
<p><img src="https://s2.ax1x.com/2019/12/02/Qu01ET.md.png" alt="PS3_4">  </p>
<p>其他的字都这样制作，每次制作亮文字最好复制最初的一份文字图层来制作，这样依次制作五个字。</p>
<p><img src="https://s2.ax1x.com/2019/12/02/Qu0Orq.md.png" alt="PS3_5">  </p>
<p>五个亮字可以分组，按住Shift键，点选五幅文字图，点击分组按钮(最右下，删除键左边第二个)。然后在分组的五个文字图层里从最下面两个开始，选择第四幅设置模式为变亮，这时你会看到四五两个图层的文字都亮了。这时再选择这两幅图层，右键，找到合并图层选项，点击以合并这两个图层，这样就只剩四幅图了，注意这时可以打开背景图层，把背景图放出来好看一点。</p>
<p><img src="https://s2.ax1x.com/2019/12/02/QurAUK.md.png" alt="PS3_6"> </p>
<p>接着重复刚刚的流程，还是选择该分组里的最后两幅图，将第三幅图设置为变亮模式，此时第三个字又亮了，再合并这两个图层。重复直到五个字全亮并合并为一个图层，最后的成品就是封面了。    </p>
<p><img src="https://s2.ax1x.com/2019/12/02/QurMDI.md.png" alt="PS3_7"> </p>
<p>最后再附上原图和效果图(没加水印，加了就破坏了美景了，大忌，点击可下载)。<br>原图来源：2019年09月13日Bing壁纸国内版。</p>
<p><img src="https://s2.ax1x.com/2019/12/02/QuRCWV.md.png" alt="PS3_8">  </p>
<p><img src="https://s2.ax1x.com/2019/12/02/QusALn.md.png" alt="PS3_9">  </p>
<p><img src="https://s2.ax1x.com/2019/12/02/Quwn0K.md.jpg" alt="PS3_10"> </p>
<p>Shieber出品，必属精品！垃圾图片我才不会放到我网站上。人虽长得丑，但要想得美！</p>
]]></content>
      <categories>
        <category>设计</category>
      </categories>
      <tags>
        <tag>PS</tag>
      </tags>
  </entry>
  <entry>
    <title>每日PS技巧2：旋转</title>
    <url>/title/ac80827b/</url>
    <content><![CDATA[<p><img src="https://s2.ax1x.com/2019/12/01/QeKLb6.md.png" alt="PS2_4"> </p>
<a id="more"></a>

<p>昨天讲了基本概念，今天来试试旋转这个功能。旋转会生成对称美，适合建筑和部分logo设计，在平面设计种可以作为装饰部分。</p>
<h2 id="今日技巧-使用旋转"><a href="#今日技巧-使用旋转" class="headerlink" title="今日技巧 [使用旋转]"></a>今日技巧 [使用旋转]</h2><p>创建(Ctrl + N)一个300x300像素，填充为黑色的图层，接着再使用Ctrl + Shift +<br>N创建透明图层。选中透明图层，在视图中选定设置水平和垂直参考线。在合适位置利用椭圆工具画一个填充为红色的圆，再接着移动画圆时留下的选区使得其与红色圆相交成一个月牙。移动月牙到中部，复制月牙图层再利用橡皮擦擦除第一个月牙的上部。如下图：</p>
<p><img src="https://s2.ax1x.com/2019/12/01/QeuOhQ.md.png" alt="PS2_1">  </p>
<p>合并两个月牙图层，再复制合并后的图层，按Ctrl + Shift + T，输入旋转角度22.5度，回车确定，接着按Ctrl + Shift + T 15次，形成下图：  </p>
<p><img src="https://s2.ax1x.com/2019/12/01/QeKKHK.md.png" alt="PS2_2">  </p>
<p>选中该图层，使用编辑中的变换，选择水平翻转。</p>
<p><img src="https://s2.ax1x.com/2019/12/01/QeKIC4.md.png" alt="PS2_3"> </p>
<p>接着选中原来的红色图层，设置其填充为绿色，参数设置面板里勾选保留透明区域颜色。最后效果如下：</p>
<p><img src="https://s2.ax1x.com/2019/12/01/QeKLb6.md.png" alt="PS2_4"> </p>
<p>接着还可以作成万花筒，但是我感觉有点儿复杂，这个主要学习旋转的使用，到这一步就够了。</p>
]]></content>
      <categories>
        <category>设计</category>
      </categories>
      <tags>
        <tag>PS</tag>
      </tags>
  </entry>
  <entry>
    <title>每日PS技巧1：基本概念和水印添加</title>
    <url>/title/d5e733a9/</url>
    <content><![CDATA[<p><img src="https://s2.ax1x.com/2019/11/30/QV1K2j.md.jpg" alt="cover"></p>
<a id="more"></a>

<h2 id="PS使用"><a href="#PS使用" class="headerlink" title="PS使用"></a>PS使用</h2><p>从今天开始，尽量做到每天分享一个PS技巧，提升自己也帮助他人。说起Photoshop，我从大三才正式用，大四老老实实的学了敬伟一百多集的教学视频，算是知道了什么是PS.</p>
<h2 id="PS软件主体架构"><a href="#PS软件主体架构" class="headerlink" title="PS软件主体架构"></a>PS软件主体架构</h2><p>主体架构为内核和插件应用。内核用C++语言开发，插件有多种，一种是利用官方SDK通过C++开发的插件，一种是利用HTML5 + CSS + JavaScript等前端语言编写的插件，实际就是一个Web App。比如，各种颜色，通道面板都是这类插件。</p>
<h2 id="PS软件发布体系"><a href="#PS软件发布体系" class="headerlink" title="PS软件发布体系"></a>PS软件发布体系</h2><p>PS肇始于视频处理领域，最开始做的时候没想到它会如此成功，随着计算机技术，尤其印刷技术的发展，PS终于发挥作用并反过来引领时尚设计和印刷业。目前大众还在使用的PS版本是CS6，发布于2012年，随后2013年发布Photoshop creative cloud (CC)，然后是CC 2014, CC 2015 一直到CC 2019，几乎每年一版。这几年随着人工智能在图像数据处理上的成功，PS软件也引入一些智能技术，在CC 2019中，一键抠图已经可以使用，再不用像以前一样去学习钢笔工具作选区抠图啦！</p>
<p>PS是一种光和色的处理黑箱，输入一张图片，通过点击相应按钮并设置部分参数，然后黑箱输出优美的图像，它强调的是对颜色，光线和像素的处理，是一种艺术再加工工具，而不是创造工具。所以使用PS，要定位于改变加工而不是创造，要创造请打开你的摄像机自己去拍照，要艺术加工请用PS。</p>
<h2 id="图像处理核心概念"><a href="#图像处理核心概念" class="headerlink" title="图像处理核心概念"></a>图像处理核心概念</h2><table>
<thead>
<tr>
<th align="left">序号</th>
<th align="left">成分</th>
</tr>
</thead>
<tbody><tr>
<td align="left">1</td>
<td align="left">颜色</td>
</tr>
<tr>
<td align="left">2</td>
<td align="left">分辨率</td>
</tr>
<tr>
<td align="left">3</td>
<td align="left">图层</td>
</tr>
</tbody></table>
<p><strong>颜色</strong><br>对于颜色，有各种模式，不同的模式对应的作用媒介不同。人眼是靠色相(H)，明度(S)，饱和度(B)来识别物体的。色相就是颜色种类，比如，红色，蓝色。明度就是这个颜色有多亮了。饱和度对应颜色的浓度。比如淡红，绯红，深红。PS中常用的实际是RGB模式，该模式实现的是光色的三原色(红R，绿G，蓝B），RGB模式下屏幕靠发光而被人眼识别。PS中还有另一种色彩模式是CMYK模式，分别代表Cyan(青)，Magenta(洋红), Yellow(黄)，Black(K，黑)，因为RGB中把B使用了，所以此处的黑色用K表示。CMYK是印刷用的色彩模式，也就是颜料的三原色。CMYK和RGB模式有什么不同吗？RGB是靠物体本身发光，比如你现在看到这些文字是靠屏幕发光显示的黑色，但是你看书籍上的字可不会发光，它们得靠吸收自然光并反射部分色光(颜色)，实际上一个物体呈现什么颜色，就表明它不吸收该颜色。红色物体就吸收白光种除了红色的其他所有颜色。现在，我们知道这两种模式是完全不一样的，RGB和CMYK模式也就是这么来的。在PS上设计的图片，如果要打印就需要从RGB模式调整模式为CMYK，CMYK模式会比RGB暗一些，毕竟是反射光，要吸收部分嘛。CMYK中加K(黑色)是因为CMY三种颜色无法勾兑出很纯的黑色，得单独加入黑色。还有一种模式是LAB模式，由理论推导得出，L为亮度，AB为两种颜色模式，它是一种理论模式。HSB对应人眼看物，RGB对应屏幕等发光，CMYK对应自然物反射光，LAB对应大自然颜色。</p>
<p>PS软件中RGB颜色是通过8位数字来表示的，二进制下8位数字对应的是$2^8$种程度，比如R就有256种程度(饱和度)，同理三种颜色都各自有256种程度，可以组合出$256^3$种颜色，也就是就是16777216种颜色，一千六百多万，怎么都够日常使用了，大部分人日常中只会用红橙黄绿蓝靛紫。实际上，我们可以用16位数保存(28亿多种颜色)，32位(8x$10^{29}$种)保存也可，位数越高，内存占用越大。大自然的颜色无穷无尽，但常用的8位就够了。</p>
<p><strong>分辨率</strong><br>分辨率强调的是像素点的精细程度，常用指标PPI(Pixel Per Inch，像素每英寸)。PS处理的就是图像的像素。这个概念和视频领域的标清，高清，超清，2K，4K的道理是一样的。每英寸的像素点越多，图像细节越丰富，图像也就越清晰好看，视频质量也就越高，但是占用内存也就上来了，比如手机和笔记本电脑常用的1080P就是1080x1920个像素点。现在5G开始了，接着视频肯定也会变大的。视频体积太多如何传输，那就是压缩技术了，然而和本文无关，略去不谈。</p>
<p><strong>图层</strong><br>PS是搞艺术加工的工具，而加工不只是限于在一幅图上加工，一定会用到多幅图的。我们把每一张图看做一层，多图就是多层，在图层上和图层间可以应用不同的滤镜，变形，颜色改变等等效果，最后合并为一张优美的图像，这就是PS处理图像的大致操作流程。所以，图层是十分重要的概念，不懂图层，不识PS。</p>
<h2 id="今日技巧-添加水印"><a href="#今日技巧-添加水印" class="headerlink" title="今日技巧 [添加水印]"></a>今日技巧 [添加水印]</h2><p>创建一个大小为10CMx5CM的空白图层，通过文字工具输入自己要添加的水印信息。利用编辑里面的描边设置文字描边颜色，调节图层面板的图层填充为0，透明度为65%，就可以调出一个合适的水印。在编辑里选择变换可以变化文字，选择定义图案可以存储该水印，以便今后通过填充使用，也可保存为自定义画笔预设，方便画笔调用。</p>
<p>例如下面是原始图添加一个水印，原图来源：2019年09月30日Bing壁纸国外版。</p>
<p><img src="https://s2.ax1x.com/2019/11/30/QV1aRJ.md.jpg" alt="water_print1">  </p>
<p>下面是原始图添加一堆水印(令人生厌的模式)。    </p>
<p><img src="https://s2.ax1x.com/2019/11/30/QV14sI.md.jpg" alt="water_print1">  </p>
]]></content>
      <categories>
        <category>设计</category>
      </categories>
      <tags>
        <tag>PS</tag>
      </tags>
  </entry>
  <entry>
    <title>Fucking the Win10 Update Service</title>
    <url>/title/cec87bc7/</url>
    <content><![CDATA[<p><img src="https://ftp.bmp.ovh/imgs/2019/11/07f1ac3a09f4f773.png" alt="Win10"></p>
<a id="more"></a>

<p>最近几年，Windows10自动更新升级的毛病折磨着广大的用户。比如，某游戏主播直播中突然断线，只因Windows10强制更新，电视台节目期间，Win10自动更新。</p>
<p><img src="https://s2.ax1x.com/2019/12/05/Q3ZAje.md.png" alt="Win10_1"></p>
<p>只要联网就给你自动下载，而且不会和用户商量。你要播报天气预报，不好意思，win10要更新。而且官方给搞了个很傻的界面，什么幸福时刻，搞得是和女人做爱一样。</p>
<p><img src="https://s2.ax1x.com/2019/12/05/Q3ZQ9f.md.png" alt="Win10_3"></p>
<p>更多操蛋案例请看知乎：<a href="https://www.zhihu.com/question/271414438" target="_blank" rel="noopener">Why so many people tend to ban Win10 auto-update?</a></p>
<p>那么，朋友们就会问了：难道我不可以关掉自动更新吗？原本是可以的，不过后来微软又强行加入了新的程序使得简单的关闭更新已经不可能，而且网上搜集的关闭教程也多半过时了。特此，本文讲解三种关闭Win10自动更新的方法。</p>
<p><img src="https://s2.ax1x.com/2019/12/05/Q3ZK4P.md.png" alt="Win10_2"></p>
<p>扫黑除恶，首先除掉Windows的毒瘤更新。</p>
<h2 id="1-从注册表关闭"><a href="#1-从注册表关闭" class="headerlink" title="1.从注册表关闭"></a>1.从注册表关闭</h2><p>所谓的程序，软件，脚步，插件等等都可以或多或少看成是Windows系统的某种服务，而所有的服务(services)都在Windows系统里做好了记录，这个记录就是注册表。注册表详细记录了用户信息，软件安装信息和配置文档信息等等。通过修改注册表就能到达修改程序行为的目的。所以Windows系统那么容易被黑客攻击，只要修改注册表就强制你使用某种服务或软件。所以垃圾360会污染你的电脑，导致越是卸载却越安装的怪病。</p>
<p>视频：当你想卸载360的时候(弹幕可关闭)。</p>
<iframe src="https://player.bilibili.com/player.html?aid=76592877&cid=131013977&page=1" width="270" height="250" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"></iframe>

<p>扯远了，既然Windows10升级也是一项服务，那么自然可以通过注册表取消该服务的权限以达到关闭更新，这种方法是最彻底的，其他的软件工具也是通过修改注册表项来实现禁止更新，下面看看具体操作步骤。</p>
<p>1.按Win + R组合键输入services.msc<br>  在打开的服务中找到Windows Update，点击右键再点击进入属性，在常规一栏将启动类型修改为:禁用，如果改不了先点击下方停止按钮。接着进入恢复一栏，将第一次失败，第二次失败，后续失败统统改为无操作。失败计数设置为1000，或者9999等数字都可以，然后点击下方应用，确定，最后退出。这种方法，在win10早期就是关闭自动更新的方法，然而win10似乎知道了这点，所以他又加了一个Windows Update Medic Service在服务里面，就在Windows Update下面，你点击属性进去，还是像刚刚那样修改，然而你会发现：拒绝访问。这就是win10流氓的地方，自家的电脑，自己却无法访问，你说怪不怪？</p>
<p>2.按Win + R组合键输入regedit，然后点击注册表项进入HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\UsoSvc，找到start，右击点修改，将数值数据2改为4，确定。接着找到FailureActions，右击修改，将0010和0018两行的第五列[01,01]修改为[00, 00]，具体为移动到01前，按住Shift和右移动键(–&gt;)，删除再输入一个0，他自动就变为00了，下一行一样的改法。保存退出。</p>
<p>3.再次按Win + R组合键输入services.msc，这次找到刚刚那个流氓Windows Update Meic Service，先点击停止，然后像修改Windows Updata那样，禁用，恢复一栏改为无操作。接着确定，退出。(还是显示拒绝访问，你不用管。)</p>
<p>你以为完了，还有</p>
<p>4.再次按Win + R组合键输入gpedit.msc打开组策略文件，依次打开计算机配置 -&gt; 管理模板 -&gt; Windows组件 -&gt; Windows更新，右击配置自动更新，进入编辑，设置为”已禁用”，点击应用，确定并退出。接着在配置自动更新下面找到”删除使用所有WIndows更新功能的访问权限”，右击设置为”已启用”，再点击应用，确定并退出。</p>
<p>然后，还有。看吧，Windows真是无所不用其极的设置障碍，只要有一处没关，就给你安装更新。</p>
<p>5.再次按Win + R组合键输入taskschd.msc打开计划程序设置界面，依次展开任务计划程序库 -&gt; Microsoft -&gt; Windows -&gt; WindowsUpdate，把里面的项目都设置为禁用。</p>
<p>看吧，这么一番骚操作，才能勉强抗衡流氓Win10，而且这个方法，不知后面会不会又被微软给绕过。试想一个漂亮妹妹，如何懂得这许多，她如何不被微软给欺负？估计她的好哥哥也被微软欺负着。本次关闭更新服务用到了系统服务，组策略，注册表，计划任务，且需要全面关闭才能禁止。在最后taskschd.msc里面，你都可以看到Scheduled Start上次和下次运行的时间，你看它偷偷运行，干坏事，你还不知道。怎么电脑风扇老是突然地就呜呜的转，网速也掉了，原来这货没事就下载更新。</p>
<h2 id="2-免安装工具Wub关闭自动更新"><a href="#2-免安装工具Wub关闭自动更新" class="headerlink" title="2.免安装工具Wub关闭自动更新"></a>2.免安装工具Wub关闭自动更新</h2><p>上面的操作，步骤实在太多且复杂，像Windows update blocker(Wub)这类工具就能帮助你。Wub其实也是设置这些注册表和服务参数，但是只需一键就修改所有内容，避免个人用户复杂操作。软件可自行百度，或者发邮件给我，我再给你。本想直接放网盘，但分享时间不好设置，也不知有没有人用，万一你喜欢微软推送给你的更新呢，我又能怎么说？幸福时刻哟，哈哈！下面是Wub的官网<a href="https://www.sordum.org/" target="_blank" rel="noopener">Wub</a>，里面找一下这个blocker就是。</p>
<h2 id="3-强大的dism-关闭自动更新"><a href="#3-强大的dism-关闭自动更新" class="headerlink" title="3.强大的dism++关闭自动更新"></a>3.强大的dism++关闭自动更新</h2><p>还有一款比较强大的软件，那就是Dism++，这个软件可以备份系统，在系统崩溃时恢复系统用得上，然后就是关闭更新，可以一键设置。还有很多其他功能，用过这个软件就知道了，开发这个软件的团队自述是这么写的“其实我们都是一些强迫症晚期患者，只想要找个轻巧、好使、透明、不流氓、不装可怜、不唠唠叨叨的实用工具。不过找了半天没找到，但是我们没有放弃治疗，用自己的双手初步实现了梦想，联手打造Dism++——一个不为利益、不跟风、不做作、单纯为执着与激情而生的小工具。安得广厦千万间，大庇天下寒士俱欢颜！”，链接在此<a href="https://www.chuyu.me/zh-Hans/" target="_blank" rel="noopener">Dism++</a>，请看官自行使用。</p>
]]></content>
      <categories>
        <category>Windows</category>
      </categories>
      <tags>
        <tag>IT</tag>
      </tags>
  </entry>
  <entry>
    <title>为何我们学不好数学？</title>
    <url>/title/b13586e/</url>
    <content><![CDATA[<p><img src="https://s1.ax1x.com/2019/11/19/M2W75Q.md.png" alt="math"> </p>
<a id="more"></a>

<p>长久以来的教育给人一种数学很难，或者数学不适合女生的感觉。然而，我发现，我自己学数学也出现问题了，这到底是怎么一回事？难道我已经笨到不适合学数学了吗？</p>
<p>经过我长久的思考和查询资料并对比多位授课老师的课堂教学情况，我发现，学生的天分有影响，但是大家都是普通人，如果大家普遍感到学习的吃力，除了知识的深度之外，老师的水平也是一大重要因素。让我把话说明：那就是<strong>老师的水平太糟糕</strong>，导致明明很好懂的知识最后却成了我们的累赘。</p>
<p>我要为我的观点做证。我们当年的高考为何需要考高分？不就是为了去好的大学吗？可是好大学什么好？难道里面的人更帅？非也，我们认为好大学的教师教学水平是很好的，好大学的环境是让人成长而不是自暴自弃，觉得自己笨。所以，我们学生进一所学校你首先就要知道，很多你学不好的知识，不是你笨，而是台上某些人物实在太菜，他用其低效的，甚至是错误的方式在向你呈现一个数学概念。如果该概念十分重要，那么以此为基础的数学公式都会成为你的拖累。可是，我们作为学生又如何分辨老师的水平呢？其实很不好分辨，除了照本宣科者我们能一眼看出，那些上课认真板书者，你可有觉得他是低水平者？尤其那些无比热情，甚至把自己所谓的考研诀窍，解题秘籍传授给学生的老师，会否让你觉得他就是该领域的专家？</p>
<p>实际上，数学除了是一门逻辑学科外还是一门实在的学科，那就是说，很多数学概念可以用更为基础且简单的概念加以阐述。不要一上来就讲一堆定义，公理，定律，然后搪塞学生下一页的某个重要公式就是这么来的。</p>
<p>为了指出大部分低水平老师的拙劣教学方法，我决定亲自阐述若干数学概念。</p>
<h2 id="虚数-i-的概念"><a href="#虚数-i-的概念" class="headerlink" title="虚数$i$的概念"></a>虚数$i$的概念</h2><p>我们都知道欧拉公式$e^{i\theta} = cos\theta + isin\theta$，可是道理在哪里呢？<br>下面是我杜撰的三位大学数学老师的授课过程，请大家仔细看。</p>
<p><strong>垃圾大学</strong><br>老师：数学的范畴在一如既往地扩张，从自然数到负数、分数，再到实数虚数。有实就有虚，就是这么来的，其他的自己看书你就懂了。欧拉公式，就是把三角函数和虚数结合起来，你看数学家好聪明。</p>
<p><strong>一般大学</strong><br>老师：虚数这个名词是由17世纪著名的数学家笛卡尔创立的。实数与虚数共同引出了复数（a + bi）的概念。在数学上，复数可谓精妙绝伦，将微积分扩展到复数范畴时。欧拉公式，通过单位圆就能看出来，同学们自己看看就懂了。</p>
<p><strong>优秀大学</strong><br>老师：虚数这个名词是由17世纪著名的数学家笛卡尔创立的，对，同学们，就是那位讲“我思故我在”的笛卡尔同志，他不但是数学家，也是哲学家，现代数学起源于欧洲，这是不争的事实，实际上，对数学的思考促进了哲学的发展，比如罗素也是数学家又是哲学家。虚数并非是虚的，只是一种对照体系，实际上它们都是实在的，只是处理的问题尺度不同。$i$它从物理上看，更像是逆时针转90度的意思。同学们，考虑一个单位圆，把X轴右端点看做1，左端点看做-1，Y轴上面为$i$，下面为$-i$。那么一个$i$就是逆时针转90度。同学们画一个圆，加上X和Y轴，从X右端点起，逆时针转90度，你就到了Y轴上端点，发现此处恰好为$i$，同样，顺时针90度就是$-i$，那么$i$的平方呢？对，就是逆时针转180度，刚好到-1处。我们发现$i^2$恰好就是-1，还有$i^3$，就是逆时针转270度，就该是瞬时针转90度咯！所以也就是$-i$，不用算都知道。实际我们发现$i^1 = i$，$i^2=-1$，$i^3=-i$，$i^4=1$，这个不难记忆了吧，不用背吧？那么$i^{1191}$等于多少呢？就看逆时针转了多少圈了，除以4取余数就能得到结果。再看欧拉函数，里面的$\theta$就是逆时针转的角度，假如$\theta=\frac{\pi}{4}$，那么就是要你转45度，这时$i$就是逆时针转的推动因子，因为$i$放到$e$上面了，它本身表示要逆时针转，但是转的角度不定，所以这时给它配一个角度，那么$i\theta$就表示逆时针转的角度。以后同学们看到$e^{i\theta}$，就知道要逆时针转，然后拿出单位圆，找好角度就画好了。那为何$e^{i\theta} = cos\theta + isin\theta$呢？其实，这还是物理上的合成。你自己转到45度处，分别做到X和Y的垂线，是不是一个三角形？</p>
<p><img src="https://s1.ax1x.com/2019/11/19/M2jqGq.md.png" alt="yuan">  </p>
<p>高中三角函数学过，那么三角形的两条邻边是不是一个为斜边长乘以$cos\theta$，另一个乘以$sin\theta$，因为单位圆斜边长为1，所以两个三角函数前面系数为1。因为Y轴是虚轴，所以$sin\theta$前面带个$i$，这是不是高中物理里的矢量？$i$表明了一种方向的意思。要是$Ae^{i\theta}$就是表示把单位圆扩大$A$倍，其他的形式不变，所以右边的两条邻边就该是斜边$A$乘以三角函数的值。故而$Ae^{i\theta}<br>= Acos\theta + iAsin\theta$。对了，同学们可以把笛卡尔的<a href="https://book.douban.com/subject/1071023/" target="_blank" rel="noopener">《谈谈方法》</a>这本书读一读，对我们思考问题有很多帮助，这就作为你们的平时作业吧，看完写个心得给我，随便写。</p>
<p>上面是我对虚数的理解，所以你可以看到，一个学生，一个想从大学学到真东西的大学生如何从老师手里学到东西。进入好大学才有可能接受第三种教育，你是父母，你愿意孩子听那堂课？学习数学一定是要学一个系统，一个逻辑，以及尽可能直观的感觉，这样才能发挥个人的数学才能，相反，靠死记硬背不会培养出优秀学子。</p>
<p>我这只是一个例子，想想吧，还有多少数学概念，我们是糊里糊涂的背下来的，我们如何能学好？再来看不同大学的学生，你现在还能说各个大学的学生没有差别吗？不同大学的学生，应对同样的问题，脑袋里想的完全是两套不同的东西，这种世界观的不同，最后体现出来就是优秀大学的学生更优秀，他们应对实际问题能力更强。其实，单是这位老师推荐的书，就要吊打一堆思政课程，对人的成长的促进是不可想象的。</p>
<p>然而，我们无法改变大学老师，除了自己好好学习，多思考外，最值得的是考个好大学，不然自己被废了都不知道。</p>
]]></content>
  </entry>
  <entry>
    <title>男人和女人</title>
    <url>/title/314bc6e1/</url>
    <content><![CDATA[<p><img src="https://s2.ax1x.com/2019/11/18/My9DpV.md.png" alt="manwoman"></p>
<a id="more"></a>

<p>女的正在打游戏，突然断线了，她急忙跑到那男的身边。<br>女：“快去看看，好像wifi有问题，很卡，明明是1000M光纤，怎么一点不中用。”<br>那男的过去看看，检查一遍，发现没什么问题。<br>男：“没什么问题。”<br>女：“怎么没问题，没问题如何会卡？”<br>男：“你知道并发吗？”<br>女：“那是个啥？”<br>男：“比如，图书馆的大门，到关门的时候，假设1000人都同时涌向门口，你觉得如何？”<br>女：“那肯定大家都走不了。”<br>男：“对，网络有的时候也这样，如果用的人多了，就会这样。”<br>女：“可是，现在就我们两人用啊？”<br>男：“不是，整栋楼的人都算。”<br>女：“那还不是一样，买网的时候说的什么网速飞起，搞了半天都是骗人的。”<br>男：“不是，事实就是这样。”<br>男：“有的时候事物各方面的状况都很好，但依然会出问题。我们对未知事物的控制能力很弱，所有指标一切正常，但突然就爆发问题，金融危机就是这样…”<br>女：“嗯，我懂了，那为什我电脑卡呢？”<br>男：“难道我刚讲的你全部没听…？”<br>女：“你那么大声干嘛，你居然敢吼我？”<br>男：“什么吼你，这就是事实…”<br>女：“你看，还那么大声，难道不是吼我？什么事实，你就是不爱我，哼，我就知道…”<br>男：“简直无理取闹，懒得和你说了！”<br>女：“那天我就看到你和那女的说话，就那么轻言细语，对我却如此粗鲁，呜呜…”<br>男：“你理智点儿好吗？”<br>女：“我哪里不理智，都是你，一点不关心我，讲什么并发，哼！都是唬人的，呜呜…” </p>
<p>接下来，是无休止的争吵…  </p>
<p>老赵：“老王，你们两口子咋咯，怎么又吵起来了？”<br>男：“她说网卡，然后我在说网卡的问题。”<br>老赵：“什么网卡，她都哭了，你好好对你老婆吧，要珍惜呀！男人啊，少出去花天酒地，好好看好家才是对的。”<br>女：“我就知道，我就知道，你果然出去花天酒地。那女的是上次我看到的那个吗？哼，看我不把那小三儿打得满地找牙！呜呜…”<br>老赵：“大妹子，我帮你教训他了，你呀，别哭啦！我就是这么一说，就一比方。”<br>女：“什么比方，分明就是有鬼，你们男人没一个好东西，呜呜….”<br>老赵：“这…”<br>男：“老赵，多谢，我来应付这个婆娘…”<br>男：“老婆大人，我错了，我来修wifi，都是这个王八蛋wifi惹的，你老人家好好玩，千错万错，都是我的错，我…”<br>女：“说，那女的是谁？”<br>男：“没有这回事…”<br>女：“刚刚老赵还说，哼，你还想骗我？”<br>男：“那就是随口一说，打比方而已…”<br>女：“我不管，我不管，呜呜…，你今天给我说清楚…”<br>男：“你双十一购物车选好了吗？”<br>女：“差不多了，今年真是太便宜啦，盖楼我第一，哈哈…”<br>男：“再多买点儿吧，帮我买瓶洗发水，诺，这个月的工资，23000，都给你了。”<br>女：“谢谢老公，那个你要什么颜色，什么牌子，什么气味的？要长条型还是圆型盒子的？”<br>男：“上面标有洗发水这三个字就行…”<br>女：“好的，我去淘宝上看看….”<br>男：“好，我去上班了。”<br>女：“晚上早点回来啊，我做你最爱吃的冷吃兔…，还要奖励你，嘿嘿..”<br>男：“是！”   </p>
<p>这个故事是我杜撰的，可能女性朋友看了不舒服，但创作的文字就是这样，千人千面而已。这个故事还可以写下去，既可以是他们的幸福生活也可以是人间悲剧，既可以倒叙他们相识的历程也可以讲讲他家儿子的牛叉人生。反正，小说，就是夸大了说，乱说，大说特说。可是我没时间，不想写小说，我今天也不是为了说这两位的故事。</p>
<p>我真正想表明的是：男人和女人，终究是不一样的动物。真的，长久以来的观察和思考让我开始意识到，自己在和完全不同的生物打交道。她们的智商不输给任何男性，但是她们的想法却千奇百怪，前一秒在哭，后一秒却又在笑，对情绪的掌控力让男性感到发慌，因为有的时候事物各方面的状况都很好，但依然会出问题。我们对未知事物的控制能力很弱，所有指标一切正常，但突然就爆发问题，河东狮吼就是这样…    </p>
<p>人生也是这样，任何情况都无法预测。谈及人生，在生命的道路上，我认为重要的有两点：一是自己要做什么样的事业？二是选择和怎样的人组成家庭？当然，事业不等于学业，女朋友也不一定等于老婆。事实上，学业最终成了爱好和谈资，女朋友真的就成了朋友，甚至是仇人。找老婆，稍微懂事理且能支持自己事业的就可，长相我已经不是很看中了。一来漂亮的女人确实少，二来自己也就长那样，没资格要求什么。在婚姻这个问题上，我认为门当户对绝不是过时的古话，而是不逾的真理，如果夫妻间思维不在一个维度，那么婚姻的恶薮自会如期而至。在人生这条路上，做事其实极其容易，而做人却尤为地难。稍不注意，事业失败了，再稍不注意，婚姻又败了。多少人有着成功的事业却没有好的生活，又有多少人有着幸福的婚姻，然而事业却永不见起色。每个成功的男人背后都有个怎样的女人我不知道，但是为了避免成为受害者，我们首先要做的就是排除掉一堆徒有其表且浮华虚荣的女人，这种女人越漂亮就越是害人。</p>
<p>同样的道理对女生一样适用，要想追求人生的幸福，首先就要排除掉一堆渣男，长得帅的，真是属于自己吗？前段时间还有女生对我谈到，她是颜控，找男人就要帅的。确实，我看到的现实是，相当一部分好女人确实遇到帅的，但最后却都是渣男。然而她们自己看不到，也不会相信，而且别人没法儿对她们言说。女人的逻辑是：我自己选择的，怎么可能不好？所以淘宝大火，很多东西买起来很便宜，感觉不买就是亏，但不管多便宜，你最后还是花了钱，本来你是可以不买的呀！正所谓，你可能确实赚了，但卖家永远都不会亏。最后买的东西，也不怎么好。在感情上也是，很多渣男害了她那女人也舍不得，因为自己选择的男人，自己付出太多，沉默的成本太高，放弃就感觉自己亏了。所以新闻里我们反复看到被渣男害了还舍不得放手的女人，而且今后还会再看到这种新闻。渣男，越帅其伤害力就越大，受害的女性就越多。</p>
<p>受伤的女人往往会感叹，为什么好男人那么少？而在感情懵懂期的女性会问，为什么男生不追女生，或者<a href="https://zhuanlan.zhihu.com/p/56464994" target="_blank" rel="noopener">追着追着就不追了</a>？感觉自己也不差呀？女人们的这种想法很多，我认为是可以理解的，但又太脱离实际。因为生活是具体，但是美并不解饿，而人又有尊严，要是再考虑上机会成本，结果可想而知。我大学追女生就是失败者，我完全搞错了，追了不该追的人，把自己感动半天，现在想想挺傻的。对女生，我能说的是爱情是平等的，你相信人人平等，你要求人人平等，怎么到了爱情就该别人追你？什么女追男隔层纱，无非世人的说辞，你追男生失败和男生追女生失败的感受一样，凭什么好男人就该来追你？不能等着别人对你好，实际上就没人应该对你好，先前的好算是礼貌，后面的不好，只是常态，套个官方词汇叫新常态。一个公司，一个部门，一个班级，那么多男生不对你嘘寒问暖，你从不会怪罪，怎么有人对你好了，然后稍微的不好就让你生怨？</p>
<p>朋友的失态，即令情节重大亦易原谅，恋人的小错，即事属细微亦难宽恕。友谊的价值在于自由自在的放任，而爱情却充满着揣惴焉唯恐失其所爱的恐惧。事实证明，无端的一百个好，只要中途有一次不好，前面的一百次好也会变成不好。男女间算计对方的好不是做加减法，而是作乘法。比如，一个男生，具有10分的优点，女朋友习惯了，接着男朋友来了个缺点，挺严重的，算是-2分。学过数学的都知道此时男生的得分应该是$10 - 2 = 8$分，可是事实不是这样的，先前对其的好(10分）作为乘法因子，恐怖的放大一次缺点，所以女生得出的算式是$10*(-2) + 10 = -10$分，所以，真是渣男。更有甚者，要作幂乘$-2^{10} + 10= -1014$分，看吧，这男生一文不值了。这种算法，多少我还是遇到过，我也是被女人不满意的一类人。生活中的恩怨也是这么来的，恩恩怨怨，有恩才有怨，有多大恩就有多大怨。没有恩怨的人是陌生人，碰面擦肩而过；有恩的人，利益纠葛着，反而恩情会百倍千倍地放大你的一次错。</p>
<p>同样的，男性朋友们，没有女人需要对你好，对你的冷淡实属正常，每个人有自己的生活，你怨不得别人。怨恨只会麻痹你自己的大脑，让自己成为一个弱者，且心灵还要反复受到冲击。要是她再领着她亲爱的男友在你眼前晃，那时嫉妒，羞耻就无时不刻不在摧残着你。</p>
<p>总体来看，女人们的贞操就如一把锁，挡得住君子却挡不住小人。白天鹅往往遇到的不是什么白马王子，而是凶狠的菜刀；白菜不是做成了开水白菜，而是扔到猪圈里被猪拱。只是这个时候，女性们已无法发现自己身处猪圈，最后从某个不知什么途径认识的人里挑了头最好的猪，而又是自己挑的，爱得不得了，反而真正爱她的，值得托付的老实人得靠边站。</p>
<p>这个时代通讯发达，物质生活极为丰富，相当一部分人看不到社会的发展脉络和个人的命运，总是享受感官的刺激，而灵魂却尤为空虚，他们喜欢浪，但浪久了，只有悲剧。没有女人喜欢不思进取的男人，也没有男人喜欢浪荡的女人。</p>
<p>奉劝男性同胞们，你不要为情爱和性去找女人，而要为了家庭幸福和事业的进步去找经济适用女。我们都是普通人，太漂亮的女生你大可以过滤掉，如果不相信，端起镜子照照自己，摸摸钱包。今天的时代飞速发展，物质丰富，你要不被外界迷惑，有自己的事业。只要够牛，女人自己都会过来的，这点我切身体会，如果自己垃圾，就要努力(这话说给我自己听)。渴求美女的心，我理解，但劝你早放弃，懂得正态分布的你应该知道普通长相属于绝大多数，美女只属于最右侧，终归稀缺品。如果你发现周围美女多，那大概也是你运气好，还有化妆术的发达。不信你马上用手机搜搜20年前，30年前春晚现场观众照片，再看现在春晚，你发现女的漂亮多了，然而一个民族，不可能几十年基因改变，怎么就漂亮了，妆的呗，再多的话不说了，懂的自然懂。</p>
<p>对女人们的建议，男人是资产，你要找成长股，穷只是现在，他未来潜力如何？无论如何不要挑到垃圾股。中国股市3000多支股票，只有几十只是好股，这个比例放到男人中一样，大部分男人都是垃圾股(当然我在很大程度上也是垃圾股)，稍微动动脑子就知道，好男人其实很少，你觉得你周围的人不错是因为他和你没利益纠葛，你不知道他私下的生活，你对他的评价只是从其穿着和言谈上，看他帅不帅什么的，而一旦牵扯利益，叫他承担责任，尤其你怀孕试试？这时你就知道你遇到的都是什么垃圾，那时候，帅反而成了你无法诉说痛苦的根源。最后你发现，一般长相，一般身高的人居然是你最喜欢的，所谓的帅其实没什么用，因为生活是实在的，生活不是帅的。小说里的霸道总裁确实有，但你大概率遇不到，遇到了你也不一定珍惜，反而等着别人宠你；韩剧都是虚幻的，那是给娇娇女们准备的，然而你可不是这种人。所以少心机，多真诚，去帮助你爱的人，一起成长，就像茅台股，从2008年的80元一股涨到目前一千二百多一股，坚持这十年持有茅台的客户获得的收益是上百倍，可80元的潜力股男人，你又能看上，你有眼光发掘吗？一个男人十年后到底走到什么地步？大部分女的只看眼前别人有没有房子，车子，就说一个大学生毕业20多岁吧，怎么可能会有很多钱？潜力股就像80元的茅台，等着被发掘，慢慢升值，你需要持有他十年以上。然而你要的却是10年后的价值享受，马上就体贴温暖，马上就安逸美满，现实是这不可能。反观那种没什么潜力的垃圾股，尤其靠几套衣服，几双鞋子，几句甜言蜜语而价值虚高的垃圾股，操了一堆女人，你又能甄别？怕是你还觉得别人风趣幽默，岂不知他对别的女人一样风趣幽默。看看自己认识的男生，有多少你认为十年后大概率升值，又有多少垃圾，你自己心里就清楚了。毫不客气的说，你可能认识的男生里大部分是垃圾，一个升值的都没有，也可能有一两个，但是你真有胆识和别人保持哪怕友谊，你又请过别人吃过几顿饭，看过几次电影？</p>
<p>当然，这是一家之言，可能有些偏激，但就是这么个感受。今天的中国，此时此刻的神州大地上，这许多男女之间确实就发生着这些事儿。我相信爱情的宝贵，但也珍视感情中自由的滋味。如果拉低质量去符合别人的要求，我不如保守独身。一个男人遇到差不多聪明的女人就可以追求，一起过日子，一起奋斗，这是一种缘分和幸福。女生遇到合适的也可以去追求，女追男不丢人，这是21世纪，还用清朝的思维来武装自己？即令失败，也只自己知道而已。你不去追优秀股，然后从身边再挑再选，最后都是垃圾股，只是相对没那么垃圾而已，但你的厄运就此开启。感情它不像考试，可以补考，感情错过了，放弃了，选错了就很难补考，即便补考，代价也很大，最后还多半不及格。有的时候事物各方面的状况都很好，但依然会出问题。我们对未知事物的控制能力很弱，所有指标一切正常，但突然就爆发问题，人与人间的感情也是如此…</p>
<p>对了，忘了交代，那男的确实在外面有人了，只是女主人无意说中了，小三就是女主人猜的那位…，男主人心中的恐慌是真的，还有他的工资上个月就涨了，到了41000，这真是一个神奇的故事。确实，有的时候事物各方面的状况都很好，但依然会出问题。你对未知事物的控制能力很弱，所有指标一切正常，你以为故事结束了，但突然就爆发问题，小说的套路也是如此…男人和女人，终究是不一样的动物。</p>
]]></content>
  </entry>
  <entry>
    <title>CS强校及人工智能领域顶会</title>
    <url>/title/fa65fa6b/</url>
    <content><![CDATA[<p><img src="https://s2.ax1x.com/2019/11/17/MsC4wd.md.png" alt="aimeeting">  </p>
<a id="more"></a>

<h2 id="计算机科学领域全球高校排行榜"><a href="#计算机科学领域全球高校排行榜" class="headerlink" title="计算机科学领域全球高校排行榜"></a>计算机科学领域全球高校排行榜</h2><table>
<thead>
<tr>
<th align="center">排名</th>
<th align="center">校名</th>
<th align="left">评分</th>
<th align="left">大牛数量</th>
<th align="left">均值</th>
</tr>
</thead>
<tbody><tr>
<td align="center">1</td>
<td align="center">卡内基梅隆大学</td>
<td align="left">18.7</td>
<td align="left">161</td>
<td align="left">116.4</td>
</tr>
<tr>
<td align="center">2</td>
<td align="center">麻省理工学院</td>
<td align="left">12.7</td>
<td align="left">86</td>
<td align="left">147.7</td>
</tr>
<tr>
<td align="center">3</td>
<td align="center">伊利诺伊大学香槟分校</td>
<td align="left">11.7</td>
<td align="left">97</td>
<td align="left">120.6</td>
</tr>
<tr>
<td align="center">4</td>
<td align="center">斯坦福大学</td>
<td align="left">11.1</td>
<td align="left">63</td>
<td align="left">176.1</td>
</tr>
<tr>
<td align="center">5</td>
<td align="center">加州大学伯克利分校</td>
<td align="left">10.5</td>
<td align="left">85</td>
<td align="left">123.5</td>
</tr>
<tr>
<td align="center">6</td>
<td align="center">康奈尔大学</td>
<td align="left">9.3</td>
<td align="left">74</td>
<td align="left">125.7</td>
</tr>
<tr>
<td align="center">7</td>
<td align="center">密歇根大学</td>
<td align="left">9.2</td>
<td align="left">75</td>
<td align="left">122.7</td>
</tr>
<tr>
<td align="center">8</td>
<td align="center">华盛顿大学</td>
<td align="left">9.2</td>
<td align="left">62</td>
<td align="left">148.4</td>
</tr>
<tr>
<td align="center">9</td>
<td align="center">加州大学圣地亚哥分校</td>
<td align="left">8.7</td>
<td align="left">65</td>
<td align="left">133.8</td>
</tr>
<tr>
<td align="center"><strong>10</strong></td>
<td align="center"><strong>清华大学</strong></td>
<td align="left"><strong>8.6</strong></td>
<td align="left"><strong>116</strong></td>
<td align="left"><strong>74.1</strong></td>
</tr>
<tr>
<td align="center">11</td>
<td align="center">苏黎世联邦理工大学</td>
<td align="left">8.6</td>
<td align="left">36</td>
<td align="left">238.9</td>
</tr>
<tr>
<td align="center">12</td>
<td align="center">马里兰大学</td>
<td align="left">7.8</td>
<td align="left">68</td>
<td align="left">114.7</td>
</tr>
<tr>
<td align="center">13</td>
<td align="center">佐治亚理工学院</td>
<td align="left">7.5</td>
<td align="left">88</td>
<td align="left">85.2</td>
</tr>
<tr>
<td align="center">14</td>
<td align="center">哥伦比亚大学</td>
<td align="left">6.8</td>
<td align="left">50</td>
<td align="left">136.0</td>
</tr>
<tr>
<td align="center">15</td>
<td align="center">威斯康辛大学</td>
<td align="left">6.7</td>
<td align="left">52</td>
<td align="left">128.8</td>
</tr>
<tr>
<td align="center">16</td>
<td align="center">新加坡国立大学</td>
<td align="left">6.5</td>
<td align="left">67</td>
<td align="left">97.0</td>
</tr>
<tr>
<td align="center">17</td>
<td align="center">东北大学</td>
<td align="left">6.3</td>
<td align="left">65</td>
<td align="left">97.0</td>
</tr>
<tr>
<td align="center">18</td>
<td align="center">多伦多大学</td>
<td align="left">6.1</td>
<td align="left">72</td>
<td align="left">84.7</td>
</tr>
<tr>
<td align="center">19</td>
<td align="center">加州大学洛杉矶分校</td>
<td align="left">5.6</td>
<td align="left">39</td>
<td align="left">143.6</td>
</tr>
<tr>
<td align="center">20</td>
<td align="center">宾夕法尼亚大学</td>
<td align="left">5.6</td>
<td align="left">50</td>
<td align="left">112.0</td>
</tr>
<tr>
<td align="center">…</td>
<td align="center">…</td>
<td align="left">…</td>
<td align="left">…</td>
<td align="left">…</td>
</tr>
<tr>
<td align="center"><strong>31</strong></td>
<td align="center"><strong>北京大学</strong></td>
<td align="left"><strong>4.8</strong></td>
<td align="left"><strong>111</strong></td>
<td align="left"><strong>43.2</strong></td>
</tr>
</tbody></table>
<p>北大和清华专家数那么多，但是反而评分低，说明什么问题？是不是我们好几个大牛合起来才顶别人一个？我看就是这样，这样一比，清北两校的实力就很明显了。国内数一数二，国际勉强排得上号。将评分除以人数再乘以100得到人均综合实力值，可以看到，清华北大依然很一般，还有进步空间。换句话说，清北两校的计算机牛人可能还不够牛。</p>
<h2 id="各种人工智能领域顶会"><a href="#各种人工智能领域顶会" class="headerlink" title="各种人工智能领域顶会"></a>各种人工智能领域顶会</h2><p><strong>Artificail intelligence(人工智能)</strong><br><a href="http://dblp.org/db/conf/aaai/" target="_blank" rel="noopener">AAAI</a><br><a href="http://dblp.org/db/conf/ijcai/index.html" target="_blank" rel="noopener">IJCAI</a>  </p>
<p><strong>Computer vision(计算机视觉)</strong><br><a href="http://dblp.org/db/conf/cvpr/index.html" target="_blank" rel="noopener">CVPR</a><br><a href="http://dblp.org/db/conf/eccv/index.html" target="_blank" rel="noopener">ECCV</a><br><a href="http://dblp.org/db/conf/iccv/index.html" target="_blank" rel="noopener">ICCV</a>   </p>
<p><strong>ML &amp; data mining(深度学习和数据挖掘)</strong><br><a href="http://dblp.org/db/conf/kdd/index.html" target="_blank" rel="noopener">KDD</a><br><a href="http://dblp.org/db/conf/icml/index.html" target="_blank" rel="noopener">ICML</a><br><a href="http://dblp.org/db/conf/nips/index.html" target="_blank" rel="noopener">NIPS</a>  </p>
<p><strong>NLP(自然语言处理)</strong><br><a href="http://dblp.org/db/conf/acl/index.html" target="_blank" rel="noopener">ACL</a><br><a href="http://dblp.org/db/conf/emnlp/index.html" target="_blank" rel="noopener">EMNLP</a><br><a href="http://dblp.org/db/conf/naacl/index.html" target="_blank" rel="noopener">NAACL</a>   </p>
]]></content>
      <categories>
        <category>AI</category>
      </categories>
  </entry>
  <entry>
    <title>5G之后是6G？</title>
    <url>/title/fb817f20/</url>
    <content><![CDATA[<p><img src="https://s2.ax1x.com/2019/10/31/KooVW4.jpg" alt="5gON"></p>
<a id="more"></a>

<h2 id="5G商用"><a href="#5G商用" class="headerlink" title="5G商用"></a>5G商用</h2><p>今天上午，2019中国国际信息通信展在北京国家会议中心召开。在5G商用启动仪式上，工信部与中国移动、中国联通、中国电信、中国铁塔共同宣布5G正式商用。11月1日，也即明天，各地的5G套餐就可以办理了。对于大部分消费者来说，有尝鲜的意愿，但目前价格还比较贵，真正办理的估计不多。但不管贵不贵，速度快倒是真的。</p>
<h2 id="运营商的新玩法"><a href="#运营商的新玩法" class="headerlink" title="运营商的新玩法"></a>运营商的新玩法</h2><p>5G和4G相比，有了很多不同的情况，尤其是在运营商层面。4G时代各大运营商相互竞争，5G时代，运营商得抱团取暖，合作共赢。上面已经表明，电信和联通要共同建设通信基站，以往各自建塔的模式玩不转了，唯一能独立搞的就只有移动。5G，使用的波更短，意味着要使用更多的基站，而每个基站都挺贵的，所以总体基站建设费用会比较高，从目前公布的基础套餐价最低为128也能看出这点。据最新数据估计，5G基站建设得分好几年，总投资费用高达数万亿。</p>
<p>从频段的分配上也能看出，这两家拿到的5G频段加起来还没人家移动一家多，唯一的好处是，联通电信的频段处于最成熟的区间，布置网络要容易些。</p>
<table>
<thead>
<tr>
<th align="center">移动</th>
<th align="center">联通</th>
<th align="center">电信</th>
</tr>
</thead>
<tbody><tr>
<td align="center">260MHz</td>
<td align="center">100MHz</td>
<td align="center">100MHz</td>
</tr>
</tbody></table>
<p>时代变了，以前的冤家，现在成了亲家，仇人成友人。联通和电信多年发展的失利致使移动独大，只好两家合纵连横同移动拼，真真是有点儿三国演义的味道，然而现实是深刻的，利益是重要的，脸面是可以不要的，所以两家得合作。</p>
<p><img src="https://s2.ax1x.com/2019/10/31/Kooml9.md.jpg" alt="TelUni"></p>
<p>除此之外，运营商和用户在基站的问题上还存在一个博弈过程。用户的要求是，基站不能放我家旁，但信号必需好，放在别人家旁我没意见。所以逼着运营耍手段，给基站来个大隐身。路边的井盖，路灯，房顶的空调机，绿化树，排气管等等全都成为了基站的新替身。城市人从来看不到基站，但它们却一直在你身边。</p>
<p><img src="https://s2.ax1x.com/2019/11/01/KTx8jf.jpg" alt="basestation1"></p>
<p>你以为是绿化，其实是基站。</p>
<p><img src="https://s2.ax1x.com/2019/11/01/KTxTKK.jpg" alt="basestation2"></p>
<p>你以为是热水器，其实是基站。</p>
<p><img src="https://s2.ax1x.com/2019/11/01/KTxx2t.jpg" alt="basestation3"></p>
<p>请勿践踏花草，其实里面也是基站，一体两用。</p>
<p>5G基站大幅度增加，耗资巨大，必然导致有的地方投资薄弱，很多地方未来几年都将没有5G信号，所以买5G手机先确认自家信号，别买了用不了。下表中的城市是首批开通5G的城市，其他城市可能要等两年左右。</p>
<table>
<thead>
<tr>
<th align="center">直辖市</th>
<th align="center">省会城市</th>
</tr>
</thead>
<tbody><tr>
<td align="center">北京，上海</td>
<td align="center">成都，杭州</td>
</tr>
<tr>
<td align="center">天津，重庆</td>
<td align="center">南京，武汉等</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th align="center">单列市</th>
<th align="center">重要城市</th>
</tr>
</thead>
<tbody><tr>
<td align="center">深圳，青岛</td>
<td align="center">雄安，苏州</td>
</tr>
<tr>
<td align="center">宁波，厦门</td>
<td align="center">温州，张家口</td>
</tr>
<tr>
<td align="center">大连</td>
<td align="center"></td>
</tr>
</tbody></table>
<p>我在想，要是5G时代，联通和电信合起来还干不过移动，是不是意味着权力的洗牌，会不会拆分一家合并到另外两家中去？运营商的套路是丰富多样的，不知未来的套餐又会出什么新花样，反正消费者要看清楚，别被忽悠。</p>
<h2 id="5G应用场景猜测"><a href="#5G应用场景猜测" class="headerlink" title="5G应用场景猜测"></a>5G应用场景猜测</h2><p>前段时间在B站上，北京邮电大学的何同学试用了5G，并就未来的应用做了讨论。他借鉴了4G刚出来时人们的反应，表明预测未来的应用确实是挺难的。</p>
<p>视频：5G有什么用</p>
<iframe src="https://player.bilibili.com/player.html?cid=95749546&aid=54737593" width="270" height="300" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen></iframe>

<p>尽管很难预测，但我还是大胆猜猜5G的应用。  </p>
<table>
<thead>
<tr>
<th align="center">预</th>
<th align="center">测</th>
</tr>
</thead>
<tbody><tr>
<td align="center">远程医疗</td>
<td align="center">智慧施政</td>
</tr>
<tr>
<td align="center">智能家具</td>
<td align="center">工业物联</td>
</tr>
</tbody></table>
<p>远程医疗：一是指优秀的专家可以远程做手术，节约时间和交通成本。二指医生可以通过网络对家里的病人进行指导和开展医疗服务。4G让人吃饭不出家，点外卖；5G就让人生病不出家，点医生，点药。未来的医生可能会享受很高的社会地位，他们通过提供更好的服务，赚取高额的佣金。同时，这种新的医患关系避免物理接触，保护了医生。</p>
<p>智慧施政：民智越开，则政府越弱，一旦老百姓掌握了信息，那么政府的很多服务可以取消，政府不能随便制定政策，很多政府服务要交给智慧系统，很多政府职权要还给百姓。</p>
<p>智能家具：物联网时代，硬件大爆发，未来的家庭，联网的器件增多，冰箱，空调，桌子，椅子可能都有某种程度的网络功能，并提供相应的服务。</p>
<p>工业物联：打造全新的制造链和运输链，智能驾驶，智能运输系统，同时可能出现新的产业联盟，类似今天存在的各种协会。</p>
<h2 id="5G中的Polar码"><a href="#5G中的Polar码" class="headerlink" title="5G中的Polar码"></a>5G中的Polar码</h2><p>Polar码是5G中的一种编码技术，属于5G核心技术。Polar码源于2008年的一篇论文Channel Polarization。作者是土耳其科学家埃达尔·阿勒坎（Erdal Arikan）。1981年，阿勒坎在位于加州理工学院获得本科学位，随后他去了美国的另一所名校——麻省理工学院，于1985年得到电子信息工程专业的博士学位。阿勒坎的博士生导师是美国人罗伯特·加拉格（Robert Gallager）教授，而加拉格的导师，也就是阿勒坎的师爷，则是大名鼎鼎的信息论鼻祖香农。原本以为只是个牛叉人物，没想到竟然是香农大佬门徒。不过想来也对，不是这个领域的人，又如何搞出这些编码呢？</p>
<p>华为公司在论文出来后，就调集人手攻克论文提出的编码，并最终得以攻克。前几年，华为推动的Polar码在3GPP会议上同LDPC码共同确立为5G技术，LDPC管数据信道，Polar码则控制通信信道。Polar码中，重要的是一个矩阵问题，解决了矩阵问题，编码问题就解决了。当然，我不是专家，不太懂，无法发表更多看法。</p>
<p>值得一提的是，美国人推动的LDPC就是阿勒坎的师傅加拉格搞出来的，最终两师徒的理论均成为5G核心技术，美国选了师傅，中国选了徒弟，然后相互竞争，相互斗。</p>
<p><img src="https://s2.ax1x.com/2019/10/31/Koo3FO.png" alt="Edel"></p>
<p>图为华为创始人任正非为阿勒坎颁奖，感谢其在该领域的杰出贡献</p>
<p>除了编码，5G中还有其他的核心技术，包括OFDM（正交频分复用），MIMO（多天线），新的组网结构。在Erik Dahlman的《5G NR》一书提到 “Both LTE and NR are developed by 3GPP and hence have a common background and share several technology components. Many of the design choices in NR are also based on experience from LTE. Furthermore, LTE continues to evolve in parallel with NR and is an important component in 5G radio access.” 可见，4G (LTE)中有些技术是用到5G里面的，自然5G和4G是兼容的。</p>
<h2 id="6G研究"><a href="#6G研究" class="headerlink" title="6G研究"></a>6G研究</h2><p>2018年两会期间，工信部部长苗圩表示，中国已开展6G的研发，预计2030年试使用。中国通信产业要做到，用一代，产一代，研一代。</p>
<p><img src="https://s2.ax1x.com/2019/10/31/KoTC1H.jpg" alt="miaoyu"></p>
<p>图为工信部长苗圩接受记者访问，并透露6G研究情况</p>
<p>目前的5G，仍然有缺点，很多缺点就是4G(LTE)自带的，在5G仍然没有解决，所以6G要首先解决这些问题，不然下一代通信技术不可能得到发展。5G都这么快了，6G又该如何？这种问题，想象力不够，水平不够，想不出来。但从社会生产力变革的发展和国家对通信行业的投入来看，未来搞通信的人还将大有作为。这个产业涉及的硬件如芯片，天线，软件如算法，智能调度等将得到进一步发展。当然，6G现在还处在概念期，华为也刚开始投入研究，社会上谈得不多。</p>
<p>我个人看好6G，换句话说，我认为未来从事计算机，通信，算法，芯片，天线等行业的人将大有可为。知道了这些，怎么选路就很清楚了。人一辈子能碰上一个技术浪潮，加之努力，就可能过得很好，何况处在人类技术大爆发的年代，新技术正不断冒出，新思想正时刻迸发。人人都讲抓住机遇，但机遇也要靠自己奋斗，不是喊喊口号就行。新的技术会催生新的公司，同时灭掉旧的公司。今天的淘宝，腾讯，谁说未来不会成为下一个诺基亚？对于自身来讲，个人的人生道路就看他处在历史的潮流中是抱残守缺还是革故鼎新。</p>
<h2 id="G"><a href="#G" class="headerlink" title="?G"></a>?G</h2><p>现在再进一步思考：6G过后呢？难道7G？可是信道容量是有极限的，香农定理早已经证明了这一点。<br>$$ C= Blog_{2}(1 + \frac{S}{N}), (N =n_0B)  $$<br>若上面的香农公式中，B趋于无穷，则在给定$S/n_0$的情况下，C最大只能等于<br>$$1.44\frac{S}{n_0}$$ </p>
<p>所以6G过后，是无G。没有了，等待新技术的突破吧，尤其是物理突破。没有物理理论上的突破，人类的技术就不会进步。实际上，每一次物理的突破都带来了技术的革新。我们回顾自1905年相对论诞生以来的一百多年，原子弹，核电站，GPS成为现在时态；量子力学的诞生提出了晶格理论，催生了新材料合成技术，进而推动半导体发展，集成电路发展，最后是建立于之上的计算机，互联网，一直到今天我们都还在吃量子力学的老本儿。最近一段时间，谷歌的<a href="https://www.nature.com/articles/s41586-019-1666-5" target="_blank" rel="noopener">量子霸权</a>不也再次挑动人们的眼球吗？</p>
<p>当然，有人说，难道不能突破香农定律吗？还别说，还真有这种人，而且还写了相应的文章，只是没有哪位审稿人给通过。另外，芯片行业的摩尔定律也到头了，CPU能做到1nm吗？能再小吗？不行了，因为电子有大小的，一到电子这个尺度，就要考虑量子效应。</p>
<p>所以，物理上如果不能取得新突破，则人类就会像欧洲中世纪一样，长时间生活在技术停滞发展的社会。想象如果50年后人们还在玩视频直播，还过着2019年的生活，这会不会出问题？相反，新理论会催生新的生产力，进而产生新的技术并推动文明的前进。今天的地球，斗争处于文明体之间，进步的活下来，落后的要么灭亡，要么遭奴役。这个时代是和科技战车绑架在一起的时代，任何人都只能支持科技的发展。</p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p>[1] 文明的冲突，[美]亨廷顿<br>[2] 5G核心技术，Qualcomm(高通)中国<br>[3] 手机基站天线去哪儿了？知乎老狼<br>[4] 5G NR: The Next Generation Wireless Access Technology<br>[5] Channel Polarization, Erdal Arikan, Senior Member, IEEE.  </p>
]]></content>
      <categories>
        <category>通信</category>
      </categories>
      <tags>
        <tag>IT</tag>
      </tags>
  </entry>
  <entry>
    <title>资深大牛的博客</title>
    <url>/title/f2d8edc5/</url>
    <content><![CDATA[<p><img src="https://s2.ax1x.com/2019/10/30/K5YRsK.jpg" alt="niubility"></p>
<a id="more"></a>

<h2 id="整理一份行业大牛的博客"><a href="#整理一份行业大牛的博客" class="headerlink" title="整理一份行业大牛的博客"></a>整理一份行业大牛的博客</h2><p>00.<a href="http://www.yinwang.org/" target="_blank" rel="noopener">王垠</a></p>
<p>01.<a href="https://blog.codingnow.com/" target="_blank" rel="noopener">云风</a></p>
<p>02.<a href="http://blog.yufeng.info/" target="_blank" rel="noopener">余峰</a></p>
<p>03.<a href="https://www.cnblogs.com/Solstice/" target="_blank" rel="noopener">陈硕</a></p>
<p>04.<a href="http://blog.zhaojie.me/" target="_blank" rel="noopener">老赵</a></p>
<p>05.<a href="https://blog.csdn.net/luoshengyang" target="_blank" rel="noopener">老罗</a></p>
<p>06.<a href="https://blog.csdn.net/21aspnet" target="_blank" rel="noopener">无界</a></p>
<p>07.<a href="https://evilcos.me/" target="_blank" rel="noopener">余弦</a></p>
<p>08.<a href="http://www.ruanyifeng.com/blog/" target="_blank" rel="noopener">阮一峰</a></p>
<p>09.<a href="http://mindhacks.cn/" target="_blank" rel="noopener">刘未鹏</a></p>
<p>10.<a href="https://www.trinea.cn/" target="_blank" rel="noopener">吴更新</a></p>
<p>11.<a href="http://www.cppblog.com/vczh" target="_blank" rel="noopener">VCZh</a></p>
<p>12.<a href="https://www.byvoid.com/blog" target="_blank" rel="noopener">BYVoid</a></p>
<p>13.<a href="https://blog.csdn.net/v_july_v" target="_blank" rel="noopener">七月在线创始人</a></p>
<p>14.<a href="http://www.zhuangbiaowei.com/blog/" target="_blank" rel="noopener">读书，思考，生活</a></p>
<p>15.<a href="https://www.captainbed.net/troubleshooter/" target="_blank" rel="noopener">床长人工智能教程</a></p>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>Blog</tag>
      </tags>
  </entry>
  <entry>
    <title>双托管代码</title>
    <url>/title/53e77485/</url>
    <content><![CDATA[<p><img src="https://s2.ax1x.com/2019/10/30/K5YBa4.md.jpg" alt="dulgit"></p>
<a id="more"></a>

<hr>
<h2 id="一：背景"><a href="#一：背景" class="headerlink" title="一：背景"></a>一：背景</h2><p>近期美国加紧封锁大棒，不但对中国，据说连委内瑞纳一个小国也被禁止使用Photoshop。结合前段时间github封禁中东开发者的情况，我认为中国的开发者需要把代码迁移一下，迁移到国内。目前国内的托管平台有多个，腾讯开发者平台，码云，还有最近华为开放的ihub，我选择了码云。</p>
<hr>
<h2 id="二：双托管"><a href="#二：双托管" class="headerlink" title="二：双托管"></a>二：双托管</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">首先查看配置.</span><br><span class="line">$git remote -v </span><br><span class="line">origin git@github.com:USERNAME/package.git (fetch)</span><br><span class="line">origin git@github.com:USERNAME/package.git (push)</span><br><span class="line">删除github的配置.</span><br><span class="line">$git remote rm origin</span><br><span class="line">重新添加新配置.</span><br><span class="line">$git remote add github git@github.com:USERNAME/package.git</span><br><span class="line">$git remote add gitee  git@gitee.com:USERNAME1/package1.git</span><br><span class="line">解决推送冲突</span><br><span class="line">$git pull gitee master --allow-unrelated-histories</span><br><span class="line">推送到两个平台</span><br><span class="line">$git push gitee  master </span><br><span class="line">$git push github master</span><br></pre></td></tr></table></figure>

<p>如果想存放在多个平台，修改同上面一样，只需要加入另一个平台的地址就行。</p>
<p>目前，国内平台多，但和Github比还有差距，仍需相关方继续推动，促进国内源代码托管。同时做好国际化，鼓励国外工程师托管优质代码到中国的服务器。</p>
]]></content>
      <categories>
        <category>代码托管</category>
      </categories>
      <tags>
        <tag>Code</tag>
      </tags>
  </entry>
  <entry>
    <title>校训？笑训？</title>
    <url>/title/cc8c4bdd/</url>
    <content><![CDATA[<p><img src="https://s2.ax1x.com/2019/11/02/KqWhGD.md.png" alt="university"></p>
<a id="more"></a>

<p>我的高中是在抗战时期建立的，那时南开大学的创立者张伯苓迫于日军轰炸将南开大学校迁到西南。高中故特意聘请他为学校的董事长，让他署理学校，在那个年代就用董事制度，算是很科学的了。张董事长，为我们学校题的校训是“尽心为公，努力增能”，着重于公能教育。在那个年代，此二字正是时代的需要。</p>
<p>南开大学的校训是“允公允能、日新月异”，也是强调公能，直到现在，南开的校训没改，我的高中校训也没改过。我们高中的校歌和南开大学旋律一样，只是改了几个字。当然，我不是要说我高中历史，而是想说高校的校训，前面只是引子。</p>
<p>从各个高校的校训中，我们可以看到一个高校的性格或者说使命。中国的高校很多，每所的定位又不同。就那39所985高校来看，我发现各个高校的校训也很能反映其特点。</p>
<h2 id="校训"><a href="#校训" class="headerlink" title="校训"></a>校训</h2><ul>
<li>浙江大学———求是创新  </li>
<li>同济大学———同舟共济  </li>
<li>天津大学———实事求是  </li>
<li>东南大学———止于至善  </li>
<li>东北大学———光明、真理、勇气  </li>
<li>清华大学———自强不息、厚德载物  </li>
<li>南开大学———允公允能、日新月异  </li>
<li>山东大学———学无止境、气有浩然  </li>
<li>厦门大学———自强不息、止于至善  </li>
<li>湖南大学———实事求是、敢为人先  </li>
<li>中南大学———知行合一、经世致用  </li>
<li>南京大学———诚朴雄伟、励学敦行  </li>
<li>四川大学———海纳百川、有容乃大  </li>
<li>兰州大学———自强不息、独树一帜  </li>
<li>北京大学———爱国、进步、民主、科学  </li>
<li>复旦大学———博学而笃志、切问而近思  </li>
<li>吉林大学———求实、创新、励志、图强  </li>
<li>武汉大学———自强、弘毅、求是、拓新  </li>
<li>中山大学———博学、审问、慎思、明辨、笃行  </li>
<li>重庆大学———耐劳苦、尚俭朴、勤学业、爱国  </li>
<li>中国人民大学—-实事求是  </li>
<li>西北工业大学—-公、诚、勇、毅  </li>
<li>中国海洋大学—-海纳百川、取则行远  </li>
<li>中央民族大学—-美美与共、知行合一  </li>
<li>华东师范大学—-求实创造、为人师表  </li>
<li>电子科技大学—-求实求真、大气大为  </li>
<li>北京理工大学—-德以明理、学以精工  </li>
<li>北京师范大学—-学为人师、行为世范  </li>
<li>华南理工大学—-博学慎思、明辨笃行  </li>
<li>上海交通大学—-饮水思源、爱国荣校  </li>
<li>大连理工大学—-团结、进取、求实、创新  </li>
<li>华中科技大学—-明德、厚学、求是、创新  </li>
<li>中国农业大学—-解民生之多艰、育天下之英才  </li>
<li>西安交通大学—-精勤求学、敦笃励志、果毅力行  </li>
<li>哈尔滨工业大学—–规格严格、功夫到家  </li>
<li>西北农林科技大学–诚朴勇毅中国  </li>
<li>北京航空航天大学–德才兼备、知行合一  </li>
<li>中国科学技术大学–红专并进、理实交融  </li>
<li>国防科学技术大学–厚德博学、强军兴国  </li>
</ul>
<table>
<thead>
<tr>
<th align="center">独字</th>
<th align="center">高频字</th>
<th align="center">分类</th>
</tr>
</thead>
<tbody><tr>
<td align="center">145</td>
<td align="center">求，学</td>
<td align="center">985高校</td>
</tr>
</tbody></table>
<p>清华的校训应该是取自《易经》乾坤二卦的解释“天行健，君子以自强不息；地势坤，君子以厚德载物”。本来我不知道，直到有天读《易经》时发现原来清华校训大有来头。所以，清华确实强，人家很有修养，校训直接从中国最古老的书里找。北大的校训和五四运动的科学民主有关，德先生和赛先生进入人家校训，今天北大的学生仍然是推动国家民主科学的先锋。</p>
<p>反观我的大学母校们，校训要自己看，自己学，校歌到今天我都不知道，也没唱过。反而我的高中给我的印象更深刻，时刻不忘的公能，而大学给我的感觉就是一个加工厂，培养一批具有知识的高级动物。工厂提供产品，教堂提供虔信，法庭提供公道，而学校要增加智慧的光芒。我确实从大学学到一点儿知识，但没有学到灵性。我更多地学会了长袖善舞的机巧和溜须拍马的嘴皮子，而没有学到真正值得追求的东西。大多数情况下，我们的学校培养的不是顺从的羔羊，而是凶狠的野驴和倔强的骡子；学校培养不出合乎德行的品性，培养的全都是虚伪的道德外表，一种令人生厌的，外来的文化皮毛，和一些专务世俗虚荣的眼光和手脚。再看部分大学生，他们热衷于各种套路和关系，喜好各种名头和称谓。别人考了个什么证，他便也考个什么证；别人参加比赛，即令其不参加，也少不了风言风语。他们做事最不会忘记的是拍视频，拍照片，最后拿回去做成报告，做到简历上，这些智慧和机巧成为了他们上升的资本和渠道。总之，相当一部分大学生会钻营，有心机，玩得来大的，也玩得转小的，他们太聪明，聪明到自己都不认识自己。拥有小聪明，缺少大智慧。</p>
<p>一所大学，不光是传授知识的场所，更该是培养人性和思想的福地，大学还是要有点儿不那么功利的精神才行。要说知识，各所高校教的知识又真的会差多少呢？各个大学的学生又真能差到哪里去？但是，大学环境的不同，各位官老爷和教务人员治校水平的不同，最终导致学生的不同性格和命运，我认为高校当反思，当然学生也要反思。一切事物的本性在较弱时容易屈服，长硬了就改不了，人心如白纸，看怎么写，尤其是高校打算怎么往学生心里写。</p>
<p>今天一谈教育，就夸自己什么双一流，985，211高校，但是培养的学生有多少有真实本领，又有多少具有独立思考和真知灼见呢？我们骂社会风气不好，利益至上，腐败横流，但我们的大学培养的学生不正是在社会上呼风唤雨的那群人吗？我们的校训强调的都是好的，一说嘴里吐出的全都是仁义道德，但是社会一染，干的又全都开始不清不楚起来。我们的老师喜欢划重点，学生也爱划重点，但是人生的重点谁来划？知识确实能学进去，不，简直是打进去。本来可以明白地和明亮地放在心智眼前的事情，却晦涩，迷惑地讲，错杂地看待。</p>
<p>长此以往，学生回忆起母校的时候，除了能谈谈那几栋楼，和吃饭睡觉的场所外，又还能有什么呢？有多少不照着PPT念的老师？有多少既教书还育人的师长？历史文化底蕴知多少，精神追求是什么？</p>
<p>我们的学校确实需要培养工程师和科学家，但工程师和科学家应该具有灵性，而不是魔性与奴性。工程师和科学家们不但要学会做工程和科研，还要学会做人。尤其是大学要教育学生学会做人，当然老师更要为人师表，率先垂范。</p>
<p>当今这个时代，实在做事最容易，做人却尤其的难。大部分人听不进去真话，反而是捧场话最得人心。最后，聪明的中国人学会了真话实话不全说，套话空话满天飞，忠言逆耳成了批评人的辞令，一用到自己身上却都说自己情况不同，你说怪不怪？怎么一个真理，用到自己身上就不管用？</p>
<p>所以，高校的老爷们，多多抓人文教育，把你的校训交给大家，把校服发给大学娇娇子们，让他们把校歌唱起来。学校既要教学生硬科学，也要给他们注入软文化。别看今天学生不耐烦这些，按照人性犯贱的规律，毕业了他出去后能记起的就是他今天骂得最多，最烦的东西。将来他懂道理了，他不但自己回忆起学校的种种好，旁人要是讲出个学校的不好，他一定同那人拼命。</p>
]]></content>
      <categories>
        <category>高校</category>
      </categories>
      <tags>
        <tag>校训</tag>
      </tags>
  </entry>
  <entry>
    <title>何以修身？</title>
    <url>/title/70af6bb7/</url>
    <content><![CDATA[<p><img src="https://s2.ax1x.com/2019/10/30/K5YMqS.jpg" alt="beyourself"></p>
<a id="more"></a>

<h2 id="不懂装懂"><a href="#不懂装懂" class="headerlink" title="不懂装懂"></a>不懂装懂</h2><p>据我所知，人越是不懂便叫得越厉害，越是懂得多反而谦虚谨慎。人的认知犹如一个气球，懂得越多则撑得越大，接触的未知面就愈广，所以自然就愈谦虚；相反，什么都不懂的人，未知面很是狭小，如此他们便自以为什么都懂，与之理性地争论毫无作用，在他们的认知逻辑里，只要没人说自己不懂，自己便全都懂，所以他们首先想的不是解决问题，而是解决提问题的人。如此，长傲和多言成了他们的随身法宝。长傲、多言这两个弊病，我自己也经常犯，细细想来，古时世卿大夫的兴与衰，近来官场的祸与福，未尝不是由这两个弊病导致的。</p>
<p>这样看来，保持谦虚谨慎实在人性中的一大亮点。而世人包括我自己在内，又多不谦虚。因为不谦虚，所以便傲起来了，这样的例子太多太多。做官的一俟官位稳当了，官性就起来了，人性就龟缩了。被人一口一个书记，部长，领导叫着，自己也一步步走入自己挖的坑，跳入权势和名利的争夺圈。须知，权力的本质在于，即使不曾刻意追逐，甚至是被迫拥有，掌权者也会自然而然去追逐更多的权力。因为这样傲起来地快，所以倒下去也便一样地快。由此，身败名裂者，历史上实在为数太多。骄傲起来的，气焰盛了，便觉得自己了不得了，觉得老子天下第一聪明，但这种聪明多的是小聪明，少有大智慧。然而，人们真的就没有反躬自省的时候吗？实际是有的，但狂傲之人往往不习惯于理智上的反省，而习惯于情绪上的反省。中文里有个词叫闭门思过，你说他思谁的过？他思别人的过！不用说，我们自己也这么干过。我们和别人出了争端，闹了矛盾时多半不会反思，反而是相互指责，谩骂，攻讦。我们喜欢用的句式是：他…如何如何，都是他…怎样怎样。这里的一个例子是女人对男人的控诉：他又不爱我了，他又…我了，他总是….。这种甩黑锅的习惯甚至不是人的缺点，而是人的特点。看过《肖申克的救赎》就知道，即令进了监狱，被判刑的囚犯全都说自己是被冤枉的，那么作为一个正常人，我们又如何肯轻易认错呢？然而，时代的进步，家庭的和睦，无不有谦虚谨慎的功，也无不表明狂傲，多言的过。事实证明只有修谦虚谨慎的功，才弥补得了狂傲，多言的过。狂傲，多言只会自欺欺人，只会自己给自己洗脑，别人不来骗自己，反而自己要骗自己。</p>
<p>自己骗自己的范例，股市体现得最为精妙。凡是买股票的，没有不觉自己决策英明的。做多的，总盼着涨，即令下跌，眼随着曲线往下看，但心却依然在往上升。明明跌了，却还要反复骗自己肯定会涨。玩股票讲究两点：一要选得准，二要拿得稳。很多人也知道这两点，但第一点98%的人不知道自己不具备，反而觉得自己全具备。第一点学个半吊子，第二点又死守，学什么却什么都不对，最后只能被割韭菜为人接盘。没有人发现，股票分析师有大机构养着。他们自己可能从不操作股票，反而靠写各种炒股书籍来指挥散户，实际上他们的工作就是忽悠散户。他们不靠买卖股票赚钱，他们靠开讲座，卖书忽悠散户买卖股票挣钱。股市里，大家都说要稳，要谨慎，然而自己骗自己者，少吗？道听途说，盲目自信害着谁，自己遭了才知道。实际上即便遭了，很多人还不知道。狂傲，盲目自大作的祟，即令他们踩最多的坑，倒最大的霉，嘴上却还唱着最美的赞歌。</p>
<p>同样的，那男的看我了，是不是喜欢我？或者那女的瞅了我两眼，是不是对我有意思？看吧，人的大脑里总是有奇思妙想，总觉得有好事发生。电影里面数花瓣判断对方爱不爱我的把戏不也是自己内心犹豫不决，缺乏判断造成的吗？这也是自己骗自己。怎么一个男的长得帅的看你几眼就是喜欢你？怎的一个女的瞅你一下就是有意思？照照镜子吧！自我脑补，自我麻痹，自我欺骗，看来我们的大脑很不中用。</p>
<h2 id="读书以明理"><a href="#读书以明理" class="headerlink" title="读书以明理"></a>读书以明理</h2><p>面对我们自己的愚蠢，怎么办？我想，人生路上，还是多读点书为好。肚子饿了，知道吃饭，脑子饿了，精神空虚了，则宜读书。多读一册书，就多懂一行。懂得一行就掌握了一个维度，懂得多个领域，就掌握了多个维度。多掌握几个维度，也免得被人忽悠。许多人讲，工作太忙啦，没时间读书呀！我想说这话的人不是没时间读书，而是那个手机，它太好玩了，他们说的没时间，是玩了手机后没有时间。关于这点，两个凡是说得好：凡是要等到有了实验室方才做研究的，有了实验室也不肯做研究；凡是要等到有了时间方才读书的，有了时间也不肯去读书。为什么？因为有了时间他又要去玩手机，哪里会看书？</p>
<p>多读书，多体会别人面对各种情形时的判断和决策过程，这样，我们才能在面对复杂问题时提出妥善的解决方案，而不是如热锅上蚂蚁般团团转，撞了车也才不至于只懂得打电话找老公。多读书，使我们知道对问题的思考，往往不只一面，而是很多面，很可能还要翻一个面。我们要保持头脑开放，不能双脚踏在现代，而头脑还在宋代。爱因斯坦说过：“重大问题发生时，依我们当时的思想水准往往无法解决”。认知学上有个词叫“知识的错觉”：意思是说每个人懂的知识其实很少，但我们却以为自己懂得很多。我们不知道自己不知道，反而以为自己全知道，原因是我们把存在于他人大脑中的知识也看成是自己的。这就是我说的自己骗自己。我们面临的许多困难，其实并非真有多么困难，实乃我们见解上的困难，是书读少了的困难。</p>
<p>多读书，看览世间事，使我们知晓做人之道有时在于：含含糊糊的事要看得清清楚楚，而清清楚楚的事要显得含含糊糊。多读书，让我们知道不光要懂得积极工作的“生活技术”，还要懂得恋爱靠机会，而结婚靠智慧的“生活艺术”。多读书，我们才能保养自己的灵魂，尽量维持人生的幸福。许多人嘴上讲着保持精神上的纯粹，一讲都是满口的仁义道德，但他们肉体上却更加频繁地和俗事打着交道，食欲，睡欲，性欲，愤怒，骄傲和妒忌几乎成了他们维持生活的必需品。呼应理性与真理的能力人人皆有，不幸的是，响应非理性与谬论的倾向也同样存在于每个人身上。特别是当谬误居然到了可以唤起愉悦的情感时，或者吁求非理性的时候，我们生命深处那原始的、兽性的部分，居然与之一拍即合。我们几乎都渴望和平与自由，但是却很少有人会对成就和平与自由的思想、情感、行动产生热情。比如孟德斯鸠的《论法的精神》，卢梭的《社会契约论》，可能许多人怕是听都没听说过，遑论去读。反过来说，没有人希望战争、独裁，但是却有相当多的人对造成战争独裁局面的思想、情感、行动怀抱深深的喜悦。看看电影院里什么卖座，看看手机上的露腿露肉视频一堆人看，你就知道了。大部分人嘴上说的都是爱自由，平等，正义，然而生活中他们干的最多的，吸引他们最多的却是恐怖，暴力，色情。</p>
<p>多读书，能避免自己孤陋寡闻。书籍不但充实我们的灵魂，也同样减轻了我们精神上的痛苦，同时还可能解决我们面临的困难，这实在是很划算的事。诵读一册好书就是在不断地对话，书讲着，而我们的灵魂答着。当窗外阳光投射出的阴影从西边转到东边时，读者已经在书中看到了一个时代的兴亡、一种艺术的发展延续、一个人一生的得意与失落。虽然我们未环球旅行，但通过书籍，我们看到了现实的七大洲，并徜徉在心中的第八大洲。</p>
<p>多读书，明晰道理，使人聪明。聪明意味着遵循理智的指导，而愚蠢刚好相反，听任感情摆布，把理智限制于头脑的狭小角落里，而让感情囊括身体的其余部分。多读书，看别人犯的错，真正让自己谦逊。一个浮躁的人往往会急于为自己辩护，而辩护的结果又往往无济于事；一个勇于承认错误的人则给人一种尊贵、高尚的感觉。要知道：争辩永无止境，谦让受益更多！ 发现自己的错误，需要智慧；承认错误，需要勇气；改正错误，则需要决心。</p>
<p>本文既是写给自己看，也帮助有需要的人。我很清楚，只有周围人的素质高了，社会才更理性，更安全，更有希望。就像新冠瘟疫，因为一些人，一些官员的问题，让全体国民，地球居民跟着遭殃，怎么看都划不来。</p>
<p>朋友，放下手机，去读书吧！</p>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>小杂感</tag>
      </tags>
  </entry>
  <entry>
    <title>中国狗和中国人(傅斯年)</title>
    <url>/title/7ac6e5db/</url>
    <content><![CDATA[<p><img src="https://s2.ax1x.com/2019/11/02/KLfQEt.jpg" alt="chinese"></p>
<a id="more"></a>

<p>有一天，我见着一位北京警犬学校的人，问他道:“你们训练的狗，单是外国种呢，或是也有中国狗?”他答道:“单是外国种的狗。”</p>
<p>中国狗也很聪明，它的嗅觉有时竟比外国狗还要灵敏，不过太不专心了。教它去探一件事，它每每在半路上，碰着母狗，或者一群狗打架，或者争食物的时候，便把它的使命丢开了，所以教不成材。</p>
<p>我听了这一番话，很有点感触，何以中国狗这样像中国人呢?不是不聪明，只是缺乏责任心。中国人“小时了了”的很多，大了，几乎人人要沉沦。留学在国外的成绩颇不恶——胡适之先生说，犹太人在美国大学的成绩最好，其次便是中国学生，至于真美国人，远不如这两个民族——然而一经回国，所学的都向爪哇国去了。大约也是遇着了母狗，或者加入一群狗打架，或者争食物，所以就把已经觉悟的使命丢掉了。</p>
<p>中国狗和中国人同生在一个地带，一个社会以内，因为受一样环境的支配，和西洋的狗和人比起来，自必有人狗一致的中国派的趋向。和狗有同样的趋向，并不是可羞的事。所不得了者，这趋向偏偏是无责任心。</p>
<p>我以为中国人的无责任心，真要算达于极点了。单独的行动，百人中有九十九个是卑鄙的。为什么呢?卑鄙可以满足他自身肉体的快乐——他只对这个负责任——至于卑鄙而发生的许多恶影响，反正他以为在别人身上，他是对于自己以外的不负责任的，所以不顾了。团体的行动，百人中有九十九个是过度的。斗狠起来过度，求的目的便在度之外，手段更是过度的。这可就中国历年的政治斗争证明。为什么要这样呢?</p>
<p>他以为虽过度了，于他自己无害；成功了他可抢得很多的一份，失败了人人分一份，他所分的一份也不比别人多，所以不择手段。一人得，或一团体得，而国家失的事，屡屡得见。现在“鱼行”当道固不必说了，就是前几年也有若干溢出轨道的事；若国会的解散，民国六年临时参议院的召集等等，都是以一团体的利害做前提，而把国家的根本组织打散。我很觉得中国人没有民族的责任心——这就是不怕亡国灭种。我又觉得中国人没有事业的责任心——所以成就的事业极少。没有私立的学校，公立的学校也多半等于官署；没有有力的工厂；没有不磨的言论机关。一时要做事业，不过预备他交游攘臂的媒介物：一旦求得善价，还是沽出去罢!</p>
<p>中国人所以到了这个地步，不能不说是受历史的支配。专制之下，自然无责任可负；久而久之，自然成遗传性。中国狗所以如此，也是遗传性。中国狗满街走是没有“生活”的。西洋狗是猎物种，当年的日耳曼人就极爱狗，常教狗做事，不专教它跑街，所以责任心不曾忘了。中国人在专制之下，所以才是散沙。西洋人在当年的贵族时代，中流阶级也还有组织，有组织便有生活，有生活便有责任心。中国人没有责任心，也便没有生活。不负责任地活着，自然没有活着的生趣。</p>
<p>我总觉得中国人的民族是灰色的，前途希望很难说。自五四运动以后，我才觉得改造的基本的萌芽露出了。若说这五四运动单是爱国运动，我便不赞一词了。我对这五四运动所重视的，是它的出发点是直接行动，是唤起公众责任心的运动。我是绝不主张国家主义的人，然而人类生活的发挥，全以责任心为基石。所以，五四运动自是今后偌大的一个平民运动的最先一步。</p>
<p>不过这一线光明也很容易烟消云散。若不把“社会性”用心地培植一番——就是使责任心成习惯——恐怕仍是个不熟而落的果子。</p>
<p>前清末年的改造运动，无论它革命也罢，立宪也罢，总有艰苦不拔、蓬蓬勃勃的气象，总算对于民族责任心有透彻的觉悟。民国元、二年间更是朝气曈曈。然而一经袁世凯的狂风暴雨，全国人的兽性大发。官僚武人在那里趁火打劫，青年人便预备着趁火打劫。所以我以为中国人觉悟还算容易，最难的是把这觉悟维持着，发挥去。</p>
<p>我们自己以为是有新思想的人，别人也说我们有新思想。我以为惭愧得很。我们生理上、心理上，驮着两三千年的历史——为遗传性的缘故，又在“中国化”的灰色水里，浸了二十多年，现在住着的，又是神堂，天天必得和庙祝周旋揖让。所以就境界上和习惯上讲，我们只可说是知道新思想可贵的人，并不是彻底地把新思想代替了旧思想的人。我不曾见过一个能把新思想完全代替了旧思想的人。我们应常常自省，我们若生在皇帝时代，能不能有一定不做官的决心?学生在科举时代，能不能一定不提考篮?能不能有绝俗遗世的魄力?不要和好人比，单和阮嗣宗、李卓吾、袁子才之流比，我们有没有他们那样敢于自用的魄力?我们连袁子才的不成才的魄力亦没有，那么，后人看我们，和我们看前人一样，我们现在颜自负的觉悟，不和当年提过考篮而不中秀才的人发生一种“生不逢时”的感情一样么?有什么了不起呢?这感情能造出什么生活来呢?</p>
<p>所以新思想不是即刻能贯彻了的，我们须得改造习惯。</p>
]]></content>
      <categories>
        <category>议论</category>
      </categories>
      <tags>
        <tag>讽刺</tag>
      </tags>
  </entry>
  <entry>
    <title>小杂感(鲁迅)</title>
    <url>/title/e0f1fbc4/</url>
    <content><![CDATA[<p><img src="https://s2.ax1x.com/2019/11/02/KLRHJO.jpg" alt="zagan"></p>
<a id="more"></a>

<p>蜜蜂的刺，一用即丧失了它自己的生命；犬儒的刺，一用则苟延了他自己的生命。他们就是如此不同。<br>约翰穆勒说：专制使人们变成冷嘲，而他竟不知道共和使人们变成沉默。<br>要上战场，莫如做军医；要革命，莫如走后方；要杀人，莫如做刽子手。既英雄，又稳当。<br>与名流学者谈，对于他之所讲，当装作偶有不懂之处。太不懂被看轻，太懂了被厌恶。偶有不懂之处，彼此最为合宜。<br>世间大抵只知道指挥刀所以指挥武士，而不想到也可以指挥文人。<br>又是演讲录，又是演讲录，但可惜都没有讲明他何以和先前大两样了；也没有讲明他演讲时，自己是否真相信自己的话。<br>阔的聪明人种种譬如昨日死，不阔的傻子种种实在昨日死，曾经阔气的要复古，正在阔气的要保持现状，未曾阔气的要革新。大抵如是，大抵! 他们之所谓复古，是回到他们所记得的若干年前，并非虞夏商周。<br>女人的天性中有母性，有女儿性；无妻性。妻性是逼成的，只是母性和女儿性的混合。<br>防被欺，自称盗贼的无须防，得其反倒是好人；自称正人君子的必须防，得其反则是盗贼。<br>楼下一个男人病得要死，那间壁的一家唱着留声机；对面是弄孩子。楼上有两人狂笑；还有打牌声，河中的船上有女人哭着她死去的母亲。人类的悲欢并不相通，我只觉得他们吵闹。<br>每一个破衣服人走过，叭儿狗就叫起来，其实并非都是狗主人的意旨或使嗾。叭儿狗往往比它的主人更严厉。恐怕有一天总要不准穿破布衫，否则便是共产党，革命，反革命，不革命。<br>革命的被杀于反革命的。反革命的被杀于革命的。不革命的或当作革命的而被杀于反革命的，或当作反革命的而被杀于革命的，或并不当作什么而被杀于革命的或反革命的，革命，革革命，革革革命，革革……。<br>人感到寂寞时，会创作；一感到干净时，即无创作，他已经一无所爱。创作总根于爱。杨朱无书，创作虽说抒写自己的心，但总愿意有人看。创作是有社会性的，但有时只要有一个人看便满足：好友，爱人。<br>人往往憎和尚，憎尼姑，憎回教徒，憎耶教徒，而不憎道士。懂得此理者，懂得中国大半。<br>要自杀的人，也会怕大海的汪洋，怕夏天死尸的易烂。但遇到澄静的清池，凉爽的秋夜，他往往也自杀了。<br>凡为当局所“诛”者皆有“罪”。刘邦除秦苛暴，“与父老约，法三章耳。”而后来仍有族诛，仍禁挟书，还是秦法。法三章者，话一句耳。<br>一见短袖子，立刻想到白臂膊，立刻想到全裸体，立刻想到生殖器，立刻想到性交，立刻想到杂交，立刻想到私生子。中国人的想像惟在这一层能够如此跃进。<br>九月二十四日。  </p>
]]></content>
      <categories>
        <category>议论</category>
      </categories>
      <tags>
        <tag>讽刺</tag>
      </tags>
  </entry>
  <entry>
    <title>变色龙(契诃夫)</title>
    <url>/title/64a8f1c3/</url>
    <content><![CDATA[<p><img src="https://s2.ax1x.com/2019/11/02/KL2G34.md.jpg" alt="chameleon"></p>
<a id="more"></a>

<p>　　警官奥楚蔑洛夫穿着新的军大衣，手里拿着个小包，穿过市集的广场。他身后跟着个巡警，生着棕红色头发，端着一个罗筛，上面盛着没收来的醋栗，装得满满的。四下里一片寂静……广场上连人影也没有。小铺和酒店敞开大门，无精打采地面对着上帝创造的这个世界，像是一张张饥饿的嘴巴。店门附近连一个乞丐都没有。</p>
<p>　　“你竟敢咬人，该死的东西！”奥楚蔑洛夫忽然听见说话声。“伙计们，别放走它！如今咬人可不行！抓住它！哎哟，……哎哟！”狗的尖叫声响起来。奥楚蔑洛夫往那边一看，瞧见商人彼楚京的木柴场里窜出来一条狗，用三条腿跑路，不住地回头看。在它身后，有一个人追出来，穿着浆硬的花布衬衫和敞开怀的坎肩。他紧追那条狗，身子往前一探，扑倒在地，抓住那条狗的后腿。紧跟着又传来狗叫声和人喊声：“别放走它！”带着睡意的脸纷纷从小铺里探出来，不久木柴场门口就聚上一群人，象是从地底下钻出来的一样。</p>
<p>　　“仿佛出乱子了，长官！”巡警说。</p>
<p>　　奥楚蔑洛夫把身子微微往左边一转，迈步往人群那边走过去。在木柴场门口，他看见上述那个敞开坎肩的人站在那儿，举起右手，伸出一根血淋淋的手指头给那群人看。他那张半醉的脸上露出这样的神情：“我要揭你的皮，坏蛋！”而且那根手指头本身就象是一面胜利的旗帜。奥楚蔑洛夫认出这个人就是首饰匠赫留金。闹出这场乱子的祸首是一条白毛小猎狗，尖尖的脸，背上有一块黄斑，这时候坐在人群中央的地上，前腿劈开，浑身发抖。它那含泪的眼睛里流露出苦恼和恐惧。</p>
<p>　　“这儿出了什么事？”奥楚蔑洛夫挤到人群中去，问道。“你在这儿干什么？你干吗竖起手指头？……是谁在嚷？”</p>
<p>　　“我本来走我的路，长官，没招谁没惹谁”赫留金凑着空拳头咳嗽，开口说。“我正跟密特里•密特里奇谈木柴的事，忽然间，这个坏东西无缘无故把我的手指头咬一口。请您原谅我，我是个干活的人。我的活儿是细致的。这得赔我一笔钱才成，因为我也许一个星期都不能动这根手指头了。法律上，长官，也没有这么一条，说是人受了畜生的害就该忍着。要是人人都遭狗咬，那还不如别在这个世界上活着的好……”</p>
<p>　　“嗯！不错”，奥楚蔑洛夫严厉地说，咳嗽着，动了动眉毛。“不错，这是谁家的狗？这种事我不能放过不管。我要拿点颜色出来叫那些放出狗来闯祸的人看看！现在也该管管不愿意遵守法令的老爷们了！等到罚了款，他，这个混蛋，才会明白把狗和别的畜生放出来有什么下场！我要给他点厉害瞧瞧。“叶尔德林”，警官对巡警说，“你去调查清楚这是谁家的狗，打个报告上来！这条狗得打死才成。不许拖延！这多半是条疯狗。我问你们：这是谁家的狗？”</p>
<p>　　“这条狗象是日加洛夫将军家的！”人群里有个人说。</p>
<p>　　“日加洛夫将军家的？嗯！……你，叶尔德林，把我身上的大衣脱下来。天好热！大概快要下雨了。只是有一件事我不懂：它怎么会咬你的？”奥楚蔑洛夫对赫留金说。“难道它够得到你的手指头？它身子矮小，可是你，要知道，长得这么高大！你这个手指头多半是让小钉子扎破了，后来却异想天开，要人家赔你钱了。你这种人啊……，谁都知道是个什么路数！我可知道你们这些魔鬼！”</p>
<p>　　“他，长官，把他的雪茄烟戳到它脸上去，拿它开心。它呢，不肯做傻瓜，就咬了他一口。他是个无聊的人，长官！”</p>
<p>　　“你胡说，独眼龙！你眼睛看不见，为什么胡说？长官是明白人，看得出来谁胡说，谁像当着上帝的面一样凭良心说话。我要胡说，就让调解法官审判我好了。他的法律上写得明白。如今大家都平等了。不瞒您说，我弟弟就在当宪兵。”</p>
<p>　　“少说废话！”</p>
<p>　　“不，这条狗不是将军家的，”巡警深思地说。“将军家里没有这样的狗，他家里的狗大半是大猎狗。”</p>
<p>　　“你拿得准吗？”</p>
<p>　　“拿得准，长官！”</p>
<p>　　“我自己也知道，将军家里的狗都名贵，都是良种。这条狗呢，鬼才知道是什么东西！毛色不好，模样也不中看，完全是下贱呸子。他老人家会养这样的狗？！你的脑筋上哪儿去了？要是这样的狗在彼得堡或者莫斯科让人碰上，你们知道会怎样？那儿才不管什么法律不法律，一转眼的工夫就叫它断了气！你，赫留金，受了苦，这件事不能放过不管。得教训他们一下！是时候了……”</p>
<p>　　“不过也可能是将军家的狗，”巡警把他的想法说出来。“它脸上又没写着。”“前几天我在他家院子里就见到过这样一条狗。”</p>
<p>　　“没错儿，是将军家的！”人群里有人说。</p>
<p>　　“嗯！叶尔德林，给我穿上大衣吧。好像起风了，怪冷的，你带着这条狗到将军家里去一趟，在那儿问一下。你就说这条狗是我找着，派你送去的。你说以后不要把它放到街上来。也许是名贵的狗，要是每个猪猡都拿雪茄烟戳到它脸上去，要不了多久就能把它作践死。狗是娇嫩的动物嘛。你，蠢货，把手放下来！用不着把你那根蠢手指头摆出来！这都怪你自己不好！”</p>
<p>　　“将军家的厨师来了，我们来问问他吧。喂，普洛诃尔！你过来，亲爱的！你看看这条狗。是你们家的吗？”</p>
<p>　　“瞎猜！我们那儿从来也没有过这样的狗！”</p>
<p>　　“那就用不着费很多工夫去问了，”奥楚蔑洛夫说。“这是条野狗！用不着多说了。既然他说是野狗，那就是野狗，弄死它算了。”</p>
<p>　　“这条狗不是我们家的，”普洛诃尔继续说。“可这是将军哥哥的狗，他前几天到我们这儿来了。我们的将军不喜欢这种狗。他老人家的哥哥喜欢。”</p>
<p>　　“莫非他老人家的哥哥来了？乌拉吉米尔•伊凡尼奇来了？”奥楚蔑洛夫问，他整个脸上洋溢着动情的笑容。“可了不得，主啊！我还不知道呢！他要来住一阵吧？”</p>
<p>　　“住一阵……”</p>
<p>　　“可了不得，主啊！他是惦记弟弟了。可我还不知道呢！那么这是他老人家的狗？很高兴，你把它带去吧。这条小狗怪不错的，挺伶俐，它把这家伙的手指头咬一口！哈哈哈哈！咦，你干吗发抖？呜呜，呜呜。它生气了，小坏包，好一条小狗崽子……”</p>
<p>　　普洛诃尔把狗叫过来，带着它离开了木柴场。那群人就对着赫留金哈哈大笑。</p>
<p>　　“我早晚要收拾你！”奥楚蔑洛夫对他威胁说，然后把身上的大衣裹一裹紧，继续在市集的广场上巡视。</p>
]]></content>
      <categories>
        <category>议论</category>
      </categories>
      <tags>
        <tag>讽刺</tag>
      </tags>
  </entry>
  <entry>
    <title>理解矩阵(孟岩)</title>
    <url>/title/ee25c1c5/</url>
    <content><![CDATA[<p><img src="https://s2.ax1x.com/2019/11/03/KXkZ5R.md.jpg" alt="matrix"></p>
<a id="more"></a>

<p><a href="https://blog.csdn.net/myan/article/details/647511," target="_blank" rel="noopener" title="myan">原文地址</a> </p>
<p>前不久chensh出于不可告人的目的，要充当老师，教别人线性代数。于是我被揪住就线性代数中一些务虚性的问题与他讨论了几次。很明显，chensh觉得，要让自己在讲线性代数的时候不被那位强势的学生认为是神经病，还是比较难的事情。</p>
<p>可怜的chensh，谁让你趟这个地雷阵？！色令智昏啊！</p>
<p>线性代数课程，无论你从行列式入手还是直接从矩阵入手，从一开始就充斥着莫名其妙。比如说，在全国一般工科院系教学中应用最广泛的同济线性代数教材（现在到了第四版），一上来就介绍逆序数这个“前无古人，后无来者”的古怪概念，然后用逆序数给出行列式的一个极不直观的定义，接着是一些简直犯傻的行列式性质和习题——把这行乘一个系数加到另一行上，再把那一列减过来，折腾得那叫一个热闹，可就是压根看不出这个东西有嘛用。大多数像我一样资质平庸的学生到这里就有点犯晕：连这是个什么东西都模模糊糊的，就开始钻火圈表演了，这未免太“无厘头”了吧！于是开始有人逃课，更多的人开始抄作业。这下就中招了，因为其后的发展可以用一句峰回路转来形容，紧跟着这个无厘头的行列式的，是一个同样无厘头但是伟大的无以复加的家伙的出场——矩阵来了！多年之后，我才明白，当老师犯傻似地用中括号把一堆傻了吧叽的数括起来，并且不紧不慢地说：“这个东西叫做矩阵”的时候，我的数学生涯掀开了何等悲壮辛酸、惨绝人寰的一幕！自那以后，在几乎所有跟“学问”二字稍微沾点边的东西里，矩阵这个家伙从不缺席。对于我这个没能一次搞定线性代数的笨蛋来说，矩阵老大的不请自来每每搞得我灰头土脸，头破血流。长期以来，我在阅读中一见矩阵，就如同阿Q见到了假洋鬼子，揉揉额角就绕道走。</p>
<p>事实上，我并不是特例。一般工科学生初学线性代数，通常都会感到困难。这种情形在国内外皆然。瑞典数学家Lars Garding在其名著Encounter with Mathematics中说：“如果不熟悉线性代数的概念，要去学习自然科学，现在看来就和文盲差不多。”然而“按照现行的国际标准，线性代数是通过公理化来表述的，它是第二代数学模型，…，这就带来了教学上的困难。”事实上，当我们开始学习线性代数的时候，不知不觉就进入了“第二代数学模型”的范畴当中，这意味着数学的表述方式和抽象性有了一次全面的进化，对于从小一直在“第一代数学模型”，即以实用为导向的、具体的数学模型中学习的我们来说，在没有并明确告知的情况下进行如此剧烈的paradigm shift，不感到困难才是奇怪的。</p>
<p>大部分工科学生，往往是在学习了一些后继课程，如数值分析、数学规划、矩阵论之后，才逐渐能够理解和熟练运用线性代数。即便如此，不少人即使能够很熟练地以线性代数为工具进行科研和应用工作，但对于很多这门课程的初学者提出的、看上去是很基础的问题却并不清楚。比如说：</p>
<ul>
<li><p>矩阵究竟是什么东西？向量可以被认为是具有n个相互独立的性质（维度）的对象的表示，矩阵又是什么呢？我们如果认为矩阵是一组列（行）向量组成的新的复合向量的展开式，那么为什么这种展开式具有如此广泛的应用？特别是，为什么偏偏二维的展开式如此有用？如果矩阵中每一个元素又是一个向量，那么我们再展开一次，变成三维的立方阵，是不是更有用？</p>
</li>
<li><p>矩阵的乘法规则究竟为什么这样规定？为什么这样一种怪异的乘法规则却能够在实践中发挥如此巨大的功效？很多看上去似乎是完全不相关的问题，最后竟然都归结到矩阵的乘法，这难道不是很奇妙的事情？难道在矩阵乘法那看上去莫名其妙的规则下面，包含着世界的某些本质规律？如果是的话，这些本质规律是什么？</p>
</li>
<li><p>行列式究竟是一个什么东西？为什么会有如此怪异的计算规则？行列式与其对应方阵本质上是什么关系？为什么只有方阵才有对应的行列式，而一般矩阵就没有（不要觉得这个问题很蠢，如果必要，针对$m*n$矩阵定义行列式不是做不到的，之所以不做，是因为没有这个必要，但是为什么没有这个必要）？而且，行列式的计算规则，看上去跟矩阵的任何计算规则都没有直观的联系，为什么又在很多方面决定了矩阵的性质？难道这一切仅是巧合？</p>
</li>
<li><p>矩阵为什么可以分块计算？分块计算这件事情看上去是那么随意，为什么竟是可行的？</p>
</li>
<li><p>对于矩阵转置运算$A^T$，有$(AB)^T = B^TA^T$，对于矩阵求逆运算$A^{-1}$，有$(AB)^{-1} = B^{-1}A^{-1}$。两个看上去完全没有什么关系的运算，为什么有着类似的性质？这仅仅是巧合吗？</p>
</li>
<li><p>为什么说$P^{-1}AP$得到的矩阵与A矩阵“相似”？这里的“相似”是什么意思？</p>
</li>
<li><p>特征值和特征向量的本质是什么？它们定义就让人很惊讶，因为Ax =λx，一个诺大的矩阵的效应，竟然不过相当于一个小小的数λ，确实有点奇妙。但何至于用“特征”甚至“本征”来界定？它们刻划的究竟是什么？</p>
</li>
</ul>
<p>这样的一类问题，经常让使用线性代数已经很多年的人都感到为难。就好像大人面对小孩子的刨根问底，最后总会迫不得已地说“就这样吧，到此为止”一样，面对这样的问题，很多老手们最后也只能用：“就是这么规定的，你接受并且记住就好”来搪塞。然而，这样的问题如果不能获得回答，线性代数对于我们来说就是一个粗暴的、不讲道理的、莫名其妙的规则集合，我们会感到，自己并不是在学习一门学问，而是被不由分说地“抛到”一个强制的世界中，只是在考试的皮鞭挥舞之下被迫赶路，全然无法领略其中的美妙、和谐与统一。直到多年以后，我们已经发觉这门学问如此的有用，却仍然会非常迷惑：怎么这么凑巧？</p>
<p>我认为，这是我们的线性代数教学中直觉性丧失的后果。上述这些涉及到“如何能”、“怎么会”的问题，仅仅通过纯粹的数学证明来回答，是不能令提问者满意的。比如，如果你通过一般的证明方法论证了矩阵分块运算确实可行，那么这并不能够让提问者的疑惑得到解决。他们真正的困惑是：矩阵分块运算为什么竟然是可行的？究竟只是凑巧，还是说这是由矩阵这种对象的某种本质所必然决定的？如果是后者，那么矩阵的这些本质是什么？只要对上述那些问题稍加考虑，我们就会发现，所有这些问题都不是单纯依靠数学证明所能够解决的。像我们的教科书那样，凡事用数学证明，最后培养出来的学生，只能熟练地使用工具，却欠缺真正意义上的理解。</p>
<p>自从1930年代法国布尔巴基学派兴起以来，数学的公理化、系统性描述已经获得巨大的成功，这使得我们接受的数学教育在严谨性上大大提高。然而数学公理化的一个备受争议的副作用，就是一般数学教育中直觉性的丧失。数学家们似乎认为直觉性与抽象性是矛盾的，因此毫不犹豫地牺牲掉前者。然而包括我本人在内的很多人都对此表示怀疑，我们不认为直觉性与抽象性一定相互矛盾，特别是在数学教育中和数学教材中，帮助学生建立直觉，有助于它们理解那些抽象的概念，进而理解数学的本质。反之，如果一味注重形式上的严格性，学生就好像被迫进行钻火圈表演的小白鼠一样，变成枯燥的规则的奴隶。</p>
<p>对于线性代数的类似上述所提到的一些直觉性的问题，两年多来我断断续续地反复思考了四、五次，为此阅读了好几本国内外线性代数、数值分析、代数和数学通论性书籍，其中像前苏联的名著《数学：它的内容、方法和意义》、龚昇教授的《线性代数五讲》、前面提到的Encounter with Mathematics（《数学概观》）以及Thomas A. Garrity的《数学拾遗》都给我很大的启发。不过即使如此，我对这个主题的认识也经历了好几次自我否定。比如以前思考的一些结论曾经写在自己的blog里，但是现在看来，这些结论基本上都是错误的。因此打算把自己现在的有关理解比较完整地记录下来，一方面是因为我觉得现在的理解比较成熟了，可以拿出来与别人探讨，向别人请教。另一方面，如果以后再有进一步的认识，把现在的理解给推翻了，那现在写的这个snapshot也是很有意义的。</p>
<p>因为打算写得比较多，所以会分几次慢慢写。也不知道是不是有时间慢慢写完整，会不会中断，写着看吧。</p>
<hr>
<p>今天先谈谈对线形空间和矩阵的几个核心概念的理解。这些东西大部分是凭着自己的理解写出来的，基本上不抄书，可能有错误的地方，希望能够被指出。但我希望做到直觉，也就是说能把数学背后说的实质问题说出来。</p>
<p>首先说说空间(space)，这个概念是现代数学的命根子之一，从拓扑空间开始，一步步往上加定义，可以形成很多空间。线形空间其实还是比较初级的，如果在里面定义了范数，就成了赋范线性空间。赋范线性空间满足完备性，就成了巴那赫空间；赋范线性空间中定义角度，就有了内积空间，内积空间再满足完备性，就得到希尔伯特空间。</p>
<p>总之，空间有很多种。你要是去看某种空间的数学定义，大致都是“存在一个集合，在这个集合上定义某某概念，然后满足某些性质”，就可以被称为空间。这未免有点奇怪，为什么要用“空间”来称呼一些这样的集合呢？大家将会看到，其实这是很有道理的。</p>
<p>我们一般人最熟悉的空间，毫无疑问就是我们生活在其中的（按照牛顿的绝对时空观）的三维空间，从数学上说，这是一个三维的欧几里德空间，我们先不管那么多，先看看我们熟悉的这样一个空间有些什么最基本的特点。仔细想想我们就会知道，这个三维的空间：</p>
<ol>
<li>由很多（实际上是无穷多个）位置点组成；  </li>
<li>这些点之间存在相对的关系；  </li>
<li>可以在空间中定义长度、角度；  </li>
<li>这个空间可以容纳运动，这里我们所说的运动是从一个点到另一个点的移动（变换），而不是微积分意义上的“连续”性的运动，</li>
</ol>
<p>上面的这些性质中，最最关键的是第4条。第1、2条只能说是空间的基础，不算是空间特有的性质，凡是讨论数学问题，都得有一个集合，大多数还得在这个集合上定义一些结构（关系），并不是说有了这些就算是空间。而第3条太特殊，其他的空间不需要具备，更不是关键的性质。只有第4条是空间的本质，也就是说，容纳运动是空间的本质特征。</p>
<p>认识到了这些，我们就可以把我们关于三维空间的认识扩展到其他的空间。事实上，不管是什么空间，都必须容纳和支持在其中发生的符合规则的运动（变换）。你会发现，在某种空间中往往会存在一种相对应的变换，比如拓扑空间中有拓扑变换，线性空间中有线性变换，仿射空间中有仿射变换，其实这些变换都只不过是对应空间中允许的运动形式而已。</p>
<p>因此只要知道，“空间”是容纳运动的一个对象集合，而变换则规定了对应空间的运动。</p>
<p>下面我们来看看线性空间。线性空间的定义任何一本书上都有，但是既然我们承认线性空间是个空间，那么有两个最基本的问题必须首先得到解决，那就是：</p>
<ol>
<li><p>空间是一个对象集合，线性空间也是空间，所以也是一个对象集合。那么线性空间是什么样的对象的集合？或者说，线性空间中的对象有什么共同点吗？</p>
</li>
<li><p>线性空间中的运动如何表述的？也就是，线性变换是如何表示的？</p>
</li>
</ol>
<p>我们先来回答第一个问题，回答这个问题的时候其实是不用拐弯抹角的，可以直截了当的给出答案。线性空间中的任何一个对象，通过选取基和坐标的办法，都可以表达为向量的形式。通常的向量空间我就不说了，举两个不那么平凡的例子：</p>
<p>L1. 最高次项不大于n次的多项式的全体构成一个线性空间，也就是说，这个线性空间中的每一个对象是一个多项式。如果我们以$x_0, x_1, …, x_n$为基，那么任何一个这样的多项式都可以表达为一组n+1维向量，其中的每一个分量ai其实就是多项式中x(i-1)项的系数。值得说明的是，基的选取有多种办法，只要所选取的那一组基线性无关就可以。这要用到后面提到的概念了，所以这里先不说，提一下而已。</p>
<p>L2. 闭区间[a, b]上的n阶连续可微函数的全体，构成一个线性空间。也就是说，这个线性空间的每一个对象是一个连续函数。对于其中任何一个连续函数，根据魏尔斯特拉斯定理，一定可以找到最高次项不大于n的多项式函数，使之与该连续函数的差为0，也就是说，完全相等。这样就把问题归结为L1了。后面就不用再重复了。</p>
<p>所以说，向量是很厉害的，只要你找到合适的基，用向量可以表示线性空间里任何一个对象。这里头大有文章，因为向量表面上只是一列数，但是其实由于它的有序性，所以除了这些数本身携带的信息之外，还可以在每个数的对应位置上携带信息。为什么在程序设计中数组最简单，却又威力无穷呢？根本原因就在于此。这是另一个问题了，这里就不说了。</p>
<p>下面来回答第二个问题，这个问题的回答会涉及到线性代数的一个最根本的问题。</p>
<p>线性空间中的运动，被称为线性变换。也就是说，你从线性空间中的一个点运动到任意的另外一个点，都可以通过一个线性变化来完成。那么，线性变换如何表示呢？很有意思，在线性空间中，当你选定一组基之后，不仅可以用一个向量来描述空间中的任何一个对象，而且可以用矩阵来描述该空间中的任何一个运动（变换）。而使某个对象发生对应运动的方法，就是用代表那个运动的矩阵，乘以代表那个对象的向量。</p>
<p>简而言之，在线性空间中选定基之后，向量刻画对象，矩阵刻画对象的运动，用矩阵与向量的乘法施加运动。</p>
<p>是的，矩阵的本质是运动的描述。如果以后有人问你矩阵是什么，那么你就可以响亮地告诉他，矩阵的本质是运动的描述。（chensh，说你呢！）</p>
<p>可是多么有意思啊，向量本身不是也可以看成是n x 1矩阵吗？这实在是很奇妙，一个空间中的对象和运动竟然可以用相类同的方式表示。能说这是巧合吗？如果是巧合的话，那可真是幸运的巧合！可以说，线性代数中大多数奇妙的性质，均与这个巧合有直接的关系。</p>
<p>接着理解矩阵。</p>
<hr>
<p>上一篇里说“矩阵是运动的描述”，到现在为止，好像大家都还没什么意见。但是我相信早晚会有数学系出身的网友来拍板转。因为运动这个概念，在数学和物理里是跟微积分联系在一起的。我们学习微积分的时候，总会有人照本宣科地告诉你，初等数学是研究常量的数学，是研究静态的数学，高等数学是变量的数学，是研究运动的数学。大家口口相传，差不多人人都知道这句话。但是真知道这句话说的是什么意思的人，好像也不多。简而言之，在我们人类的经验里，运动是一个连续过程，从A点到B点，就算走得最快的光，也是需要一个时间来逐点地经过AB之间的路径，这就带来了连续性的概念。而连续这个事情，如果不定义极限的概念，根本就解释不了。古希腊人的数学非常强，但就是缺乏极限观念，所以解释不了运动，被芝诺的那些著名悖论（飞箭不动、飞毛腿阿喀琉斯跑不过乌龟等四个悖论）搞得死去活来。因为这篇文章不是讲微积分的，所以我就不多说了。有兴趣的读者可以去看看齐民友教授写的《重温微积分》。我就是读了这本书开头的部分，才明白“高等数学是研究运动的数学”这句话的道理。</p>
<p>不过在我这个《理解矩阵》的文章里，“运动”的概念不是微积分中的连续性的运动，而是瞬间发生的变化。比如这个时刻在A点，经过一个“运动”，一下子就“跃迁”到了B点，其中不需要经过A点与B点之间的任何一个点。这样的“运动”，或者说“跃迁”，是违反我们日常的经验的。不过了解一点量子物理常识的人，就会立刻指出，量子（例如电子）在不同的能量级轨道上跳跃，就是瞬间发生的，具有这样一种跃迁行为。所以说，自然界中并不是没有这种运动现象，只不过宏观上我们观察不到。但是不管怎么说，“运动”这个词用在这里，还是容易产生歧义的，说得更确切些，应该是“跃迁”。因此这句话可以改成：</p>
<p>“矩阵是线性空间里跃迁的描述”。</p>
<p>可是这样说又太物理，也就是说太具体，而不够数学，也就是说不够抽象。因此我们最后换用一个正牌的数学术语——变换，来描述这个事情。这样一说，大家就应该明白了，所谓变换，其实就是空间里从一个点（元素/对象）到另一个点（元素/对象）的跃迁。比如说，拓扑变换，就是在拓扑空间里从一个点到另一个点的跃迁。再比如说，仿射变换，就是在仿射空间里从一个点到另一个点的跃迁。附带说一下，这个仿射空间跟向量空间是亲兄弟。做计算机图形学的朋友都知道，尽管描述一个三维对象只需要三维向量，但所有的计算机图形学变换矩阵都是4 x 4的。说其原因，很多书上都写着“为了使用中方便”，这在我看来简直就是企图蒙混过关。真正的原因，是因为在计算机图形学里应用的图形变换，实际上是在仿射空间而不是向量空间中进行的。想想看，在向量空间里相一个向量平行移动以后仍是相同的那个向量，而现实世界等长的两个平行线段当然不能被认为同一个东西，所以计算机图形学的生存空间实际上是仿射空间。而仿射变换的矩阵表示根本就是4 x 4的。又扯远了，有兴趣的读者可以去看《计算机图形学——几何工具算法详解》。</p>
<p>一旦我们理解了“变换”这个概念，矩阵的定义就变成：</p>
<p>“矩阵是线性空间里的变换的描述。”</p>
<p>到这里为止，我们终于得到了一个看上去比较数学的定义。不过还要多说几句。教材上一般是这么说的，在一个线性空间V里的一个线性变换T，当选定一组基之后，就可以表示为矩阵。因此我们还要说清楚到底什么是线性变换，什么是基，什么叫选定一组基。线性变换的定义是很简单的，设有一种变换T，使得对于线性空间V中间任何两个不相同的对象x和y，以及任意实数a和b，有：T(ax + by) = aT(x) + bT(y)，那么就称T为线性变换。</p>
<p>定义都是这么写的，但是光看定义还得不到直觉的理解。线性变换究竟是一种什么样的变换？我们刚才说了，变换是从空间的一个点跃迁到另一个点，而线性变换，就是从一个线性空间V的某一个点跃迁到另一个线性空间W的另一个点的运动。这句话里蕴含着一层意思，就是说一个点不仅可以变换到同一个线性空间中的另一个点，而且可以变换到另一个线性空间中的另一个点去。不管你怎么变，只要变换前后都是线性空间中的对象，这个变换就一定是线性变换，也就一定可以用一个非奇异矩阵来描述。而你用一个非奇异矩阵去描述的一个变换，一定是一个线性变换。有的人可能要问，这里为什么要强调非奇异矩阵？所谓非奇异，只对方阵有意义，那么非方阵的情况怎么样？这个说起来就会比较冗长了，最后要把线性变换作为一种映射，并且讨论其映射性质，以及线性变换的核与像等概念才能彻底讲清楚。我觉得这个不算是重点，如果确实有时间的话，以后写一点。以下我们只探讨最常用、最有用的一种变换，就是在同一个线性空间之内的线性变换。也就是说，下面所说的矩阵，不作说明的话，就是方阵，而且是非奇异方阵。学习一门学问，最重要的是把握主干内容，迅速建立对于这门学问的整体概念，不必一开始就考虑所有的细枝末节和特殊情况，自乱阵脚。</p>
<p>接着往下说，什么是基呢？这个问题在后面还要大讲一番，这里只要把基看成是线性空间里的坐标系就可以了。注意是坐标系，不是坐标值，这两者可是一个“对立矛盾统一体”。这样一来，“选定一组基”就是说在线性空间里选定一个坐标系。就这意思。</p>
<p>好，最后我们把矩阵的定义完善如下：</p>
<p>“矩阵是线性空间中的线性变换的一个描述。在一个线性空间中，只要我们选定一组基，那么对于任何一个线性变换，都能够用一个确定的矩阵来加以描述。”</p>
<p>理解这句话的关键，在于把“线性变换”与“线性变换的一个描述”区别开。一个是那个对象，一个是对那个对象的表述。就好像我们熟悉的面向对象编程中，一个对象可以有多个引用，每个引用可以叫不同的名字，但都是指的同一个对象。如果还不形象，那就干脆来个很俗的类比。</p>
<p>比如有一头猪，你打算给它拍照片，只要你给照相机选定了一个镜头位置，那么就可以给这头猪拍一张照片。这个照片可以看成是这头猪的一个描述，但只是一个片面的的描述，因为换一个镜头位置给这头猪拍照，能得到一张不同的照片，也是这头猪的另一个片面的描述。所有这样照出来的照片都是这同一头猪的描述，但是又都不是这头猪本身。</p>
<p>同样的，对于一个线性变换，只要你选定一组基，那么就可以找到一个矩阵来描述这个线性变换。换一组基，就得到一个不同的矩阵。所有这些矩阵都是这同一个线性变换的描述，但又都不是线性变换本身。</p>
<p>但是这样的话，问题就来了如果你给我两张猪的照片，我怎么知道这两张照片上的是同一头猪呢？同样的，你给我两个矩阵，我怎么知道这两个矩阵是描述的同一个线性变换呢？如果是同一个线性变换的不同的矩阵描述，那就是本家兄弟了，见面不认识，岂不成了笑话。</p>
<p>好在，我们可以找到同一个线性变换的矩阵兄弟们的一个性质，那就是：</p>
<p>若矩阵A与B是同一个线性变换的两个不同的描述（之所以会不同，是因为选定了不同的基，也就是选定了不同的坐标系），则一定能找到一个非奇异矩阵P，使得A、B之间满足这样的关系：</p>
<p>$$A = P^{-1}BP$$</p>
<p>线性代数稍微熟一点的读者一下就看出来，这就是相似矩阵的定义。没错，所谓相似矩阵，就是同一个线性变换的不同的描述矩阵。按照这个定义，同一头猪的不同角度的照片也可以成为相似照片。俗了一点，不过能让人明白。</p>
<p>而在上面式子里那个矩阵P，其实就是A矩阵所基于的基与B矩阵所基于的基这两组基之间的一个变换关系。关于这个结论，可以用一种非常直觉的方法来证明（而不是一般教科书上那种形式上的证明），如果有时间的话，我以后在blog里补充这个证明。</p>
<p>这个发现太重要了。原来一族相似矩阵都是同一个线性变换的描述啊！难怪这么重要！工科研究生课程中有矩阵论、矩阵分析等课程，其中讲了各种各样的相似变换，比如什么相似标准型，对角化之类的内容，都要求变换以后得到的那个矩阵与先前的那个矩阵式相似的，为什么这么要求？因为只有这样要求，才能保证变换前后的两个矩阵是描述同一个线性变换的。当然，同一个线性变换的不同矩阵描述，从实际运算性质来看并不是不分好环的。有些描述矩阵就比其他的矩阵性质好得多。这很容易理解，同一头猪的照片也有美丑之分嘛。所以矩阵的相似变换可以把一个比较丑的矩阵变成一个比较美的矩阵，而保证这两个矩阵都是描述了同一个线性变换。</p>
<p>这样一来，矩阵作为线性变换描述的一面，基本上说清楚了。但是，事情没有那么简单，或者说，线性代数还有比这更奇妙的性质，那就是，矩阵不仅可以作为线性变换的描述，而且可以作为一组基的描述。而作为变换的矩阵，不但可以把线性空间中的一个点给变换到另一个点去，而且也能够把线性空间中的一个坐标系（基）表换到另一个坐标系（基）去。而且，变换点与变换坐标系，具有异曲同工的效果。线性代数里最有趣的奥妙，就蕴含在其中。理解了这些内容，线性代数里很多定理和规则会变得更加清晰、直觉。</p>
<p>这个留在下一篇再写吧。</p>
<p>因为有别的事情要做，下一篇可能要过几天再写了。</p>
<p>这两篇文章发表于去年的4月。在第二部分结束的时候，我说： “矩阵不仅可以作为线性变换的描述，而且可以作为一组基的描述。而 作为变换的矩阵，不但可以把线性空间中的一个点给变换到另一个点去，而且也能够把线性空间中的一个坐标系（基）表换到另一个坐标系（基）去。而且，变换点 与变换坐标系，具有异曲同工的效果。线性代数里最有趣的奥妙，就蕴含在其中。理解了这些内容，线性代数里很多定理和规则会变得更加清晰、直觉。</p>
<p>这个留在下一篇再写吧。</p>
<p>因为有别的事情要做，下一篇可能要过几天再写了。 ”</p>
<hr>
<p>然而这一拖就是一年半。一年半以来，这两篇粗糙放肆的文章被到处转载，以至于在Google的搜索提示中，我的名字跟“矩阵”是一对关联词汇。这对于学生时代数学一直很差的我来说，实在是令人惶恐的事情。数学是何等辉煌精致的学问！代表着人类智慧的最高成就，是人与上帝对话的语言。而我实在连数学的门都还没进去，不要说谈什么理解，就是稍微难一些的题目我也很少能解开。我有什么资格去谈矩阵这样重要的一个数学概念呢？更何况，我的想法直观是直观，未见的是正确的啊，会不会误人子弟呢？因此，算了吧，到此为止吧！我这么想，是时不时收到的来信逐渐改变了我的想法。</p>
<p>一年半以来，我收到过不下一百封直接的来信，要求我把后面的部分写出来。这些来信大部分是国内的网友和学生，也有少数来自正在国外深造的朋友，大部分是鼓励，有的是诚挚的请求，也有少数严厉斥责我不守承诺。不管是何种态度，这都表明他们对我这一点点小小的思考成果的鼓励，特别是对于我这种思维的视角和尝试的鼓励。他们在信中让我知道，尽管我的数学水平不高，但是我这种从普通人（而不是数学家）视角出发，强调对数学概念和规则的直觉理解的思路，对于很多人是有益的。也许这条路子在数学中绝非正道，也不会走得很远，但是无论如何，在一定的阶段，对一部分人来说，较之目前数学教材普遍采用的思路，这种方式可能更容易理解一些。既然是可能对一部分人有帮助的事情，那么我就不应该心存太多杂念，应该不断思考和总结下去。</p>
<p>所以，下面就是你们来信要求我写出来的东西。</p>
<p>首先来总结一下前面两部分的一些主要结论：</p>
<ol>
<li>首先有空间，空间可以容纳对象运动的。一种空间对应一类对象。</li>
<li>有一种空间叫线性空间，线性空间是容纳向量对象运动的。</li>
<li>运动是瞬时的，因此也被称为变换。</li>
<li>矩阵是线性空间中运动（变换）的描述。</li>
<li>矩阵与向量相乘，就是实施运动（变换）的过程。</li>
<li>同一个变换，在不同的坐标系下表现为不同的矩阵，但是它们的本质是一样的，所以本征值相同。</li>
</ol>
<p>下面让我们把视力集中到一点以改变我们以往看待矩阵的方式。我们知道，线性空间里的基本对象是向量，而向量是这么表示的：</p>
<p>[a1, a2, a3, …, an]</p>
<p>矩阵呢？矩阵是这么表示的：</p>
<p>a11, a12, a13, …, a1n<br>a21, a22, a23, …, a2n<br>              …<br>an1, an2, an3, …, ann  </p>
<p>不用太聪明，我们就能看出来，矩阵是一组向量组成的。特别的，n维线性空间里的方阵是由n个n维向量组成的。我们在这里只讨论这个n阶的、非奇异的方阵，因为理解它就是理解矩阵的关键，它才是一般情况，而其他矩阵都是意外，都是不得不对付的讨厌状况，大可以放在一边。这里多一句嘴，学习东西要抓住主流，不要纠缠于旁支末节。很可惜我们的教材课本大多数都是把主线埋没在细节中的，搞得大家还没明白怎么回事就先被灌晕了。比如数学分析，明明最要紧的观念是说，一个对象可以表达为无穷多个合理选择的对象的线性和，这个概念是贯穿始终的，也是数学分析的精华。但是课本里自始至终不讲这句话，反正就是让你做吉米多维奇，掌握一大堆解偏题的技巧，记住各种特殊情况，两类间断点，怪异的可微和可积条件（谁还记得柯西条件、迪里赫莱条件…？），最后考试一过，一切忘光光。要我说，还不如反复强调这一个事情，把它深深刻在脑子里，别的东西忘了就忘了，真碰到问题了，再查数学手册嘛，何必因小失大呢？</p>
<p>言归正传。如果一组向量是彼此线性无关的话，那么它们就可以成为度量这个线性空间的一组基，从而事实上成为一个坐标系体系，其中每一个向量都躺在一根坐标轴上，并且成为那根坐标轴上的基本度量单位（长度1）。</p>
<p>现在到了关键的一步。看上去矩阵就是由一组向量组成的，而且如果矩阵非奇异的话（我说了，只考虑这种情况），那么组成这个矩阵的那一组向量也就是线性无关的了，也就可以成为度量线性空间的一个坐标系。结论：矩阵描述了一个坐标系。</p>
<p>“慢着！”，你嚷嚷起来了，“你这个骗子！你不是说过，矩阵就是运动吗？怎么这会矩阵又是坐标系了？”</p>
<p>嗯，所以我说到了关键的一步。我并没有骗人，之所以矩阵又是运动，又是坐标系，那是因为——</p>
<p>“运动等价于坐标系变换”。</p>
<p>对不起，这话其实不准确，我只是想让你印象深刻。准确的说法是：</p>
<p>“对象的变换等价于坐标系的变换”。</p>
<p>或者：</p>
<p>“固定坐标系下一个对象的变换等价于固定对象所处的坐标系变换。”</p>
<p>说白了就是：</p>
<p><strong>运动是相对的。</strong></p>
<p>让我们想想，达成同一个变换的结果，比如把点(1, 1)变到点(2, 3)去，你可以有两种做法。第一，坐标系不动，点动，把(1, 1)点挪到(2, 3)去。第二，点不动，变坐标系，让x轴的度量（单位向量）变成原来的1/2，让y轴的度量（单位向量）变成原先的1/3，这样点还是那个点，可是点的坐标就变成(2, 3)了。方式不同，结果一样。</p>
<p>从第一个方式来看，那就是我在《理解矩阵》1/2中说的，把矩阵看成是运动描述，矩阵与向量相乘就是使向量（点）运动的过程。在这个方式下，</p>
<p>Ma = b</p>
<p>的意思是：</p>
<p>“向量a经过矩阵M所描述的变换，变成了向量b。”</p>
<p>而从第二个方式来看，矩阵M描述了一个坐标系，姑且也称之为M。那么：</p>
<p>Ma = b</p>
<p>的意思是：</p>
<p>“有一个向量，它在坐标系M的度量下得到的度量结果向量为a，那么它在坐标系I的度量下，这个向量的度量结果是b。”</p>
<p>这里的I是指单位矩阵，就是主对角线是1，其他为零的矩阵。</p>
<p>而这两个方式本质上是等价的。</p>
<p>我希望你务必理解这一点，因为这是本篇的关键。</p>
<p>正因为是关键，所以我得再解释一下。</p>
<p>在M为坐标系的意义下，如果把M放在一个向量a的前面，形成Ma的样式，我们可以认为这是对向量a的一个环境声明。它相当于是说：</p>
<p>“注意了！这里有一个向量，它在坐标系M中度量，得到的度量结果可以表达为a。可是它在别的坐标系里度量的话，就会得到不同的结果。为了明确，我把M放在前面，让你明白，这是该向量在坐标系M中度量的结果。”</p>
<p>那么我们再看孤零零的向量b：</p>
<p>b</p>
<p>多看几遍，你没看出来吗？它其实不是b，它是：</p>
<p>Ib</p>
<p>也就是说：“在单位坐标系，也就是我们通常说的直角坐标系I中，有一个向量，度量的结果是b。”</p>
<p>而Ma = Ib的意思就是说：</p>
<p>“在M坐标系里量出来的向量a，跟在I坐标系里量出来的向量b，其实根本就是一个向量啊！”</p>
<p>这哪里是什么乘法计算，根本就是身份识别嘛。</p>
<p>从这个意义上我们重新理解一下向量。向量这个东西客观存在，但是要把它表示出来，就要把它放在一个坐标系中去度量它，然后把度量的结果（向量在各个坐标轴上的投影值）按一定顺序列在一起，就成了我们平时所见的向量表示形式。你选择的坐标系（基）不同，得出来的向量的表示就不同。向量还是那个向量，选择的坐标系不同，其表示方式就不同。因此，按道理来说，每写出一个向量的表示，都应该声明一下这个表示是在哪个坐标系中度量出来的。表示的方式，就是 Ma，也就是说，有一个向量，在M矩阵表示的坐标系中度量出来的结果为a。我们平时说一个向量是[2 3 5 7]T，隐含着是说，这个向量在 I 坐标系中的度量结果是[2 3 5 7]T，因此，这个形式反而是一种简化了的特殊情况。</p>
<p>注意到，M矩阵表示出来的那个坐标系，由一组基组成，而那组基也是由向量组成的，同样存在这组向量是在哪个坐标系下度量而成的问题。也就是说，表述一个矩阵的一般方法，也应该要指明其所处的基准坐标系。所谓M，其实是 IM，也就是说，M中那组基的度量是在 I 坐标系中得出的。从这个视角来看，M×N也不是什么矩阵乘法了，而是声明了一个在M坐标系中量出的另一个坐标系N，其中M本身是在I坐标系中度量出来的。</p>
<p>回过头来说变换的问题。我刚才说，“固定坐标系下一个对象的变换等价于固定对象所处的坐标系变换”，那个“固定对象”我们找到了，就是那个向量。但是坐标系的变换呢？我怎么没看见？</p>
<p>请看：</p>
<p>Ma = Ib</p>
<p>我现在要变M为I，怎么变？对了，再前面乘以个M-1，也就是M的逆矩阵。换句话说，你不是有一个坐标系M吗，现在我让它乘以个M-1，变成I，这样一来的话，原来M坐标系中的a在I中一量，就得到b了。</p>
<p>我建议你此时此刻拿起纸笔，画画图，求得对这件事情的理解。比如，你画一个坐标系，x轴上的衡量单位是2，y轴上的衡量单位是3，在这样一个坐标系里，坐标为(1，1)的那一点，实际上就是笛卡尔坐标系里的点(2, 3)。而让它原形毕露的办法，就是把原来那个坐标系:</p>
<p>2 0<br>0 3</p>
<p>的x方向度量缩小为原来的1/2，而y方向度量缩小为原来的1/3，这样一来坐标系就变成单位坐标系I了。保持点不变，那个向量现在就变成了(2, 3)了。</p>
<p>怎么能够让“x方向度量缩小为原来的1/2，而y方向度量缩小为原来的1/3”呢？就是让原坐标系：</p>
<p>2 0<br>0 3</p>
<p>被矩阵：</p>
<p>1/2   0<br>0   1/3</p>
<p>左乘。而这个矩阵就是原矩阵的逆矩阵。</p>
<p>下面我们得出一个重要的结论：</p>
<p>“对坐标系施加变换的方法，就是让表示那个坐标系的矩阵与表示那个变化的矩阵相乘。”</p>
<p>再一次的，矩阵的乘法变成了运动的施加。只不过，被施加运动的不再是向量，而是另一个坐标系。</p>
<p>如果你觉得你还搞得清楚，请再想一下刚才已经提到的结论，矩阵MxN，一方面表明坐标系N在运动M下的变换结果，另一方面，把M当成N的前缀，当成N的环境描述，那么就是说，在M坐标系度量下，有另一个坐标系N。这个坐标系N如果放在I坐标系中度量，其结果为坐标系MxN。</p>
<p>在这里，我实际上已经回答了一般人在学习线性代数是最困惑的一个问题，那就是为什么矩阵的乘法要规定成这样。简单地说，是因为：</p>
<ol>
<li><p>从变换的观点看，对坐标系N施加M变换，就是把组成坐标系N的每一个向量施加M变换。</p>
</li>
<li><p>从坐标系的观点看，在M坐标系中表现为N的另一个坐标系，这也归结为，对N坐标系基的每一个向量，把它在I坐标系中的坐标找出来，然后汇成一个新的矩阵。</p>
</li>
<li><p>至于矩阵乘以向量为什么要那样规定，那是因为一个在M中度量为a的向量，如果想要恢复在I中的真像，就必须分别与M中的每一个向量进行內积运算。我把这个结论的推导留给感兴趣的朋友吧。应该说，其实到了这一步，已经很容易了。</p>
</li>
</ol>
<p>综合以上1/2/3，矩阵的乘法就得那么规定，一切有根有据，绝不是哪个神经病胡思乱想出来的。</p>
<p>我已经无法说得更多了。矩阵又是坐标系，又是变换。到底是坐标系，还是变换，已经说不清楚了，运动与实体在这里统一了，物质与意识的界限已经消失了，一切归于无法言说，无法定义了。道可道，非常道，名可名，非常名。矩阵是在是不可道之道，不可名之名的东西。到了这个时候，我们不得不承认，我们伟大的线性代数课本上说的矩阵定义，是无比正确的：</p>
<p>“矩阵就是由m行n列数放在一起组成的数学对象。”</p>
<p>好了，这基本上就是我想说的全部了。还留下一个行列式的问题。矩阵M的行列式实际上是组成M的各个向量按照平行四边形法则搭成一个n维立方体的体积。对于这一点，我只能感叹于其精妙，却无法揭开其中奥秘了。也许我掌握的数学工具不够，我希望有人能够给我们大家讲解其中的道理了。</p>
<p>我不知道是否讲得足够清楚了，反正这一部分需要您花些功夫去推敲。</p>
<p>此外，请大家不必等待这个系列的后续部分。以我的工作情况而言，近期内很难保证继续投入脑力到这个领域中，尽管我仍然对此兴致浓厚。不过如果还有（四）的话，可能是一些站在应用层面的考虑，比如对计算机图形学相关算法的理解。但是我不承诺这些讨论近期内会出现了。</p>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>数学</tag>
      </tags>
  </entry>
  <entry>
    <title>自定义新闻邮件</title>
    <url>/title/3af7bfc2/</url>
    <content><![CDATA[<p><img src="https://s2.ax1x.com/2019/08/19/mlBDsI.png" alt="mlBDsI.png"></p>
<a id="more"></a>

<h2 id="自定义邮件服务"><a href="#自定义邮件服务" class="headerlink" title="自定义邮件服务"></a>自定义邮件服务</h2><p>平时看新闻，发现各种新闻都是别人挑选出来给自己看的，尤其是利用深度学习算法，每个人都只能看到自己的想象中的世界。我特别讨厌这种情况，但是又挡不住媒体们的套路，所以我干脆自己设计了一个新闻邮件。该邮件从各大网站提取各行各业信息，确保信息题材的广泛。</p>
<h2 id="科技文"><a href="#科技文" class="headerlink" title="科技文"></a>科技文</h2><p>封面是从科学网站<a href="https://www.sciencemag.org/" target="_blank" rel="noopener">Science</a>提取的播客信息，可以一键听播客，也可以点击图片或标题阅读内容。</p>
<h2 id="社会类"><a href="#社会类" class="headerlink" title="社会类"></a>社会类</h2><p>打算开发中文版新闻邮件，采集政治，经济，科技，教育等类目新闻并实现每日推送。</p>
]]></content>
      <categories>
        <category>邮件服务</category>
      </categories>
      <tags>
        <tag>IT</tag>
        <tag>Mail</tag>
      </tags>
  </entry>
  <entry>
    <title>C语言陷阱</title>
    <url>/title/c1ec2509/</url>
    <content><![CDATA[<p><img src="https://s2.ax1x.com/2019/10/30/K5YA5d.jpg" alt="ctraps"></p>
<a id="more"></a>

<h2 id="第1个陷阱：数组下标最大为n-1"><a href="#第1个陷阱：数组下标最大为n-1" class="headerlink" title="第1个陷阱：数组下标最大为n-1"></a>第1个陷阱：数组下标最大为n-1</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">int i, a[10];</span><br><span class="line">for (i = 0; i &lt;= 10; i++)</span><br><span class="line">	a[i] = 0;            //a[10]可能存放的是变量i，所以会导致死循环</span><br><span class="line"></span><br><span class="line">for (i = 0; i &lt;= 9; i++)</span><br><span class="line">	a[i] = 0;</span><br><span class="line"></span><br><span class="line">for (i = 0; i &lt; 10; i++)</span><br><span class="line">	a[i] = 0;           //推荐写法，i &lt; 10要比i &lt;= 9更好，10是出口,0是入口</span><br></pre></td></tr></table></figure>

<h2 id="第2个陷阱：同一符号的不同作用"><a href="#第2个陷阱：同一符号的不同作用" class="headerlink" title="第2个陷阱：同一符号的不同作用"></a>第2个陷阱：同一符号的不同作用</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">p-&gt;s = &quot;-&gt;&quot;	          // -&gt;是访问结构体 p-&gt;就是(*p)-&gt;的简写，&quot;-&gt;&quot;仅是一个字符串</span><br></pre></td></tr></table></figure>

<h2 id="第3个陷阱：赋值和比较运算符混用"><a href="#第3个陷阱：赋值和比较运算符混用" class="headerlink" title="第3个陷阱：赋值和比较运算符混用"></a>第3个陷阱：赋值和比较运算符混用</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">if (x = y)            //x == y误写为 x = y，若y不等于零，则程序侥幸能运行，难发现</span><br><span class="line">	break; </span><br><span class="line"></span><br><span class="line">if ( (x = y) != 0)</span><br><span class="line">	break;</span><br><span class="line"></span><br><span class="line">while (c = &apos; &apos;||c==&apos;\t&apos;||c==&apos;\n&apos;)           //=符号运算优先级最低，&apos; &apos;为真，所以死循环</span><br><span class="line">	c = getc(f);</span><br><span class="line"></span><br><span class="line">while (c == &apos;\t&apos; || c = &apos; &apos; || c == &apos;\n&apos;)   //等价于如下的赋值语句，会报错</span><br><span class="line">while (c == &apos;\t&apos; || c) = (&apos; &apos; || c == &apos;\n&apos;)</span><br><span class="line"></span><br><span class="line">if ( (fd == open(argv[i], 0)) &lt; 0)          //比较结果为0或1，永远不小于0，所以error()永不执行</span><br><span class="line">	error();</span><br><span class="line"></span><br><span class="line">if (c == 1);</span><br><span class="line">if (1 == c);          //凡是比较常量的，常量左写，让对的对，错一定让编译器抛出错</span><br></pre></td></tr></table></figure>

<h2 id="第4个陷阱：混用逻辑与或和位与或运算符，对齐"><a href="#第4个陷阱：混用逻辑与或和位与或运算符，对齐" class="headerlink" title="第4个陷阱：混用逻辑与或和位与或运算符，对齐"></a>第4个陷阱：混用逻辑与或和位与或运算符，对齐</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a &amp;&amp; b;</span><br><span class="line">a &amp; b;                // 若a &amp; b 不为0，则程序侥幸能运行</span><br><span class="line"></span><br><span class="line">parttab[] = &#123;</span><br><span class="line">	046, &quot;left  s&quot;,   //为了对齐125, 46被写成046，而046是八进制数</span><br><span class="line">	047, &quot;right r&quot;,</span><br><span class="line">	125, &quot;frammis&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="第5个陷阱：单目符号和多符号的贪心分析法则"><a href="#第5个陷阱：单目符号和多符号的贪心分析法则" class="headerlink" title="第5个陷阱：单目符号和多符号的贪心分析法则"></a>第5个陷阱：单目符号和多符号的贪心分析法则</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a---b;               //编译器识别为a-- - b;</span><br><span class="line"></span><br><span class="line">n--&gt;0                //n-- &gt; 0 不同于n- -&gt;;</span><br><span class="line"></span><br><span class="line">a+++++b;             //(a++)++ +b，错误a++不做左值</span><br><span class="line"></span><br><span class="line">y = x/*p;            //到底是指针还是注释？x/(*p), x/*p?</span><br></pre></td></tr></table></figure>


<h2 id="第6个陷阱：’’和””的不同"><a href="#第6个陷阱：’’和””的不同" class="headerlink" title="第6个陷阱：’’和””的不同"></a>第6个陷阱：’’和””的不同</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">char *a;</span><br><span class="line">a = &quot;xyz&quot;            //&quot;xyz&quot;提供x的地址	</span><br><span class="line">					 </span><br><span class="line">char hello[] = &#123;&apos;H&apos;,&apos;e&apos;,&apos;l&apos;,&apos;l&apos;,&apos;o&apos;,&apos; &apos;,&apos;w&apos;,&apos;o&apos;,&apos;r&apos;,&apos;l&apos;,&apos;d&apos;,&apos;\n&apos;,0&#125;;</span><br><span class="line">printf(hello);       </span><br><span class="line">                     //&apos; &apos;内为char或者说int，而&quot; &quot;括号内字符串常量</span><br><span class="line"></span><br><span class="line">printf(&quot;Hello world\n&quot;);</span><br><span class="line"></span><br><span class="line">printf(&apos;\n&apos;);</span><br><span class="line">printf(&quot;\n&quot;);</span><br><span class="line"></span><br><span class="line">c = &apos;yes&apos;;           //c可能等于y或者s，视不同机器的实现</span><br><span class="line">c = &quot;yes&quot;;</span><br></pre></td></tr></table></figure>

<h2 id="第7个陷阱：嵌套注释"><a href="#第7个陷阱：嵌套注释" class="headerlink" title="第7个陷阱：嵌套注释"></a>第7个陷阱：嵌套注释</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">/*&quot;/* &quot;*/</span><br></pre></td></tr></table></figure>

<h2 id="第8个陷阱：函数声明"><a href="#第8个陷阱：函数声明" class="headerlink" title="第8个陷阱：函数声明 "></a>第8个陷阱：函数声明 </h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(*(void(*)())0)();   //按照用的规则来，去掉哑变量</span><br><span class="line">					 //(void(*)())是一种强制类型转换操作，类似于unsigned a</span><br><span class="line">					 //它表示的是一个函数指针，且该指针指向的函数返回值为void型，且函数没有参数</span><br><span class="line">					 //整个表达式是把0这个数转换为0这个位置，然后读取0位置的函数并执行</span><br><span class="line">					 // (* (void (*)())0 )()</span><br><span class="line">					 // (指针 类型转换 地址)()</span><br><span class="line">(*((*)())0)();       //默认返回类型为int，一般会出错，段错误，核心已转储</span><br><span class="line"></span><br><span class="line">float *g(), (*h)();</span><br><span class="line">(float (*)())        //指向返回值为浮点类型的函数指针的类型转换符号</span><br><span class="line"></span><br><span class="line">int func()&#123;&#125;</span><br><span class="line">(int (*)()) p = func;</span><br><span class="line">(*p)()               //简写为p() 但不是*p()，因为()优先和p结合</span><br></pre></td></tr></table></figure>

<h2 id="第9个陷阱：优先级别"><a href="#第9个陷阱：优先级别" class="headerlink" title="第9个陷阱：优先级别 "></a>第9个陷阱：优先级别 </h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(* / + -) &gt; (&lt;&lt; &gt;&gt;) &gt; (&gt; &lt; &gt;= &lt;= ==) &gt; (&amp;&amp; || !) &gt; (=) &gt; (? :) &gt; (,)</span><br><span class="line">                     //各种运算符号的优先级别，算术大于移位大于比较大于逻辑大于赋值大于三目运算大于逗号运算符号。</span><br><span class="line"></span><br><span class="line">FLAG = 01000100000;  //假设为二进制表示</span><br><span class="line">if (flags &amp; FLAG)    //flags &amp;&amp; FLAGE</span><br><span class="line">	do sth;</span><br><span class="line"></span><br><span class="line">r = hi&lt;&lt;4 + low      //hi &lt;&lt; (4 + low)</span><br><span class="line">r = (hi&lt;&lt;4) + low;   //正确写法</span><br><span class="line">r = hi&lt;&lt;4 | low;     //这种写法也可，但hi得指高位，low指低位</span><br><span class="line"></span><br><span class="line">while (c = getc(in) != EOF) //c一直为1，直到文件末尾为0，可能导致对文件循环读取</span><br><span class="line">	putc(c, stdout);</span><br></pre></td></tr></table></figure>

<h2 id="第10个陷阱：分号"><a href="#第10个陷阱：分号" class="headerlink" title="第10个陷阱：分号 "></a>第10个陷阱：分号 </h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">if (x[i] &gt; big);     //big = x[i]一定会得到执行</span><br><span class="line">	big = x[i]; </span><br><span class="line"></span><br><span class="line">if (n &lt; 3)          </span><br><span class="line">	return           //return logre.date = x[0];</span><br><span class="line">logre.date = x[0];</span><br><span class="line">logre.time = x[1];</span><br><span class="line">logre.code = x[2];</span><br><span class="line"></span><br><span class="line">struct logrec&#123;</span><br><span class="line">	int date;</span><br><span class="line">	int time;</span><br><span class="line">	int code;</span><br><span class="line">&#125;</span><br><span class="line">main()&#123;&#125;             //main函数返回类型为struct logrec类型</span><br></pre></td></tr></table></figure>

<h2 id="第11个陷阱：switch-省略break"><a href="#第11个陷阱：switch-省略break" class="headerlink" title="第11个陷阱：switch 省略break; "></a>第11个陷阱：switch 省略break; </h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">case &apos;\n&apos;:</span><br><span class="line">	linecount++;     //故意省略break，可以继续执行下面的case</span><br><span class="line">case &apos;\t&apos;:</span><br><span class="line">case &apos; &apos;:</span><br></pre></td></tr></table></figure>

<h2 id="第12个陷阱：函数调用"><a href="#第12个陷阱：函数调用" class="headerlink" title="第12个陷阱：函数调用 "></a>第12个陷阱：函数调用 </h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">f();                 //调用函数f</span><br><span class="line">f;                   //获得函数f的地址然后丢弃，什么也不做</span><br></pre></td></tr></table></figure>

<h2 id="第13个陷阱：悬挂else"><a href="#第13个陷阱：悬挂else" class="headerlink" title="第13个陷阱：悬挂else "></a>第13个陷阱：悬挂else </h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">if (x == 0)</span><br><span class="line">	if (y == 0) error();</span><br><span class="line">else&#123;</span><br><span class="line">	z = x + y;</span><br><span class="line">	f(&amp;z);</span><br><span class="line">&#125;                    //else 按照最近匹配原则和内部if配对</span><br></pre></td></tr></table></figure>

<h2 id="第14个陷阱：数组和指针几乎等价"><a href="#第14个陷阱：数组和指针几乎等价" class="headerlink" title="第14个陷阱：数组和指针几乎等价 "></a>第14个陷阱：数组和指针几乎等价 </h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">int *p, a[12];</span><br><span class="line">p = a;               //a既是数组名也是其首地址</span><br><span class="line">*a = 10;             //就是a[0] = 10</span><br><span class="line">*p = 10;             //也是a[0] = 10</span><br><span class="line">a[i]                 //可以写成i[a]或者a + i;</span><br><span class="line"></span><br><span class="line">char *r *malloc();                 //错误1:可能分配失败, 要检测r是否为NULL</span><br><span class="line">r = malloc(strlen(s) + strlen(t)); //错误2:缺少&apos;\0&apos;字符的存储位置</span><br><span class="line">strcpy(r,s);</span><br><span class="line">strcat(r,t);                       //错误3:未释放内存</span><br><span class="line">                     </span><br><span class="line">char r*, *malloc();  //一种可行的写法</span><br><span class="line">r = malloc(strlen(s) + strlen(t) + 1);</span><br><span class="line">if (!r)&#123;</span><br><span class="line">	complain();</span><br><span class="line">	exit(1);</span><br><span class="line">&#125;</span><br><span class="line">else&#123;</span><br><span class="line">	strcpy(r,s);</span><br><span class="line">	strcat(r,t);</span><br><span class="line">&#125;</span><br><span class="line">free(r);</span><br><span class="line">p = NULL;</span><br></pre></td></tr></table></figure>

<h2 id="第15个陷阱：是数组还是指针做参数？"><a href="#第15个陷阱：是数组还是指针做参数？" class="headerlink" title="第15个陷阱：是数组还是指针做参数？ "></a>第15个陷阱：是数组还是指针做参数？ </h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">int strlen(char s[])&#123;&#125;</span><br><span class="line">int strlen(char *s)&#123;&#125;</span><br><span class="line"></span><br><span class="line">int main(int argc, char **argv)&#123;&#125; //等价于下面写法</span><br><span class="line">int main(int argc, char *argv[])&#123;&#125;</span><br></pre></td></tr></table></figure>

<h2 id="第16个陷阱：数组下标和指针访问"><a href="#第16个陷阱：数组下标和指针访问" class="headerlink" title="第16个陷阱：数组下标和指针访问"></a>第16个陷阱：数组下标和指针访问</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">int cal[12][31];     //以下几种写法完全等价，有点儿绕</span><br><span class="line"></span><br><span class="line">cal[i][j], *(cal[i] + j), *(*(cal + i) + j)</span><br><span class="line">cal[i][j], *(i[cal] + j), j[i[cal]]</span><br></pre></td></tr></table></figure>

<h2 id="第17个陷阱：对操作优化"><a href="#第17个陷阱：对操作优化" class="headerlink" title="第17个陷阱：对操作优化 "></a>第17个陷阱：对操作优化 </h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#define N 1024</span><br><span class="line">static char buffer[N];</span><br><span class="line">static char *bufptr;</span><br><span class="line"></span><br><span class="line">void bufwrite(char *p, int n)</span><br><span class="line">&#123;</span><br><span class="line">	while (--n &gt;= 0)&#123;</span><br><span class="line">		if (bufptr == &amp;buffer[N])</span><br><span class="line">			flushbuffer();</span><br><span class="line">		*bufptr++ = *p++;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">void memcpy(char *dest, const char *source, int k)</span><br><span class="line">&#123;</span><br><span class="line">	while (--k &gt;= 0)</span><br><span class="line">		*dest++ = *source++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void bufwrite(char *p, int n)</span><br><span class="line">&#123;                    //优化版，一次拷贝k个字符</span><br><span class="line">	while (n &gt; 0)&#123;</span><br><span class="line">		int k, rem;</span><br><span class="line">		if (bufptr == &amp;buffer[N])</span><br><span class="line">			flushbuffer();</span><br><span class="line"></span><br><span class="line">		rem = N - (bufptr - buffer); //buffer + N - bufptr;</span><br><span class="line">		k = n &gt; rem ? rem : n;</span><br><span class="line">		memcpy(bufptr, p, k);</span><br><span class="line">		bufptr += k;</span><br><span class="line">		p += k;</span><br><span class="line">		n -= k;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="第18个陷阱：求值顺序"><a href="#第18个陷阱：求值顺序" class="headerlink" title="第18个陷阱：求值顺序 "></a>第18个陷阱：求值顺序 </h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">f(x, y)              //函数有两个参数，求值顺序未定</span><br><span class="line">f( (x, y) )          //函数有一个参数，先求x，再求y</span><br><span class="line"></span><br><span class="line">i = 0;</span><br><span class="line">while (i &lt; n)</span><br><span class="line">	y[i] = x[i++];   //错误，i++求值顺序未定</span><br><span class="line">	y[i++] = x[i];   //错误，i++求值顺序未定</span><br><span class="line"></span><br><span class="line">i = 0;</span><br><span class="line">while (i &lt; n)</span><br><span class="line">	y[i] = x[i];     //正确</span><br><span class="line">	++i;</span><br><span class="line"></span><br><span class="line">i = 0</span><br><span class="line">for (;i &lt; n; ++i)    //正确</span><br><span class="line">	y[i] = x[i];</span><br></pre></td></tr></table></figure>


<h2 id="第19个陷阱：-amp-amp"><a href="#第19个陷阱：-amp-amp" class="headerlink" title="第19个陷阱：&amp;&amp; || !"></a>第19个陷阱：&amp;&amp; || !</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">i = 0;               //&amp;&amp;误用为&amp;，若&amp;操作结果为零才能发现此错误</span><br><span class="line">while (i &lt; tabsize &amp; tab[i] != x) </span><br><span class="line">	i++;</span><br></pre></td></tr></table></figure>

<h2 id="第20个陷阱：数溢出"><a href="#第20个陷阱：数溢出" class="headerlink" title="第20个陷阱：数溢出 "></a>第20个陷阱：数溢出 </h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">if ((unsigned)a + (unsigned)b &gt; INT_MAX)</span><br><span class="line">	complain();      //加法溢出时，若检测溢出位标志会失败</span><br><span class="line">                    </span><br><span class="line">if (a &gt;INT_MAX - b)  //最好用减法，减法防止溢出，</span><br><span class="line">	complain();</span><br></pre></td></tr></table></figure>


<h2 id="第21个陷阱：main-函数无返回值"><a href="#第21个陷阱：main-函数无返回值" class="headerlink" title="第21个陷阱：main 函数无返回值 "></a>第21个陷阱：main 函数无返回值 </h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">main()</span><br><span class="line">&#123;</span><br><span class="line">	printf(&quot;hello world!\n&quot;);</span><br><span class="line">&#125;                    //返回垃圾整数，导致操作系统误判程序执行失败，而实际又执行成功了</span><br><span class="line"></span><br><span class="line">int main(int argc, char **)</span><br><span class="line">&#123;                    </span><br><span class="line">	printf(&quot;hello world!\n&quot;);</span><br><span class="line">	return 0;        //一种可行的写法</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="第22个陷阱：声明和引用"><a href="#第22个陷阱：声明和引用" class="headerlink" title="第22个陷阱：声明和引用 "></a>第22个陷阱：声明和引用 </h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">int a;               //a未赋值，则默认为0</span><br><span class="line">int b = 1;</span><br><span class="line">extern int c;        //引用外部变量</span><br><span class="line">static int d;        //限制d在该文件，不可被外部引用</span><br></pre></td></tr></table></figure>

<h2 id="第23个陷阱：调用外部函数要声明参数类型"><a href="#第23个陷阱：调用外部函数要声明参数类型" class="headerlink" title="第23个陷阱：调用外部函数要声明参数类型 "></a>第23个陷阱：调用外部函数要声明参数类型 </h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">int isvowel(char);</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">	int a;</span><br><span class="line">	char c;</span><br><span class="line"></span><br><span class="line">	c = &apos;a&apos;;</span><br><span class="line">	a = isvowel(c);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="第24个陷阱：变量类型错误使用"><a href="#第24个陷阱：变量类型错误使用" class="headerlink" title="第24个陷阱：变量类型错误使用"></a>第24个陷阱：变量类型错误使用</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">	int i;</span><br><span class="line">	char c;</span><br><span class="line">	for (i = 0; i &lt; 10; i++)&#123;</span><br><span class="line">		scanf(&quot;%d&quot;, &amp;c);   //%c还是%d? </span><br><span class="line">		printf(&quot;%d &quot;, i);</span><br><span class="line">	&#125;</span><br><span class="line">	printf(&quot;\n&quot;);</span><br><span class="line">	return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="第25个陷阱：外部变量类型引用时声明错误"><a href="#第25个陷阱：外部变量类型引用时声明错误" class="headerlink" title="第25个陷阱：外部变量类型引用时声明错误 "></a>第25个陷阱：外部变量类型引用时声明错误 </h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">long n;</span><br><span class="line">extern int n;       //到底用long 还是int?</span><br></pre></td></tr></table></figure>

<h2 id="第26个陷阱：缓冲区释放错误"><a href="#第26个陷阱：缓冲区释放错误" class="headerlink" title="第26个陷阱：缓冲区释放错误 "></a>第26个陷阱：缓冲区释放错误 </h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">static char buf[BUFSIZ]; //正确位置</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">	int c;</span><br><span class="line">	char buf[BUFSIZ];    //错误位置，放在此处，main执行完buf就没了，释放buf时出错</span><br><span class="line">	setbuf(stdout, buf)  //最好作为main函数第一句</span><br><span class="line"></span><br><span class="line">	while ((c = getchar()) != EOF)</span><br><span class="line">		putchar(c);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="第27个陷阱：宏定义缺少必要的括号"><a href="#第27个陷阱：宏定义缺少必要的括号" class="headerlink" title="第27个陷阱：宏定义缺少必要的括号 "></a>第27个陷阱：宏定义缺少必要的括号 </h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#define abs(x) x &gt;= 0 ? x : -x</span><br><span class="line">abs(a-b)                 //a - b &gt;= 0 ? a - b : -a-b 此处错误，应为-(a-b)</span><br><span class="line">abs(a) + 1               //a &gt;= 0 ? a : -a + 1       又错   </span><br><span class="line">#define abs(x) ((x) &gt;= 0 ?(x):-(x)) //良定义</span><br><span class="line"></span><br><span class="line">#define max(biggest, x)  ((biggest) &gt; (x) ? (bigget) : (x))</span><br><span class="line">max(bigest, x[i++])      //宏中最好不要有带有副作用的操作存在，类似i++</span><br><span class="line">max(a,max(b,max(c,d)))   //宏定义展开过长 </span><br><span class="line">max(max(a,b),max(c,d))   //((((a)&gt;(b)?(a):(b)))&gt;(((c)&gt;(d)?(c):(d)))?(((a)&gt;(b)?(a):(b))):(((c)&gt;(d)?(c):(d))))</span><br><span class="line"></span><br><span class="line">bigest = a;              //一种比较a,b,c,d的好方法，代码清晰</span><br><span class="line">if (bigest &lt; b) bigest = b;</span><br><span class="line">if (bigest &lt; c) bigest = c;</span><br><span class="line">if (bigest &lt; d) bigest = d;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#define assert(e) if (!e) assert_error(__FILE__,__LINE__)</span><br><span class="line">if (x &gt; 0 &amp;&amp; y &gt; 0)</span><br><span class="line">	assert(x &gt; y);       //展开后if和else匹配出错</span><br><span class="line">else</span><br><span class="line">	assert(x &lt; y);</span><br><span class="line">#define assert(e) &#123; if (!e) assert_error(__FILE__,__LINE__) &#125;</span><br><span class="line">if (x &gt; 0 &amp;&amp; y &gt; 0)</span><br><span class="line">	assert(x &gt; y);       //解决了if和else配对，但会在&#125;后多一个; </span><br><span class="line">else</span><br><span class="line">	assert(x &lt; y);</span><br><span class="line">						 //一种可行的写法</span><br><span class="line">#define assert(e) ((void)((e)||_assert_error(__FILE__,__LINE__)))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#define T1 struct foo *</span><br><span class="line">typedef struct foo *T2</span><br><span class="line">T1 a, b;                 //struct foo *a, b ，此处b的类型不对</span><br><span class="line">T2 a, b;                 //struct foo *a, *b, 正确</span><br></pre></td></tr></table></figure>

<h2 id="第28个陷阱：编译器不区分大小写"><a href="#第28个陷阱：编译器不区分大小写" class="headerlink" title="第28个陷阱：编译器不区分大小写 "></a>第28个陷阱：编译器不区分大小写 </h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">char * Malloc(unsigned n) //Malloc等于是malloc</span><br><span class="line">&#123;</span><br><span class="line">	char *p, *malloc(unsigned); </span><br><span class="line">	p = malloc(n);        //循环调用自身，内存被耗尽，系统崩溃</span><br><span class="line">	if (p == NULL)</span><br><span class="line">		panic(&quot;out of memory&quot;);</span><br><span class="line">	return p;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="第29个陷阱：字符有无符号"><a href="#第29个陷阱：字符有无符号" class="headerlink" title="第29个陷阱：字符有无符号 "></a>第29个陷阱：字符有无符号 </h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(unsigned char) c;        //强制声明无符号</span><br></pre></td></tr></table></figure>

<h2 id="第30个陷阱：乘除2的倍数用移位"><a href="#第30个陷阱：乘除2的倍数用移位" class="headerlink" title="第30个陷阱：乘除2的倍数用移位 "></a>第30个陷阱：乘除2的倍数用移位 </h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mid  = (low + high) &gt;&gt; 2; //除以4</span><br><span class="line">mid  = low &lt;&lt; 2;          //乘以2</span><br></pre></td></tr></table></figure>

<h2 id="第31个陷阱：空指针位置0的读写权限"><a href="#第31个陷阱：空指针位置0的读写权限" class="headerlink" title="第31个陷阱：空指针位置0的读写权限 "></a>第31个陷阱：空指针位置0的读写权限 </h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">	char *p;</span><br><span class="line">	p = NULL;             //空指针一般不可写，可读与否看系统</span><br><span class="line">	printf(&quot;Location 0 contains %d\n&quot;,*p);</span><br><span class="line">	return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="第32个陷阱：负数成了被除数"><a href="#第32个陷阱：负数成了被除数" class="headerlink" title="第32个陷阱：负数成了被除数 "></a>第32个陷阱：负数成了被除数 </h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">h = n % HASHSIZE;         // n小于0时，结果未定义</span><br><span class="line">if (h &lt; 0)</span><br><span class="line">	h += HASHSIZE;</span><br><span class="line"></span><br><span class="line">h = (unsigned n) % HASHSIZE; //强制无符号</span><br></pre></td></tr></table></figure>

<h2 id="第33个陷阱：部分宏定义无法判断字符的范围"><a href="#第33个陷阱：部分宏定义无法判断字符的范围" class="headerlink" title="第33个陷阱：部分宏定义无法判断字符的范围 "></a>第33个陷阱：部分宏定义无法判断字符的范围 </h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#define toupper(c) ((c)+&apos;A&apos;-&apos;a&apos;)</span><br><span class="line">#define tolower(c) ((c)+&apos;a&apos;-&apos;A&apos;)</span><br><span class="line"></span><br><span class="line">int c;</span><br><span class="line">while ((c = getchar()) != EOF)</span><br><span class="line">	putchar(tolower(c));  //错误，c可能就是小写字符</span><br><span class="line">	putchar(toupper(c));  //错误，c可能就是大写字符</span><br><span class="line">						  </span><br><span class="line">int c;                    //一种可行的写法</span><br><span class="line">while ((c = getchar()) != EOF)</span><br><span class="line">	putchar(isupper(c) ? tolower(c) : c);</span><br><span class="line">	putchar(islower(c) ? toupper(c) : c);</span><br><span class="line"></span><br><span class="line">int toupper (int c)       //或者使用函数</span><br><span class="line">&#123;</span><br><span class="line">	if (c &gt;= &apos;a&apos; &amp;&amp; c &lt;= &apos;z&apos;)</span><br><span class="line">		return c + &apos;A&apos; - &apos;a&apos;;</span><br><span class="line">&#125;                         //同时也有宏，选择使用一种</span><br><span class="line">#define _toupper(c) ((c)+&apos;A&apos;-&apos;a&apos;)</span><br><span class="line">#define _tolower(c) ((c)+&apos;a&apos;-&apos;A&apos;)</span><br></pre></td></tr></table></figure>

<h2 id="第34个陷阱：释放内存"><a href="#第34个陷阱：释放内存" class="headerlink" title="第34个陷阱：释放内存"></a>第34个陷阱：释放内存</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">struct node *p, *head;</span><br><span class="line">for (p = head; p; p = p-&gt;next)</span><br><span class="line">	free((char *)p);      //此处释放了，p-&gt;next仍正确，但再次循环就会出错</span><br><span class="line"></span><br><span class="line">struct node *p, *head, *tmp;</span><br><span class="line">for (p = head; p; p = tmp)</span><br><span class="line">	tmp = p -&gt; next;      //使用临时指针缓存</span><br><span class="line">	free((char *)p);</span><br></pre></td></tr></table></figure>


<h2 id="第35个陷阱：默认数组递增序列"><a href="#第35个陷阱：默认数组递增序列" class="headerlink" title="第35个陷阱：默认数组递增序列"></a>第35个陷阱：默认数组递增序列</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">void printnum(long n, void (*p)())</span><br><span class="line">&#123;</span><br><span class="line">	if ( n &lt; 0)&#123;</span><br><span class="line">		(*p)(&apos;-&apos;);</span><br><span class="line">		n = -n;</span><br><span class="line">	&#125;</span><br><span class="line">	if ( n &gt;= 10)</span><br><span class="line">		printnum( n / 10,p);</span><br><span class="line"></span><br><span class="line">	(*p)((int)(n%10) + &apos;0&apos;);    //+号，暗含所有数按序编排，实际可能不是这样</span><br><span class="line">&#125;</span><br><span class="line">	(*p)(&quot;0123456789&quot;[n % 10]); //此写法可行，字符串作为数组名，</span><br><span class="line">								//提供了首地址，n % 10作为下标取其中的字符</span><br></pre></td></tr></table></figure>

<h2 id="第36个陷阱：指针不可直接相加，可相减，单独加数"><a href="#第36个陷阱：指针不可直接相加，可相减，单独加数" class="headerlink" title="第36个陷阱：指针不可直接相加，可相减，单独加数"></a>第36个陷阱：指针不可直接相加，可相减，单独加数</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">int func()</span><br><span class="line">&#123;</span><br><span class="line">	char s[10];</span><br><span class="line">	char *p1, p2;</span><br><span class="line">	char *mid;</span><br><span class="line">	</span><br><span class="line">	p1 = s, </span><br><span class="line">	p2 = &amp;s[9];</span><br><span class="line">	mid = (p1 + p2) / 2         //错误，不可相加</span><br><span class="line">	mid = (p1 + p2) &gt;&gt;1         //错误，不可相加</span><br><span class="line"></span><br><span class="line">	mid = (p2 - p1)/2  + p1     //正确，指针p1可以加数</span><br><span class="line">	mid = (p2 - p1) &gt;&gt; 1 + p1   //错误，+ 优先级高</span><br><span class="line">	mid = ((p2-p1)&gt;&gt;1) + p1     //正确</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="第37个陷阱：空指针引发段错误，核心转储"><a href="#第37个陷阱：空指针引发段错误，核心转储" class="headerlink" title="第37个陷阱：空指针引发段错误，核心转储"></a>第37个陷阱：空指针引发段错误，核心转储</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">char s[100];</span><br><span class="line">p = malloc(strlen(s) + 1);      </span><br><span class="line">if (p)</span><br><span class="line">	do sth;</span><br><span class="line">else</span><br><span class="line">	exit(1);</span><br><span class="line"></span><br><span class="line">free(p);</span><br><span class="line">p = NULL;                       //把指针给管起来</span><br><span class="line">char s[100];</span><br><span class="line">p = malloc(strlen(s) + 1);      </span><br><span class="line">if (p)</span><br><span class="line">	do sth;</span><br><span class="line">else</span><br><span class="line">	exit(1);</span><br><span class="line"></span><br><span class="line">free(p);</span><br><span class="line">p = NULL;                       //把指针给管起来</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>编程语言</category>
      </categories>
      <tags>
        <tag>C</tag>
      </tags>
  </entry>
  <entry>
    <title>关于glibc中strcmp函数的其他几种写法</title>
    <url>/title/6e24e863/</url>
    <content><![CDATA[<p><img src="https://s2.ax1x.com/2019/10/30/K5JvCR.jpg" alt="gnu"></p>
<a id="more"></a>

<h1 id="glibc"><a href="#glibc" class="headerlink" title=" glibc"></a> glibc</h1><p><a href="https://www.gnu.org/" target="_blank" rel="noopener">GNU</a>组织实现的C运行库，是Linux系统最底层的API。</p>
<ol>
<li>strcmp</li>
</ol>
<hr>
<p>strcmp, <strong>String Compare Function</strong>, compare S1 and S2, returning less than, equal to or greater than zero if S1 is lexicographically less than, equal to or greater than S2. 字符串S1中字符一旦大于S2中的字符就返回大于零的数(两字符差值)，小于就返回小于零的数，等于就返回零。</p>
<h2 id="2-由头"><a href="#2-由头" class="headerlink" title="2.由头"></a>2.由头</h2><p>最近看书，发现C语言指针和数组特别神奇，很多复杂的函数，只要有指针就能简化代码。刚好在glic中发现字符串比较函数strcmp的官方写法，自己又结合书籍整理了一番，提出了几个自己写的版本。</p>
<h2 id="3-自定义版"><a href="#3-自定义版" class="headerlink" title="3.自定义版"></a>3.自定义版</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">int strcmp0(char *p1, char *p2)</span><br><span class="line">&#123;   //最简单的写法，指针当数组用</span><br><span class="line">	int i;</span><br><span class="line">	for (i = 0; p1[i] == p2[i]; i++)&#123;</span><br><span class="line">		if (p1[i] == &apos;\0&apos;)</span><br><span class="line">			return 0;</span><br><span class="line">	&#125;</span><br><span class="line">	return p1[i] - p2[i];</span><br><span class="line"></span><br><span class="line">int strcmp1(char *p1, char *p2)</span><br><span class="line">&#123;	//数组下标自增</span><br><span class="line">	int i = 0;</span><br><span class="line">	for (; p1[i] == p2[i];)&#123;</span><br><span class="line">		if (p1[i++] == &apos;\0&apos;)</span><br><span class="line">			return 0;</span><br><span class="line">	&#125;</span><br><span class="line">	return p1[i] - p2[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int strcmp2(char *p1, char *p2)</span><br><span class="line">&#123;	//使用指针取值</span><br><span class="line">	for (; *p1 == *p2; p1++, p2++)&#123;</span><br><span class="line">		if (*p1 == &apos;\0&apos;)</span><br><span class="line">			return 0;</span><br><span class="line">	&#125;</span><br><span class="line">	return *p1 - *p2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int strcmp3(char *p1, char *p2)</span><br><span class="line">&#123;	//放弃判断&apos;\0&apos;，而用!取反</span><br><span class="line">	for (; *p1 == *p2; p1++, p2++)&#123;</span><br><span class="line">		if (!*p1)</span><br><span class="line">			return 0;</span><br><span class="line">	&#125;</span><br><span class="line">	return *p1 - *p2;</span><br><span class="line"></span><br><span class="line">int strcmp4(char *p1, char *p2)</span><br><span class="line">&#123;	//指针自增，注意*--p1中*和--的优先级，此法最简，不知有错没？</span><br><span class="line">	while (*p1++ == *p2++);</span><br><span class="line">	return *--p1 - *--p2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="4-官方版"><a href="#4-官方版" class="headerlink" title="4.官方版"></a>4.官方版</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">int </span><br><span class="line">STRCMP(const char *p1, const char *p2)</span><br><span class="line">&#123;</span><br><span class="line">  const unsigned char *s1 = (const unsigned char *) p1;</span><br><span class="line">  const unsigned char *s2 = (const unsigned char *) p2;</span><br><span class="line">  unsigned char c1, c2;</span><br><span class="line"></span><br><span class="line">  do</span><br><span class="line">	&#123;</span><br><span class="line">	  c1 = (unsigned char) *s1++;</span><br><span class="line">	  c2 = (unsigned char) *s2++;</span><br><span class="line">	  if (c1 == &apos;\0&apos;)</span><br><span class="line">	return c1 - c2;</span><br><span class="line">	&#125;</span><br><span class="line">  while (c1 == c2);</span><br><span class="line"></span><br><span class="line">  return c1 - c2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="5-结语"><a href="#5-结语" class="headerlink" title="5.结语"></a>5.结语</h2><p>看了官方版本，感觉自己还很有差距。C语言灵活，但太容易出错，指针简直就是一把瑞士尖刀，弄不好就要戳到自己身上。</p>
]]></content>
      <categories>
        <category>编程语言</category>
      </categories>
      <tags>
        <tag>C</tag>
      </tags>
  </entry>
  <entry>
    <title>什么是P问题、NP问题和NPC问题？</title>
    <url>/title/a509ddba/</url>
    <content><![CDATA[<p><img src="https://s2.ax1x.com/2019/11/02/KqYZBn.jpg" alt="NP"></p>
<a id="more"></a>

<p>Note: 本文原地址已遗失，若作者发现可知会本人。</p>
<p>这或许是众多OIer最大的误区之一。</p>
<p>你会经常看到网上出现“这怎么做，这不是NP问题吗”、“这个只有搜了，这已经被证明是NP问题了”之类的话。你要知道，大多数人此时所说的NP问题其实都是指的NPC问题，他们没有搞清楚NP问题和NPC问题的概念。NP问题并不是那种“只有搜才行”的问题，NPC问题才是。好，行了，基本上这个误解已经被澄清了。下面的内容都是在讲什么是P问题，什么是NP问题，什么是NPC问题，你如果不是很感兴趣就可以不看了。接下来你可以看到，把NP问题当成是NPC问题是一个多大的错误。</p>
<p>还是先用几句话简单说明一下时间复杂度。时间复杂度并不是表示一个程序解决问题需要花多少时间，而是当问题规模扩大后，程序需要的时间长度增长得有多快。也就是说，对于高速处理数据的计算机来说，处理某一个特定数据的效率不能衡量一个程序的好坏，而应该看当这个数据的规模变大到数百倍后，程序运行时间是否还是一样，或者也跟着慢了数百倍，或者变慢了数万倍。不管数据有多大，程序处理花的时间始终是那么多的，我们就说这个程序很好，具有O(1)的时间复杂度，也称常数级复杂度;数据规模变得有多大，花的时间也跟着变得有多长，这个程序的时间复杂度就是O(n)，比如找n个数中的最大值;而像冒泡排序、插入排序等，数据扩大2倍，时间变慢4倍的，属于$O(n^2)$的复杂度。还有一些穷举类的算法，所需时间长度成几何阶数上涨，这就是$O(a^n)$的指数级复杂度，甚至$O(n!)$的阶乘级复杂度。不会存在$O(2*n^2)$的复杂度，因为前面的那个“2”是系数，根本不会影响到整个程序的时间增长。同样地，$O(n^3+n^2)$ 的复杂度也就是$O(n^3)$的复杂度。因此，我们会说，一个$O(0.01*n^3)$的程序的效率比$O(100*n^2)$的效率低，尽管在n很小的时候，前者优于后者，但后者时间随数据规模增长得慢，最终$O(n^3)$的复杂度将远远超过$O(n^2)$。我们也说，$O(n^{100})$的复杂度小于$O(1.01^n)$的复杂度。</p>
<p>容易看出，前面的几类复杂度被分为两种级别，其中后者的复杂度无论如何都远远大于前者:一种是$O(1)，O(log(n))，O(n^a)$等，我们把它叫做多项式级的复杂度，因为它的规模n出现在底数的位置;另一种是$O(a^n)$和$O(n!)$型复杂度，它是非多项式级的，其复杂度计算机往往不能承受。当我们在解决一个问题时，我们选择的算法通常都需要是多项式级的复杂度，非多项式级的复杂度需要的时间太多，往往会超时，除非是数据规模非常小。</p>
<p>自然地，人们会想到一个问题:会不会所有的问题都可以找到复杂度为多项式级的算法呢?很遗憾，答案是否定的。有些问题甚至根本不可能找到一个正确的算法来，这称之为“不可解问题”(UndecidableDecisionProblem)。(TheHaltingProblem)就是一个著名的不可解问题，在我的Blog上有过专门的介绍和证明。再比如，输出从1到n这n个数的全排列。不管你用什么方法，你的复杂度都是阶乘级，因为你总得用阶乘级的时间打印出结果来。有人说，这样的“问题”不是一个“正规”的问题，正规的问题是让程序解决一个问题，输出一个“YES””或“NO”(这被称为判定性问题)，或者一个什么什么的最优值(这被称为最优化问题)。那么，根据这个定义，我也能举出一个不大可能会有多项式级算法的问题来:Hamilton回路。问题是这样的:给你一个图，问你能否找到一条经过每个顶点一次且恰好一次(不遗漏也不重复)最后又走回来的路(满足这个条件的路径叫做Hamilton回路)。这个问题现在还没有找到多项式级的算法。事实上，这个问题就是我们后面要说的NPC问题。</p>
<p>下面引入P类问题的概念:如果一个问题可以找到一个能在多项式的时间里解决它的算法，那么这个问题就属于P问题。P是英文单词多项式的第一个字母。哪些问题是P类问题呢?通常NOI和NOIP不会出不属于P类问题的题目。我们常见到的一些信息奥赛的题目都是P问题。道理很简单，一个用穷举换来的非多项式级时间的超时程序不会涵盖任何有价值的算法。</p>
<p>接下来引入NP问题的概念。这个就有点难理解了，或者说容易理解错误。在这里强调(回到我竭力想澄清的误区上)，NP问题不是非P类问题。NP问题是指可以在多项式的时间里验证一个解的问题。NP问题的另一个定义是，可以在多项式的时间里猜出一个解的问题。比方说，我RP很好，在程序中需要枚举时，我可以一猜一个准。现在某人拿到了一个求最短路径的问题，问从起点到终点是否有一条小于100个单位长度的路线。它根据数据画好了图，但怎么也算不出来，于是来问我:你看怎么选条路走得最少?我说，我RP很好，肯定能随便给你指条很短的路出来。然后我就胡乱画了几条线，说就这条吧。那人按我指的这条把权值加起来一看，嘿，神了，路径长度98，比100小。于是答案出来了，存在比100小的路径。别人会问他这题怎么做出来的，他就可以说，因为我找到了一个比100小的解。在这个题中，找一个解很困难，但验证一个解很容易。验证一个解只需要O(n)的时间复杂度，也就是说我可以花O(n)的时间把我猜的路径的长度加出来。那么，只要我RP好，猜得准，我一定能在多项式的时间里解决这个问题。我猜到的方案总是最优的，不满足题意的方案也不会来骗我去选它。这就是NP问题。当然有不是NP问题的问题，即你猜到了解但是没用，因为你不能在多项式的时间里去验证它。下面我要举的例子是一个经典的例子，它指出了一个目前还没有办法在多项式的时间里验证一个解的问题。很显然，前面所说的Hamilton回路是NP问题，因为验证一条路是否恰好经过了每一个顶点非常容易。但我要把问题换成这样:试问一个图中是否不存在Hamilton回路。这样问题就没法在多项式的时间里进行验证了，因为除非你试过所有的路，否则你不敢断定它“没有Hamilton回路”。</p>
<p>之所以要定义NP问题，是因为通常只有NP问题才可能找到多项式的算法。我们不会指望一个连多项式地验证一个解都不行的问题存在一个解决它的多项式级的算法。相信读者很快明白，信息学中的号称最困难的问题——“NP问题”，实际上是在探讨NP问题与P类问题的关系。</p>
<p>很显然，所有的P类问题都是NP问题。也就是说，能多项式地解决一个问题，必然能多项式地验证一个问题的解——既然正解都出来了，验证任意给定的解也只需要比较一下就可以了。关键是，人们想知道，是否所有的NP问题都是P类问题。我们可以再用集合的观点来说明。如果把所有P类问题归为一个集合P中，把所有NP问题划进另一个集合NP中，那么，显然有P属于NP。现在，所有对NP问题的研究都集中在一个问题上，即究竟是否有P=NP?通常所谓的“NP问题”，其实就一句话:证明或推翻P=NP。</p>
<p>NP问题一直都是信息学的巅峰。巅峰，意即很引人注目但难以解决。在信息学研究中，这是一个耗费了很多时间和精力也没有解决的终极问题，好比物理学中的大统一和数学中的歌德巴赫猜想等。</p>
<p>目前为止这个问题还“啃不动”。但是，一个总的趋势、一个大方向是有的。人们普遍认为，P=NP不成立，也就是说，多数人相信，存在至少一个不可能有多项式级复杂度的算法的NP问题。人们如此坚信P≠NP是有原因的，就是在研究NP问题的过程中找出了一类非常特殊的NP问题叫做NP-完全问题，也即所谓的NPC问题。C是英文单词“完全”的第一个字母。正是NPC问题的存在，使人们相信P≠NP。下文将花大量篇幅介绍NPC问题，你从中可以体会到NPC问题使P=NP变得多么不可思议。</p>
<p>为了说明NPC问题，我们先引入一个概念——约化(Reducibility，有的资料上叫“归约”)。</p>
<p>简单地说，一个问题A可以约化为问题B的含义即是，可以用问题B的解法解决问题A，或者说，问题A可以“变成”问题B。《算法导论》上举了这么一个例子。比如说，算法导论》上举了这么一个例子。比如说，上举了这么一个例子。比如说，现在有两个问题:求解一个一元一次方程和求解一个一元二次方程。那么我们说，前者可以约化为后者，意即知道如何解一个一元二次方程那么一定能解出一元一次方程。我们可以写出两个程序分别对应两个问题，那么我们能找到一个“规则”，按照这个规则把解一元一次方程程序的输入数据变一下，用在解一元二次方程的程序上，两个程序总能得到一样的结果。这个规则即是:两个方程的对应项系数不变，一元二次方程的二次项系为0。按照这个规则把前一个问题转换成后一个问题，两个问题就等价了。同样地，我们可以说，Hamilton回路可以约化为TS”P问题(TravellingS”alesm)anProblem)，旅行商问题):在Hamilton回路问题中，两点相连即这两点距离为0，两点不直接相连则令其距离为1，于是问题转化为在TS”P问题中，是否存在一条长为0的路径。Hamilton回路存在当且仅当TS”P问题中存在长为0的回路。</p>
<p>“问题A可约化为问题B”有一个重要的直观意义:B的时间复杂度高于或者等于A的时间复杂度。也就是说，问题A不比问题B难。这很容易理解。既然问题A能用问题B来解决，倘若B的时间复杂度比A的时间复杂度还低了，那A的算法就可以改进为B的算法，两者的时间复杂度还是相同。正如解一元二次方程比解一元一次方程难，因为解决前者的方法可以用来解决后者。</p>
<p>很显然，约化具有一项重要的性质:约化具有传递性。如果问题A可约化为问题B，问题B可约化为问题C，则问题A一定可约化为问题C。这个道理非常简单，就不必阐述了。</p>
<p>现在再来说一下约化的标准概念就不难理解了:如果能找到这样一个变化法则，对任意一个程序A的输入，都能按这个法则变换成程序B的输入，使两程序的输出相同，那么我们说，问题A可约化为问题B。</p>
<p>当然，我们所说的“可约化”是指的可“多项式地”约化(Polynom)ial-tim)eReducible)，即变换输入的方法是能在多项式的时间里完成的。约化的过程只有用多项式的时间完成才有意义。</p>
<p>好了，从约化的定义中我们看到，一个问题约化为另一个问题，时间复杂度增加了，问题的应用范围也增大了。通过对某些问题的不断约化，我们能够不断寻找复杂度更高，但应用范围更广的算法来代替复杂度虽然低，但只能用于很小的一类问题的算法。再回想前面讲的P和NP问题，联想起约化的传递性，自然地，我们会想问，如果不断地约化上去，不断找到能“通吃”若干小NP问题的一个稍复杂的大NP问题，那么最后是否有可能找到一个时间复杂度最高，并且能“通吃”所有的NP问题的这样一个超级NP问题?答案居然是肯定的。也就是说，存在这样一个NP问题，所有的NP问题都可以约化成它。换句话说，只要解决了这个问题，那么所有的NP问题都解决了。这种问题的存在难以置信，并且更加不可思议的是，这种问题不只一个，它有很多个，它是一类问题。这一类问题就是传说中的NPC问题，也就是NP-完全问题。NPC问题的出现使整个NP问题的研究得到了飞跃式的发展。我们有理由相信，NPC问题是最复杂的问题。再次回到全文开头，我们可以看到，人们想表达一个问题不存在多项式的高效算法时应该说它“属于NPC问题”。此时，我的目的终于达到了，我已经把NP问题和NPC问题区别开了。到此为止，本文已经写了近5000字了，我佩服你还能看到这里来，同时也佩服一下自己能写到这里来。</p>
<p>NPC问题的定义非常简单。同时满足下面两个条件的问题就是NPC问题。首先，它得是一个NP问题;然后，所有的NP问题都可以约化到它。证明一个问题是NPC问题也很简单。先证明它至少是一个NP问题，再证明其中一个已知的NPC问题能约化到它(由约化的传递性，则NPC问题定义的第二条也得以满足;至于第一个NPC问题是怎么来的，下文将介绍)，这样就可以说它是NPC问题了。</p>
<p>既然所有的NP问题都能约化成NPC问题，那么只要任意一个NPC问题找到了一个多项式的算法，那么所有的NP问题都能用这个算法解决了，NP也就等于P了。因此，给NPC找一个多项式算法太不可思议了。因此，前文才说，“正是NPC问题的存在，使人们相信P≠NP”。我们可以就此直观地理解，NPC问题目前没有多项式的有效算法，只能用指数级甚至阶乘级复杂度的搜索。</p>
<p>顺便讲一下NP-Hard问题。NP-Hard问题是这样一种问题，它满足NPC问题定义的第二条但不一定要满足第一条(就是说，NP-Hard问题要比NPC问题的范围广)。NP-Hard问题同样难以找到多项式的算法，但它不列入我们的研究范围，因为它不一定是NP问题。即使NPC问题发现了多项式级的算法，NP-Hard问题有可能仍然无法得到多项式级的算法。事实上，由于NP-Hard放宽了限定条件，它将有可能比所有的NPC问题的时间复杂度更高从而更难以解决。</p>
<p>不要以为NPC问题是一纸空谈。NPC问题是存在的。确实有这么一个非常具体的问题属于NPC问题。下文即将介绍它。</p>
<p>下文即将介绍逻辑电路问题。这是第一个NPC问题。其它的NPC问题都是由这个问题约化而来的。因此，逻辑电路问题是NPC类问题的“鼻祖”。</p>
<p>逻辑电路问题是指的这样一个问题:给定一个逻辑电路，问是否存在一种输入使输出为True。什么叫做逻辑电路呢?一个逻辑电路由若干个输入，一个输出，若干“逻辑门”和密密麻麻的线组成。看下面一例，不需要解释你马上就明白了。</p>
<p><img src="https://s2.ax1x.com/2019/11/02/Kq8Z0x.md.png" alt="logic1"></p>
<p>这是个较简单的逻辑电路，当输入1、输入2、输入3分别为True、True、False或False、True、False时，输出为True。有输出无论如何都不可能为True的逻辑电路吗?有。下面就是一个简单的例子。</p>
<p><img src="https://s2.ax1x.com/2019/11/02/Kq8GnI.png" alt="logic2"></p>
<p>上面这个逻辑电路中，无论输入是什么，输出都是False。我们就说，这个逻辑电路不存在使输出为True的一组输入。回到上文，给定一个逻辑电路，问是否存在一种输入使输出为True，这即逻辑电路问题。</p>
<p>逻辑电路问题属于NPC问题。这是有严格证明的。它显然属于NP问题，并且可以直接证明所有的NP问题都可以约化到它(不要以为NP问题有无穷多个将给证明造成不可逾越的困难)。证明过程相当复杂，其大概意思是说任意一个NP问题的输入和输出都可以转换成逻辑电路的输入和输出(想想计算机内部也不过是一些0和1的运算)，因此对于一个NP问题来说，问题转化为了求出满足结果为True的一个输入(即一个可行解)。</p>
<p>有了第一个NPC问题后，一大堆NPC问题就出现了，因为再证明一个新的NPC问题只需要将一个已知的NPC问题约化到它就行了。后来，Hamilton回路成了NPC问题，TSP问题也成了NPC问题。现在被证明是NPC问题的有很多，任何一个找到了多项式算法的话所有的NP问题都可以完美解决了。因此说，正是因为NPC问题的存在，P=NP变得难以置信。P=NP问题还有许多有趣的东西，有待大家自己进一步的挖掘。攀登这个信息学的巅峰是我们这一代的终极目标。现在我们需要做的，至少是不要把概念弄混淆了。</p>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>数学</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux上可用的文献目录管理工具</title>
    <url>/title/4388879e/</url>
    <content><![CDATA[<p><img src="https://s2.ax1x.com/2019/10/30/K5JHDU.md.png" alt="bibliography"></p>
<a id="more"></a>

<p>针对文献管理，Linux有很多的解决方案。借助BibTex的力量，这些工具可以帮你导入引用源，然后自动生成一个结构化文献目录。这里给大家提供了一些Linux上参考文献管理工具的不完全列表。</p>
<ol>
<li><p>Zotero<br>这应该是最著名的参考文献聚集工具，Zotero作为一个浏览器的扩展插件。当然，它也有一个方便的Linux 独立工具。拥有强大的性能，Zotero 很容易上手，并且也可以和LibreOffice 或者是其他的文本编辑器配套使用来管理文档的参考文献。我个人很欣赏其操作界面和插件管理器。可惜的是，如果你对参考文献有很多不同的需求的话，很快就会发现 Zotero 功能有限。</p>
</li>
<li><p>JabRef<br>JabRef 是最先进的文献管理工具之一。你可以导入大量的格式，可以在其外部的数据库里查找相应的条目（像Google Scholar），并且能直接输出到你喜欢的编辑器。JabRef 可以很好的兼容你的运行环境，甚至也支持插件。最后还有一点，JabRef可以连接你自己的SQL 数据库。而唯一的缺点就是其学习使用的难度。</p>
</li>
<li><p>KBibTex<br>对于 KDE 使用者，这个桌面环境也拥有它自己专有的文献管理工具KBibTex。这个程序的品质，正如你所期望。程序可高度定制，通过快捷键就可以很好的操作和体验。你可以很容易找到副本、可以预览结果、也可以直接输出到LaTex 编辑器。而我认为这款软件最大的特色在于它集成了Bigsonomy ，Google Scholar ，甚至是你的Zotero账号。唯一的缺憾是界面看起来实在是有点乱。多花点时间设置软件可以让你使用起来得心应手。</p>
</li>
<li><p>Bibfilex<br>可以运行在Gtk 和Qt 环境中，Bibfilex是一个基于 Biblatex 的界面友好的工具。相对于JabRef 和KBibTex ，缺少了一些高级的功能，但这也让他更加的快速和轻巧。不用想太多，这绝对是快速做文献目录的一个聪明的选择。界面很舒服，仅仅反映了一些必要的功能。我给出了其使用的完全手册，你可以从官方的下载页面去获得。</p>
</li>
<li><p>Pybliographer<br>正如它的名字一样，Pybliographer是一个用 Python 写的非图形化的文献目录管理工具。我个人比较喜欢把Pybiographic 当做是图形化的前端。它的界面极其简洁和抽象。如果你仅仅需要输出少数的参考文献，而且也确实没有时间去学习更多的工具软件，那么 Pybliographer 确实是一个不错的选择。有一点点像 Bibfilex 的是，它是以让用户方便、快速的使用为目标的。</p>
</li>
<li><p>Referencer<br>这应该是我归纳这些时候的一个最大的惊喜，Referencer 确实是让人眼前一亮。完美兼容 Gnome ，它可以查找和导入你的文档，然后在网上查询他们的参考文献，并且输出到 LyX ，非常的漂亮和设计良好。为数不多的几个快捷键和插件让它拥有了图书馆的风格。</p>
</li>
<li><p>Mendeley<br>用了Mendeley，一拖一点完事。Mendeley的PDF导入与识别能力非常强大，尤其是对期刊全文PDF。只要将PDF文件拖入Mendeley，它能自动识别Titile， Author， Publication， Year，但有时候识别是不准确的。</p>
</li>
<li><p>Bibus<br>BiBus基于Python，Windows和Linux版本都有，Ubuntu下安装Bibus只要敲 sudo apt-get install bibus。要注意的一点是第一次使用前要选择数据库，MySQL或SQLite任选其一。如果是个人使用，最好选择SQLite，具体按提示搞就OK了。然后就需要导入文献数据库，去PubMed主页，搜索关键词，在搜索结果列表中选中一堆你想要的文章，把文字信息导入某个txt文件，打开BiBus(在Applications-Office-BiBus），选择菜单File-Import-Medline，选择txt文件，数据库就显示在BiBus左侧的Import Buffer目录了。使用：点击每篇文献，下方就会显示作者标题摘要等信息；你可以拖动文献到左侧References目录，可以右键点击References目录，选择Add Child增加子目录，也可以手动新建文献资料。</p>
</li>
<li><p>Docear<br>配合Zotero使用效果最好，这Docear是基于思维导图形式的文献管理工具，给人耳目一新的感觉，这也是Docear的一大特色，但是Docear的文献管理方面不如Zotero。</p>
</li>
</ol>
<h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p><a href="https://blog.csdn.net/yangtou882/article/details/51296120" target="_blank" rel="noopener">Zoteror和Docear</a></p>
<p>via: <a href="http://xmodulo.com/reference-management-software-linux.html" target="_blank" rel="noopener">http://xmodulo.com/reference-management-software-linux.html</a> ,原文有增删</p>
]]></content>
      <categories>
        <category>科研</category>
      </categories>
      <tags>
        <tag>tools</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux下自定义位置安装TeXLive2020</title>
    <url>/title/46ed9a72/</url>
    <content><![CDATA[<p><img src="https://s2.ax1x.com/2019/10/30/K5J53q.md.jpg" alt="texlive"></p>
<a id="more"></a>

<h2 id="1-从清华大学的镜像处下载"><a href="#1-从清华大学的镜像处下载" class="headerlink" title="1.从清华大学的镜像处下载"></a>1.从清华大学的镜像处下载</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">https://mirrors.tuna.tsinghua.edu.cn/CTAN/systems/texlive/Images/</span><br></pre></td></tr></table></figure>

<h2 id="2-安装图像化界面必备的perl-tk组件"><a href="#2-安装图像化界面必备的perl-tk组件" class="headerlink" title="2.安装图像化界面必备的perl-tk组件"></a>2.安装图像化界面必备的perl-tk组件</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo apt-get install perl-tk</span><br></pre></td></tr></table></figure>

<h2 id="3-把下载好的-iso文件挂载到-mnt下"><a href="#3-把下载好的-iso文件挂载到-mnt下" class="headerlink" title="3.把下载好的.iso文件挂载到/mnt下"></a>3.把下载好的.iso文件挂载到/mnt下</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo mount -t iso9660 -o loop texlive2020-20200406.iso /mnt</span><br></pre></td></tr></table></figure>

<h2 id="4-准备从图形界面安装"><a href="#4-准备从图形界面安装" class="headerlink" title="4.准备从图形界面安装"></a>4.准备从图形界面安装</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd /mnt</span><br><span class="line">sudo ./install-tl -gui</span><br></pre></td></tr></table></figure>

<h2 id="5-如果要修改安装位置请执行-目录下面空间够用也可不用管这一步"><a href="#5-如果要修改安装位置请执行-目录下面空间够用也可不用管这一步" class="headerlink" title="5.如果要修改安装位置请执行(/目录下面空间够用也可不用管这一步)"></a>5.如果要修改安装位置请执行(/目录下面空间够用也可不用管这一步)</h2><pre><code>在&quot;TEXDIR(主TeX目录)&quot; 一行后点修改，填入新的位置(如/home/texlive2020)</code></pre><h2 id="6-可以瘦身安装-空间够此步也可忽略"><a href="#6-可以瘦身安装-空间够此步也可忽略" class="headerlink" title="6.可以瘦身安装(空间够此步也可忽略)"></a>6.可以瘦身安装(空间够此步也可忽略)</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;安装字体/宏包文档目录树&quot;　切换为否</span><br><span class="line">&quot;安装字体/宏包源代码目录树&quot;　切换为否</span><br><span class="line">上面两个操作会舍弃安装文档和源代码，实际上大部分人也不会看，安装了浪费2G左右空间</span><br></pre></td></tr></table></figure>
<h2 id="7-点击安装TeX-Live"><a href="#7-点击安装TeX-Live" class="headerlink" title="7.点击安装TeX Live"></a>7.点击安装TeX Live</h2><h2 id="8-卸载镜像文件"><a href="#8-卸载镜像文件" class="headerlink" title="8.卸载镜像文件"></a>8.卸载镜像文件</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo unmount /mnt</span><br></pre></td></tr></table></figure>

<h2 id="9-配置字体-不配置的话，无法使用TeXLive自带字体"><a href="#9-配置字体-不配置的话，无法使用TeXLive自带字体" class="headerlink" title="9.配置字体(不配置的话，无法使用TeXLive自带字体)"></a>9.配置字体(不配置的话，无法使用TeXLive自带字体)</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo cp /home/texlive2020/2020/texmf-var/fonts/conf/texlive-fontconfig.conf /etc/fonts/conf.d/09-texlive.conf</span><br><span class="line">sudo fc-cache -fsv (此步执行时间稍长)</span><br></pre></td></tr></table></figure>

<h2 id="10-环境变量设置"><a href="#10-环境变量设置" class="headerlink" title="10.环境变量设置"></a>10.环境变量设置</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">打开~/.bashrc 在最后加入如下内容(具体路径安按照自己的系统修改)</span><br><span class="line"></span><br><span class="line">	export TexMan=&quot;/home/texlive2020/2020/texmf-dist/doc/man&quot;</span><br><span class="line">	export TexInfo=&quot;/home/texlive2020/2020/texmf-dist/doc/info&quot;</span><br><span class="line">	export TexLive=&quot;/home/texlive2020/2020/bin/x86_64-linux&quot;</span><br><span class="line">	export MANPATH=&quot;$MANPATH:$TexMan&quot;</span><br><span class="line">	export INFOPATH=&quot;$INFOPATH:$TexInfo&quot;</span><br><span class="line">	export PATH=&quot;$PATH:$TexLive&quot;</span><br><span class="line"></span><br><span class="line">执行 source ~/.bashrc</span><br></pre></td></tr></table></figure>

<h2 id="11-更新源配置"><a href="#11-更新源配置" class="headerlink" title="11.更新源配置"></a>11.更新源配置</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo tlmgr option repository https://mirrors.tuna.tsinghua.edu.cn/CTAN/systems/texlive/tlnet</span><br><span class="line">此步如果出现sudo;找不到命令 tlmgr，意味着执行时环境变量不对，请执行</span><br><span class="line">(1) sudo vi /etc/sudoers</span><br><span class="line">(2) 给如下内容加一个感叹号</span><br><span class="line">	Defaults	env_reset </span><br><span class="line">	Defaults	!env_reset</span><br><span class="line">(3) 再vi ~/.bashrc 加入下面这行到最后</span><br><span class="line">(4) alias sudo=&apos;sudo env PATH=$PATH&apos;</span><br><span class="line">(5) 保存退出执行 source ~/.bashrc</span><br><span class="line">此时再执行第一条命令 sudo tlmgr option ....</span><br></pre></td></tr></table></figure>

<h2 id="12-更新宏包"><a href="#12-更新宏包" class="headerlink" title="12.更新宏包"></a>12.更新宏包</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo tlmgr update --self --all </span><br><span class="line">要更新几百个，时间较长</span><br></pre></td></tr></table></figure>

<h2 id="13-解决软件安装依赖问题"><a href="#13-解决软件安装依赖问题" class="headerlink" title="13.解决软件安装依赖问题"></a>13.解决软件安装依赖问题</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(1) sudo apt-get install aptitude</span><br><span class="line">(2) sudo aptitude install equivs</span><br><span class="line">(3) sudo mkdir /tmp/tl-equivs &amp;&amp; cd /tmp/tl-equivs</span><br><span class="line">(4) equivs-control texlive-local</span><br><span class="line">(5) 浏览器打开https://www.tug.org/texlive/files/debian-equivs-2020-ex.txt并复制所有内容</span><br><span class="line">(6) sudo vi texlive-local 将从浏览器拷贝的内容粘贴进去并保存退出</span><br><span class="line">(7) sudo equivs-build texlive-local</span><br><span class="line">(8) sudo apt-get freeglut3</span><br><span class="line">(9) sudo dpkg -i texlive-local_2020-1_all.deb</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>排版设计</category>
      </categories>
      <tags>
        <tag>Tex</tag>
      </tags>
  </entry>
  <entry>
    <title>关系数据库，非关系数据库，云原生数据库</title>
    <url>/title/d8ef31cc/</url>
    <content><![CDATA[<p><img src="https://s2.ax1x.com/2019/10/30/K5JgHg.md.png" alt="database"></p>
<a id="more"></a>

<h1 id="一-概述"><a href="#一-概述" class="headerlink" title="一 概述"></a>一 概述</h1><p>最近在研究学习数据库知识，发现市面上太多数据库及其书籍，而且体系混乱，越看越糊涂，故特意了解了数据库的发展史。</p>
<p>最早提出关系型数据库原理的是E.F.Codd，他在其论文<a href="https://www.seas.upenn.edu/~zives/03f/cis550/codd.pdf" target="_blank" rel="noopener">A Relational Model of Data for Large Shared Data Banks</a>中详述了关系数据库的原理和实现，我看了下论文，和今天的数据库简直一模一样。</p>
<p>而非关系数据库NoSQL一词首先是Carlo Strozzi在1998年提出来的，指的是他开发的一个没有SQL功能，轻量级的，开源的关系型数据库。这个定义跟我们现在对NoSQL的定义有很大的区别，它本来指的就是“没有SQL”的数据库，但是NoSQL的发展慢慢偏离了初衷，我们要的不是“no sql”，而是“no relational”，也就是我们现在常说的非关系型数据库。</p>
<p>2009年初，Johan Oskarsson举办了一场关于开源分布式数据库的讨论，Eric Evans在这次讨论中再次提出了NoSQL一词，用于指代那些非关系型的，分布式的，且一般不保证遵循ACID原则的数据存储系统。Eric Evans使用NoSQL这个词，并不是因为字面上的“没有SQL”的意思，他只是觉得很多经典的关系型数据库名字都叫“xxxSQL”,所以为了表示跟这些关系型数据库在定位上的截然不同，就是用了“NoSQL“一词。</p>
<p>随着社会的发展，不同时代对数据处理和存储的需求在不断变化，故而可以预见的是，数据库会不断有新品种诞生，老品种过时退出市场。今天历史偶然地走上了大数据和智能的时代，所以未来数据一定是很重要的一块，而数据库由于其特殊地位，应当得到极大的发展。我预计，未来10-20年应该会诞生数种新的广泛流行使用的数据库，满足的需求应当是切合时代要求的。中国的数据库厂商应该要有眼光锁定未来市场。为什么? 因为我们有最多的人口，倘使10年后每个中国人都要接入网络，每天产生1G的数据，那么一年，14甚至15亿人口是什么概念？古代有县志，史书。而现代人也当考虑如何将我们丰富的生活和文化保留给后人研究，所以大型的数据库必然会出现，建立人类数据库势在必行，可能下一个创业点也在此。</p>
<p>在我的认识里，数据库除了存储还要满足对关系的映射，这里关系包含传统的关系数据库关系，也包含非关系数据库的关系。嗯？非关系数据库还有关系？是的，没有消息就是消息，没有关系也是关系。数据总是有结构存在的，目前的成熟产品不一定能应对未来的场景，此间到底还有多少可以挖掘的知识就需要一代代人慢慢摸索。<br>若干年来，数据库一直锁定在大厂商手里，下面略谈一些。</p>
<h1 id="二-数据库大厂"><a href="#二-数据库大厂" class="headerlink" title="二 数据库大厂"></a>二 数据库大厂</h1><p>做数据库的大厂商目前有七家(排名不分先后)。</p>
<blockquote>
<p>   <strong>SAP</strong>，企业资源计划系统里的佼佼者。<br>    <strong>AWS</strong>，Amazon巨头，卖东西卖出大机遇。<br>    <strong>IBM</strong>，百年老牌，现代计算机结构的奠基者。<br>    <strong>Google</strong>，不作恶，偏学好，引领时代精神。<br>    <strong>Oracle</strong>，甲骨文，专注于闭源的杰出代表。<br>    <strong>Aliyun</strong>，阿里巴巴，人人夸。<br>    <strong>MicroSoft</strong>，Windows 发扬者。</p>
</blockquote>
<h1 id="二-关系型数据库"><a href="#二-关系型数据库" class="headerlink" title="二 关系型数据库"></a>二 关系型数据库</h1><p>常见的关系数据库如下：</p>
<blockquote>
<p>   <strong>DB2</strong> 是IBM一种分布式数据库解决方案，是IBM开发的一种大型关系型数据库平台。支持多用户或程序在同一条SQL 语句中查询不同database甚至DBMS中的数据。<br>    <strong>Oracle</strong> 是甲骨文公司的一款关系数据库管理系统。它是在数据库领域一直处于领先地位的产品。可以说Oracle数据库系统是目前世界上流行的关系数据库管理系统。<br>    <strong>MySQL</strong> 是一种开放源代码的关系型数据库管理系统，使用最常用的数据库管理语言结构化查询语言（SQL）进行数据库管理。<br>    <strong>MariaDB</strong> 是MySQL的一个分支，主要由开源社区在维护，由MySQL创始人开发。MariaDB完全兼容MySQL，使之能轻松成为MySQL的代替品。使用XtraDB来代替MySQL的InnoDB。<br>    <strong>SQLite</strong> 是一款轻型的数据库，遵守ACID的关系型数据库管理系统，包含在一个相对小的C库中。设计目标是嵌入式，它占用资源非常的低，在嵌入式设备中，可能只需几百K内存就够了。<br>    <strong>Access</strong> 是由微软发布的关系数据库管理系统。它结合了MicrosoftJet Database Engine和图形用户界面两项特点，是Microsoft Office的系统程序之一。<br>    <strong>PostgreSQL</strong> 是以加州大学伯克利分校计算机系开发的POSTGRES(现已更名为PostgreSQL)为基础的对象关系型数据库管理系统（ORDBMS）。<br>    <strong>SQL Server</strong> 同样是微软公司推出的一种关系型数据库系统。是一个可扩展的、高性能的、为分布式客户机/服务器计算所设计的数据库管理系统，实现了与WindowsNT的有机结合，提供了基于事务的企业级信息管理系统方案。<br>    <strong>Teradata</strong> 整体上是按Shared Nothing 架构体系进行组织的，他的定位就是大型数据仓库系统，定位比较高。<br>    <strong>Ingres</strong> 是比较早的数据库系统，开始于加利福尼亚大学柏克莱分校的一个研究项目，该项目开始于70年代早期，在80年代早期结束。从80年代中期，在Ingres基础上产生了很多商业数据库软件，包括Sybase、MicrosoftSQL Server、NonStop SQL、Informix 。<br>    <strong>Informix</strong> 是IBM公司出品的关系数据库管理系统（RDBMS）家族。作为一个集成解决方案，它被定位为作为IBM在线事务处理（OLTP）旗舰级数据服务系统。<br>    <strong>Sybase</strong> 美国Sybase公司研制的一种关系型数据库系统，是一种典型的UNIX或WindowsNT平台上客户机/服务器环境下的大型数据库系统。<br>    <strong>FoxPro</strong> 是一种功能强大的数据库，是当今最受欢迎的数据库管理软件之一。FoxPro数据库最初由美国Fox公司1988年推出，1992年Fox公司被Microsoft公司收购。<br>    <strong>Percona</strong>为MySQL数据库服务器进行了改进，在功能和性能上较MySQL有着很显著的提升。该版本提升了在高负载情况下的InnoDB的性能，为DBA提供一些非常有用的性能诊断工具。<br>    <strong>Cache</strong> 是美国Intersystems公司产品，后关系型数据库(Post Relational database)中的领头羊。Cache数据库在国外特别是医疗领域，在美国和欧洲的HIS系统(医疗卫生管理信息系统)中，所占的比例最大，医疗界首选。</p>
</blockquote>
<h1 id="三-非关系型数据库"><a href="#三-非关系型数据库" class="headerlink" title="三 非关系型数据库"></a>三 非关系型数据库</h1><p>非关系型里有key-value型的，也有做搜索的，还有做文档和图形和扩展式的。<br>常见的非关系数据库如下：</p>
<blockquote>
<p>   <strong>Redis</strong>     一个开源的使用ANSI C语言编写、支持网络、可基于内存亦可持久化的日志型、Key-Value数据库，并提供多种语言的API。<br>    <strong>Neo4 j 一个高性能的,NOSQL图形数据库，它将结构化数据存储在网络上而不是表中。它是一个嵌入式的、基于磁盘的、具备完全的事务特性的Java持久化引擎。<br>    *<em>Ria k 一个分布式的存储文档型数据库。<br>    *</em>HBas e 一个分布式的、面向列的开源数据库，源于Fay Chang的Google论文“Bigtable：一个结构化数据的分布式存储系统”。HBase是Apache的Hadoop项目的子项目。<br>    *<em>Flar e 由日本第二大SNS网站green.jp开发，支持scale，可动态添加或删除数据库服务节点。<br>    *</em>MongoDB</strong> 一个基于分布式文件存储的数据库。由C++语言编写。旨在为WEB应用提供可扩展的高性能数据存储解决方案。<br>    <strong>Couchbase</strong>  CouchDB和Membase合并后的产品，先进的Cache系统，由C/C++开发。<br>    <strong>Memcached</strong>  一套分布式的高速缓存系统，由LiveJournal的Brad Fitzpatrick开发。<br>    <strong>DynamoDB</strong> 被设计成用来托管的NoSQL数据库服务、可预期的性能、可实现无缝扩展性和可靠性等核心问题。<br>    <strong>Hazelcast</strong> 一个开源的可嵌入式数据网格，可以把它看做是内存数据库，但与Redis有不同。<br>    <strong>Accumulo</strong> 一个基于Google’s BigTable的高扩展性存储数据库。采用java编写并且操作于HDFS系统上。</p>
</blockquote>
<pre><code>**Cassandra** 一套开源分布式NoSQL数据库系统。最初由Facebook开发，用于储存收件箱等简单格式数据，集GoogleBigTable的数据模型与Amazon Dynamo的完全分布式的架构于一身。
**Cloundant** 省却维护人员在数据库管理、维护和调优方面的工作，而不需要考虑数据库管理以及后续随着数据量增长带来的扩展性问题。麻省理工的三位物理学家在寻找上帝粒子的科学实验中将CouchDB进行了大量定制和改进，从而形成了Cloudant。
**DataStax** 基于开源的“NoSQL”数据库Apache Cassandra，将Cassandra与Hadoop进行了集成。
**FlockDB**  一个存储图数据的分布式数据库，图数据库的存储对象是图论里面的图，而非图片。Twitter使用它来存储人与人之间的关系图。
**MarkLogic**  企业级的NoSQL数据库。是一个集存储、管理、搜索JSON和XML文档和图形数据的multi-model NoSWL数据库。
**Voldemort** 一个分布式键-值（Key-value）存储系统，是Amazon Dynamo的一个开源克隆。
**Twemproxy** 引入代理层，可将后端的多台Redis或Memcached实例进行统一管理与分配，使应用程序只需要在Twemproxy上进行操作，而不用关心后面具体有多少个真实的 Redis 或 Memcached 存储。
**CockroachDB**一款开源的分布式数据库，具有NoSQL对海量数据的存储管理能力，又保持了传统数据库支持的ACID和SQL等，还支持跨地域、去中心、高并发、多副本强一致和高可用等特性。
**Elasticsearch** 一个接近实时的搜索平台，从索引这个文档到这个文档能够被搜索到只有一个轻微的延迟。
**Azure Cosmos DB** 由Microsoft提供的全球分布式多模型数据库。</code></pre><h1 id="NewSQL-新技术"><a href="#NewSQL-新技术" class="headerlink" title="NewSQL 新技术"></a>NewSQL 新技术</h1><p>还有一些新出现的数据库，应对目的不同。</p>
<blockquote>
<p>   <strong>TiDB</strong> 是国内PingCAP团队开发的一个分布式SQL数据库，其灵感来自于Google的F1和Google spanner, TiDB支持包括传统RDBMS和NoSQL的特性。<br>    <strong>LMDB</strong> 全称是Lightning Memory-Mapped Database(快如闪电的内存映射数据库)，它的文件结构简单，包含一个数据文件和一个锁文件。<br>    <strong>NuoDB</strong> 针对云伸缩设计的关系型数据库。重新定义了关系型数据库技术，它是针对弹性云系统而非单机系统设计的，因此可以将其看作是一个多用户、弹性、按需的分布式关系型数据库管理系统。<br>    <strong>VoltDB</strong> 一个内存数据库，提供了 NoSQL 数据库的可伸缩性和传统关系数据库系统的 ACID 一致性。<br>    <strong>TokuDB</strong> 是TokuTek公司研发的新引擎，支持事务/MVCC，数据压缩功能一流，支持异步写入数据功能。索引结构采用fractal tree数据结构，是buffer tree的变种，写入性能优异，适合写多读少的场景。<br>    <strong>MemSQL</strong> 内存数据库，可以横跨多个商用节点（服务器）扩展MemSQL数据集。<br>    <strong>Spanner</strong> 是谷歌公司研发的、可扩展的、多版本、全球分布式、同步复制数据库。<br>    <strong>LevelDB</strong> 是google实现的一个开源且非常高效的键值对存储数据库。<br>    <strong>Clustrix</strong> 是一款分布式数据库系统，它既支持最简单的Key-Value格式，又兼容MySQL的功能，同时能非常简单通过添加新的节点来存储数十亿条数据。<br>    <strong>HybridDB</strong> 是面向在线事务（OLTP）和在线分析（OLAP）混合场景的关系型数据库。HybridDB采用一份数据存储来进行OLTP和OLAP处理，解决了以往需要把一份数据多次复制来分别进行业务交易和数据分析的问题。<br>    <strong>ScaleBase</strong> 是一款基于 MySQL 而构建的动态数据库集群，已针对云技术进行了优化。该解决方案可实现 MySQL 关系数据的完整性，能使您向外扩展到无限数量的用户、数据和事务。<br>    <strong>SequoiaDB</strong> 是一款支持SQL、高并发、实时性、分布式、可扩展、灵活存储的操作型NewSQL数据库，现已开源。<br>    <strong>Tokyo Cabinet(TC)</strong> 是日本人平林干雄开发的一款DBM数据库读写非常快。 </p>
</blockquote>
<h1 id="四-云源生数据库"><a href="#四-云源生数据库" class="headerlink" title="四 云源生数据库"></a>四 云源生数据库</h1><p>云时代诞生的新型数据库，目前还处在发展阶段。</p>
<blockquote>
<p>   <strong>Aurora</strong>  亚马逊推出的云原生数据库。<br>    <strong>PolarDB</strong> 阿里产品。<br>    <strong>CynosDB</strong> 腾讯产品。</p>
</blockquote>
<h1 id="五-结语"><a href="#五-结语" class="headerlink" title="五 结语 "></a>五 结语 </h1><p>数据库种类实在太多，在此只列举了一部分，当然，大部分人能用得到的就一部分。<br>看到这些数据库，感觉自己知识实在匮乏，对很多东西理解太简单，对新技术的领悟太浅显。<br>希望能在数据这块好好研究，毕竟未来可期。</p>
<h1 id="六-参考资源"><a href="#六-参考资源" class="headerlink" title="六 参考资源"></a>六 参考资源</h1><p>[1] <a href="https://db-engines.com/en/ranking" target="_blank" rel="noopener">数据库排名</a></p>
<p>[2] <a href="https://www.infoq.cn/article/cloud-native-data" target="_blank" rel="noopener">什么是“云原生”数据</a></p>
<p>[3] <a href="https://zhuanlan.zhihu.com/p/48725521" target="_blank" rel="noopener">阿里云数据库入选Gartner</a></p>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>IT</tag>
        <tag>SQL</tag>
      </tags>
  </entry>
  <entry>
    <title>Python Matplotlib 画图中文乱码解决</title>
    <url>/title/2cca9645/</url>
    <content><![CDATA[<p><img src="https://s2.ax1x.com/2019/10/30/K5JrgP.md.png" alt="matplotlib"></p>
<a id="more"></a>

<p>用matplotlib画图出现中文符号乱码，东改改西改改都不对，实际是没找到中文字体，应对方法如下。</p>
<h1 id="1-找到宋体"><a href="#1-找到宋体" class="headerlink" title="1.找到宋体"></a>1.找到宋体</h1><p> 拷贝Window/Fonts/simhei.ttf 到 /usr/local/lib/python2.7(3.6)/dist-packages/matplotlib/mpl-data/fonts/ttf</p>
<h1 id="2-删除缓冲文件"><a href="#2-删除缓冲文件" class="headerlink" title="2.删除缓冲文件"></a>2.删除缓冲文件</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo rm -rf ~/.cache/matplotlib</span><br></pre></td></tr></table></figure>

<h1 id="3-设置字体配置文件"><a href="#3-设置字体配置文件" class="headerlink" title="3.设置字体配置文件"></a>3.设置字体配置文件</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo vim /usr/local/lib/python2.7(3.6)/dist-packages/matplotlib/mpl-data/matplotlibrc</span><br><span class="line">取消这三行注释并加入值:</span><br><span class="line"></span><br><span class="line">(1) font.family     : sans-serif</span><br><span class="line">(2) font.sans-serif : SimHei, (加入SimHei,原有的字体不动)</span><br><span class="line">(2) axes.unicode_minus  : False</span><br></pre></td></tr></table></figure>

<h1 id="4-命令行进入python并尝试导入"><a href="#4-命令行进入python并尝试导入" class="headerlink" title="4.命令行进入python并尝试导入"></a>4.命令行进入python并尝试导入</h1><p>(导入后要稍等字体刷新)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">:~$ python</span><br><span class="line">shieber@Kew:~$ python</span><br><span class="line">Python 3.6.7 (default, Oct 22 2018, 11:32:17)</span><br><span class="line">[GCC 8.2.0] on linux</span><br><span class="line">Type &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.</span><br><span class="line">&gt;&gt;&gt; import matplotlib.pyplot as plt</span><br></pre></td></tr></table></figure>

<h1 id="5-针对python3"><a href="#5-针对python3" class="headerlink" title="5.针对python3"></a>5.针对python3</h1><p>和python2一样的操作</p>
<blockquote>
<p>拷贝字体 /usr/local/lib/python3.6/dist-packages/matplotlib/mpl-data/fonts/ttf</p>
</blockquote>
<blockquote>
<p>修改配置文件/usr/local/lib/python3.6/dist-packages/matplotlib/mpl-data/matplotlibrc</p>
</blockquote>
]]></content>
      <categories>
        <category>编程语言</category>
      </categories>
      <tags>
        <tag>IT</tag>
      </tags>
  </entry>
  <entry>
    <title>汉化版Python代码</title>
    <url>/title/236a501e/</url>
    <content><![CDATA[<p><img src="https://s1.ax1x.com/2019/11/19/MRi3q0.md.png" alt="python"> </p>
<a id="more"></a>

<p>前段时间看到有人诘问：你以为用中文你就能写好代码？遂思考，代码要是用中文书写该是何样？脑洞大开一把！</p>
<h2 id="用中文和英文分别写一个爬虫"><a href="#用中文和英文分别写一个爬虫" class="headerlink" title="用中文和英文分别写一个爬虫"></a>用中文和英文分别写一个爬虫</h2><p><strong>中文版</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">阴!/用户/二进制/蟒蛇2</span><br><span class="line">阴 -*- 编码:太极八卦码 -*-</span><br><span class="line">阴 时间：西元2019年三月二十三日	</span><br><span class="line">阴 作者：一名脱离低级趣味的人</span><br><span class="line">阴 系统：乌邦图</span><br><span class="line"></span><br><span class="line">阴阴阴阴阴阴 蟒蛇2 防止编码错误 阴阴阴阴阴阴</span><br><span class="line">导入 系统环境</span><br><span class="line">重加载(系统环境)</span><br><span class="line">系统环境.设置默认编码(&apos;太极八卦码&apos;)</span><br><span class="line"></span><br><span class="line">阴阴阴阴阴阴 蟒蛇2 爬虫，相关库 阴阴阴阴阴阴</span><br><span class="line"></span><br><span class="line">导入 请求</span><br><span class="line">导入 正则表达式</span><br><span class="line">导入 统一资源定位符解析器</span><br><span class="line">从 鲜汤4  导入 鲜汤</span><br><span class="line">从 多线程.管理器 导入 基本管理器</span><br><span class="line"></span><br><span class="line">阴阳阳阳阳阳 蟒蛇 爬虫,五大模块 阳阳阳阳阳阳阴</span><br><span class="line"></span><br><span class="line">类 下载器()</span><br><span class="line">	定义 __初始化__(朕):</span><br><span class="line">		阴 下载的数量</span><br><span class="line">		朕.已下载量= 0</span><br><span class="line"></span><br><span class="line">	定义 下载(朕，统一资源定位符):</span><br><span class="line">		天地玄黄</span><br><span class="line">			超文本标记文档下载处理函数</span><br><span class="line">		天地玄黄</span><br><span class="line"></span><br><span class="line">		若 统一资源定位符 乃 空:</span><br><span class="line">			返回 空</span><br><span class="line">		</span><br><span class="line">		浏览器_代理 = &apos;莫栽啦/4.0 (兼容; 微软 新技术平台)&apos;</span><br><span class="line">		浏览器_头	= &#123;&apos;浏览器_代理&apos;:浏览器_代理&#125;</span><br><span class="line">		反馈		= 请求.抓取(统一资源定位符,头=浏览器_头)</span><br><span class="line">		</span><br><span class="line">		若 200 == 反馈.状态码:</span><br><span class="line">			反馈.编码 = &apos;太极八卦码&apos;</span><br><span class="line">			朕.已下载量 += 1</span><br><span class="line">			返回 反馈.文本</span><br><span class="line"></span><br><span class="line">		返回 空</span><br><span class="line"></span><br><span class="line">类 超文本标记语言解析器():</span><br><span class="line">	天地玄黄</span><br><span class="line">		解析器:针对不同的</span><br><span class="line">    	目标每次重写相关部分</span><br><span class="line">	天地玄黄</span><br><span class="line"></span><br><span class="line">	定义 __初始化__(朕):</span><br><span class="line">		阴 处理的数量	</span><br><span class="line">		朕.抓过的 = 0</span><br><span class="line"></span><br><span class="line">	定义 解析器(朕,网页定位符,超文本内容):</span><br><span class="line">		天地玄黄</span><br><span class="line">			网页解析</span><br><span class="line">		天地玄黄</span><br><span class="line"></span><br><span class="line">		若 网页统一资源定位符 乃　空 或 超文本内容 乃 空:</span><br><span class="line">			返回 空</span><br><span class="line"></span><br><span class="line">		汤   = 鲜汤(超文本内容,&apos;超文本.解析器&apos;)</span><br><span class="line">		新定位符 = 朕._抓_新_网页(汤)</span><br><span class="line">		新数据   = 朕._抓_新_数据(新定位符，汤)</span><br><span class="line">		朕.抓过的 += 1</span><br><span class="line">		返回 新定位符,新数据</span><br><span class="line">	</span><br><span class="line">	定义 _抓_新_定位符(朕,汤):</span><br><span class="line">		天地玄黄</span><br><span class="line">			内部函数:提取页面的url集合</span><br><span class="line">		天地玄黄</span><br><span class="line"></span><br><span class="line">		阴 百度百科的基站</span><br><span class="line">		根定位符 = &apos;https://baike.baidu.com&apos;</span><br><span class="line">		新定位符 = 集合()</span><br><span class="line"></span><br><span class="line">		阴 以下内容需要根据自己的需求改写	</span><br><span class="line">		阴阳阳阳阳阳阳阳阳阳阳阳阳阳阳阳阳</span><br><span class="line">		链接集合 = 汤.全抓(&apos;a&apos;,href=正则表达式.编译(r&apos;/item/(.+)/\d+&apos;))</span><br><span class="line">		阴阳阳阳阳阳阳阳阳阳阳阳阳阳阳阳阳</span><br><span class="line"></span><br><span class="line">		对 链接 属于 链接集合:</span><br><span class="line">			新定位符 = 链接[&apos;href&apos;]</span><br><span class="line">			全新定位符 =  统一资源定位符解析器.定位符拼接(根定位符,新定位符)</span><br><span class="line">			新定位符.加入(全新定位符)</span><br><span class="line">		</span><br><span class="line">		返回 新定位符</span><br><span class="line"></span><br><span class="line">	定义 _抓_新_数据(朕,网页定位符,汤):</span><br><span class="line">		天地玄黄</span><br><span class="line">			内部函数:提取页面的标题，摘要</span><br><span class="line">		天地玄黄</span><br><span class="line"></span><br><span class="line">		新数据集 = &#123;&#125;</span><br><span class="line">		新数据集[&apos;定位符&apos;] = 网页定位符</span><br><span class="line"></span><br><span class="line">		阴 以下内容需要根据自己的需求改写	</span><br><span class="line">		阴阳阳阳阳阳阳阳阳阳阳阳阳阳阳阳阳</span><br><span class="line">		标题= 汤.抓(&apos;dd&apos;,class_=&quot;lemmaWgt-lemmaTitle-title&quot;).抓(&apos;h1&apos;) </span><br><span class="line">		新数据集[&apos;标题&apos;] = 标题.抓_文本()</span><br><span class="line">		阴阳阳阳阳阳阳阳阳阳阳阳阳阳阳阳阳</span><br><span class="line"></span><br><span class="line">		阴 以下内容需要根据自己的需求改写	</span><br><span class="line">		阴阳阳阳阳阳阳阳阳阳阳阳阳阳阳阳阳</span><br><span class="line">		概况 = 汤.抓(&apos;div&apos;,class_=&quot;para&quot; )</span><br><span class="line">		新数据集[&apos;概况&apos;] = 概况.抓_文本()</span><br><span class="line">		阴阳阳阳阳阳阳阳阳阳阳阳阳阳阳阳阳</span><br><span class="line"></span><br><span class="line">		返回 新数据集</span><br><span class="line"></span><br><span class="line">类　爬虫节点():</span><br><span class="line">	定义 __初始化__(朕):</span><br><span class="line">		阴 注册获取队列方法</span><br><span class="line">		基本管理器.注册(&apos;获取_任务_队列&apos;)</span><br><span class="line">		基本管理器.注册(&apos;获取_结果_队列&apos;)</span><br><span class="line"></span><br><span class="line">		阴 连接到网络端口</span><br><span class="line">		服务器地址 = &apos;127.0.0.1&apos;</span><br><span class="line">		打印 &quot;连接到%字符...&quot;%服务器地址</span><br><span class="line"></span><br><span class="line">		阴 设置口令</span><br><span class="line">		朕.管理器 = 基本管理器(地址=(服务器地址, 8001),授权秘钥=&apos;太少老君急急如律令&apos;) </span><br><span class="line"></span><br><span class="line">		阴 连接到本地回环127.0.0.1</span><br><span class="line">		朕.管理器.连接()</span><br><span class="line"></span><br><span class="line">		阴 获取队列</span><br><span class="line">		朕.任务= 朕.管理器.抓_任务_队列()</span><br><span class="line">		朕.结果= 朕.管理器.抓_结果_队列()</span><br><span class="line"></span><br><span class="line">		阴 初始化下载器和解析器</span><br><span class="line">		朕.下载器 = 下载器()</span><br><span class="line">		朕.解析器 = 超文本解析器()</span><br><span class="line">		打印 &quot;初始化 成功&quot;</span><br><span class="line">	</span><br><span class="line">	定义 爬(朕):</span><br><span class="line">		阴 设置起始位置</span><br><span class="line">		页面 = 0</span><br><span class="line">		当 真:</span><br><span class="line">			阴 主循环，开启爬虫</span><br><span class="line">			尝试:</span><br><span class="line">				若 非 朕.任务.空的():</span><br><span class="line">					新定位符= 朕.任务.爬取()</span><br><span class="line">					页面 += 1</span><br><span class="line">					</span><br><span class="line">					若 新定位符 == &apos;end&apos;:</span><br><span class="line">						打印　&quot;爬虫节点退出...&quot;</span><br><span class="line">						朕.结果.放入(&#123;&apos;新定位符&apos;:&apos;end&apos;,&apos;新数据&apos;:&apos;end&apos;&#125;)</span><br><span class="line">						返回</span><br><span class="line"></span><br><span class="line">					打印 &quot;爬虫节点正在解析第%整数个网页:%字符&quot;%(页面,新定位符.编码(&apos;太极八卦码&apos;))</span><br><span class="line">					网页内容= 朕.下载器.下载(新定位符)</span><br><span class="line">					新定位符, 新数据 = 朕.解析器.解析(新定位符,网页内容)</span><br><span class="line">					朕.结果.放入(&#123;&apos;新定位符&apos;:&apos;新定位符号&apos;,&apos;新数据&apos;:&apos;新数据&apos;&#125;)</span><br><span class="line"></span><br><span class="line">			倘使　EOF错误，错：</span><br><span class="line">				打印 错.信息</span><br><span class="line">				返回</span><br><span class="line"></span><br><span class="line">			倘使　其他错误，错：</span><br><span class="line">				打印 错.信息</span><br><span class="line">				打印 &quot;爬虫失败了&quot;</span><br><span class="line"></span><br><span class="line">若 __名字__ == &quot;__主要的__&quot;:</span><br><span class="line">	爬虫 = 爬虫节点()</span><br><span class="line">	爬虫.爬取()</span><br></pre></td></tr></table></figure>

<p><strong>英文版</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!/usr/bin/pyton</span><br><span class="line"># -*- coding:utf-8 -*-</span><br><span class="line"># Date:   March 23 2019</span><br><span class="line"># Author：an advanced communist party full member who corected his vulgar tastes</span><br><span class="line"># Operating system：Ubuntu of communism</span><br><span class="line"></span><br><span class="line">#######python2 防止编码错误####################</span><br><span class="line">import sys</span><br><span class="line">reload(sys)</span><br><span class="line">sys.setdefaultencoding(&apos;utf-8&apos;)</span><br><span class="line">#######python2 爬虫，相关库#####################</span><br><span class="line">import requests</span><br><span class="line">import urlparse</span><br><span class="line">import re</span><br><span class="line">from bs4 import BeautifulSoup</span><br><span class="line">from multiprocessing.managers import BaseManager</span><br><span class="line"></span><br><span class="line">#*****python2 爬虫,五大模块*******************#</span><br><span class="line">class Downloader():</span><br><span class="line">	&apos;&apos;&apos;下载器&apos;&apos;&apos;</span><br><span class="line">	def __init__(self):</span><br><span class="line">		#下载的数量</span><br><span class="line">		self.downloaded = 0</span><br><span class="line"></span><br><span class="line">	def download(self,url):</span><br><span class="line">		&apos;&apos;&apos;</span><br><span class="line">		html下载处理函数</span><br><span class="line">		&apos;&apos;&apos;</span><br><span class="line">		if url is None:</span><br><span class="line">			return None</span><br><span class="line"></span><br><span class="line">		user_agent = &apos;Mozilla/4.0 (compatible; MSTE 5.5; Windows NT)&apos;</span><br><span class="line">		headers = &#123;&apos;User-Agent&apos;:user_agent&#125;</span><br><span class="line">		res = requests.get(url,headers=headers)</span><br><span class="line"></span><br><span class="line">		if 200 == res.status_code:</span><br><span class="line">			res.encoding=&apos;utf-8&apos;</span><br><span class="line">			self.downloaded += 1</span><br><span class="line">			return res.text</span><br><span class="line">		return None</span><br><span class="line"></span><br><span class="line">class HtmlParser():</span><br><span class="line">	&apos;&apos;&apos;</span><br><span class="line">	解析器:针对不同的</span><br><span class="line">    目标每次重写相关部分</span><br><span class="line">	&apos;&apos;&apos;</span><br><span class="line">	def __init__(self):</span><br><span class="line">		#处理的数量	</span><br><span class="line">		self.parsed = 0</span><br><span class="line"></span><br><span class="line">	def parser(self,page_url,html_cont):</span><br><span class="line">		&apos;&apos;&apos;</span><br><span class="line">		网页解析</span><br><span class="line">		&apos;&apos;&apos;</span><br><span class="line">		if page_url is None or html_cont is None:</span><br><span class="line">			return None</span><br><span class="line"></span><br><span class="line">		soup = BeautifulSoup(html_cont,&apos;html.parser&apos;) </span><br><span class="line">		new_urls = self._get_new_urls(soup)</span><br><span class="line">		new_data = self._get_new_data(page_url,soup)</span><br><span class="line">		self.parsed += 1</span><br><span class="line">		return new_urls, new_data</span><br><span class="line"></span><br><span class="line">	def _get_new_urls(self,soup):</span><br><span class="line">		&apos;&apos;&apos;</span><br><span class="line">		内部函数:提取页面的url集合</span><br><span class="line">		&apos;&apos;&apos;	</span><br><span class="line">		#百度百科的基准站</span><br><span class="line">		root_url = &apos;https://baike.baidu.com&apos;</span><br><span class="line">		new_urls = set()</span><br><span class="line"></span><br><span class="line">		#以下内容需要根据自己的需求改写	</span><br><span class="line">		#******************************</span><br><span class="line">		links = soup.find_all(&apos;a&apos;,href=re.compile(r&apos;/item/(.+)/\d+&apos;))  </span><br><span class="line">		#******************************</span><br><span class="line"></span><br><span class="line">		for link in links:</span><br><span class="line">			new_url = link[&apos;href&apos;]</span><br><span class="line">			new_full_url = urlparse.urljoin(root_url,new_url)</span><br><span class="line">			new_urls.add(new_full_url)</span><br><span class="line"></span><br><span class="line">		return new_urls</span><br><span class="line"></span><br><span class="line">	def _get_new_data(self,page_url,soup):</span><br><span class="line">		&apos;&apos;&apos;</span><br><span class="line">		内部函数:提取页面的标题，摘要</span><br><span class="line">		&apos;&apos;&apos;</span><br><span class="line">		new_data = &#123;&#125;</span><br><span class="line">		new_data[&apos;url&apos;] = page_url</span><br><span class="line"></span><br><span class="line">		#以下内容需要根据自己的需求改写	</span><br><span class="line">		#******************************</span><br><span class="line">		title = soup.find(&apos;dd&apos;,class_=&quot;lemmaWgt-lemmaTitle-title&quot;).find(&apos;h1&apos;) </span><br><span class="line">		new_data[&apos;title&apos;] = title.get_text()</span><br><span class="line">		#******************************</span><br><span class="line"></span><br><span class="line">		#以下内容需要根据自己的需求改写	</span><br><span class="line">		#******************************</span><br><span class="line">		summary = soup.find(&apos;div&apos;,class_=&quot;para&quot; )</span><br><span class="line">		new_data[&apos;summary&apos;] = summary.get_text()</span><br><span class="line">		#******************************</span><br><span class="line"></span><br><span class="line">		return new_data</span><br><span class="line"></span><br><span class="line">class SpiderNode():</span><br><span class="line">	&apos;&apos;&apos;爬虫节点&apos;&apos;&apos;</span><br><span class="line">	def __init__(self):</span><br><span class="line">		#注册获取队列方法</span><br><span class="line">		BaseManager.register(&apos;get_task_queue&apos;)</span><br><span class="line">		BaseManager.register(&apos;get_result_queue&apos;)</span><br><span class="line">		#连接到网络端口</span><br><span class="line">		server_addr = &apos;127.0.0.1&apos;</span><br><span class="line">		print &quot;连接到%s...&quot;%server_addr</span><br><span class="line">		#设置口令</span><br><span class="line">		self.m = BaseManager(address=(server_addr, 8001),authkey=&apos;baike&apos;) </span><br><span class="line">		#连接到网络端口 127.0.0.1</span><br><span class="line">		self.m.connect()</span><br><span class="line">		#获取Queue</span><br><span class="line">		self.task = self.m.get_task_queue()</span><br><span class="line">		self.result = self.m.get_result_queue()</span><br><span class="line">		#初始哈下载器和解析器</span><br><span class="line">		self.downloader = Downloader()</span><br><span class="line">		self.parser =  HtmlParser()</span><br><span class="line">		print &quot;init finished&quot;</span><br><span class="line">	</span><br><span class="line">	def crawl(self):</span><br><span class="line">		#设置起始位置</span><br><span class="line">		page = 0</span><br><span class="line">		while True:</span><br><span class="line">			#主循环，开启爬虫</span><br><span class="line">			try:</span><br><span class="line">				if not self.task.empty():</span><br><span class="line">					new_url = self.task.get()</span><br><span class="line">					page += 1</span><br><span class="line"></span><br><span class="line">					if new_url == &apos;end&apos;:</span><br><span class="line">						print &quot;爬虫节点退出...&quot;</span><br><span class="line">						self.result.put(&#123;&apos;new_urls&apos;:&apos;end&apos;,&apos;new_data&apos;:&apos;end&apos;&#125;)</span><br><span class="line">						return </span><br><span class="line"></span><br><span class="line">					print &quot;爬虫节点正在解析第%d个网页:%s&quot;%(page,new_url.encode(&apos;utf-8&apos;))</span><br><span class="line">					html_cont = self.downloader.download(new_url)</span><br><span class="line">					new_urls, new_data = self.parser.parser(new_url,html_cont)</span><br><span class="line">					self.result.put(&#123;&apos;new_urls&apos;:new_urls,&apos;new_data&apos;:new_data&#125;)</span><br><span class="line"></span><br><span class="line">			except EOFError, e:</span><br><span class="line">				print e.message </span><br><span class="line">				return </span><br><span class="line"></span><br><span class="line">			except Exception, e:</span><br><span class="line">				print e.message </span><br><span class="line">				print &quot;crawl failed&quot;</span><br><span class="line"></span><br><span class="line">if __name__ == &quot;__main__&quot;:</span><br><span class="line">	spider = SpiderNode()</span><br><span class="line">	spider.crawl()</span><br></pre></td></tr></table></figure>

<p>实际上，你可以看到，用中文写更麻烦，更容易出错。还是老老实实学英语吧！</p>
]]></content>
      <categories>
        <category>编程语言</category>
      </categories>
      <tags>
        <tag>IT</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Tex排版系统及其衍生系列产品的简介</title>
    <url>/title/51414649/</url>
    <content><![CDATA[<p><img src="https://s2.ax1x.com/2019/10/30/K5J8c6.md.jpg" alt="Tex"></p>
<a id="more"></a>

<h1 id="一-什么是Tex？"><a href="#一-什么是Tex？" class="headerlink" title="一. 什么是Tex？"></a>一. 什么是Tex？</h1><p> 你用微软的Word写文档并转换为pdf，但是你觉得很不满意，尤其是涉及到数学公式录入时，Word的公式编辑器太慢而且符号查找费时费力，最后导出的pdf还是很丑。当然WPS也是一个选择，但是涉及到公式一样的很痛苦。你厌倦了这种情况，但又不得不这么做，似乎只有Word或WPS才是写文档的工具。但其实在Word还没诞生的时候就有人设计出了跨平台的文档排版利器。上世纪，计算机学界泰斗人物高德纳(<a href="https://baike.baidu.com/item/%E5%94%90%E7%BA%B3%E5%BE%B7%C2%B7%E5%85%8B%E5%8A%AA%E7%89%B9/1436781?fromtitle=%E9%AB%98%E5%BE%B7%E7%BA%B3&fromid=2155233" target="_blank" rel="noopener">Donald E. Knuth</a>)应出版社要求对他六十年代的巨作《计算机编程艺术》<a href="比尔盖茨在本书的后面写到：“如果你能读懂整套书，请发邮件给我"">^1</a> 出修订版，他感到以手工方式对原稿进行修改存在种种不便，于是便放下手头的工作，开始设计一套高质量的计算机排版系统。原先计划花半年时间来改进排版技术然后继续写作的高德纳教授，最后却整整耗费十年心血，终于研制成功了闻名于世的TeX系统。TeX是一种优秀的电子排版系统，编译生成的文件格式是DVI格式，可以使用其他工具转换为PDF格式。TeX及其各种衍生系统可以应对多种场景，排版论文，书籍，报刊，报告时毫无问题，排版所得产品美观而且省时。</p>
<h1 id="二-Tex的历史"><a href="#二-Tex的历史" class="headerlink" title="二. Tex的历史"></a>二. Tex的历史</h1><p>TeX 的名字是由大写的希腊字母“tec”(tau, epsilon,chi)组成。在希腊语中这个词的意思是“科技”和“艺术”，这也解释了它的发音。“T”和“E”就像在“technology”中的发音一样，而“x”的发音类似于苏格兰语单词“loch”或德语单词“ach”中的“ch”，也类似于西班牙语中的“j”或俄语中的“kh”。TeX 标志为TEX，这三个字母相靠得很近，而且中间的那个E有点儿下沉。但在无格式文件中，就写为TeX。</p>
<p> TeX的第一版于1978年面世。在经过了不断的改进后，1982年版的TeX是一个十分稳定的版本。从此以后，TeX没有较大的变动，只有很少部分的改进和错误修正。现在几乎所有的操作系统平台下，都有相应的TeX软件，而且用它们排版同一个文件得到的输出结果是相同的。TeX目前的版本是3.141592，很接近圆周率π。每有一新的版本，就会加上一个π的小数点后的数。所以我们已经知道下一版本的TeX是3.1415926，最终将收敛到π，这也代表了TeX不断追求完美的理想。</p>
<p> TeX的源程序是用Pascal写成的，原因是高德纳教授希望TeX尽可能方便地移植到其它的操作系统中去。当时Pascal是最适合于这一要求的编程语言。这使得TeX现在已经在几乎所有的计算机系统中得到实现。</p>
<h1 id="三-易混淆的TeX概念"><a href="#三-易混淆的TeX概念" class="headerlink" title="三. 易混淆的TeX概念"></a>三. 易混淆的TeX概念</h1><p> TeX里存在两个重要概念：文档格式和排版引擎。</p>
<p> TeX系统工作原理：排版引擎编译文档生成相应的DVI，再由其他程序生成PDF文档等，不同的引擎支持的文档格式不尽相同。</p>
<p> TeX系统直接学习使用较困难，且使用的是Plain Tex格式，编译生成DVI格式文档而不是PDF格式，所以就有人对TeX进行扩展(定义宏集：就是把一段段代码抽象为指令)，就得到了不同的排版引擎和文档格式。</p>
<p> 由于各种扩展多了，TeX家族里就出现了排版引擎和文档格式名称混淆的情况。要搞清楚的是，TeX排版系统是核心，是一种排版引擎，其他的各种实现都是基于TeX而改进的引擎。</p>
<p> TeX及其衍生排版系统编译的文档统称为tex文档，他们名字相同，千万不要混淆了。</p>
<ol>
<li>Tex文档格式</li>
</ol>
<hr>
<p> <strong>Plain TeX:</strong> 是Tex中的一个最基本的宏集合与TeX的基础语言构成的一种Tex文档格式(类似 .txt，.docx格式)，由Tex引擎编译，是高德纳教授开发TeX时使用的格式。</p>
<p> <strong>LaTeX:</strong> 是一种新的Tex文档格式，和Plain Tex不同。LaTeX由美国计算机学家莱斯利·兰伯特（Leslie Lamport）在上世纪80年代初期开发，使用方便。它充分发挥了由TeX所提供的强大功能，能在很短时间内生成高质量的产品。现在是科技界的标准格式。</p>
<p> <strong>AMS-LaTeX:</strong> 由Michael Spivak基于TeX开发的一种新Tex文档格式，由美国数学协会使用，许多数学期刊接受的论文就需要AMS-LaTeX格式。因为该格式加入了对许多数学符号及有关字体的支持，使得写数学方面的文档十分方便。</p>
<p> <strong>TeXinfo:</strong> 自由软件基金会(<a href="https://www.fsf.org/" target="_blank" rel="noopener">FSF</a>)开发的一种Tex文档格式，是Linux等系统下的标准文档格式。</p>
<p> <strong>ConTeXt:</strong> 由Hans Hagen开发的一种Tex文档格式，编译后得到漂亮的出版样式。</p>
<ol start="2">
<li>Tex的各种排版引擎和指令</li>
</ol>
<hr>
<p> <strong>TeX:</strong> 最初由高德纳发明的一种排版引擎，编译Plain TeX格式的文档。</p>
<p> <strong>MikTex:</strong> 是Windows平台下的一种Tex的实现，一种排版引擎，已经被包含到CTeX套件中。</p>
<p> <strong>CTeX:</strong> 最初是由中科院数学与系统科学研究院的<a href="http://sourcedb.amss.cas.cn/zw/zjrck/yjy/200910/t20091016_2552703.html" target="_blank" rel="noopener">吴凌云</a>研究员制作发布的TeX套装，是CTeX中文套装的简称。基于MikTex引擎的Windows实现。CTeX是把MikTeX，WinEdit，GSview，Ghostscript等一些常用的相关工具包装在一起制作的一个简易安装程序，并对其中文支持部分进行了配置，安装后就可以使用中文。因为CTeX结合图形界面并包含编辑器和文档查看工具，所以使用非常方便，特殊符号还可以点击插入，很多Windows下的专业人员就使用该套装处理文档。我本人的本科毕业论文就是用CTeX做的。</p>
<p> <strong>cwTeX:</strong> 是由台湾同胞吴聪敏和吴聪慧制作发布的跨平台TeX套装，和CTeX类似，只是台湾人用的多，支持繁体字，编译的文档格式是.ctx。</p>
<p> <strong>proTeXt:</strong> 是Windows下的一款基于MikTeX的简易安装发行版TeX排版系统。</p>
<p> <strong>MacTeX:</strong> 是Mac OSX下的TeX实现，一种排版引擎，用苹果电脑的用户首选。</p>
<p> <strong>Tex Live:</strong> 是美国数学学会创立的TUG(TeX User Group)维护和发布的一种基于TeX的排版引擎，跨平台(Windows,Unix/Linux,Mac OSX)。</p>
<p> <strong>PDFTex:</strong> 也是TeX的一种实现，一种排版引擎，可以把Tex原始文档直接转换为PDF文档。</p>
<p> <strong>Tex:</strong> 是PDFTeX引擎的指令，用于将Plain TeX格式文档生成DVI文档，容易和TeX引擎搞混。</p>
<p> <strong>LaTex:</strong> 是PDFTeX引擎的指令，用于将LaTeX格式文档生成DVI文档，容易和LaTeX文档格式搞混。</p>
<p> <strong>PDFtex:</strong> 是PDFTeX引擎的指令，用于编译Plain Tex格式文档生成PDF文档。</p>
<p> <strong>PDFLaTex:</strong> 是PDFTeX引擎的指令，用于编译LaTex格式文档生成PDF文档。</p>
<p> <strong>XeTeX:</strong> 是TeX的一种实现，一种排版引擎，支持Unicode和操作系统字体。</p>
<p> <strong>Xetex:</strong> 是XeTeX引擎的指令，用来编译Plain TeX文档生成PDF文档。</p>
<p> <strong>XeLaTex:</strong> 是XeTeX引擎的指令，用来编译LaTex格式文档生成PDF文档。</p>
<p> <strong>LuaTeX:</strong> 新的TeX实现，一种新的引擎，正在不断完善。</p>
<p> <strong>Luatex:</strong> 是LuaTeX引擎的指令，用于将Plaint TeX格式文档编译成PDF文档。</p>
<p> <strong>LuaLaTex:</strong> 是LuaTeX引擎的指令，用于将LaTeX格式文档编译成PDF文档。</p>
<p> <strong>context:</strong> 是LuaTeX引擎的指令，用于将ConTeXt格式文档编译成PDF文档。</p>
<ol start="3">
<li>Tex文档的编辑器和有关工具</li>
</ol>
<hr>
<p> <strong>GSview:</strong> CTeX套装包含的文档查看器，可以直接查看PostScript文档和PDF文档。</p>
<p> <strong>Ghostscript:</strong> 是一种PostScript的解释器，可以用来查看PostScript和PDF文档。</p>
<p> <strong>WinEdit:</strong> 是CTeX套装的编辑器，就是写Tex文档的工具。</p>
<p> <strong>TeXShop:</strong> 是MacTeX下的一款Tex文档编辑器，界面美观，苹果永远追求美的享受啊!</p>
<p> <strong>TeXWorks:</strong> 是TexLive自带的Tex文档编辑器，由XeTeX作者Jonathan Kew仿照Mac上的TeXShop写出。</p>
<p> <strong>TeXMaker:</strong> 另一款Tex文档编辑器，支持文档导航。</p>
<p> <strong>TeXStudio:</strong> 又一款Tex文档编辑器，衍生自TeXmaker，功能更为强大。</p>
<p> 由于我们要处理中文，<strong>推荐使用LuaTeX和XeLaTex两个引擎来排版</strong>，尤其是在CTeX套装中，选择这两个引擎可以解决中文编译问题。编辑器<strong>推荐TexStutio</strong>，当然，这个要难一些，但是学会了工作称心。</p>
<h1 id="四-TeX的优点"><a href="#四-TeX的优点" class="headerlink" title="四. TeX的优点"></a>四. TeX的优点</h1><p> TeX特别适合于科技论文和书籍的排版，利用它可以在计算机上生成与印刷品几乎完全一样的作品，目前在国外已经被广泛地用于编排书籍、档案、学位论文和私人信件，以及各种复杂的公式、目录、索引和参考文献等。由于使用TeX可以很轻松地完成高质量科技文献的排版工作，并且可以按照作者的要求进行扩充和修改，所以逐渐引起出版界和各国科技工作者的注意，被一致认为是目前国际上排版数学公式能力最强的系统，并且在各种国际会议上被指定为标准的论文编排软件。</p>
<p> 稍有经验的人都会知道，即使再好的字处理软件打印出来的效果也都会跟屏幕上看到的有所差异，尤其是Word，还记得拿到打印店时格式出错，字迹变样吗？而TeX系统的输出是与设备无关的DVI（DeVice Independent）文件，因此无论是在针式打印机、喷墨打印机、激光打印机或是照排机上，其效果都是完全相同的，仅仅只是文字或者图形的分辩率因设备的不同而稍有差异。从这种意义上说，TeX才是真正的”所见即所得(What you see is what you get)”。</p>
<h1 id="五-Tex的各种资源和站点"><a href="#五-Tex的各种资源和站点" class="headerlink" title="五. Tex的各种资源和站点"></a>五. Tex的各种资源和站点</h1><p>(1) <a href="http://www.ctex.org/CTeXDownload/" target="_blank" rel="noopener">CTeX 套装官网</a><br>(2) <a href="https://www.latex-project.org/" target="_blank" rel="noopener">LaTeX项目官网</a><br>(3) <a href="http://tug.org/texlive/" target="_blank" rel="noopener">TeXLive的官网</a><br>(4) <a href="https://ctan.org/" target="_blank" rel="noopener">CTAN 宏包官网</a></p>
]]></content>
      <categories>
        <category>排版设计</category>
      </categories>
      <tags>
        <tag>IT</tag>
        <tag>Tex</tag>
      </tags>
  </entry>
  <entry>
    <title>各种编程语言的适用范围</title>
    <url>/title/45b4e77f/</url>
    <content><![CDATA[<p><img src="https://s2.ax1x.com/2019/10/30/K5JKAJ.md.jpg" alt="Lang"></p>
<a id="more"></a>

<p>自1956年第一门高级语言Fortran诞生至今，历史上出现过的各类计算机编程语言<a href="https://www.scriptol.com/programming/list-programming-languages.php" target="_blank" rel="noopener">总和</a>已超过1500种，但今天还流行的并不多。相当一部分人在初学编程时都会问：我该学什么语言？</p>
<p>我认为：某种程度上，语言没有明显优劣，只有适合还是不适合，擅长与否。因为语言发明就是为了应对不同的问题，起点本就不一样，但终点却被人当成一样，结果总是比来比去。实际上，有的语言确实要比其他语言更适合某个领域，更能作出产品来，但这只是设计者有意为之。本文主要梳理一些类语言工具和<a href="https//www.tiobe.com/tiobe-index/">TIOBE</a>榜上一部分语言的适用场景，希望能成为一份粗略的编程语言选择指南。(排名没有先后)  </p>
<h1 id="类语言工具"><a href="#类语言工具" class="headerlink" title="类语言工具"></a>类语言工具</h1><p> 下面四个更多的不算编程语言，而是非常好的工具。</p>
<p><strong>Tex</strong><br>    (1) <a href="https//www-cs-faculty.stanford.edu/~knuth/">高德纳</a>开发，排版工具，追求高质量必不可少，漂亮的ConTeXt也很好。<br>    (2) 适用于书籍，报刊，杂志，论文，报告等等文档的排版。<br>    (3) 详细内容请看另一篇博文<a href="https//blog.csdn.net/Shieber/article/details/88556859">Tex排版系统及其衍生系列产品的简介</a>    </p>
<p><strong>Awk</strong><br>    (1) Unix/Linux系统工具，字节流数据处理，按列处理数据   </p>
<p><strong>Sed</strong><br>    (1) Unix/Linux系统工具，字节流数据处理，按行处理数据        </p>
<p><strong>Grep</strong><br>    (1) Unix/Linux系统工具，文档搜索，以文档为单位    </p>
<h1 id="TIOBE-Index收录编程语言的适用范围"><a href="#TIOBE-Index收录编程语言的适用范围" class="headerlink" title="TIOBE Index收录编程语言的适用范围  "></a>TIOBE Index收录编程语言的适用范围  </h1><p>  下面是常见的43种语言。</p>
<p><strong>Assembly</strong><br>    (1) 木马，病毒<br>    (2) 底层，硬件控制<br>    (3) 优点：快，能控制底层；缺点：学习难度大，不直观  </p>
<p><strong>C</strong><br>    (1) 木马，病毒<br>    (2) 编译器，调试器<br>    (3) 工程控制领域，机器人<br>    (4) 驱动程序，航空飞行器<br>    (5) 类Unix操作系统，嵌入式<br>    (6) 交换机，路由器，防火墙<br>    (7) 优点：快，能控制底层；缺点：学习难度大，内存泄漏    </p>
<p><strong>C++</strong><br>    (1) 木马，病毒<br>    (2) 编译器，调试器<br>    (3) 游戏引擎，服务器<br>    (4) 数据库，安全协议<br>    (5) 图像处理，虚拟现实<br>    (6) 图形用户界面，网络<br>    (7) 科学计算，人工智能<br>    (8) 音视频处理，压缩技术<br>    (9) 优点：面向对象，可扩展；缺点：学习难度极大，内存泄漏   </p>
<p><strong>Rust</strong><br>    (1) 系统，网络<br>    (2) 游戏，嵌入式<br>    (3) Web开发，桌面GUI<br>    (4) 优点：安全；缺点：学习难度大     </p>
<p><strong>Go</strong><br>    (1) 服务器，数据库，容器<br>    (2) 分布式大型系统，云平台<br>    (3) 优点：并发，分布式，Web时代的C；缺点：括号不能换行，缺少库     </p>
<p><strong>Dart</strong><br>    (1) 物联网<br>    (2) Web前端(Flutter)，服务器<br>    (3) 优点：移动开发，Fuchsia系统钦定语言；缺点：运行时环境大 </p>
<p><strong>Java</strong><br>    (1) 大数据和科学应用<br>    (2) 桌面应用，Web应用<br>    (3) 软件工具，交易程序<br>    (4) 企业级应用，安卓应用<br>    (5) 优点：跨平台可移植，高性能；缺点：复杂臃肿</p>
<p><strong>Python</strong><br>    (1) 木马，病毒<br>    (2) 大数据，云计算<br>    (3) 量化金融，运维<br>    (4) 图像，音视频处理<br>    (5) 科学计算，Web开发<br>    (6) 网络爬虫，人工智能<br>    (7) 优点：简单易学，各种库多，缺点：速度慢，老是重构  </p>
<p><strong>JavaScript</strong><br>    (1) 网站前端，Web应用<br>    (2) 网站后端，浏览器插件<br>    (3) 前后端(Node.js/Deno)<br>    (4) 优点：功能强大，简单；缺点：依赖浏览器   </p>
<p><strong>HTML</strong><br>    (1) 网页生成<br>    (2) 电子书制作<br>    (3) 优点：跨平台；缺点：浏览器兼容麻烦<br>    (4) HTML并未收录到TIOBE，此处只是和js一并列出  </p>
<p><strong>WebAssembly</strong><br>    (1) 浏览器使用<br>    (2) 优点：高性能，支持多种语言；缺点：类型检验严格    </p>
<p><strong>TypeScript</strong><br>    (1) 应用级的JavaScript开发语言<br>    (2) 优点：支持js，兼容第三方库；缺点：学习有难度  </p>
<p><strong>Kotlin</strong><br>    (1) 安卓官方开发语言<br>    (2) 优点：兼容Java，节省代码；缺点：编译慢    </p>
<p><strong>Swift</strong><br>    (1) IOS及OS X开发<br>    (2) 优点：安全，快；缺点：版本不稳定        </p>
<p><strong>Objective-C</strong><br>    (1) IOS平台软件开发<br>    (2) 优点：库丰富；缺点：不支持重载，多重继承         </p>
<p><strong>PHP</strong><br>    (1) 网站开发，电子商务<br>    (2) Web应用，企业级应用<br>    (3) 微信开发，客户端界面<br>    (4) 这不是世界上最好的编程语言<br>    (5) 优点：上手快，框架成熟；缺点：慢，应用单一        </p>
<p><strong>Shell</strong><br>    (1) 类Unix系统中，自动化脚本<br>    (2) 优点：简单，高效；缺点：IO性能，效率不高          </p>
<p><strong>PowerShell</strong><br>    (1) 自动化脚本，可调用.Net和COM对象<br>    (2) 优点：功能强大；缺点：不兼容老版           </p>
<p><strong>Ruby</strong><br>    (1) Web开发<br>    (2) 优点：简单，正则；缺点：慢             </p>
<p><strong>Perl</strong><br>    (1) Unix系统维护，CGI脚本<br>    (2) 邮件文本处理和FTP自动化<br>    (3) 数据库通信，Web站点维护自动化<br>    (4) 优点：简单，正则；缺点：写大程序很麻烦   </p>
<p><strong>R</strong><br>    (1) 自动化报告<br>    (2) 生物医学领域<br>    (3) 数据挖掘，统计分析<br>    (4) 优点：简单，本身小；缺点：大文件处理差             </p>
<p><strong>Julia</strong><br>    (1) 科学计算，数据处理，仿真<br>    (2) 优点：支持python库和R库；缺点：启动预热     </p>
<p><strong>Lua</strong><br>    (1) 游戏脚本，内嵌脚本<br>    (2) 优点：小，快；缺点：重复造轮子，nil值问题  </p>
<p><strong>MATLAB</strong><br>    (1) 人工智能<br>    (2) 数值计算，仿真模拟<br>    (3) 优点：矩阵，仿真强；缺点：慢，软件太大    </p>
<p><strong>Fortran</strong><br>    (1) 科学研究，物理<br>    (2) 优点：快；缺点：太老，生态不好      </p>
<p><strong>SQL</strong><br>    (1) 数据库<br>    (2) 优点：安全；缺点：慢，可移植性差  </p>
<p><strong>C#</strong><br>    (1) Windows桌面应用，Web应用<br>    (2) 优点：分布式，面向对象；缺点：复杂  </p>
<p><strong>Visual Basic</strong><br>    (1) 木马，病毒<br>    (2) 可视化程序设计<br>    (3) 优点：小；缺点：无继承   </p>
<p><strong>COBOL</strong><br>    (1) 银行，保险，金融<br>    (2) 优点：数据处理高效；缺点：老   </p>
<p><strong>Delphi</strong><br>    (1) 木马，病毒<br>    (2) 桌面开发，数据库开发<br>    (3) Web服务，游戏控制软件<br>    (4) 优点：简单，控件丰富；缺点：死了   </p>
<p><strong>Pascal</strong><br>    (1) 编程竞赛，算法研究<br>    (2) 优点：语法严谨；缺点：语法严谨  </p>
<p><strong>D</strong><br>    (1) Web开发<br>    (2) 优点：效率高，和C/C++交互容易；缺点：缺乏企业支持     </p>
<p><strong>Scala</strong><br>    (1) 大数据，Web服务<br>    (2) 优点：生态丰富，扩展性强；缺点：学习曲线陡峭       </p>
<p><strong>Clojure</strong><br>    (1) 游戏后端<br>    (2) 自动化测试，黑盒测试<br>    (3) 优点：简单，实用；缺点：要懂Java</p>
<p><strong>Groovy</strong><br>    (1) Java的替代品<br>    (2) 优点：比Java灵活；缺点：性能损失</p>
<p><strong>Lisp</strong><br>    (1) 人工智能<br>    (2) 优点：符号推演；缺点：能教学用  </p>
<p><strong>Scheme</strong><br>    (1) 科学计算<br>    (2) 优点：简单，移植性好，理解语言本质</p>
<p><strong>Haskell</strong><br>    (1) 函数式编程<br>    (2) 优点：惰性求值；缺点：复杂  </p>
<p><strong>Prolog</strong><br>    (1) 不用于开发软件<br>    (2) 逻辑编程，用于挖掘关系<br>    (3) 优点：培养逻辑；缺点：慢</p>
<p><strong>Erlang</strong><br>    (1) 游戏网页，高并发<br>    (2) 优点：灵活；缺点：数据抽象弱</p>
<p><strong>PostScript</strong><br>    (1) 印刷机，打印机使用<br>    (2) 优点：设备无关；缺点：贵  </p>
<p><strong>Scratch</strong><br>    (1) 儿童编程语言<br>    (2) 优点：简单；缺点：简单  </p>
<p><strong>VHDL</strong><br>    (1) 电路设计  </p>
<p><strong>LabVIEW</strong><br>    (1) 图形化编程语言，产生框图程序<br>    (2) 测量，控制系统，快速工程化实践   </p>
<h1 id="结语"><a href="#结语" class="headerlink" title="结语  "></a>结语  </h1><p>一般人用得到的语言估计就这些，每门语言的适用领域不一定写全了，但是大体不会错。个人感觉：Go，Rust，Dart会慢慢火起来。</p>
]]></content>
      <categories>
        <category>编程语言</category>
      </categories>
      <tags>
        <tag>IT</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL 官方推荐数据库连接器 Connector 8.0</title>
    <url>/title/925b0210/</url>
    <content><![CDATA[<p><img src="https://s2.ax1x.com/2019/10/30/K5Go0e.jpg" alt="Mysql">　</p>
<a id="more"></a>

<h1 id="一-python-connector-8-0-简介"><a href="#一-python-connector-8-0-简介" class="headerlink" title="一. python connector 8.0 简介"></a>一. python connector 8.0 简介</h1><p>MySQL Connector/Python 8.0(以下简称Connector)是一个自完备的Python驱动器，实现了同MySQL server的连接，是MySQL官方高度推荐使用的连接器，而MySQLdb则不是。该连接器符合Python的数据库API标准2.0(PEP 249)标准，纯Python写成，只依赖Python标准库。如果有需要，请尽量使用Connector。当然，其他语言的Connector实现也有，包括C，C++，NET，ODBC，J。本文只针对Python。</p>
<h1 id="二-connector的变化"><a href="#二-connector的变化" class="headerlink" title="二. connector的变化"></a>二. connector的变化</h1><p>MySQL Connector/Python 支持：<br>(1) 几乎所有数据库特性，包括5.7版本的。<br>(2) 支持X DevAPI。<br>(3) All MySQL extensions to standard SQL syntax。<br>(4) 数据流压缩，实现客户端到服务器端的高效沟通。<br>(5) 使用SSL的TCP/IP套接字，在类Unix上使用Unix套接字。<br>(6) 支持数据类型在MySQL和Python间的转换。<br>例如Python的datetime和MySQL的DATETIME间相互转换，并且可以自由设置是否开启转换。  </p>
<h1 id="三-各个版本支持的MySQL和Python版本"><a href="#三-各个版本支持的MySQL和Python版本" class="headerlink" title="三. 各个版本支持的MySQL和Python版本"></a>三. 各个版本支持的MySQL和Python版本</h1><table>
<thead>
<tr>
<th align="center">Connector Version</th>
<th align="center">MySQL Server Versions</th>
<th align="center">Python Versions</th>
</tr>
</thead>
<tbody><tr>
<td align="center">8.0</td>
<td align="center">8.0, 5.7, 5.6, 5.5</td>
<td align="center">3.7, 3.6, 3.5, 3.4, 2.7</td>
</tr>
<tr>
<td align="center">2.1</td>
<td align="center">5.7, 5.6, 5.5</td>
<td align="center">3.5, 3.4, 2.7, 2.6</td>
</tr>
<tr>
<td align="center">2.0</td>
<td align="center">5.7, 5.6, 5.5</td>
<td align="center">3.5, 3.4, 2.7, 2.6</td>
</tr>
<tr>
<td align="center">1.2</td>
<td align="center">5.7, 5.6, 5.5 5.1, 5.0, 4.1</td>
<td align="center">3.4, 3.3, 3.2, 3.1, 2.7, 2.6</td>
</tr>
</tbody></table>
<h1 id="四-安装"><a href="#四-安装" class="headerlink" title="四. 安装"></a>四. 安装</h1><ol>
<li>Linux下</li>
</ol>
<hr>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ sudo pip install mysql-connector-python</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>Windows下</li>
</ol>
<hr>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ pip install mysql-connector-python</span><br></pre></td></tr></table></figure>

<h1 id="五-连接方式"><a href="#五-连接方式" class="headerlink" title="五. 连接方式"></a>五. 连接方式</h1><ol>
<li>连接方式1</li>
</ol>
<hr>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import mysql.connector</span><br><span class="line">cnx = mysql.connector.connect(user=&apos;scott&apos;, </span><br><span class="line">                              password=&apos;password&apos;,</span><br><span class="line">                              host=&apos;127.0.0.1&apos;,</span><br><span class="line">                              database=&apos;employees&apos;)</span><br><span class="line">cnx.close()</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>连接方式2</li>
</ol>
<hr>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from mysql.connector import (connection)</span><br><span class="line">cnx = connection.MySQLConnection(user=&apos;scott&apos;,</span><br><span class="line">                                 password=&apos;password&apos;,</span><br><span class="line">                                 host=&apos;127.0.0.1&apos;,</span><br><span class="line">                                 database=&apos;employees&apos;)</span><br><span class="line">cnx.close()</span><br></pre></td></tr></table></figure>

<p>常用的是连接方式1</p>
<ol start="3">
<li>错误处理</li>
</ol>
<hr>
<p>为了应对连接错误，可以引入try-except机制。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import mysql.connector</span><br><span class="line">from mysql.connector import errorcode</span><br><span class="line"></span><br><span class="line">try:</span><br><span class="line">	cnx = mysql.connector.connect(user=&apos;scott&apos;, database=&apos;employ&apos;)</span><br><span class="line">except mysql.connector.Error as err:</span><br><span class="line">	if err.errno == errorcode.ER_ACCESS_DENIED_ERROR:</span><br><span class="line">    	print(&quot;Something is wrong with your user name or password&quot;)</span><br><span class="line">	elif err.errno == errorcode.ER_BAD_DB_ERROR:</span><br><span class="line">		print(&quot;Database does not exist&quot;)</span><br><span class="line">  	else:</span><br><span class="line">    	print(err)</span><br><span class="line">	else:</span><br><span class="line">		cnx.close()</span><br></pre></td></tr></table></figure>
<ol start="4">
<li>把参数单独放到外面或者文件中</li>
</ol>
<hr>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import mysql.connector</span><br><span class="line"></span><br><span class="line">config = &#123;</span><br><span class="line">  &apos;user&apos;: &apos;scott&apos;,</span><br><span class="line">  &apos;password&apos;: &apos;password&apos;,</span><br><span class="line">  &apos;host&apos;: &apos;127.0.0.1&apos;,</span><br><span class="line">  &apos;database&apos;: &apos;employees&apos;,</span><br><span class="line">  &apos;raise_on_warnings&apos;: True</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">cnx = mysql.connector.connect(**config)</span><br><span class="line">cnx.close()</span><br></pre></td></tr></table></figure>

<h1 id="五-常见使用形式"><a href="#五-常见使用形式" class="headerlink" title="五.常见使用形式"></a>五.常见使用形式</h1><h2 id="0-连接器操作原理"><a href="#0-连接器操作原理" class="headerlink" title="0.连接器操作原理"></a>0.连接器操作原理</h2><p><strong>Connector的工作流程：</strong><br>(1) 接到数据库。<br>(2) 返回一个游标连接对象。<br>(3) 通过游标对数据库执行增删查改操作。<br>(4) 操作完成，分别断开连接。 </p>
<p><strong>具体示例：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cnx = mysql.connector.connect(database=&apos;world&apos;)</span><br><span class="line">cursor = cnx.cursor()</span><br><span class="line">cursor.execute(&apos;SQL语句&apos;)</span><br><span class="line">cursor.close()</span><br><span class="line">cnx.close()</span><br></pre></td></tr></table></figure>

<h2 id="1-创建表"><a href="#1-创建表" class="headerlink" title="1.创建表"></a>1.创建表</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from __future__ import print_function</span><br><span class="line"></span><br><span class="line">import mysql.connector</span><br><span class="line">from mysql.connector import errorcode</span><br><span class="line"></span><br><span class="line">DB_NAME = &apos;employees&apos;</span><br><span class="line"></span><br><span class="line">TABLES = &#123;&#125;</span><br><span class="line">TABLES[&apos;employees&apos;] = (</span><br><span class="line">    &quot;CREATE TABLE `employees` (&quot;</span><br><span class="line">    &quot;  `emp_no` int(11) NOT NULL AUTO_INCREMENT,&quot;</span><br><span class="line">    &quot;  `birth_date` date NOT NULL,&quot;</span><br><span class="line">    &quot;  `first_name` varchar(14) NOT NULL,&quot;</span><br><span class="line">    &quot;  `last_name` varchar(16) NOT NULL,&quot;</span><br><span class="line">    &quot;  `gender` enum(&apos;M&apos;,&apos;F&apos;) NOT NULL,&quot;</span><br><span class="line">    &quot;  `hire_date` date NOT NULL,&quot;</span><br><span class="line">    &quot;  PRIMARY KEY (`emp_no`)&quot;</span><br><span class="line">    &quot;) ENGINE=InnoDB&quot;)</span><br><span class="line"></span><br><span class="line">TABLES[&apos;departments&apos;] = (</span><br><span class="line">    &quot;CREATE TABLE `departments` (&quot;</span><br><span class="line">    &quot;  `dept_no` char(4) NOT NULL,&quot;</span><br><span class="line">    &quot;  `dept_name` varchar(40) NOT NULL,&quot;</span><br><span class="line">    &quot;  PRIMARY KEY (`dept_no`), UNIQUE KEY `dept_name` (`dept_name`)&quot;</span><br><span class="line">    &quot;) ENGINE=InnoDB&quot;)</span><br><span class="line"></span><br><span class="line">TABLES[&apos;salaries&apos;] = (</span><br><span class="line">    &quot;CREATE TABLE `salaries` (&quot;</span><br><span class="line">    &quot;  `emp_no` int(11) NOT NULL,&quot;</span><br><span class="line">    &quot;  `salary` int(11) NOT NULL,&quot;</span><br><span class="line">    &quot;  `from_date` date NOT NULL,&quot;</span><br><span class="line">    &quot;  `to_date` date NOT NULL,&quot;</span><br><span class="line">    &quot;  PRIMARY KEY (`emp_no`,`from_date`), KEY `emp_no` (`emp_no`),&quot;</span><br><span class="line">    &quot;  CONSTRAINT `salaries_ibfk_1` FOREIGN KEY (`emp_no`) &quot;</span><br><span class="line">    &quot;     REFERENCES `employees` (`emp_no`) ON DELETE CASCADE&quot;</span><br><span class="line">    &quot;) ENGINE=InnoDB&quot;)</span><br><span class="line"></span><br><span class="line">TABLES[&apos;dept_emp&apos;] = (</span><br><span class="line">    &quot;CREATE TABLE `dept_emp` (&quot;</span><br><span class="line">    &quot;  `emp_no` int(11) NOT NULL,&quot;</span><br><span class="line">    &quot;  `dept_no` char(4) NOT NULL,&quot;</span><br><span class="line">    &quot;  `from_date` date NOT NULL,&quot;</span><br><span class="line">    &quot;  `to_date` date NOT NULL,&quot;</span><br><span class="line">    &quot;  PRIMARY KEY (`emp_no`,`dept_no`), KEY `emp_no` (`emp_no`),&quot;</span><br><span class="line">    &quot;  KEY `dept_no` (`dept_no`),&quot;</span><br><span class="line">    &quot;  CONSTRAINT `dept_emp_ibfk_1` FOREIGN KEY (`emp_no`) &quot;</span><br><span class="line">    &quot;     REFERENCES `employees` (`emp_no`) ON DELETE CASCADE,&quot;</span><br><span class="line">    &quot;  CONSTRAINT `dept_emp_ibfk_2` FOREIGN KEY (`dept_no`) &quot;</span><br><span class="line">    &quot;     REFERENCES `departments` (`dept_no`) ON DELETE CASCADE&quot;</span><br><span class="line">    &quot;) ENGINE=InnoDB&quot;)</span><br><span class="line"></span><br><span class="line">TABLES[&apos;dept_manager&apos;] = (</span><br><span class="line">    &quot;  CREATE TABLE `dept_manager` (&quot;</span><br><span class="line">    &quot;  `dept_no` char(4) NOT NULL,&quot;</span><br><span class="line">    &quot;  `emp_no` int(11) NOT NULL,&quot;</span><br><span class="line">    &quot;  `from_date` date NOT NULL,&quot;</span><br><span class="line">    &quot;  `to_date` date NOT NULL,&quot;</span><br><span class="line">    &quot;  PRIMARY KEY (`emp_no`,`dept_no`),&quot;</span><br><span class="line">    &quot;  KEY `emp_no` (`emp_no`),&quot;</span><br><span class="line">    &quot;  KEY `dept_no` (`dept_no`),&quot;</span><br><span class="line">    &quot;  CONSTRAINT `dept_manager_ibfk_1` FOREIGN KEY (`emp_no`) &quot;</span><br><span class="line">    &quot;     REFERENCES `employees` (`emp_no`) ON DELETE CASCADE,&quot;</span><br><span class="line">    &quot;  CONSTRAINT `dept_manager_ibfk_2` FOREIGN KEY (`dept_no`) &quot;</span><br><span class="line">    &quot;     REFERENCES `departments` (`dept_no`) ON DELETE CASCADE&quot;</span><br><span class="line">    &quot;) ENGINE=InnoDB&quot;)</span><br><span class="line"></span><br><span class="line">TABLES[&apos;titles&apos;] = (</span><br><span class="line">    &quot;CREATE TABLE `titles` (&quot;</span><br><span class="line">    &quot;  `emp_no` int(11) NOT NULL,&quot;</span><br><span class="line">    &quot;  `title` varchar(50) NOT NULL,&quot;</span><br><span class="line">    &quot;  `from_date` date NOT NULL,&quot;</span><br><span class="line">    &quot;  `to_date` date DEFAULT NULL,&quot;</span><br><span class="line">    &quot;  PRIMARY KEY (`emp_no`,`title`,`from_date`), KEY `emp_no` (`emp_no`),&quot;</span><br><span class="line">    &quot;  CONSTRAINT `titles_ibfk_1` FOREIGN KEY (`emp_no`)&quot;</span><br><span class="line">    &quot;     REFERENCES `employees` (`emp_no`) ON DELETE CASCADE&quot;</span><br><span class="line">    &quot;) ENGINE=InnoDB&quot;)</span><br><span class="line"></span><br><span class="line">cnx = mysql.connector.connect(user=&apos;scott&apos;)</span><br><span class="line">cursor = cnx.cursor()</span><br><span class="line"></span><br><span class="line">def create_database(cursor):</span><br><span class="line">    try:</span><br><span class="line">        cursor.execute(</span><br><span class="line">            &quot;CREATE DATABASE &#123;&#125; DEFAULT CHARACTER SET &apos;utf8&apos;&quot;.format(DB_NAME))</span><br><span class="line">    except mysql.connector.Error as err:</span><br><span class="line">        print(&quot;Failed creating database: &#123;&#125;&quot;.format(err))</span><br><span class="line">        exit(1)</span><br><span class="line"></span><br><span class="line">try:</span><br><span class="line">    cursor.execute(&quot;USE &#123;&#125;&quot;.format(DB_NAME))</span><br><span class="line">except mysql.connector.Error as err:</span><br><span class="line">    print(&quot;Database &#123;&#125; does not exists.&quot;.format(DB_NAME))</span><br><span class="line">    if err.errno == errorcode.ER_BAD_DB_ERROR:</span><br><span class="line">        create_database(cursor)</span><br><span class="line">        print(&quot;Database &#123;&#125; created successfully.&quot;.format(DB_NAME))</span><br><span class="line">        cnx.database = DB_NAME</span><br><span class="line">    else:</span><br><span class="line">        print(err)</span><br><span class="line">        exit(1)</span><br><span class="line"></span><br><span class="line">for table_name in TABLES:</span><br><span class="line">    table_description = TABLES[table_name]</span><br><span class="line">    try:</span><br><span class="line">        print(&quot;Creating table &#123;&#125;: &quot;.format(table_name), end=&apos;&apos;)</span><br><span class="line">        cursor.execute(table_description)</span><br><span class="line">    except mysql.connector.Error as err:</span><br><span class="line">        if err.errno == errorcode.ER_TABLE_EXISTS_ERROR:</span><br><span class="line">            print(&quot;already exists.&quot;)</span><br><span class="line">        else:</span><br><span class="line">            print(err.msg)</span><br><span class="line">    else:</span><br><span class="line">        print(&quot;OK&quot;)</span><br><span class="line"></span><br><span class="line">cursor.close()</span><br><span class="line">cnx.close()</span><br></pre></td></tr></table></figure>

<h2 id="2-插入"><a href="#2-插入" class="headerlink" title="2.插入"></a>2.插入</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from __future__ import print_function</span><br><span class="line">from datetime import date, datetime, timedelta</span><br><span class="line">import mysql.connector</span><br><span class="line"></span><br><span class="line">cnx = mysql.connector.connect(user=&apos;scott&apos;, database=&apos;employees&apos;)</span><br><span class="line">cursor = cnx.cursor()</span><br><span class="line"></span><br><span class="line">tomorrow = datetime.now().date() + timedelta(days=1)</span><br><span class="line"></span><br><span class="line">add_employee = (&quot;INSERT INTO employees &quot;</span><br><span class="line">               &quot;(first_name, last_name, hire_date, gender, birth_date) &quot;</span><br><span class="line">               &quot;VALUES (%s, %s, %s, %s, %s)&quot;)</span><br><span class="line">add_salary = (&quot;INSERT INTO salaries &quot;</span><br><span class="line">              &quot;(emp_no, salary, from_date, to_date) &quot;</span><br><span class="line">              &quot;VALUES (%(emp_no)s, %(salary)s, %(from_date)s, %(to_date)s)&quot;)</span><br><span class="line"></span><br><span class="line">data_employee = (&apos;Geert&apos;, &apos;Vanderkelen&apos;, tomorrow, &apos;M&apos;, date(1977, 6, 14))</span><br><span class="line"></span><br><span class="line"># Insert new employee</span><br><span class="line">cursor.execute(add_employee, data_employee)</span><br><span class="line">emp_no = cursor.lastrowid</span><br><span class="line"></span><br><span class="line"># Insert salary information</span><br><span class="line">data_salary = &#123;</span><br><span class="line">  &apos;emp_no&apos;: emp_no,</span><br><span class="line">  &apos;salary&apos;: 50000,</span><br><span class="line">  &apos;from_date&apos;: tomorrow,</span><br><span class="line">  &apos;to_date&apos;: date(9999, 1, 1),</span><br><span class="line">&#125;</span><br><span class="line">cursor.execute(add_salary, data_salary)</span><br><span class="line"></span><br><span class="line">cnx.commit() #只是查询时，不需这行，涉及修改数据则必须</span><br><span class="line"></span><br><span class="line">cursor.close()</span><br><span class="line">cnx.close()</span><br></pre></td></tr></table></figure>

<h2 id="3-查询"><a href="#3-查询" class="headerlink" title="3.查询"></a>3.查询</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import datetime</span><br><span class="line">import mysql.connector</span><br><span class="line"></span><br><span class="line">cnx = mysql.connector.connect(user=&apos;scott&apos;, database=&apos;employees&apos;)</span><br><span class="line">cursor = cnx.cursor()</span><br><span class="line"></span><br><span class="line">query = (&quot;SELECT first_name, last_name, hire_date FROM employees &quot;</span><br><span class="line">         &quot;WHERE hire_date BETWEEN %s AND %s&quot;)</span><br><span class="line"></span><br><span class="line">hire_start = datetime.date(1999, 1, 1)</span><br><span class="line">hire_end = datetime.date(1999, 12, 31)</span><br><span class="line"></span><br><span class="line">cursor.execute(query, (hire_start, hire_end))</span><br><span class="line"></span><br><span class="line">for (first_name, last_name, hire_date) in cursor:</span><br><span class="line">  print(&quot;&#123;&#125;, &#123;&#125; was hired on &#123;:%d %b %Y&#125;&quot;.format(</span><br><span class="line">    last_name, first_name, hire_date))</span><br><span class="line"></span><br><span class="line">cursor.close()</span><br><span class="line">cnx.close()</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>IT</tag>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL8.0和Mongodb迁移数据存储位置到指定位置(Linux版)</title>
    <url>/title/dd137b08/</url>
    <content><![CDATA[<p><img src="https://s2.ax1x.com/2019/10/30/K5Go0e.jpg" alt="Mysql">　</p>
<a id="more"></a>

<h1 id="一：MySQL迁移位置具体步骤"><a href="#一：MySQL迁移位置具体步骤" class="headerlink" title="一：MySQL迁移位置具体步骤"></a>一：MySQL迁移位置具体步骤</h1><p><strong>停止mysql服务</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ sudo service mysql stop</span><br></pre></td></tr></table></figure>
<p><strong>拷贝数据存储到你的新位置</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">例如: /home/database/</span><br><span class="line">$ sudo cp -R /var/lib/mysql /home/database/</span><br></pre></td></tr></table></figure>

<p><strong>打开/etc/mysql/mysql.conf.d/mysqld.cnf修改数据存储位置</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">将以下两行注释掉并加入新的两行(按自己的位置修改)</span><br><span class="line">\#socket = /var/run/mysqld/mysqld.sock</span><br><span class="line">\#datadir= /var/lib/mysql</span><br><span class="line">socket = /home/database/mysql/mysql.sock</span><br><span class="line">datadir = /home/database/mysql</span><br><span class="line">再接着添加以下内容</span><br><span class="line">[client]</span><br><span class="line">socket = /home/database/mysql/mysql.sock</span><br><span class="line">[mysql]</span><br><span class="line"> socket = /home/database/mysql/mysql.sock</span><br></pre></td></tr></table></figure>

<p><strong>打开/etc/apparmor.d/usr.sbin.mysqld修改新位置的读写权限</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">注释以下两行并加入新的两行（用gedit修改该文件要记得删除可能存在的usr.sbin.mysqld~ 文件，不然启动会失败）</span><br><span class="line">\#/var/lib/mysql/ r,</span><br><span class="line">\#/var/lib/mysql/\*\* rwk,</span><br><span class="line">/home/database/mysql/ r,</span><br><span class="line">/home/database/mysql/\*\* rwk,</span><br></pre></td></tr></table></figure>

<p><strong>打开/etc/apparmor.d/abstractions/mysql修改数据库的依赖路径</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">注释下面一行并加入第三行(这是个大坑)</span><br><span class="line">\#/var/lib/mysql&#123;,d&#125;/mysql&#123;,d&#125;.sock rw,</span><br><span class="line">/home/database/mysql/mysql.sock rw,</span><br></pre></td></tr></table></figure>

<p><strong>重新加载apparmor刷新配置文件</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ sudo /etc/init.d/apparmor reload</span><br></pre></td></tr></table></figure>

<p><strong>重新加载mysql服务</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ sudo service mysql start</span><br></pre></td></tr></table></figure>

<h1 id="二：其他几个大坑可能导致启动失败"><a href="#二：其他几个大坑可能导致启动失败" class="headerlink" title="二：其他几个大坑可能导致启动失败"></a>二：其他几个大坑可能导致启动失败</h1><p><strong>mysql/的权限属性</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">注意查看/home/database/mysql是否属于mysql组和mysql用户，及权限，若不是则执行</span><br><span class="line">$ sudo chown -R mysql:mysql /home/database/mysql</span><br><span class="line">$ sudo chmod 755 /home/database/mysql/</span><br><span class="line">没有mysql组的通过以下命令创建mysql组和用户</span><br><span class="line">$ sudo groupadd mysql</span><br><span class="line">$ sudo useradd -r -g mysql mysql</span><br></pre></td></tr></table></figure>

<p><strong>database/的权限属性</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">database/的权限，建议是755，属于root，root</span><br><span class="line">$ sudo chgrp root database/</span><br><span class="line">$ sudo chown root database/</span><br><span class="line">$ sudo chmod 755 database/</span><br></pre></td></tr></table></figure>

<p><strong>Linux selinux安全机制</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">在/etc/selinux/config 或类似的文件里，如有SELINUX项，请修改为</span><br><span class="line">SELINUX=disabled</span><br></pre></td></tr></table></figure>

<h1 id="三：结语"><a href="#三：结语" class="headerlink" title="三：结语"></a>三：结语</h1><p>网上的很多教程都过时且并不详细，提到这个又漏掉那个，本教程仍旧不敢保证你一定能成功。<br>MySQL 8.0的配置文件太多了，my.cnf conf.d/ mysql.cnf mysql.conf.d/ 等等出现了引用包含。<br><a href="https://downloads.mysql.com/docs/refman-8.0-en.a4.pdf" target="_blank" rel="noopener">官方文档</a> 六千多页，够玩儿一年。  </p>
<h1 id="四：apt安装的MongoDB迁移位置具体步骤"><a href="#四：apt安装的MongoDB迁移位置具体步骤" class="headerlink" title="四：apt安装的MongoDB迁移位置具体步骤"></a>四：apt安装的MongoDB迁移位置具体步骤</h1><p>你是手动安装的Mongodb的话，那么安装的时候你应该就考虑到这个问题了，自行配置。下面的修改只针对用sudo apt-get install 方法安装的。</p>
<p><strong>关闭服务 mongodb服务</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ sudo service mongodb stop</span><br></pre></td></tr></table></figure>

<p><strong>查找配置文件</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ locate mongodb.conf</span><br></pre></td></tr></table></figure>

<p>如果没有，就更新下系统数据库</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ sudo updatedb</span><br></pre></td></tr></table></figure>

<p><strong>再次查找配置文件</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ locate mongodb.conf</span><br></pre></td></tr></table></figure>

<p>一般发现在/etc/mongodb.conf</p>
<p><strong>打开/etc/mongodb.conf并修改</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">dbpath=/home/database/ (可自行设置)</span><br></pre></td></tr></table></figure>

<p><strong>转移原来的数据库</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ sudo cp -R /var/lib/mongodb /home/database</span><br></pre></td></tr></table></figure>

<p><strong>修改权限</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ sudo chmod 755 -R /home/database/mongodb</span><br></pre></td></tr></table></figure>

<p><strong>更改用户和所属组</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ sudo chown -R mongodb:mongodb /home/database/mongodb</span><br></pre></td></tr></table></figure>

<p><strong>重启服务</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ sudo service mongodb restart</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>IT</tag>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>2018个人年度报告</title>
    <url>/title/4aea7fd9/</url>
    <content><![CDATA[<p><img src="https://s1.ax1x.com/2019/11/19/MRZniV.md.png" alt="2018report"></p>
<a id="more"></a>

<h2 id="年度日历"><a href="#年度日历" class="headerlink" title="年度日历"></a>年度日历</h2><p><strong>2018.01.08</strong><br>下午学院要求进行毕业信息采集，主要拍毕业照片。快到过年了，什么事先处理好，免得下学期费时费力。信息采集，应该是大家打扮收拾一番的时候了，不过我倒是忘了，乱糟糟地拍了照。反观女生，好家伙，平时安安静静，一待照相，立马变了。平时都是端庄淑女，拍照就立马变女人了。尤其是公开拍照，不但自己化妆，估计女生间还要相互指导。当然，我不反对化妆，只要妆得好，她们愿意怎么玩儿就怎么玩儿。晚上寝室一起到东苑聚餐，反正吃饭的事，就是大事，首要事，当切实办好。毕竟穷究于礼，成就于锅。<br><strong>2018.01.15</strong><br>应邓邦林要求，我叫上徐俊/建，浪波，方齐圣等到实验室整理杂物。搬砖，背锅是两点感受，王华军瞎指挥，邓邦林默默背锅。晚上，老邓请吃饭，第一次去理工宾馆楼上吃饭，还算可以吧。<br><strong>2018.01.29</strong><br>放寒假，搬到东苑马闻杰(马君)的住处，过年大部分时间在这里过了，学点编程吧(过年回家4天)。<br><strong>2018.02.16</strong><br>大年初一，拜鬼又拜神，拜了鬼神拜死人。很多学者说：中国的文化里有一种祖宗崇拜，就是每一代新人都受到过去几千年死人的掣肘，中国人活着的时候可以是专家，学生，农民，商人，死了全成了神，而且后人不断祭拜，中国落后的很多原因要归于拜鬼文化。<br><strong>2018.02.18</strong><br>买了三个兔子13斤多，和张杰两人宰了三个小时，自作冷吃兔，封装好半斤一袋，味道和量完全不是网上货可比的。四川菜那么好吃，还是得学会自己做菜，老实说，我以后有老婆除非厨艺比我好，不然坚决不让她做饭，不然难吃她还觉得自己有多么大一个功劳。<br><strong>2018.03.21</strong><br>本科毕业论文开题。<br><strong>2018.05.24</strong><br>听诺奖得主中村修二的讲座：蓝光LED。中村非名校生，甚至不是物理专业的。中村是那种遭同事排挤，上司轻视的公司员工，最后发明了LED，得了诺贝尔奖。这事确实令人感慨，人有的时候对别人刻薄刁钻，事事依自己喜好看问题，轻易批评别人。别人的老实，在他们心中成了愚蠢，然而老实人又确实才是真正靠得住的，外表光鲜而会满嘴跑火车的人实在为数太多。   </p>
<p><img src="https://s2.ax1x.com/2019/11/12/M3g0WF.md.png" alt="zc">  </p>
<p><strong>2018.05.25</strong><br>受老杜邀请到青城山游玩，先爬前山，再爬后山。山中有僧人，山中有生人。天气好，边走边吃，吃到山顶，而后又走下来。下山比上山难。晚上农家乐住宿，腊肉可以。山里空气清新，把心中的烦恼一扫而光，该学习就学习，该玩就玩，钱生不带来，死不带去，该花。在山里面，边走边聊，聊人生，聊社会，聊感情，没有顾忌，思考很多，总结很多。   </p>
<p><img src="https://s2.ax1x.com/2019/11/12/M32AYT.md.png" alt="qcs">    </p>
<p><strong>2018.05.28</strong><br>给徐建电脑安装Windows系统。Windows的系统反复出问题，一点不安生，不给用户好脸色，微软这服务，不知还要维持几年。<br><strong>2018.06.01</strong><br>冠军生日请寝室到“人民食堂”这个饭店去吃饭，饭菜特别好。虽然叫食堂，但是就是饭馆，环境可以，饭菜也合适。我这个人，吃饭就挑环境，吃的东西到是其次。一来，环境反应了客人的分布，是做给闲杂人吃还是给商务人士，学生，老板吃？不同的环境客户群体是完全不同的，走入乱糟糟的环境我是不喜欢的，所以我挑环境，其实挑环境就是挑人。二来，吃的东西有什么是我没见过的吗？没有，我在成都吃的每一顿饭，里面的食材，放多少盐，味精，饭是不是过夜的，我还是有数的，就那些东西，只是换个口味而已，所以我不挑食材。    </p>
<p><img src="https://s2.ax1x.com/2019/11/12/M32Hc4.md.png" alt="cb">  </p>
<p><strong>2018.06.06</strong><br>本科毕业论文答辩，晚上和邱讯，吴梓豪东区吃鸡公煲，感觉味道一般。<br><strong>2018.06.08</strong><br>应辅导员要求，对专业就业数据进行蒙太奇操作。蒙太奇就是数据美化，就是百分比提升，没得工作，给安排工作。晚上全专业在东区聚餐，吃最后的晚餐。有的人啊，一看在眼前，但其实在天边。吃了这顿饭，散了这顿宴，大路朝天，专业同学间四年的友谊接下来就全成了回忆，此事历来如此，只是看你愿不愿意相信。<br><strong>2018.06.09</strong><br>班级部分同学雁湖旁拍毕业留念照片，大家排成一溜拍照效果还算可以吧。</p>
<p><img src="https://s2.ax1x.com/2019/11/12/M37LRI.md.png" alt="yh">   </p>
<p><strong>2018.06.11</strong><br>老白生日，请吃饭，K歌。  </p>
<p><img src="https://s2.ax1x.com/2019/11/12/M32d0I.md.png" alt="bb">  </p>
<p><strong>2018.06.15</strong><br>专业欢送会。欢送会嘛，台上演的满是欢乐，台下坐的全是悲伤。</p>
<p><img src="https://s2.ax1x.com/2019/11/12/M3Wnd1.md.png" alt="hsh">  </p>
<p><strong>2018.06.21</strong><br>在东区，几个老师和所带毕设的学生聚餐。   </p>
<p><img src="https://s2.ax1x.com/2019/11/12/M3Rvrj.md.png" alt="by2">    </p>
<p><strong>2018.06.23</strong><br>徐建生日，寝室到春熙路聚餐。本月生日扎堆，反正大吃大喝，吃了四年，算是很好的回忆。我们寝室比较团结，吃饭不少一人，随叫随到。   </p>
<p><img src="https://s2.ax1x.com/2019/11/12/M3R3bn.md.png" alt="xb">  </p>
<p><strong>2018.06.25</strong><br>理工大学2018届毕业典礼。毕业典礼，就是走过场，领导们站上去讲几句捧场话，同学坐过来说几句客套话。  </p>
<p><img src="https://s2.ax1x.com/2019/11/12/M3RWxe.md.png" alt="by1">    </p>
<p><strong>2018.06.30</strong><br>搬离理工大学，四年，时间很快，最后到图书馆去看看，毕竟在这里奋斗过。   </p>
<p><img src="https://s2.ax1x.com/2019/11/12/M3fccD.md.png" alt="tsg">  </p>
<p><strong>2018.07.04</strong><br>代赵悦办理户口迁移证并从东区顺丰寄回新疆。<br><strong>2018.08.31</strong><br>开学报到。<br><strong>2018.09.11</strong><br>听讲座，学习学习民族志知识。这玩意儿，完全不懂，但也正是不懂，才要去听，拓宽自己知识面，凡是自己很懂的，我大概就不会去听。    </p>
<p><img src="https://s2.ax1x.com/2019/11/12/M3W2oq.md.png" alt="jz">    </p>
<p><strong>2018.09.16</strong><br>误操作指令，导致Linux系统损坏，无法修复，修电脑的也修不好，只得换硬盘。<br><strong>2018.10.07</strong><br>搭建网站，为国内和国外单独解析域名，提升网站访问速度。<br><strong>2018.10.19</strong><br>赴绵阳两弹城学习革命精神并参加比赛，赢得奖金和荣誉证书。   </p>
<p><img src="https://s2.ax1x.com/2019/11/12/M3WqT1.md.png" alt="my">  </p>
<p><strong>2018.11.03</strong><br>着手翻译《真相》一书，工程量巨大。<br><strong>2018.11.24</strong><br>学习画画。本科就想学，奈何请教别人，别人却不肯教。不但不教，还要补上两句，说自己以前是随便学的，随便画画就画好了，在我面前秀优越。不过老实说，会画画的人，未必懂得教，有的人会做会吸收，但叫人输出高教育，他们实在是草包。想来还得感谢别人，万一别人乱教，岂不害我？     </p>
<p><img src="https://s2.ax1x.com/2019/11/12/M34ZLQ.md.png" alt="hh">   </p>
<p><strong>2018.12.13</strong><br>参加活动，抽中定制U盘一个(32G)。<br><strong>2018.12.19</strong><br>学习5G核心技术并了解6G相关概念，今年两会工信部提到了6G，学校有人在开始做了，先了解了解。信息时代，得跟上步伐，不过我看周围人每一个知道6G的。<br><strong>2018.12.29</strong><br>学校下雪，空气清新，精神好。感受两点，一是：南方也是要下雪的，秦岭不管用；二是：雪这东西，少了看起来舒服，多了成包袱。而且我们没有暖气，不像北方，我们是靠身体发抖来对抗寒冷。雪还是就这么来点儿，瑞雪兆丰年，算是锦上添花，落个好兆头就行。</p>
<p><img src="https://s2.ax1x.com/2019/11/12/M35736.md.png" alt="snow">  </p>
<h2 id="年度感受"><a href="#年度感受" class="headerlink" title="年度感受"></a>年度感受</h2><p>这一年迎来毕业季和新学期，早已没了大一时的激动。时间经不起浪费，一总结，发现还是干了些事儿，有的重要，有的不怎么重要。今年学到最重要的一点就是：一个人要保持成长，不能停步。这个时代飞速发展，一个人不学习很快就会落后。然而，说说容易，做起来难。有太多人已经不成长了，不但不成长，反而拉着别人一起堕落，此间人士，女生为最，男生次之。对大学四年，我能说的是：尽本分，干实事。我得罪过人，说话有不周延的时候，犯过错，闹过笑话，但这些都改了，弥补了，所以我追求新的生活。四年里，我学会了很多技术，名词，思想，今后的日子，还需要磨炼自己，保持成长。人的能力从来不是试卷上的90分，100分，现实生活中的能力可能是100分和10000分的差距。别人怎么看我不重要，我怎么走自己的路才重要，希望人生之路更精彩。          </p>
<h2 id="年度书籍"><a href="#年度书籍" class="headerlink" title="年度书籍"></a>年度书籍</h2><p>《原则》–瑞・达里奥  </p>
<p><img src="https://s2.ax1x.com/2019/11/15/Ma8aLV.md.png" alt="yz"></p>
<h2 id="年度音乐"><a href="#年度音乐" class="headerlink" title="年度音乐"></a>年度音乐</h2><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=230 height=86 src="//music.163.com/outchain/player?type=2&id=32408606&auto=1&height=66"></iframe>

<p>2018年度音乐10首 <a href="http://music.163.com/m/playlist?id=3097730838" target="_blank" rel="noopener">网易云歌单</a></p>
<table>
<thead>
<tr>
<th align="left">曲目</th>
<th align="left">歌手</th>
</tr>
</thead>
<tbody><tr>
<td align="left">的</td>
<td align="left">兔裹煎蛋卷</td>
</tr>
<tr>
<td align="left">Lapse</td>
<td align="left">Approaching Nirvana</td>
</tr>
<tr>
<td align="left">Years and Years</td>
<td align="left">Richard Schrieber</td>
</tr>
<tr>
<td align="left">Positive Outlook</td>
<td align="left">David Hoffner</td>
</tr>
<tr>
<td align="left">Corporate Dreams</td>
<td align="left">Capo Productions</td>
</tr>
<tr>
<td align="left">The Way of Honour</td>
<td align="left">Marcus Warner</td>
</tr>
<tr>
<td align="left">Where Is The Love?</td>
<td align="left">Clément Bcx</td>
</tr>
<tr>
<td align="left">Best Day of My Life</td>
<td align="left">American Authors</td>
</tr>
<tr>
<td align="left">B. Jones: Last Pictures</td>
<td align="left">Rinocerose</td>
</tr>
<tr>
<td align="left">Deep End (Matoma Remix)</td>
<td align="left">Coucheron</td>
</tr>
</tbody></table>
<h2 id="年度图片"><a href="#年度图片" class="headerlink" title="年度图片"></a>年度图片</h2><p><img src="https://s2.ax1x.com/2019/11/12/M3Yi8K.md.png" alt="biye3"></p>
<h2 id="年度消费"><a href="#年度消费" class="headerlink" title="年度消费    "></a>年度消费    </h2><p><strong>支付宝全年消费</strong>   </p>
<p><img src="https://s2.ax1x.com/2019/11/15/Ma1w60.md.png" alt="alipay">  </p>
<p><strong>微信全年消费</strong>  </p>
<p><img src="https://s2.ax1x.com/2019/11/15/Ma3F9s.md.png" alt="wechat"></p>
<p><strong>京东全年消费</strong>  </p>
<p><img src="https://s2.ax1x.com/2019/11/15/Ma3Ej0.md.png" alt="jd"></p>
<p><strong>三家合计全年消费</strong>  </p>
<p><img src="https://s2.ax1x.com/2019/11/15/Ma3M4J.md.png" alt="all"></p>
<h2 id="文娱数据"><a href="#文娱数据" class="headerlink" title="文娱数据    "></a>文娱数据    </h2><p><strong>观看的电影和电视剧12部</strong></p>
<table>
<thead>
<tr>
<th align="center">序号</th>
<th align="left">名称</th>
<th align="left">序号</th>
<th align="left">名称</th>
</tr>
</thead>
<tbody><tr>
<td align="center">0</td>
<td align="left">《复仇》</td>
<td align="left">6</td>
<td align="left">《地下交通站》</td>
</tr>
<tr>
<td align="center">1</td>
<td align="left">《活着》</td>
<td align="left">7</td>
<td align="left">《两杆大烟枪》</td>
</tr>
<tr>
<td align="center">2</td>
<td align="left">《猎杀U571》</td>
<td align="left">8</td>
<td align="left">《异次元骇客》</td>
</tr>
<tr>
<td align="center">3</td>
<td align="left">《喜剧之王》</td>
<td align="left">9</td>
<td align="left">《楚门的世界》</td>
</tr>
<tr>
<td align="center">4</td>
<td align="left">《卧虎藏龙》</td>
<td align="left">10</td>
<td align="left">《肖申克的救赎》</td>
</tr>
<tr>
<td align="center">5</td>
<td align="left">《虎口脱险》</td>
<td align="left">11</td>
<td align="left">《舌尖上的中国三》</td>
</tr>
</tbody></table>
<p><strong>全年阅读书籍68本</strong>   </p>
<table>
<thead>
<tr>
<th align="left">书名</th>
<th align="left">作者</th>
</tr>
</thead>
<tbody><tr>
<td align="left">《原则》</td>
<td align="left">瑞・达里奥</td>
</tr>
<tr>
<td align="left">《真相》</td>
<td align="left">汉斯・罗斯林</td>
</tr>
<tr>
<td align="left">《1984》</td>
<td align="left">乔治・奥威尔</td>
</tr>
<tr>
<td align="left">《乌托邦》</td>
<td align="left">托马斯・莫尔</td>
</tr>
<tr>
<td align="left">《影响力》</td>
<td align="left">罗伯特・西奥迪尼</td>
</tr>
<tr>
<td align="left">《乌合之众》</td>
<td align="left">古斯塔夫・勒庞</td>
</tr>
<tr>
<td align="left">《动物庄园》</td>
<td align="left">乔治・奥威尔</td>
</tr>
<tr>
<td align="left">《乡土中国》</td>
<td align="left">费孝通</td>
</tr>
<tr>
<td align="left">《生命是什么》</td>
<td align="left">薛定谔</td>
</tr>
<tr>
<td align="left">《美丽新世界》</td>
<td align="left">阿道司・赫胥黎</td>
</tr>
<tr>
<td align="left">《女装入门到精通》</td>
<td align="left">三叶</td>
</tr>
<tr>
<td align="left">《Unix痛恨者手册》</td>
<td align="left">Simon Garfinkel</td>
</tr>
<tr>
<td align="left">《The Little Prince》</td>
<td align="left">Antoine de Saint-Exuper</td>
</tr>
<tr>
<td align="left">《人类简史：从动物到上帝》</td>
<td align="left">尤瓦尔・诺亚・赫拉利</td>
</tr>
<tr>
<td align="left">《你一定爱读的极简欧洲史》</td>
<td align="left">约翰・赫斯特</td>
</tr>
<tr>
<td align="left">…略…</td>
<td align="left">…略…</td>
</tr>
<tr>
<td align="left">《The Old Man and The Sea》</td>
<td align="left">Ernest Hemingway</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>年度报告</category>
      </categories>
  </entry>
  <entry>
    <title>2018年度新闻</title>
    <url>/title/9113b49e/</url>
    <content><![CDATA[<p><img src="https://s2.ax1x.com/2019/11/10/MurvXF.md.png" alt="2018"></p>
<a id="more"></a>


<h2 id="年度关键词"><a href="#年度关键词" class="headerlink" title="年度关键词"></a>年度关键词</h2><p>(0) 土味<br>(1) 锦鲤<br>(2) pick<br>(3) Metoo<br>(4) 世界杯<br>(5) 区块链<br>(6) 人工智能<br>(7) 问题疫苗<br>(8) 粤港澳大湾区<br>(9) 中美贸易摩擦<br>(10) 改革开放40周年 </p>
<h2 id="十大新词语"><a href="#十大新词语" class="headerlink" title="十大新词语"></a>十大新词语</h2><p>(0) 冰屏<br>(1) 信联<br>(2) 限竞房<br>(3) 进博会<br>(4) 直播答题<br>(5) 消费降级<br>(6) 贸易霸凌<br>(7) 政治站位<br>(8) 大数据杀熟<br>(9) 中国农民丰收节</p>
<h2 id="年度流行语"><a href="#年度流行语" class="headerlink" title="年度流行语"></a>年度流行语</h2><p>(0) Skr<br>(1) 锦鲤<br>(2) 杠精<br>(3) 官宣<br>(4) 真香<br>(5) 佛系<br>(6) C位出道<br>(7) 土味情话<br>(8) 家里有矿<br>(9) 大猪蹄子<br>(10) 确认过眼神<br>(11) xxx了解一下?<br>(12) 一凉凉送给你<br>(13) 燃烧我的卡路里<br>(14) 皮这一下很开心<br>(15) 怎么回事小老弟？<br>(16) 安排得明明白白的  </p>
<h2 id="影响中国年度人物-排名不分先后"><a href="#影响中国年度人物-排名不分先后" class="headerlink" title="影响中国年度人物(排名不分先后)"></a>影响中国年度人物(排名不分先后)</h2><p>(0) 著名导演文牧野（年度导演）<br>(1) 故宫博物院院长单霁翔（年度文化人物）<br>(2) 中国科学院院士王贻芳（年度科技人物）<br>(3) 火箭少女101成员杨超越（年度演艺人物）<br>(4) 中国市长协会顾问陶斯亮（年度公益人物）<br>(5) 清华大学国家金融研究院院长（年度学者）<br>(6) 中国乒乓球协会主席刘国梁（年度体育人物）<br>(7) 著名教育家、南开大学原校长龚克（年度教育人物）<br>(8) 最高人民法院原常务副院长沈德咏（年度法治人物）<br>(9) iTutorGroup创始人、董事长兼CEO杨正大（年度行业领袖）  </p>
<h2 id="年度新闻"><a href="#年度新闻" class="headerlink" title="年度新闻"></a>年度新闻</h2><p><strong>2018.01.01</strong><br>(1) 世界知名的女演员苍井空宣布婚讯，网友齐发祝福。<br>(2) 美国人口普查局估计，今天世界人口约为：74亿4444万3881人。<br><strong>2018.01.03</strong><br>(1) 雪乡发生游客欺诈事件。<br><strong>2018.01.05</strong><br>(1) 女子用身体挡住高铁门引发网友谴责。<br><strong>2018.01.06</strong><br>(1) 贾乃亮发文回应李小璐夜宿门事件，并恳求网友不要伤害家人。<br><strong>2018.01.18</strong><br>(1) 统计局公布2017年GDP为:82.7122万亿元，增速6.9%。<br><strong>2018.01.20</strong><br>(1) 中国作家唐家三少同名玄幻小说《斗罗大陆》上映。<br><strong>2018.02.07</strong><br>(1) SpaceX搭载特斯拉汽车飞向深空，并实现一级火箭回收。<br><strong>2018.02.09</strong><br>(1) 韩国平昌冬奥会开幕。<br><strong>2018.02.12</strong><br>(1) 波士顿动力发布SpotMini机器狗协作开门视频，工业机器人引发失业恐慌。<br><strong>2018.02.16</strong><br>(1) 农历戊戌狗年正月初一，各地喜迎新年。<br><strong>2018.02.19</strong><br>(1) 两男子在紫金山着日本军装拍照，“精日现象”引发热议论。<br><strong>2018.03.03</strong><br>(1) 两会拉开帷幕，选举新的政府领导班子和国家主席。<br><strong>2018.03.09</strong><br>(1) 工信部部长苗圩表示2020年中国要开始6G研发，5G在2019年开始组网服务。<br><strong>2018.03.14</strong><br>(1) 英国首相特蕾莎·梅就间谍被毒害事件对俄罗斯外交官下达驱逐令。<br>(2) 著名科学家霍金逝世，享年76岁。其骨灰安置在威斯敏斯特大教堂，与牛顿，达尔文为邻。<br><strong>2018.03.18</strong><br>(1) 俄罗斯大选，普京获胜，普皇帝将再干六年。<br><strong>2018.03.22</strong><br>(1) 美总统特朗普签署备忘录挑起中美贸易争端。<br>(2) 韩国前总统李明博因涉嫌贪污受贿等16项罪名被批捕。<br><strong>2018.03.28</strong><br>(1) 国内领先的年轻人文化社区哔哩哔哩在美国纳斯达克上市。<br><strong>2018.04.10</strong><br>(1) 共享单车摩拜以37亿美元卖身美团。<br>(2) Facebook CEO扎克伯格就用户数据泄露事件出席国会听证会接受质询。<br><strong>2018.04.11</strong><br>(1) 中国设立海南自由贸易实验区。<br>(2) 国家广播电视总局责成今日头条永久关闭内涵段子。<br><strong>2018.04.12</strong><br>(1) 南海海军举行阅兵式，习出席。<br><strong>2018.04.16</strong><br>(1) 美国商务部宣布未来7年对中国中兴实施敏感产品禁购，引发科技界大反思。<br><strong>2018.04.17</strong><br>(1) 批评鸿茅药酒被跨省追捕的医生谭秦东获得自由。<br><strong>2018.04.19</strong><br>(1) 厦门大学研究生田佳良在新浪微博发表不当言论招致谴责。<br><strong>2018.04.25</strong><br>(1) 欧盟发布人工智能行动计划。<br><strong>2018.04.27</strong><br>(1) 全国人大通过《英烈保护法》。<br>(2) 陕西美脂县中学遭袭击，造成19伤7亡。<br>(3) 韩朝双方首脑在板门店举行历史性会晤。<br><strong>2018.05.04</strong><br>(1) 纪念马克思诞辰200周年，习发表讲话。<br><strong>2018.05.05</strong><br>(1) 郑州空姐乘坐滴滴遇害，滴滴整顿一周。<br><strong>2018.05.11</strong><br>(1) 《复仇者联盟3：无限战争》在中国大陆首映。<br><strong>2018.05.12</strong><br>(1) 汶川大地震十周年忌，民众缅怀死者，追忆往昔。<br><strong>2018.05.14</strong><br>(1) 美国驻以色列使馆迁至圣城耶路撒冷，引发大规模抗议活动。<br><strong>2018.05.18</strong><br>(1) 联想5G投票事件引发舆论，网友批评联想不支持华为。<br><strong>2018.05.19</strong><br>(1) 英国皇室哈利王子在温莎城堡迎娶美国女星梅根·马克尔。<br><strong>2018.06.04</strong><br>(1) 微软公司斥资75亿美元收购源代码托管网站Github，拥抱开源。<br><strong>2018.06.07</strong><br>(1) 中国高考拉开帷幕，00后已长大成人，开始接棒社会建设。<br><strong>2018.06.08</strong><br>(1) 美国能源部橡树岭国家实验室宣布其Summit成为世界上最快超算。<br><strong>2018.06.12</strong><br>(1) 美朝首脑在新加坡举行历史性会晤。<br><strong>2018.06.21</strong><br>(1) 科技日报总编发表演讲“我的国，没那么厉害”，引发热议。<br><strong>2018.06.23</strong><br>(1) 创造101，孟美岐排名第一，王菊能出头？<br><strong>2018.06.28</strong><br>(1) 崔永元通过新浪微博发布阴阳合同照片，揭露娱乐圈黑幕。<br><strong>2018.07.03</strong><br>(1) 中科大潘建伟教授团队实现18光量子纠缠，刷新记录。<br><strong>2018.07.05</strong><br>(1) 普吉岛游船倾覆，47名中国公民死亡。<br>(2) 电影《我不是药神》热映，中国医疗问题在社会引发热议。<br><strong>2018.07.10</strong><br>(1) 美政府公布对中国2000亿美元加税清单。<br><strong>2018.07.15</strong><br>(1) 长春长生问题疫苗引发社会动荡和高层博弈。<br>(2) 世界杯：“高卢雄鸡”法国队以4比2击败”格子军团”克罗地亚队，再次捧起大力神杯。<br><strong>2018.07.26</strong><br>(1) 备受争议的拼多多在美纳斯达克上市。<br><strong>2018.08.04</strong><br>(1) 沈阳疑似发生非洲猪瘟事件，官方加强肉类查验管控及防范措施。<br><strong>2018.08.08</strong><br>(1) 北京奥运会十周年，百姓感叹时间飞快，国家飞速发展进入了智能时代。<br><strong>2018.08.16</strong><br>(1) 红芯浏览器抄袭谷歌Chrome浏览器，假借爱国骗经费。<br><strong>2018.08.21</strong><br>(1) 某博士在高铁霸座，引发舆论谴责。<br><strong>2018.08.23</strong><br>(1) Dota比赛，OpenAI的人工智能队输给人类职业选手队伍。<br><strong>2018.08.24</strong><br>(1) 浙江乐清女孩乘滴滴遇害，社会舆论纷纷指责滴滴再次出事。<br><strong>2018.08.27</strong><br>(1) 昆山龍哥持刀砍人反被杀，反杀者正当防卫无罪释放。<br><strong>2018.08.31</strong><br>(1) 全国人大通过《个税法修正案》。<br><strong>2018.09.02</strong><br>(1) 不知妻美刘强东在美涉嫌性侵被捕。<br><strong>2018.09.10</strong><br>(1) 马云宣布2019年9月10日正式卸任董事局主席，改行当老师，届时CEO张勇将接棒。<br><strong>2018.09.11</strong><br>(1) 房产大鳄万科喊出“活下去”的口号，房地产行业困难重重。<br><strong>2018.09.13</strong><br>(1) 美国苹果公司发布最新产品iPhone XS/XR等，价格上扬但技术创新乏善可陈。<br><strong>2018.09.15</strong><br>(1) 中国游客瑞典撒泼被警察抬出的新闻在国内引发舆论大混战。<br><strong>2018.09.18</strong><br>(1) SpaceX 宣布2023年送日本富豪前泽友作环月飞行七日。<br><strong>2018.09.24</strong><br>(1) 迈克尔·阿迪亚公开证明黎曼猜想，但实际上并未证明。<br><strong>2018.10.02</strong><br>(1) 诺贝奖获得者名单陆续公布。<br>(2) 沙特记者杰玛尔·卡舒格吉因被肢解引发外交冲突。<br><strong>2018.10.03</strong><br>(1) 女星范冰冰因偷税漏税被罚款8.84亿元，人设崩塌。<br><strong>2018.10.16</strong><br>(1) 赵丽颖在微博晒出和冯绍峰的结婚证，并且配文：官宣，随即成为热词。<br><strong>2018.10.20</strong><br>(1) 西湖大学成立，要打造中国的顶级研究机构，清华大学副校长施一公任校长。<br><strong>2018.10.23</strong><br>(1) 港珠澳大桥开通，习出席并发表讲话。<br><strong>2018.10.25</strong><br>(1) 著名电视节目主持人李咏逝世，年仅50岁。<br><strong>2018.10.28</strong><br>(1) 重庆万州公交坠江，事因乘客和司机扭打，而乘客也没有制止。<br><strong>2018.10.29</strong><br>(1) 国际商业机器公司(IBM)斥资334亿美金收购Linux行业佼佼者Redhat。<br><strong>2018.10.30</strong><br>(1) 一代文学巨匠金庸先生逝世，享年94岁。<br><strong>2018.11.03</strong><br>(1) 中国IG战队夺得英雄联盟S8全球总决赛冠军。<br><strong>2018.11.04</strong><br>(1) Wi-Fi联盟公布网络新协议新标准802.11ax，命名为Wi-Fi 6。<br><strong>2018.11.06</strong><br>(1) 美国中期选举，最终民主党赢得众议院，共和党赢得参议院。<br><strong>2018.11.07</strong><br>(1) 美国超微半导体公司(AMD)宣布正式推出7纳米CPU和GPU产品。<br><strong>2018.11.08</strong><br>(1) 美国加利福尼亚州北部比尤特县天堂镇发生山火，烧毁各类建筑约1.8万栋。<br><strong>2018.11.11</strong><br>(1) 第一次世界大战结束100周年纪念日。<br>(2) 双11销售额达2135亿，一年一度的购物狂欢节，网友反映商家先涨价再打折的套路越来越深。<br><strong>2018.11.12</strong><br>(1) 美国好莱坞漫威漫画公司的灵魂人物斯坦·李逝世。<br><strong>2018.11.14</strong><br>(1) 奢侈品牌杜嘉班纳（D&amp;G)辱华事件，明星纷纷用行动予以抗议。<br><strong>2018.11.16</strong><br>(1) 国际计量大会召开，决定千克，安培，物质的量，开尔文四个基本单位采用新标准定义。<br><strong>2018.11.21</strong><br>(1) 蒋劲夫家暴事件引爆舆论，明星是人不是神，光鲜表面下的面目谁知道呢？<br><strong>2018.11.26</strong><br>(1) 南方科技大学贺建奎宣布基因编辑婴儿出生，全球震惊，招致广泛谴责。<br><strong>2018.11.27</strong><br>(1) NASA洞察号探测车登陆火星。<br><strong>2018.11.30</strong><br>(1) 美国前总统，乔治·赫伯特·沃克·布什逝世，享年94岁。<br><strong>2018.12.01</strong><br>(1) 习同特朗普达成共识，停止贸易战。<br>(2) 华为孟晚舟被加拿大政府扣押，加政府回应：知情但未参与。<br><strong>2018.12.02</strong><br>(1) 吴承恩故居事件发酵，六小龄童名声败坏。<br><strong>2018.12.06</strong><br>(1) 微软宣布其Edge浏览器采用Chrome内核，浏览器大战进入下一个阶段。<br><strong>2018.12.08</strong><br>(1) 中国嫦娥四号发射成功，开启人类首次月球背面软着陆探测之旅。<br><strong>2018.12.10</strong><br>(1) 旅行者2号飞离太阳系进入深空，距地球超过110亿英里。<br><strong>2018.12.11</strong><br>(1) 经济下行，各大互联网公司裁员不断，互联网寒冬来临。<br><strong>2018.12.18</strong><br>(1) 迫于压力，中国定制版谷歌浏览器项目被google公司关闭。<br>(2) 庆祝改革开放40周年大会在人民大会堂隆重举行，习发表讲话。<br><strong>2018.12.19</strong><br>(1) Ofo在线排队退押金人数超过千万，北京总部楼下消费者排长队退押金。<br><strong>2018.12.20</strong><br>(1) 阿娇（钟欣桐）结婚，张柏芝此前公布已生育第三胎。<br><strong>2018.12.22</strong><br>(1) 全国研究生入学考试拉开帷幕，电子科大命题出现重大事故，院长已被停职。<br><strong>2018.12.25</strong><br>(1) 丁香医生发文揭露天津权健公司的保健帝国和传销式套路。<br><strong>2018.12.26</strong><br>(1) 日本宣布退出国际捕鲸协会，捕杀鲸鱼上瘾了。<br><strong>2018.12.27</strong><br>(1) 中国北斗实现全面组网，正式开始提供全球导航服务。<br><strong>2018.12.29</strong><br>(1) 华为宣布2019年5G试商用，2020年正式商用。<br>(2) 元旦将至，寒潮降临，南方多地出现降雪，“南方也要供暖气”的呼声高涨。<br><strong>2018.12.31</strong><br>(1) 习发表新年贺词：我们都是追梦人!   </p>
<p><a id="download" href="https://gitee.com/QMHTMY/share/blob/master/2018events.pdf" target="_blank" rel="noopener"><i class="fa fa-download"></i><span>下载年度报告</span></a></p>
]]></content>
      <categories>
        <category>年度新闻</category>
      </categories>
  </entry>
  <entry>
    <title>开源精神:Linux</title>
    <url>/title/d8add382/</url>
    <content><![CDATA[<p><img src="https://s1.ax1x.com/2018/10/16/idZXSf.jpg" alt="Linux" title="Linux项目发起人:Linus"></p>
<a id="more"></a>

<h2 id="Linux的好，谁用谁知道"><a href="#Linux的好，谁用谁知道" class="headerlink" title="Linux的好，谁用谁知道!"></a>Linux的好，谁用谁知道!</h2><p>如果说，有人不知道Linux或者Linus(林纳斯)的话，我认为这只是一件普通得不能再普通的事了；但是，有人不知道安卓(android)吗？有吗？但凡是一个学生，不管小学生抑或是大学生，人人都知道安卓，即便用的是Apple家的产品，他也不可能不知道安卓。可见，安卓非常出名，实际上，今天繁荣的互联网世界背后，安卓大有功劳。可是，人们就是不知道Linux。</p>
<p>说起Linux，许多人都是摇头，要不是看不上它的黑框框就是嫌弃上面没有Office，反正Linux历来不受大众喜爱。可用Linux做的安卓却倍加受宠，这也说明，Linux能得到大众的喜爱，只是他们喜爱的是Linux以安卓出现的样子，包装得好看了，大家就喜欢了，一漏出原型，众人又摇头叹气。</p>
<p>在过去的几年里，我在Linux上花了许多时间，最初完全不懂，系统也是傻瓜式的安装，反正就安好了，就开始用。那时候完全不懂电脑，即便会用Office，会写文档，但是，现在看来那就是三脚猫功夫，充其量算是会点鼠标罢了。慢慢的，随着学习的深入，我发现，Linux真是个宝啊，软件多，安装快，够安全，够稳定，功能逆天，手机端，桌面端，服务器端，嵌入式，跨平台，甚至还能连接卫星。这些发现让我精神振奋，有如发了笔大财。今天，我已经完全适应并爱上了Linux，Windows系统也只有用部分软件时才打开，而在Linux下工作成了我的常态，研究生阶段开始，每天三小时以上用在了Linux系统上，现在这些文字也是在Linux下用Vim写的。用Vim或者Emacs真是一种享受和解放，因为输入文字不需要鼠标，一切操作都可以用简单的指令解决，写作效率提升至少百分之50以上。所以，作为信息时代的你，为什么不用Vim写作呢？</p>
<h2 id="Linux是什么"><a href="#Linux是什么" class="headerlink" title="Linux是什么?"></a>Linux是什么?</h2><p>这个问题每个人有每个人的看法，我的看法是:</p>
<blockquote>
<p>Linux是一个强大安全稳定的操作系统内核，是一种能解决绝大多数用户问题的真正的先进技术。</p>
</blockquote>
<p>GNU/Linux就像大家熟知的Windows一样，是一种操作系统，是一个远远优于Windows的系统，该系统诞生于上世纪90年代，并在10年前生下了安卓。说起Linux就不得不提他的创始人Linus，也就是这位大神!<br><img src="https://s1.ax1x.com/2018/10/16/idZXSf.jpg" alt="Linux" title="Linus对英伟达表达不满"></p>
<p>正是他对学校教学所用的Minix系统的不满，使他谋生了自己写一个操作系统的念头，并且坚持了下来。在他21岁的时候，他只是芬兰赫尔辛基大学的一名大学生，他一个人独立的写出了Linux的第一版，时间为1991.8.25.<br>起初起名为Frex，意为Free<br>Unix:免费的Unix。只是当Frex传到服务器上保存时，他的小伙伴觉得干脆把Linus的名字修改一下，用Linux做为保存Frex的文件夹(目录)名。以后，越来越多的人就用Linux来指代这个系统了，所以，Linux的名字不是Linus自己用自己的名字起的，因为，当时的他就只是为了玩一把，就是写了个怪胎，只是没想到越发展越强大，越来越多黑客加入了该系统的开发，很快这个系统就初具规模，并通过互联网传播到了世界各地。今天，该系统(实际上是一个内核)仍然由Linus领导，全球各个角落的人通过互联网协同工作，协力推进该项目的发展。像谷歌，微软，Facebook，阿里巴巴等大的互联网公司都在为该项目贡献代码，该项目也成了地球上最大跨时最久的开发项目，到现在都还在开发，代码已超过2500万行，一个人一辈子也不可能看完。</p>
<h2 id="1990那个年代"><a href="#1990那个年代" class="headerlink" title="1990那个年代"></a>1990那个年代</h2><p>1990年，中国还处在农业社会，那时的世界与今天的世界是十分不同的，人们无法用电话通话，沟通只能靠书信，那时候是真正的家书，贸易不发达，人口流动也不是那么频繁，改革开放也才稍显威力，然而国外的开源运动却搞得如火如荼，即将进入一个崭新的时代。1991年Linus花了三千五百美元，买了台电脑，装上了Minix，却发现上网老是出问题，干脆自己写一个处理工具，然后由这个小工具慢慢发展成了一个大的内核。那时候正是开源时代，由MIT的理查德.斯托曼创建的GNU项目也搞得风生水起，但是GNU有工具没有系统核心。而Linux刚好补上了这个空缺，两相结合，颇为完美，这样，结合GNU众多优秀的系统软件，GNU/Linux横空出世，并迅速得到了全球各地的开发人员的喜爱。开放源代码的理念一直深深的植根于理查德的脑中，他提出了GPL通用公共许可协议，完全开源了源代码，所有人都可以修改和再发布。这样的理念在有的人看来太危险了，通常的公司都会把源代码保护好，要是被谁用了还要打官司告对方，怎么会完全公布呢?可是，人家斯托曼就是玩得不一样，实际上他是被麻省理工学院那群人给气了才跑出来自己建立GNU的，他确实做到了，这很了不起。<br>95年，中国开始有了互联网，但是用Linux的肯定不多，那时长城也还没有，一切都是同世界互联，也就20多年，谁能想到今天的互联网会如此庞大繁荣，如此活力焕发呢?</p>
<h2 id="开源精神"><a href="#开源精神" class="headerlink" title="开源精神"></a>开源精神</h2><h3 id="技术模型铁道俱乐部的黑客们"><a href="#技术模型铁道俱乐部的黑客们" class="headerlink" title="技术模型铁道俱乐部的黑客们"></a>技术模型铁道俱乐部的黑客们</h3><p>在上世纪，大约1958年，在MIT(麻省理工学院)，有着IBM产的超大的计算机，占据一整个房间。一些不安分的学生总是想摸摸这台大机器，运行他们的程序。可是，即便是得到特权的学生也只能由操作员为其运行程序。这群学生都是来自一个喜欢铁路模型的俱乐部–技术模型铁道俱乐部。该俱乐部发明的术语是:设备中零件不工作了叫“losing”，当零件坏了那就说它“munged”，天天上课的人就是个“tool”，如果一个项目只是参与其中就会带来莫大的乐趣，那么就叫“hack”<br>那时MIT的约翰.麦肯锡在电气工程学院教授一门在今天称为“人工智能”的课，尽管当时大部分人都不看好这门技术，但是铁道俱乐部的这些捣蛋鬼都选了该门课程，并在AI实验室扎根了下来。</p>
<p>“hack”最初大体就是由这群MIT的学生发明的，干事效率高的人自称为“hacker”(今天翻译为黑客)。这群黑客的伦理是:</p>
<blockquote>
<p>对计算机的访问应该是不受限制的，完全的，任何人都有动手尝试的权利。</p>
</blockquote>
<p>他们相信把东西拆开而理解其内部原理并改进是重要的，任何试图阻止他们这样干的行为都是不被允许的</p>
<blockquote>
<p>信息应该可以自由获取<br>不能迷信权威<br>计算机让世界更美好</p>
</blockquote>
<p>这些是黑客们不断完善的信条，经过众多黑客的共献，AI实验室成了黑客伦理的化身。</p>
<h3 id="最后一名黑客"><a href="#最后一名黑客" class="headerlink" title="最后一名黑客"></a>最后一名黑客</h3><p>大约在1971年，一位喜欢计算机技术的天才从哈佛退学并加入了MIT，并同样加入了AI实验室，他就是斯托曼。在AI实验室，他们一起搞技术，写程序，分享黑客精神。直到一天，实验室的黑客们为了生计而被公司挖走，他们都走了，剩下斯托曼一个人，他很伤心，因为他为之奋斗的实验室已经分崩离析了，人走了，就什么也没有了。</p>
<p>为了推广黑客伦理，斯托曼离开了MIT，并于1983年，创立了GNU(GNU is Not<br>Unix)。他把自己的理念都融入到了GNU里面，设置了十分霸道的GPL通用公共许可协议:</p>
<blockquote>
<p>凡是用到了GPL协议里的代码，那么你的整个产品都必须开源。</p>
</blockquote>
<p>他想通过GNU计划继续推广他的黑客伦理，让更多的人使用计算机，无障碍地查看和修改代码，完善产品。<br>斯托曼几乎就是地球上最后的黑客了，现在看到的黑客都是第四代，第五六七代黑客了。实际上，今天的黑客更多的是骇客，他们喜欢搞破坏而不是分享理念，推动开源的发展。</p>
<h3 id="GNU-Linux"><a href="#GNU-Linux" class="headerlink" title="GNU/Linux"></a>GNU/Linux</h3><p>时间来到90年代，当Linus把Linux推向互联网时，GNU计划发现这正是他们需要的，于是，GNU/Linux横空出世，结合双方的优点，Linux发展得十分顺利。人们对开源持积极态度，即便有众多公司把代码看成机密，但是人们对获取源代码并修改的意愿一直存在。而Linux是完全开源的，任何人都可以下载并查看，修改<a href="https://www.kernel.org/" target="_blank" rel="noopener">源代码</a>。插一句，腾讯的企鹅最初是为了向Linux的标志，也就是下面这只企鹅致敬，最后由投票选出的。Linux企鹅先于腾讯出现，看看这两支企鹅，每一只的威力都是巨大的，开源确实推动社会发展进步。<br><img src="https://s1.ax1x.com/2018/10/18/iw0m5R.jpg" alt="Tux" title="Linux吉祥物:Tux"></p>
<h3 id="今天的开源世界"><a href="#今天的开源世界" class="headerlink" title="今天的开源世界"></a>今天的开源世界</h3><p>今年，微软收购了Github这个全球最大的开源集散地，最大的男性交友网站，并且承诺继续维持原有的运作模式，越来越多的公司也都开始采用开源产品，因为</p>
<blockquote>
<p>免费<br>有人打补丁<br>开源产品可迅速上线使用</p>
</blockquote>
<p>似乎，今天又回到了开源运动火热的年代，不知道斯托曼现在怎么看这个世界。但是不管怎么说，要感谢这些黑客和天才，没有他们，就没有安卓，没有今天繁荣的互联网世界!<br><img src="https://s1.ax1x.com/2018/10/18/iwwbgf.jpg" alt="stallman" title="自由软件之父:理查德.斯托曼"></p>
]]></content>
      <categories>
        <category>互联网</category>
      </categories>
      <tags>
        <tag>IT</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>十年</title>
    <url>/title/bdfafec0/</url>
    <content><![CDATA[<p><img src="https://s1.ax1x.com/2018/10/13/iNhyfH.jpg" alt="我们的十年" title="我们的十年"></p>
<a id="more"></a>
<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=230 height=86 src="//music.163.com/outchain/player?type=2&id=2116549&auto=1&height=66"></iframe>

<p>此文成于2018.5.12汶川大地震十周年忌，今日将其发表。文中回顾了十年来我视角下的世界变迁，限于记忆和篇幅，文中每一句话均对应一个历史事件和重大的社会发展阶段！愿诸君共缅怀这段时光，这十年是我们90后真正成长并接过社会发展重担的十年，是我们成家立业，求学经商变迁的十年，也是我们90后追求自由，幸福，公平生活的十年，回顾于此，心中颇多感触，噫吁嚱！</p>
<blockquote>
<p>   十年前稚气未脱是小孩，十年后老司机终日开小差。</p>
</blockquote>
<blockquote>
<p>   十年来，腹胸腰背有所长，<a href="https://baike.baidu.com/item/父亲/1465141" target="_blank" rel="noopener">父母</a>两鬓却微白，额间细纹埋！</p>
</blockquote>
<blockquote>
<p>   十年前，绿皮火车慢徘徊，今朝高铁祖国遍地开。</p>
</blockquote>
<blockquote>
<p>   北上广深，四大神针，撑起异度文明。</p>
</blockquote>
<blockquote>
<p>   十年前安识灰霭？<a href="http://blog.sina.com.cn/s/blog_5b2684c70102vgqg.html" target="_blank" rel="noopener">美帝普及</a>全民怼雾霾。PM2.5,你好坏！</p>
</blockquote>
<blockquote>
<p>   嫦娥先去，玉兔又来，蛟龙今又下海，中华科技，日新月异，遍地人才栽。</p>
</blockquote>
<blockquote>
<p>   智能时代找AI，<a href="https://baike.baidu.com/item/%E6%96%B0%E5%9B%9B%E5%A4%A7%E5%8F%91%E6%98%8E/1549722" target="_blank" rel="noopener">四大新贵</a>，人人爱，人人为你站台！</p>
</blockquote>
<blockquote>
<p>   零八奥运今犹记，如今君又来，<a href="https://baike.baidu.com/item/2022年北京冬季奥运会/12061628" target="_blank" rel="noopener">北张二市</a>等着你，华夏必将更精彩。</p>
</blockquote>
<blockquote>
<p>   全球变暖，气温不要升太快？烤化两极冰盖，直把东京热坏！</p>
</blockquote>
<blockquote>
<p>   十年前慧聪网自诩掌平台，十年来，马云怪才，缓缓来，阿里宝贝升级打怪，一幕幕，一招招，呈现女性最爱！</p>
</blockquote>
<blockquote>
<p>   来的终究会来，任你癫狂，我无惧任何祸灾。</p>
</blockquote>
<blockquote>
<p>   十年前它颐指气使，暗控国之命脉，如今杀出个大boss太厉害！</p>
</blockquote>
<blockquote>
<p>   什么是谈笑风生潇洒自在，什么又是香港记者跑得快？全都是苟屁，给我滚开！</p>
</blockquote>
<blockquote>
<p>   有人偏爱“闷声大发财”，有人好色又贪财，为祸妇女，<a href="http://www.360doc.com/content/11/0929/08/7381203_152057015.shtml" target="_blank" rel="noopener">奇怪日记</a>怀中揣！</p>
</blockquote>
<blockquote>
<p>   反腐大戏扣人心怀，贪腐代表犹记陕西<a href="http://media.sohu.com/20130121/n364175335.shtml" target="_blank" rel="noopener">表哥杨达才</a>，车祸现场，竟能喜笑颜开？</p>
</blockquote>
<blockquote>
<p>   见你搂财，也见你人走茶凉倒台，监狱中索未来，回味往昔，终识儿时田园时光最自在，邻家姑娘最可爱！</p>
</blockquote>
<blockquote>
<p>   金融危机，华尔街哭泣，我有<a href="https://baike.baidu.com/item/%E5%9B%9B%E4%B8%87%E4%BA%BF%E8%AE%A1%E5%88%92/8497463" target="_blank" rel="noopener">4万亿</a>，高楼遍地林立，房奴满街无头绪，可气，可气！</p>
</blockquote>
<blockquote>
<p>   十年前汶川挂人心怀，逝者不在，十年来，蜀地重开，重建家园最实在，我们仍要打牌，犹爱吃菜，家有好女养，贤胥万里来！</p>
</blockquote>
<blockquote>
<p>   十年前<a href="https://baijiahao.baidu.com/s?id=1583491930247443643" target="_blank" rel="noopener">安卓出生</a>是小孩，十年来，iphone来到X时代，果粉卓粉，相杀相爱,手机反复买，旧的不去新的不来。</p>
</blockquote>
<blockquote>
<p>   网络成了新平台，主播变大拿，网民成拥虿！键盘侠治国滔滔不绝，一句不对，怼你祖宗十八代！</p>
</blockquote>
<blockquote>
<p>   猫狗是萌宠，Panda最可爱，Bilibili的小哥哥小姐姐安在？日漫<a href="https://baike.baidu.com/item/一人之下/19691179" target="_blank" rel="noopener">国漫</a>，腾讯动漫，马化腾手握两撒手锏!</p>
</blockquote>
<blockquote>
<p>   Dota传奇，英雄联盟奇迹，今晚吃鸡，大吉大利！</p>
</blockquote>
<blockquote>
<p>   直男癌，绿茶婊，帽子扣得真不少，千好万好，愿意傻傻关心你的人才最好！</p>
</blockquote>
<blockquote>
<p>   <a href="https://baike.baidu.com/item/海天盛宴/6932418" target="_blank" rel="noopener">海天盛宴</a>，人体器官，二代们使劲撒欢，王思聪炮轰众客官：不要脸！</p>
</blockquote>
<blockquote>
<p>   十年前下馆子，今有外卖，外卖外卖，信誉犹在？</p>
</blockquote>
<blockquote>
<p>   十年前人等车，十年后车等人，人车车人分不清，滴滴伴你<a href="https://new.qq.com/omn/20180826/20180826G0H18K.html" target="_blank" rel="noopener">安全出行</a>？</p>
</blockquote>
<blockquote>
<p>   十年前，购物逛街，十年后购物上网，双11成购物节，单身狗遭了一劫又一劫。</p>
</blockquote>
<blockquote>
<p>   过年回家，七大姑八大姨笑哈哈，男友哇，女友哇，赶快给我<a href="https://baike.baidu.com/item/每逢佳节被逼婚/5708171" target="_blank" rel="noopener">带回家</a>！</p>
</blockquote>
<blockquote>
<p>   全民健身跑起来，约你，来不来？</p>
</blockquote>
<blockquote>
<p>   通信便利，交心不在，相顾无言，低头微信畅开怀—还真是怪！</p>
</blockquote>
<blockquote>
<p>   空间朋友圈，秀完美食秀恩爱，可劲儿使能耐，秀得恩爱，死得最快！众人还把你埋汰！</p>
</blockquote>
<blockquote>
<p>   计划生育，国之大计，终遭抛弃，解放妇女生育权利。</p>
</blockquote>
<blockquote>
<p>   可男多女少，女友不好找，Gay佬闺蜜气氛诡异，似塑料姐妹花小猪佩奇。</p>
</blockquote>
<blockquote>
<p>   十年变化可真是快！！！来到了什么新时代。</p>
</blockquote>
<blockquote>
<p>   这是一个什么样的时代？这是学‘习’的时代，知识千金难买，自由成为真爱！</p>
</blockquote>
<blockquote>
<p>   90来00来，一代又一代，绽放青春的精彩，定义国家的未来，说什么90后无用，可识天生我才？</p>
</blockquote>
<blockquote>
<p>   这是一个新时代，梦想仍在，小伙子不要怕，摔倒后侬可爬起来！</p>
</blockquote>
<blockquote>
<p>   愿君观后莞尔笑颜开，奋力拼搏方可逐梦未来！</p>
</blockquote>
]]></content>
      <categories>
        <category>回忆</category>
      </categories>
      <tags>
        <tag>小杂感</tag>
      </tags>
  </entry>
  <entry>
    <title>浅谈现代操作系统历史</title>
    <url>/title/500c6ff0/</url>
    <content><![CDATA[<p><img src="https://s2.ax1x.com/2019/10/30/K5t06P.md.jpg" alt="OS">　</p>
<a id="more"></a>

<h2 id="智能手机操作系统"><a href="#智能手机操作系统" class="headerlink" title="智能手机操作系统"></a>智能手机操作系统</h2><p>智能手机的使用已十分普遍了。不论苹果或是安卓系统的智能手机都拥有巨大的市场，拥虿甚广！可是，有谁能想到这个如此受欢迎的东西也就诞生十来年。2007年11月份，安卓从加州山景城谷歌公司溜出，并迅速引领了移动互联网的发展！</p>
<p>大概在2000年代，手机市场还是由诺基亚统治，一个做木材生意的公司，把手机做到全球第一确实了不起。与此同时，一名叫做<a href="https://baike.baidu.com/item/AndyRubin/7170474" target="_blank" rel="noopener">Andy Rubin</a>的小伙子创立公司并开发了一种新的相机系统，用于图片处理。但是相机市场的下滑，迫使该公司转向于手机系统。他利用开源的<a href="https://baike.baidu.com/item/linux/27050" target="_blank" rel="noopener">Linux</a>稳定内核作为其手机系统的核心，成功开发出了一种能上网的系统，后来这个系统在2005年被谷歌收购，经过进一步开发，于2007年11月释出，这就是安卓。于此同时，苹果公司也发布了一款手机系统，它的内核来源于BSD版本的Unix，同Linux属于同族不同分支的系统。我们可以这样认为，即苹果系统是安卓系统的叔叔。他们的共同祖先是贝尔实验室的Unix系统。当然，这个贝尔实验室还出过七个诺贝尔奖，互联网和C语言，C++语言也诞生于此。</p>
<h2 id="PC操作系统"><a href="#PC操作系统" class="headerlink" title="PC操作系统"></a>PC操作系统</h2><p>除了手机操作系统，我们常见的还有电脑上的操作系统，这种系统发迹于上世纪的美国，最开始分为多个派别，后来大体两派：一派是比尔盖茨的微软，一派就是各大公司和大学，实验室合作的或独立开发的系统，其中贝尔实验室的Unix操作系统是最成功的。今天大家看到的Windows10操作系统则源于1981年比尔盖茨花5万美元从Seattle Computer Systems（西雅图计算机系统公司)买的DOS系统(磁盘操作系统，就是一个黑框框)。聪明的比尔盖茨结合IBM的PC电脑，售卖该DOS系统，赚取大量利润，并以此为基础改进DOS系统，并最终演变出了Windows NT系统，也就是Windows95，Windows98，Windows2000。而后Windows NT不断进化，诞生了Windows XP，Windows Vista, Windows 7, Windows 8/8.1，Windows10。Windows系统是一个很好用，但却是一个很复杂而很难学习的系统，其内部为了兼容以往的软件和系统，保留了大量不合宜的代码，这也就导致Windows是地球上架构最烂的系统，最容易受到黑客攻击的系统。客观讲，Windows是个很成功的产品，但却不是像苹果那样的杰作。Windows的发迹，主要是因为比尔盖茨商业头脑太厉害，少有干得过他的。</p>
<p><img src="https://s1.ax1x.com/2018/10/13/iNWX2n.jpg" alt="windows" title="来源:百度图片,Widows"></p>
<p>另外一个电脑操作系统是苹果的Mac os x操作系统，源于乔布斯被苹果公司开除后自创的达尔文系统，底层依旧是Unix核心。当乔布斯重回苹果时，带回了该系统，并开发出了苹果系统。苹果系统定义了现代操作系统的图形用户界面，下拉菜单，按钮，鼠标等控件。微软的电脑界面，菜单等等都是学的苹果的，要不是苹果，微软可能还是有一个黑框框。</p>
<p><img src="https://s1.ax1x.com/2018/10/13/iNhU61.jpg" alt="Mac os" title="来源:百度图片,Mac OS"></p>
<p>第三类电脑操作系统是Unix操作系统的变种Linux衍生版，因为Linux只是一个内核，通过结合不同的系统软件就是不同的款，但是核心一致。所以这一类操作系统特别多，因为开源，任何人可以拿过来改一下并发布。我现在写这篇文章的操作系统是基于Linux内核的Ubuntu(我现在已几乎不用Windows了)。目前Ubuntu是最成功的桌面版Linux操作系统，其他的Linux操作系统还有Debian，Centos，Redhat约上百款。安卓也是基于Linux的，可见Linux非常强大，手机端和电脑端都吃得开。</p>
<p><img src="https://s1.ax1x.com/2018/10/13/iNhwm6.png" alt="Ubuntu" title="来源：我的桌面，Ubuntu，套了个Mac桌面"></p>
<h2 id="服务器操作系统，超级计算机操作系统"><a href="#服务器操作系统，超级计算机操作系统" class="headerlink" title="服务器操作系统，超级计算机操作系统"></a>服务器操作系统，超级计算机操作系统</h2><p>由于这一类是属于行业的操作系统，民间几乎不可能看到，但是它却在背后默默的为亿万人民服务。<br>比如你购物需要进行交易结算，用任何的App都需要后台支持，这些都要靠服务器操作系统来处理。目前服务器操作系统分为两大阵营，一派微软，一派Linux。微软在开发PC版本的操作系统的同时也开发了服务器操作系统，目前60%左右的服务器操作系统是Linux，因为它架构好，易修改，稳定。服务器必需要稳定，试想你在付款，一下卡了，你的钱不就白花了吗？这也是Linux的强项，Linux的一款叫做Centos的系统据说创下过５年不关机不出事故的记录，对比微软动不动就出事故，犯卡，Linux能统治服务器自然就合情合理了。</p>
<p>另外一个很重要的操作系统是超级计算机的系统，因为超级计算机管理的存储和运算节点十分的庞大，所以系统必需稳定好用。而Linux刚好满足这些特点，Linux再次占领该领域，目前，世界前500强超级计算机全都使用Linux系统，中国的天河，神威太湖之光也是中国基于Linux内核自主研发的。</p>
<h2 id="物联网系统"><a href="#物联网系统" class="headerlink" title="物联网系统"></a>物联网系统</h2><p>随着社会生产力的发展，传统互联网的使用有了更高的追求方向，专家们提出了基于万物互联的物联网概念。物联网就是把所有能连网的电器都用网连起来，比如空调，冰箱，汽车，卫星，手机，智能手表，智能自行车，智能椅子，甚至是床都可以用网连起来。人们会问，床不是没网吗？现在没有，可只要未来有需要，嵌入式工程师们早晚会开发出来的，只需对相应硬件给予软件，配上网络。目前，专家们提出的物联网，在我看来是通过中央控制器控制各种不同的物理器件，获取大数据存储在云服务器上，结合新的技术，例如人工智能，开展新的服务模式，为消费者提供更好的产品和服务。针对不同的器件，功能不同，就需要设计不同的操作系统，显然空调和床的功能不一样，这不像手机，品牌不同，但功能差不多。目前，众多物联网公司正利用Linux内核开发物联网操作系统，也就是嵌入式系统，其实安卓系统也是一款嵌入式操作系统。我认为，今后几十年，我们的家庭和城市治理要更多的依靠物联网基础设施，人们的生活便利程度不断提高，未来的社会将是一个相当程度靠网络管理的高度智能化的社会。当然，政府肯定还存在，但是重要性会下降，它不会像今天那么重要。可能在我们这代人四五十岁的时候，我们的家主要是有智能器件打理，家政服务就不再需要了。各种专门仪器会处理扫地，洗衣，烧水，洗碗，铺床等等工作。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>按目前的分类法，操作系统分为手机端，服务器端，桌面端，物联网端。其中Windows在桌面和服务器端能做；苹果在手机和桌面端能用；Linux在手机，桌面，服务器，物联网上都能做！看来Linux是个非常有用的技术，这也是我下心学习它的原因，因为我赌定它会成为未来几十年社会发展的动力。未来，随着新技术的出现，应该还会有新的系统出现，可能就衍生自Linux。未来的世界将是万物互联的世界，我家的冰箱可能和你家的冰箱在聊天，在恋爱，谁说机器就不能恋爱呢？洗碗机可能和灶台吐槽主人的烹饪技术，阳台看花的仪器可以向你报告今天该花吸收的二氧化碳量，桌子和椅子组成一家人为你服务。这样想想，感觉未来真是挺美好的，我们的生活将和智能的器件关联起来，人类的历史也会是人和物的历史。人类只能走这条智能化，信息化的路，所以，让我们为这一天的早日到来努力奋斗吧。</p>
]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>IT</tag>
        <tag>Linux</tag>
        <tag>OS</tag>
      </tags>
  </entry>
</search>
